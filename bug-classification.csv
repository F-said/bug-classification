File,Statement,Bug
TestLogicalPlanBuilder.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
TestLogicalPlanBuilder.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'GFAny', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'Identity', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestLogicalPlanBuilder.java,"['public', 'class', 'TestLogicalPlanBuilder', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestLogicalPlanBuilder.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', '$', '2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",1
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", ':', ""'"", ')', ')', 'generate', '$', '1', ',', ""'"", 'aoeuaoeu', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query3', 'and', 'Query4']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '1', ')', 'generate', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'AVG', '(', '$', '1', ',', '$', '2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery6', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'group', ',', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery7', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery10', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '1', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '(', '$', '1', ')', ')', 'generate', '$', '1', '.', '$', '1', ',', '$', '2', '.', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query11', 'and', 'Query12']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery11', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '2', ')', 'generate', 'group', ',', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery12', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery13', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery14', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '6', ',', '$', '7', ')', ')', 'generate', 'flatten', '(', 'group', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery15', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', ""'"", 'hello', ""'"", ',', '$', '3', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery100', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'define', 'syntax']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'buildPlan', '(', 'query', ')', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'lo', 'instanceof', 'LODefine', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'A', '=', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'A', '.', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', 'generate', '$', '1', '.', '*', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', 'DISTINCT', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '[', 'ORDER', 'BY', '$', '0', ']', '[', '$', '3', ',', '$', '4', ']', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '*', ')', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query17']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery17', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'A', ""'"", ')', '""', '+', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['static', 'public', 'class', 'TestApplyFunc', 'extends', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['Tuple', 'output', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', 'input', '.', 'getAll', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'output', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery18', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'FOREACH', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', 'PARALLEL', '16', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'root', '=', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'listOp', '=', 'lp', '.', 'getSuccessors', '(', 'root', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'listOp', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'lo', 'instanceof', 'LOCogroup', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOCogroup', ')', 'lo', ')', '.', 'getRequestedParallelism', '(', ')', '=', '=', '16', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'else', '{']",1
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'Error', ':', 'Unexpected', 'Parse', 'Tree', 'output', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery19', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery20', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '=', '=', ""'"", '3', ""'"", '?', '$', '2', ':', '$', '3', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery21', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ')', 'generate', 'A', ',', 'flatten', '(', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'order', 'B', 'by', '$', '0', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'FLATTEN', '(', 'A', ')', ',', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'Distinct', 'A', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', 'A', 'BY', '$', '1', '<', ""'"", 'z', ""'"", ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'A', 'sequence', 'of', 'filters', 'within', 'a', 'foreach', 'translates', 'to']",0
TestLogicalPlanBuilder.java,"['/', '/', 'a', 'split', 'statement', '.', 'Currently', 'it', 'breaks', 'as', 'adding', 'an']",0
TestLogicalPlanBuilder.java,"['/', '/', 'additional', 'output', 'to', 'the', 'filter', 'fails', 'as', 'filter', 'supports']",0
TestLogicalPlanBuilder.java,"['/', '/', 'single', 'output']",0
TestLogicalPlanBuilder.java,"['""', 'C', '=', 'FILTER', 'A', 'BY', '$', '2', '=', '=', '$', '3', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'ARRANGE', 'B', 'BY', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'GENERATE', 'A', ',', 'FLATTEN', '(', 'B', '.', '$', '0', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ',', 'B', 'by', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery24', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'a', 'generate', '(', '(', '$', '0', '=', '=', '$', '1', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', '$', '4', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery25', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', '$', '0', 'BY', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'AND', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'B', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery26', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '(', 'NOT', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'OR', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', ""'"", 'x', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query27', 'and', 'Query28']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery27', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'DISTINCT', '$', '3', '.', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '$', '1', '.', '(', '$', '1', ',', '$', '4', ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery28', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '$', '3', ')', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery29', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery30', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'static', 'class', 'TestStorageFunc', 'implements', 'LoadFunc', '{']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'is', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
TestLogicalPlanBuilder.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Boolean', 'bytesToBoolean', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestLogicalPlanBuilder.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
TestLogicalPlanBuilder.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery31', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery32', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'tuple', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', 'tuple', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery33', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', 'generate', 'group', ',', 'A', '.', 'aCol1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', ':', 'Nested', 'schemas', 'don', ""'"", 't', 'work', 'now', '.', 'Probably', 'a', 'bug', 'in', 'the', 'new', 'parser', '.']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery34', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ':', 'tuple', '(', 'subCol1', ',', 'subCol2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'filter', 'A', 'by', 'aCol2', '=', '=', ""'"", '1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ')', 'generate', 'A', '.', 'aCol2', ',', 'B', '.', 'bCol2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery35', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'generate', 'col1', ',', 'col2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery36', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'by', 'col1', ')', 'generate', '$', '1', '.', '(', 'col2', ',', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail37', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', 'asdasdas', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery38', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query39', 'and', 'Query40']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'url', ';', '""', ')', ';', '/', '/', 'url', 'has', 'been', 'falttened', 'and', 'hence', 'the', 'failure']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery40', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', 'IsEmpty', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', '(', 'IsEmpty', '(', '$', '2', ')', 'AND', '(', '$', '3', '=', '=', '$', '2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail41', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'a', 'as', '(', 'host', ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Currently', 'PIG', 'does', 'not', 'support', 'assigning', 'an', 'existing', 'relation', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'following', 'statement', 'was', 'earlier', 'present']",0
TestLogicalPlanBuilder.java,"['/', '/', 'eventually', 'when', 'we', 'do', 'allow', 'assignments', 'of', 'the', 'form']",0
TestLogicalPlanBuilder.java,"['/', '/', 'above', ',', 'we', 'should', 'test', 'with', 'the', 'line', 'below']",0
TestLogicalPlanBuilder.java,"['/', '/', 'uncommented']",0
TestLogicalPlanBuilder.java,"['/', '/', 'buildPlan', '(', '""', 'foreach', 'b', 'generate', 'host', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery42', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', 'as', 'url', ',', '$', '1', 'as', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'b', 'generate', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'url', ',', 'b', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'a', ':', ':', 'url', ',', 'b', ':', ':', 'url', ',', 'b', ':', ':', 'rank', ',', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'height', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery44', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'pagerank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'query', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'pagerank', '#', ""'"", 'nonspam', ""'"", ',', 'url', ')', ',', 'b', 'by', '(', 'rank', '/', ""'"", '2', ""'"", ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'c', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Commented', 'out', 'testQueryFail44', 'as', 'I', 'am', 'not', 'able', 'to', 'include', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail44', '(', ')', 'throws', 'Throwable', '{']",0
TestLogicalPlanBuilder.java,"['PigServer', 'pig', '=', 'null', ';']",0
TestLogicalPlanBuilder.java,"['pig', '=', 'new', 'PigServer', '(', '""', 'local', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';', '/', '/', 'pig', 'server', 'failed', 'for', 'some', 'reason']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerFunction', '(', '""', 'myTr', '""', ',']",0
TestLogicalPlanBuilder.java,"['new', 'FuncSpec', '(', 'GFAny', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", 'tr', 'o', '0', ""'"", ')', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerQuery', '(', '""', 'b', '=', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'myTr', '(', 'myTr', '(', '*', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery45', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'url', ',', 'hitCount', 'from', 'A', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'url', ',', 'hitCount', 'from', 'B', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select', '+', 'Join']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery46', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Mutliple', 'Joins']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery47', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'load', ""'"", 'c', ""'"", 'as', '(', 'pageRank', ',', 'position', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', '(', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ')', 'join', 'C', 'on', 'B', '.', 'pageRank', '=', '=', 'C', '.', 'pageRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery48', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Join', '+', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery49', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'B', '.', 'pageRank', ')', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', 'group', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery50', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery51', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery52', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery53', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery54', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery55', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', ',', 'SUM', '(', 'A', '.', 'size', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery56', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'date', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'date', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ',', 'date', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'date', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery57', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '+', '$', '2', ')', ',', '(', '$', '1', '-', '$', '2', ')', ',', '(', '$', '1', '*', '$', '2', ')', ',', '(', '$', '1', '/', '$', '2', ')', ',', '(', '$', '1', '%', '$', '2', ')', ',', '-', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'b', '{', 'd', '=', 'a', '.', 'name', ';', 'generate', 'group', ',', 'd', ';', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery59', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'join', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery60', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery61', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'order', 'a', 'by', 'name', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'order', 'a', 'by', '$', '0', 'asc', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'order', 'a', 'by', '*', 'asc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'i', '=', 'foreach', 'h', '{', 'i1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'i1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'name', ',', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ',', 'mymap', ':', 'map', '[', ']', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'bag', '{', 'mytuple', ':', 'tuple', '(', 'age', ':', 'int', ',', 'gpa', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'LOAD', ""'"", 'myfile', ""'"", 'AS', '(', 'garage', ':', 'bag', '{', 'tuple1', ':', 'tuple', '(', 'num_tools', ':', 'int', ')', '}', ',', 'links', ':', 'bag', '{', 'tuple2', ':', 'tuple', '(', 'websites', ':', 'chararray', ')', '}', ',', 'page', ':', 'bag', '{', 'something_stupid', ':', 'tuple', '(', 'yeah_double', ':', 'double', ')', '}', ',', 'coordinates', ':', 'bag', '{', 'another_tuple', ':', 'tuple', '(', 'ok_float', ':', 'float', ',', 'bite_the_array', ':', 'bytearray', ',', 'bag_of_unknown', ':', 'bag', '{', '}', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'bag', '{', 'age', ':', 'int', '}', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', 'as', 'aName', ',', 'b', '.', 'name', 'as', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', ',', 'b', '.', 'height', 'as', 'age', ',', 'a', '.', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '10', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', '12l', ',', ""'"", 'another', 'tuple', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery69', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '(', '1', ')', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery70', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '[', '10L', '#', ""'"", 'hello', ""'"", ',', '4', '.', '0e', '-', '2', '#', '10L', ',', '0', '.', '5f', '#', '(', '1', ')', ',', ""'"", 'world', ""'"", '#', '42', ',', '42', '#', '{', '(', ""'"", 'guide', ""'"", ')', '}', ']', 'as', 'mymap', ':', 'map', '[', ']', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'mymap', '#', '10L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', 'L', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '{', '(', ')', '}', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery71', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '(', 'int', ')', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'y', 'generate', '(', 'int', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'tuple', '(', 'int', ',', 'float', ')', '}', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', 'int', ',', 'float', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'foreach', 'x', 'generate', '(', 'chararray', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'int', ',', 'float', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'tuple', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery73', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'matches', ""'"", '^', 'fred', '.', '*', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '0', ',', '(', '$', '0', 'matches', ""'"", 'yuri', '.', '*', ""'"", '?', '$', '1', '-', '10', ':', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery74', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '(', '(', 'field1', '+', 'field2', ')', '*', 'field1', ')', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery77', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'limit', '(', 'load', ""'"", 'a', ""'"", ')', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery75', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'union', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ',', '(', 'load', ""'"", 'c', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'generate', '$', '0', ';', '}', 'parallel', '10', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery76', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'IS', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'filter', 'y', 'by', '$', '0', 'IS', 'NOT', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'b', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NULL', '?', '0', ':', '$', '1', '-', '7', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'c', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NOT', 'NULL', '?', '$', '1', '-', '5', ':', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery80', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['/', '/', '+', '""', 'generate', 'group', ',', 'flatten', '(', 'cd', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'gte', ""'"", 'f', ""'"", 'and', 'name', 'lte', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'ge', ""'"", 'f', ""'"", 'and', 'name', 'le', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', '.', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery83', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery84', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', '$', '2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery85', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'name', ',', 'group', '.', 'age', ',', 'COUNT', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'foreachExpectedSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'foreachExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery86', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery87', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'c1', '=', 'order', '$', '1', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'c1', ')', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'sortInput', '=', '(', 'LOProject', ')', 'nestedPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'nestedSort', '=', '(', 'LOSort', ')', 'nestedPlan', '.', 'getSuccessors', '(', 'sortInput', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'sortPlan', '=', 'nestedSort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sortPlan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery88', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'order', 'b', 'by', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'project1', '=', '(', 'LOProject', ')', 'sort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertEquals', '(', 'project1', '.', 'getExpression', '(', ')', ',', 'cogroup', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', ',', '$', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', 'as', 'zero', ',', 'i', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', ',', '$', '5', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Out', 'of', 'bound', 'access', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'and', 'second', 'elements', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'and', 'age', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'schema', 'of', 'group', 'is', 'unchanged']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'group', ':', ':', 'name', ':', 'chararray', ',', 'group', ':', ':', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', 'myname', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'first', 'element', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'elements', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'to', 'mygroup', 'as', 'the', 'tuple', 'schema', 'is', 'empty']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ',', 'y', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'y', ':', 'bytearray', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ':', 'int', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ':', 'int', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ':', 'chararray', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '{', 't', ':', '(', 'myname', ',', 'myage', ')', '}', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery91', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery92', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'alias', '=', 'name', '#', ""'"", 'alias', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'af', '=', 'alias', '#', ""'"", 'first', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'al', '=', 'alias', '#', ""'"", 'last', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'not', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'b', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ',', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', 'gpa', 'and', 'somethingelse']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'gpa', ',', 'somethingelse', ',', 'a', ':', ':', 'gpa', ',', 'b', ':', ':', 'somethingelse', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Found', 'more', 'than', 'one', 'match', ':', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery95', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'd', '=', 'order', 'a', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'd', ')', ',', 'MAX', '(', 'a', '.', 'age', ')', 'as', 'max_age', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'foreach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'cogroupExpectedSchema', ',', 'false', ',', 'false', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', ',', 'max_age', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery96', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', '20', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', '3', '.', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', '=', 'foreach', '.', 'getForEachPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'flattenPlan', '=', 'foreachPlans', '.', 'get', '(', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'project', '=', 'flattenPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'project', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'sort', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'project', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sort', 'instanceof', 'LOSort', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'distinct', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'distinct', 'instanceof', 'LODistinct', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'presence', 'of', 'the', 'nested', 'foreach']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedForeach', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'distinct', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedForeach', 'instanceof', 'LOForEach', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedForeachPlan', '=', '(', '(', 'LOForEach', ')', 'nestedForeach', ')', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedProject', '=', 'nestedForeachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedProject', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOProject', ')', 'nestedProject', ')', '.', 'getCol', '(', ')', '=', '=', '2', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'filter', 'inner', 'plan', 'for', 'the', 'absence', 'of', 'the', 'project', 'connected', 'to', 'project']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'filter', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'nestedForeach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'filter', 'instanceof', 'LOFilter', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'comparisonPlan', '=', '(', '(', 'LOFilter', ')', 'filter', ')', '.', 'getComparisonPlan', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOLesserThan', 'lessThan', '=', '(', 'LOLesserThan', ')', 'comparisonPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'filterProject', '=', '(', 'LOProject', ')', 'lessThan', '.', 'getLhsOperand', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'null', '=', '=', 'comparisonPlan', '.', 'getPredecessors', '(', 'filterProject', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery97', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'long', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0f', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'float', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', ""'"", 'hello', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'chararray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery98', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'int', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1L', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'long', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0f', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'float', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '1', ',', '1L', ',', '1', '.', '0f', ',', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'y', ':', 'int', ',', 'z', ':', 'long', ',', 'a', ':', 'float', ',', 'b', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '{', '(', '1', ')', ',', '(', '1', '.', '0', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'ib', ':', '{', 'it', ':', '(', 'd', ':', 'double', ')', '}', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery99', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '2', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1L', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'long', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0f', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ',', '3', '.', '14', ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery101', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'usage', 'of', 'an', 'alias', 'from', 'define']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['query', '=', '""', 'foreach', '(', 'load', ""'"", 'data', ""'"", ')', 'generate', 'FUNC', '(', '$', '0', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery102', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'basic', 'store']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery103', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'store', 'with', 'store', 'function']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery104', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'check', 'that', 'a', 'field', 'alias', 'can', 'be', 'referenced']",0
TestLogicalPlanBuilder.java,"['/', '/', 'by', 'unambiguous', 'free', 'form', 'alias', ',', 'fully', 'qualified', 'alias']",0
TestLogicalPlanBuilder.java,"['/', '/', 'and', 'partially', 'qualified', 'unambiguous', 'alias']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'name', '!', '=', ""'"", 'fred', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'group', 'd', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'flatten', '(', 'd', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'name', ',', 'd', ':', ':', 'a', ':', ':', 'name', ',', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery105', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'the', 'alias', '""', 'group', '""', 'can', 'be', 'used']",0
TestLogicalPlanBuilder.java,"['/', '/', 'after', 'a', 'flatten', '(', 'group', ')']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'cnt', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery106', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery107', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery108', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery109', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'first_name', ',', 'enrol_age', ',', 'high_school_gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagBSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'first_name', ':', 'bytearray', ',', 'enrol_age', ':', 'bytearray', ',', 'high_school_gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagBFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'b', '""', ',', 'bagBSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagBFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery110', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOLoad', 'load', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'mapGByPlans', '=', 'cogroup', '.', 'getGroupByPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'cogroupPlan', '=', '(', 'LogicalPlan', ')', '(', 'mapGByPlans', '.', 'get', '(', 'load', ')', '.', 'toArray', '(', ')', ')', '[', '0', ']', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'cogroupPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery111', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery112', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'a1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'a1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'foreachPlan', '.', 'getPredecessors', '(', 'foreachPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery113', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'exp1', '=', 'age', '+', 'gpa', ';', 'exp2', '=', 'exp1', '+', 'age', ';', 'generate', 'exp1', ',', 'exp2', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['printPlan', '(', 'foreachPlan', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery114', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery115', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery116', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery117', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsArithExprs', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', '+', 'null', ',', 'x', '*', 'null', ',', 'x', '/', 'null', ',', 'x', '-', 'null', ',', 'null', '%', 'x', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'y', '+', 'null', ',', 'y', '*', 'null', ',', 'y', '/', 'null', ',', 'y', '-', 'null', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '2', '>', '1', '?', 'null', ':', '1', ')', ',', '(', '2', '<', '1', '?', 'null', ':', '1', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '(', '2', '>', '1', '?', '1', ':', 'null', ')', ',', '(', '2', '<', '1', '?', '1', ':', 'null', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'null', 'is', 'null', '?', '1', ':', '2', ')', ',', '(', 'null', 'is', 'not', 'null', '?', '2', ':', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsForEachGenerate', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', ',', 'null', ',', 'y', ',', 'null', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsOuterJoin', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'u', ':', 'int', ',', 'v', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'x', ',', 'b', 'by', 'u', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', '(', 'SIZE', '(', 'a', ')', '=', '=', '0', '?', 'null', ':', 'a', ')', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'flatten', '(', '(', 'SIZE', '(', 'b', ')', '=', '=', '0', '?', 'null', ':', 'b', ')', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsConcatSize', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'SIZE', '(', 'null', ')', ',', 'CONCAT', '(', 'str', ',', 'null', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'CONCAT', '(', 'null', ',', 'str', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testFilterUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'isempty', 'IsEmpty', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'isempty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCastAlias', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', 'x', ',', '(', 'double', ')', 'y', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'x', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCast', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', '$', '0', ',', '(', 'double', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testTokenizeSchema', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'f1', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'TOKENIZE', '(', 'f1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tokenFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'token', '""', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'tupleSchema', '=', 'new', 'Schema', '(', 'tokenFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', ';']",0
TestLogicalPlanBuilder.java,"['tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'tuple_of_tokens', '""', ',', 'tupleSchema', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['bagSchema', '.', 'setTwoLevelAccessRequired', '(', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(']",0
TestLogicalPlanBuilder.java,"['""', 'bag_of_tokenTuples', '""', ',', 'bagSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'new', 'Schema', '(', 'bagFs', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'void', 'printPlan', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['LOPrinter', 'graphPrinter', '=', 'new', 'LOPrinter', '(', 'System', '.', 'err', ',', 'lp', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', '""', 'Printing', 'the', 'logical', 'plan', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['graphPrinter', '.', 'visit', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'boolean', 'checkPlanForProjectStar', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'leaves', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '(', '(', 'LOProject', ')', 'op', ')', '.', 'isStar', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'true', ';']",1
TestLogicalPlanBuilder.java,"['return', 'false', ';']",1
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'buildPlan', '(', 'query', ',', 'LogicalPlanBuilder', '.', 'class', '.', 'getClassLoader', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ',', 'ClassLoader', 'cldr', ')', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'cldr', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', 'builder', '=', 'new', 'LogicalPlanBuilder', '(', 'pigContext', ')', ';', '/', '/']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'builder', '.', 'parse', '(', '""', 'Test', '-', 'Plan', '-', 'Builder', '""', ',']",0
TestLogicalPlanBuilder.java,"['aliasOp', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'roots', '=', 'lp', '.', 'getRoots', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'roots', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'roots', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '!', '(', 'op', 'instanceof', 'LOLoad', ')', '&', '&', '!', '(', 'op', 'instanceof', 'LODefine', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['throw', 'new', 'Exception', '(', '""', 'Cannot', 'have', 'a', 'root', 'that', 'is', 'not', 'the', 'load', 'or', 'define', 'operator', '.', 'Found', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertNotNull', '(', 'lp', '!', '=', 'null', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'IOException', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'IOException', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Exception', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', 'e', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', '+', '""', '-', '-', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'logicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'ExecType', '.', 'LOCAL', ',', 'new', 'Properties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'InetAddress', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'Socket', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketImplFactory', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URI', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URISyntaxException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'UnknownHostException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'ipc', '.', 'RPC', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobTracker', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecPhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'util', '.', 'ExecTools', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HDataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'LogToPhyTranslationVisitor', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MapReduceLauncher', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PlanPrinter', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', ';']",0
HExecutionEngine.java,"['public', 'class', 'HExecutionEngine', 'implements', 'ExecutionEngine', '{']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'HOD_SERVER', '=', '""', 'hod', '.', 'server', '""', ';']",0
HExecutionEngine.java,"['public', 'static', 'final', 'String', 'JOB_TRACKER_LOCATION', '=', '""', 'mapred', '.', 'job', '.', 'tracker', '""', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'FILE_SYSTEM_LOCATION', '=', '""', 'fs', '.', 'default', '.', 'name', '""', ';']",0
HExecutionEngine.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'LOCAL', '=', '""', 'local', '""', ';']",0
HExecutionEngine.java,"['private', 'StringBuilder', 'hodParams', '=', 'null', ';']",0
HExecutionEngine.java,"['protected', 'PigContext', 'pigContext', ';']",0
HExecutionEngine.java,"['protected', 'DataStorage', 'ds', ';']",0
HExecutionEngine.java,"['protected', 'JobClient', 'jobClient', ';']",0
HExecutionEngine.java,"['/', '/', 'key', ':', 'the', 'operator', 'key', 'from', 'the', 'logical', 'plan', 'that', 'originated', 'the', 'physical', 'plan']",0
HExecutionEngine.java,"['/', '/', 'val', ':', 'the', 'operator', 'key', 'for', 'the', 'root', 'of', 'the', 'phyisical', 'plan']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'OperatorKey', '>', 'logicalToPhysicalKeys', ';']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['/', '/', 'map', 'from', 'LOGICAL', 'key', 'to', 'into', 'about', 'the', 'execution']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'HExecutionEngine', '(', 'PigContext', 'pigContext', ')', '{']",0
HExecutionEngine.java,"['this', '.', 'pigContext', '=', 'pigContext', ';']",0
HExecutionEngine.java,"['this', '.', 'logicalToPhysicalKeys', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'OperatorKey', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'physicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'materializedResults', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'MapRedResult', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'ds', '=', 'null', ';']",0
HExecutionEngine.java,"['/', '/', 'to', 'be', 'set', 'in', 'the', 'init', 'method']",0
HExecutionEngine.java,"['this', '.', 'jobClient', '=', 'null', ';']",0
HExecutionEngine.java,"['public', 'JobClient', 'getJobClient', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'jobClient', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'getMaterializedResults', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'getPhysicalOpTable', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['public', 'DataStorage', 'getDataStorage', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'ds', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['/', '/', 'First', 'set', 'the', 'ssh', 'socket', 'factory']",0
HExecutionEngine.java,"['setSSHFactory', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'hodServer', '=', 'properties', '.', 'getProperty', '(', 'HOD_SERVER', ')', ';']",0
HExecutionEngine.java,"['String', 'cluster', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'nameNode', '=', 'null', ';']",0
HExecutionEngine.java,"['Configuration', 'configuration', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', 'hodServer', '!', '=', 'null', '&', '&', 'hodServer', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['String', 'hdfsAndMapred', '[', ']', '=', 'doHod', '(', 'hodServer', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'hdfsAndMapred', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'hdfsAndMapred', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'build', 'a', 'configuration', 'object', 'first', 'in', 'the', 'manner', 'described', 'below']",0
HExecutionEngine.java,"['/', '/', 'and', 'then', 'get', 'back', 'a', 'properties', 'object', 'to', 'inspect', 'the', 'JOB_TRACKER_LOCATION']",0
HExecutionEngine.java,"['/', '/', 'and', 'FILE_SYSTEM_LOCATION', '.', 'The', 'reason', 'to', 'do', 'this', 'is', 'if', 'we', 'looked', 'only', 'at']",0
HExecutionEngine.java,"['/', '/', 'the', 'existing', 'properties', 'object', ',', 'we', 'may', 'not', 'get', 'the', 'right', 'settings', '.', 'So', 'we', 'want']",0
HExecutionEngine.java,"['/', '/', 'to', 'read', 'the', 'configurations', 'in', 'the', 'order', 'specified', 'below', 'and', 'only', 'then', 'look']",0
HExecutionEngine.java,"['/', '/', 'for', 'JOB_TRACKER_LOCATION', 'and', 'FILE_SYSTEM_LOCATION', '.']",0
HExecutionEngine.java,"['/', '/', 'Hadoop', 'by', 'default', 'specifies', 'two', 'resources', ',', 'loaded', 'in', '-', 'order', 'from', 'the', 'classpath', ':']",0
HExecutionEngine.java,"['/', '/', '1', '.', 'hadoop', '-', 'default', '.', 'xml', ':', 'Read', '-', 'only', 'defaults', 'for', 'hadoop', '.']",0
HExecutionEngine.java,"['/', '/', '2', '.', 'hadoop', '-', 'site', '.', 'xml', ':', 'Site', '-', 'specific', 'configuration', 'for', 'a', 'given', 'hadoop', 'installation', '.']",0
HExecutionEngine.java,"['/', '/', 'Now', 'add', 'the', 'settings', 'from', '""', 'properties', '""', 'object', 'to', 'override', 'any', 'existing', 'properties']",0
HExecutionEngine.java,"['/', '/', 'All', 'of', 'the', 'above', 'is', 'accomplished', 'in', 'the', 'method', 'call', 'below']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hadoop', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '=', 'ConfigurationUtil', '.', 'toProperties', '(', 'configuration', ')', ';']",0
HExecutionEngine.java,"['cluster', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['nameNode', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', 'cluster', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'cluster', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['cluster', '=', 'cluster', '+', '""', ':', '50020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'cluster', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'nameNode', '!', '=', 'null', '&', '&', 'nameNode', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'nameNode', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'nameNode', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['nameNode', '=', 'nameNode', '+', '""', ':', '8020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'nameNode', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'hadoop', 'file', 'system', 'at', ':', '""', '+', '(', 'nameNode', '=', '=', 'null', '?', 'LOCAL', ':', 'nameNode', ')', ')', ';']",0
HExecutionEngine.java,"['ds', '=', 'new', 'HDataStorage', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'The', 'above', 'HDataStorage', 'constructor', 'sets', 'DEFAULT_REPLICATION_FACTOR_KEY', 'in', 'properties', '.']",0
HExecutionEngine.java,"['/', '/', 'So', 'we', 'need', 'to', 'reconstruct', 'the', 'configuration', 'object', 'for', 'the', 'non', 'HOD', 'case']",0
HExecutionEngine.java,"['/', '/', 'In', 'the', 'HOD', 'case', ',', 'this', 'is', 'the', 'first', 'time', 'the', 'configuration', 'object', 'will', 'be', 'created']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'map', '-', 'reduce', 'job', 'tracker', 'at', ':', '""', '+', 'properties', '.', 'get', '(', 'JOB_TRACKER_LOCATION', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Set', 'job', '-', 'specific', 'configuration', 'knobs']",0
HExecutionEngine.java,"['jobClient', '=', 'new', 'JobClient', '(', 'new', 'JobConf', '(', 'configuration', ')', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'IOException', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'job', 'client', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'close', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'Properties', 'getConfiguration', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'updateConfiguration', '(', 'Properties', 'newConfiguration', ')']",0
HExecutionEngine.java,"['throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'newConfiguration', ')', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'String', ',', 'Object', '>', 'getStatistics', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'PhysicalPlan', 'compile', '(', 'LogicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'plan', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2041', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'No', 'Plan', 'to', 'compile', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
HExecutionEngine.java,"['LogToPhyTranslationVisitor', 'translator', '=']",0
HExecutionEngine.java,"['new', 'LogToPhyTranslationVisitor', '(', 'plan', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'setPigContext', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'visit', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'translator', '.', 'getPhysicalPlan', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2042', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Unable', 'to', 'translate', 'logical', 'plan', 'to', 'physical', 'plan', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'ExecJob', 'execute', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['FileSpec', 'spec', '=', 'ExecTools', '.', 'checkLeafIsStore', '(', 'plan', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['boolean', 'success', '=', 'launcher', '.', 'launchPig', '(', 'plan', ',', 'jobName', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'success', ')']",0
HExecutionEngine.java,"['return', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'COMPLETED', ',', 'pigContext', ',', 'spec', ')', ';']",0
HExecutionEngine.java,"['return', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ',', 'pigContext', ',', 'null', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'There', 'are', 'a', 'lot', 'of', 'exceptions', 'thrown', 'by', 'the', 'launcher', '.', 'If', 'this']",0
HExecutionEngine.java,"['/', '/', 'is', 'an', 'ExecException', ',', 'just', 'let', 'it', 'through', '.', 'Else', 'wrap', 'it', '.']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2043', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'during', 'execution', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['public', 'ExecJob', 'submit', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'explain', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'stream', ')', '{']",0
HExecutionEngine.java,"['PlanPrinter', 'printer', '=', 'new', 'PlanPrinter', '(', 'plan', ',', 'stream', ')', ';']",0
HExecutionEngine.java,"['printer', '.', 'visit', '(', ')', ';']",0
HExecutionEngine.java,"['stream', '.', 'println', '(', ')', ';']",0
HExecutionEngine.java,"['ExecTools', '.', 'checkLeafIsStore', '(', 'plan', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['launcher', '.', 'explain', '(', 'plan', ',', 'pigContext', ',', 'stream', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 've', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'ExecJob', '>', 'runningJobs', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'String', '>', 'activeScopes', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'reclaimScope', '(', 'String', 'scope', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'setSSHFactory', '(', ')', '{']",0
HExecutionEngine.java,"['Properties', 'properties', '=', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'g', '=', 'properties', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'g', '=', '=', 'null', '|', '|', 'g', '.', 'length', '(', ')', '=', '=', '0', ')', 'return', ';']",0
HExecutionEngine.java,"['Class', 'clazz', '=', 'Class', '.', 'forName', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', '""', ')', ';']",0
HExecutionEngine.java,"['SocketImplFactory', 'f', '=', '(', 'SocketImplFactory', ')', 'clazz', '.', 'getMethod', '(', '""', 'getFactory', '""', ',', 'new', 'Class', '[', '0', ']', ')', '.', 'invoke', '(', '0', ',', 'new', 'Object', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['Socket', '.', 'setSocketImplFactory', '(', 'f', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'SocketException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'To', 'prevent', 'doing', 'hod', 'if', 'the', 'pig', 'server', 'is', 'constructed', 'multiple', 'times']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodMapRed', ';']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodHDFS', ';']",0
HExecutionEngine.java,"['private', 'String', 'hodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'remoteHodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'Process', 'hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['class', 'ShutdownThread', 'extends', 'Thread', '{']",0
HExecutionEngine.java,"['public', 'synchronized', 'void', 'run', '(', ')', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'String', '[', ']', 'doHod', '(', 'String', 'server', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'hodMapRed', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hodHDFS', ',', 'hodMapRed', '}', ';']",0
HExecutionEngine.java,"['/', '/', 'first', ',', 'create', 'temp', 'director', 'to', 'store', 'the', 'configuration']",0
HExecutionEngine.java,"['hodConfDir', '=', 'createTempDir', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['hodParams', '=', 'new', 'StringBuilder', '(', 'properties', '.', 'getProperty', '(']",0
HExecutionEngine.java,"['""', 'hod', '.', 'param', '""', ',', 'System', '.', 'getProperty', '(', '""', 'hod', '.', 'param', '""', ',', '""', '""', ')', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'get', 'the', 'number', 'of', 'nodes', 'out', 'of', 'the', 'command', 'or', 'use', 'default']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'getNumNodes', '(', 'hodParams', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'command', 'format', ':', 'hod', 'allocate', '-', 'd', '<', 'cluster_dir', '>', '-', 'n', '<', 'number_of_nodes', '>', '<', 'other', 'params', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'fixedCmdArray', '=', 'new', 'String', '[', ']', '{', '""', 'hod', '""', ',', '""', 'allocate', '""', ',', '""', '-', 'd', '""', ',']",0
HExecutionEngine.java,"['hodConfDir', ',', '""', '-', 'n', '""', ',', 'Integer', '.', 'toString', '(', 'nodes', ')', '}', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'extraParams', '=', 'hodParams', '.', 'toString', '(', ')', '.', 'split', '(', '""', '""', ')', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', 'fixedCmdArray', '.', 'length', '+', 'extraParams', '.', 'length', ']', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'fixedCmdArray', ',', '0', ',', 'cmdarray', ',', '0', ',', 'fixedCmdArray', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'extraParams', ',', '0', ',', 'cmdarray', ',', 'fixedCmdArray', '.', 'length', ',', 'extraParams', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'sending', 'HOD', 'command', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'setup', 'shutdown', 'hook', 'to', 'make', 'sure', 'we', 'tear', 'down', 'hod', 'connection']",0
HExecutionEngine.java,"['Runtime', '.', 'getRuntime', '(', ')', '.', 'addShutdownHook', '(', 'new', 'ShutdownThread', '(', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'true', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'print', 'all', 'the', 'information', 'provided', 'by', 'HOD']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'hodProcess', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'msg', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'msg', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['log', '.', 'info', '(', 'msg', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'connection', 'we', 'need', 'to', 'bring', 'the', 'file', 'locally']",0
HExecutionEngine.java,"['if', '(', '!', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['hodConfDir', '=', 'copyHadoopConfLocally', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['String', 'hdfs', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'mapred', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'hadoopConf', '=', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Hadoop', 'configuration', 'file', ':', '""', '+', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hod', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hdfs', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hdfs', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'fs', '.', 'default', '.', 'name', 'from', 'hadoop', 'configuration', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'HDFS', ':', '""', '+', 'hdfs', ')', ';']",0
HExecutionEngine.java,"['mapred', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'mapred', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'mapred', '.', 'job', '.', 'tracker', 'from', 'hadoop', 'configuration', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'JobTracker', ':', '""', '+', 'mapred', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'is', 'not', 'longer', 'needed', 'as', 'hadoop', '-', 'site', '.', 'xml', 'given', 'to', 'us', 'by', 'HOD']",0
HExecutionEngine.java,"['/', '/', 'contains', 'data', 'in', 'the', 'correct', 'format']",0
HExecutionEngine.java,"['/', '/', 'hdfs', '=', 'fixUpDomain', '(', 'hdfs', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'mapred', '=', 'fixUpDomain', '(', 'mapred', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hodHDFS', '=', 'hdfs', ';']",0
HExecutionEngine.java,"['hodMapRed', '=', 'mapred', ';']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hdfs', ',', 'mapred', '}', ';']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6010', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Could', 'not', 'connect', 'to', 'HOD', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'synchronized', 'void', 'closeHod', '(', 'String', 'server', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'hodProcess', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'just', 'cleanup', 'the', 'dir', 'if', 'it', 'exists', 'and', 'return']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'hod', 'deallocate', 'format', ':', 'hod', 'deallocate', '-', 'd', '<', 'conf', 'dir', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '4', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'hod', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', 'deallocate', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', '""', '-', 'd', '""', ';']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'remoteHodConfDir', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Disconnecting', 'from', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'Disconnect', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'disconnect', 'from', 'HOD', ';', 'error', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '.', 'destroy', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'finally', '{']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'remoteHodConfDir', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'LOCAL', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'copyHadoopConfLocally', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['String', 'localDir', '=', 'createTempDir', '(', 'LOCAL', ')', ';']",0
HExecutionEngine.java,"['String', 'remoteFile', '=', 'new', 'String', '(', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'localFile', '=', 'new', 'String', '(', 'localDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['remoteHodConfDir', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'cat', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'remoteFile', ';']",0
HExecutionEngine.java,"['Process', 'p', '=', 'runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['BufferedWriter', 'bw', ';']",0
HExecutionEngine.java,"['bw', '=', 'new', 'BufferedWriter', '(', 'new', 'OutputStreamWriter', '(', 'new', 'FileOutputStream', '(', 'localFile', ')', ')', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4008', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['bw', '.', 'write', '(', 'line', ',', '0', ',', 'line', '.', 'length', '(', ')', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'newLine', '(', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'copy', 'data', 'to', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'localDir', ';']",0
HExecutionEngine.java,"['private', 'String', 'cmdToString', '(', 'String', '[', ']', 'cmdarray', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'cmd', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'cmdarray', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', 'cmdarray', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
HExecutionEngine.java,"['return', 'cmd', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'Process', 'runCommand', '(', 'String', 'server', ',', 'String', '[', ']', 'cmdarray', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['Process', 'p', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['p', '=', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmdarray', ')', ';']",0
HExecutionEngine.java,"['SSHSocketImplFactory', 'fac', '=', 'SSHSocketImplFactory', '.', 'getFactory', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['p', '=', 'fac', '.', 'ssh', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'connect', ')']",0
HExecutionEngine.java,"['hodProcess', '=', 'p', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'should', 'return', 'as', 'soon', 'as', 'connection', 'is', 'shutdown']",0
HExecutionEngine.java,"['int', 'rc', '=', 'p', '.', 'waitFor', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'rc', '!', '=', '0', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'errMsg', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6011', ';']",0
HExecutionEngine.java,"['StringBuilder', 'msg', '=', 'new', 'StringBuilder', '(', '""', 'Failed', 'to', 'run', 'command', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', 'on', 'server', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'return', 'code', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'rc', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'error', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'errMsg', '.', 'toString', '(', ')', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', '.', 'toString', '(', ')', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6012', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'run', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', '+', '""', 'on', 'server', '""', '+', 'server', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'p', ';']",0
HExecutionEngine.java,"['private', 'FileSpec', 'checkLeafIsStore', '(', 'PhysicalPlan', 'plan', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['PhysicalOperator', 'leaf', '=', '(', 'PhysicalOperator', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
HExecutionEngine.java,"['FileSpec', 'spec', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', '!', '(', 'leaf', 'instanceof', 'POStore', ')', ')', '{']",0
HExecutionEngine.java,"['String', 'scope', '=', 'leaf', '.', 'getOperatorKey', '(', ')', '.', 'getScope', '(', ')', ';']",0
HExecutionEngine.java,"['POStore', 'str', '=', 'new', 'POStore', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
HExecutionEngine.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setPc', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['spec', '=', 'new', 'FileSpec', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',']",0
HExecutionEngine.java,"['pigContext', ')', '.', 'toString', '(', ')', ',']",0
HExecutionEngine.java,"['new', 'FuncSpec', '(', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setSFile', '(', 'spec', ')', ';']",0
HExecutionEngine.java,"['plan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['spec', '=', '(', '(', 'POStore', ')', 'leaf', ')', '.', 'getSFile', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'spec', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteDir', '(', 'String', 'server', ',', 'String', 'dir', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['File', 'path', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'path', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'send', 'rm', 'command', 'over', 'ssh']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '3', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'rm', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', '-', 'rf', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'remove', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteLocalDir', '(', 'File', 'path', ')', '{']",0
HExecutionEngine.java,"['File', '[', ']', 'files', '=', 'path', '.', 'listFiles', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'i', ';']",0
HExecutionEngine.java,"['for', '(', 'i', '=', '0', ';', 'i', '<', 'files', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isHidden', '(', ')', ')']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isFile', '(', ')', ')']",0
HExecutionEngine.java,"['files', '[', 'i', ']', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['else', 'if', '(', 'files', '[', 'i', ']', '.', 'isDirectory', '(', ')', ')']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'files', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['path', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'String', 'fixUpDomain', '(', 'String', 'hostPort', ',', 'Properties', 'properties', ')', 'throws', 'UnknownHostException', '{']",0
HExecutionEngine.java,"['URI', 'uri', '=', 'null', ';']",0
HExecutionEngine.java,"['uri', '=', 'new', 'URI', '(', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'URISyntaxException', 'use', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Illegal', 'hostPort', ':', '""', '+', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['String', 'hostname', '=', 'uri', '.', 'getHost', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'port', '=', 'uri', '.', 'getPort', '(', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Parse', 'manually', 'if', 'hostPort', 'wasn', ""'"", 't', 'non', '-', 'opaque', 'URI']",0
HExecutionEngine.java,"['/', '/', 'e', '.', 'g', '.', 'hostPort', 'is', '""', 'myhost', ':', 'myport', '""']",0
HExecutionEngine.java,"['if', '(', 'hostname', '=', '=', 'null', '|', '|', 'port', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['String', 'parts', '[', ']', '=', 'hostPort', '.', 'split', '(', '""', ':', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'parts', '[', '0', ']', ';']",0
HExecutionEngine.java,"['port', '=', 'Integer', '.', 'valueOf', '(', 'parts', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hostname', '.', 'indexOf', '(', ""'"", '.', ""'"", ')', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['String', 'domain', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ',', 'System', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'domain', '=', '=', 'null', ')']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Missing', 'cluster', '.', 'domain', 'property', '!', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'hostname', '+', '""', '.', '""', '+', 'domain', ';']",0
HExecutionEngine.java,"['InetAddress', '.', 'getByName', '(', 'hostname', ')', ';']",0
HExecutionEngine.java,"['return', 'hostname', '+', '""', ':', '""', '+', 'Integer', '.', 'toString', '(', 'port', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'create', 'temp', 'dir', 'to', 'store', 'hod', 'output', ';', 'removed', 'on', 'exit']",0
HExecutionEngine.java,"['/', '/', 'format', ':', '<', 'tempdir', '>', '/', 'PigHod', '.', '<', 'host', 'name', '>', '.', '<', 'user', 'name', '>', '.', '<', 'nanosecondts', '>']",0
HExecutionEngine.java,"['private', 'String', 'createTempDir', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['StringBuilder', 'tempDirPrefix', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'java', '.', 'io', '.', 'tmpdir', '""', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'access', 'we', 'assume', '/', 'tmp', 'as', 'temp', 'dir']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'tmp', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'PigHod', '.', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'InetAddress', '.', 'getLocalHost', '(', ')', '.', 'getHostName', '(', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'UnknownHostException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'path', ';']",0
HExecutionEngine.java,"['path', '=', 'tempDirPrefix', '.', 'toString', '(', ')', '+', 'System', '.', 'nanoTime', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'while', '(', '!', 'createDir', '(', 'server', ',', 'path', ')', ')', ';']",0
HExecutionEngine.java,"['return', 'path', ';']",0
HExecutionEngine.java,"['private', 'boolean', 'createDir', '(', 'String', 'server', ',', 'String', 'dir', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'create', 'local', 'directory']",0
HExecutionEngine.java,"['File', 'tempDir', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['boolean', 'success', '=', 'tempDir', '.', 'mkdir', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', '!', 'success', ')']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', '.', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'success', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'mkdir', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'ExecException', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'false', ';']",0
HExecutionEngine.java,"['return', 'true', ';']",0
HExecutionEngine.java,"['/', '/', 'returns', 'number', 'of', 'nodes', 'based', 'on', '-', 'm', 'option', 'in', 'hodParams', 'if', 'present', ';']",0
HExecutionEngine.java,"['/', '/', 'otherwise', ',', 'default', 'is', 'used', ';', '-', 'm', 'is', 'removed', 'from', 'the', 'params']",0
HExecutionEngine.java,"['int', 'getNumNodes', '(', 'StringBuilder', 'hodParams', ')', '{']",0
HExecutionEngine.java,"['String', 'val', '=', 'hodParams', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '=', '=', '-', '1', ')']",0
HExecutionEngine.java,"['startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '\\', 't', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '!', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['int', 'curPos', '=', 'startPos', '+', '3', ';']",0
HExecutionEngine.java,"['int', 'len', '=', 'val', '.', 'length', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isWhitespace', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'numStartPos', '=', 'curPos', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isDigit', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'Integer', '.', 'parseInt', '(', 'val', '.', 'substring', '(', 'numStartPos', ',', 'curPos', ')', ')', ';']",0
HExecutionEngine.java,"['hodParams', '.', 'delete', '(', 'startPos', ',', 'curPos', ')', ';']",0
HExecutionEngine.java,"['return', 'nodes', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['return', 'Integer', '.', 'getInteger', '(', '""', 'hod', '.', 'nodes', '""', ',', '15', ')', ';']",0
HExecutionEngine.java,"['/', '*', '*']",0
HExecutionEngine.java,"['private', 'void', 'recomputeProperties', '(', 'JobConf', 'jobConf', ',', 'Properties', 'properties', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'load', 'the', 'properties', 'from', 'the', 'hadoop', 'configuration']",1
HExecutionEngine.java,"['/', '/', 'We', 'want', 'to', 'override', 'these', 'with', 'any', 'existing', 'properties', 'we', 'have', '.']",0
HExecutionEngine.java,"['if', '(', 'jobConf', '!', '=', 'null', '&', '&', 'properties', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['Properties', 'hadoopProperties', '=', 'new', 'Properties', '(', ')', ';']",0
HExecutionEngine.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', '>', 'iter', '=', 'jobConf', '.', 'iterator', '(', ')', ';']",1
HExecutionEngine.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",1
HExecutionEngine.java,"['Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'entry', '=', 'iter', '.', 'next', '(', ')', ';']",1
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'entry', '.', 'getKey', '(', ')', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'override', 'hadoop', 'properties', 'with', 'user', 'defined', 'properties']",0
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'propertiesIter', '=', 'properties', '.', 'keys', '(', ')', ';']",1
HExecutionEngine.java,"['while', '(', 'propertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",1
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'propertiesIter', '.', 'nextElement', '(', ')', ';']",1
HExecutionEngine.java,"['String', 'val', '=', 'properties', '.', 'getProperty', '(', 'key', ')', ';']",1
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'clear', 'user', 'defined', 'properties', 'and', 're', '-', 'populate']",1
HExecutionEngine.java,"['properties', '.', 'clear', '(', ')', ';']",1
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'hodPropertiesIter', '=', 'hadoopProperties', '.', 'keys', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'hodPropertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",1
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'hodPropertiesIter', '.', 'nextElement', '(', ')', ';']",1
HExecutionEngine.java,"['String', 'val', '=', 'hadoopProperties', '.', 'getProperty', '(', 'key', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",1
BinStorage.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'BufferedOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ReversibleLoadStoreFunc', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataReaderWriter', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
BinStorage.java,"['public', 'class', 'BinStorage', 'implements', 'ReversibleLoadStoreFunc', '{']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_1', '=', '0x01', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_2', '=', '0x02', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_3', '=', '0x03', ';']",0
BinStorage.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'null', ';']",0
BinStorage.java,"['protected', 'BufferedPositionedInputStream', 'in', '=', 'null', ';']",0
BinStorage.java,"['private', 'static', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'BinStorage', '.', 'class', ')', ';']",0
BinStorage.java,"['private', 'DataInputStream', 'inData', '=', 'null', ';']",0
BinStorage.java,"['protected', 'long', 'end', '=', 'Long', '.', 'MAX_VALUE', ';']",0
BinStorage.java,"['/', '*', '*']",0
BinStorage.java,"['public', 'BinStorage', '(', ')', '{']",0
BinStorage.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['byte', 'b', '=', '0', ';']",0
BinStorage.java,"['/', '/', 'skip', 'to', 'next', 'record']",0
BinStorage.java,"['while', '(', 'true', ')', '{']",0
BinStorage.java,"['if', '(', 'in', '=', '=', 'null', '|', '|', 'in', '.', 'getPosition', '(', ')', '>', '=', 'end', ')', '{']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '/', 'check', 'if', 'we', 'saw', 'RECORD_1', 'in', 'our', 'last', 'attempt']",0
BinStorage.java,"['/', '/', 'this', 'can', 'happen', 'if', 'we', 'have', 'the', 'following']",0
BinStorage.java,"['/', '/', 'sequence', 'RECORD_1', '-', 'RECORD_1', '-', 'RECORD_2', '-', 'RECORD_3']",0
BinStorage.java,"['/', '/', 'After', 'reading', 'the', 'second', 'RECORD_1', 'in', 'the', 'above']",0
BinStorage.java,"['/', '/', 'sequence', ',', 'we', 'should', 'not', 'look', 'for', 'RECORD_1', 'again']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', ')', '{']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_2', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_3', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['return', '(', 'Tuple', ')', 'DataReaderWriter', '.', 'readDatum', '(', 'inData', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",1
BinStorage.java,"['throw', 'ee', ';']",1
BinStorage.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'in', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'in', '=', 'in', ';']",0
BinStorage.java,"['inData', '=', 'new', 'DataInputStream', '(', 'in', ')', ';']",0
BinStorage.java,"['this', '.', 'end', '=', 'end', ';']",0
BinStorage.java,"['DataOutputStream', 'out', '=', 'null', ';']",0
BinStorage.java,"['public', 'void', 'bindTo', '(', 'OutputStream', 'os', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'out', '=', 'new', 'DataOutputStream', '(', 'new', 'BufferedOutputStream', '(', 'os', ')', ')', ';']",0
BinStorage.java,"['public', 'void', 'finish', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'flush', '(', ')', ';']",0
BinStorage.java,"['public', 'void', 'putNext', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_1', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_2', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_3', ')', ';']",0
BinStorage.java,"['t', '.', 'write', '(', 'out', ')', ';']",0
BinStorage.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToBag', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'bag', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToCharArray', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'chararray', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Double', '(', 'dis', '.', 'readDouble', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'double', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Float', '(', 'dis', '.', 'readFloat', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'float', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Integer', '(', 'dis', '.', 'readInt', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'integer', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Long', '(', 'dis', '.', 'readLong', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'long', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToMap', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'map', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToTuple', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'tuple', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
BinStorage.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
BinStorage.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'fileName', ',', 'execType', ',', 'storage', ')', ';']",0
BinStorage.java,"['bindTo', '(', 'fileName', ',', 'new', 'BufferedPositionedInputStream', '(', 'is', ')', ',', '0', ',', 'Long', '.', 'MAX_VALUE', ')', ';']",0
BinStorage.java,"['/', '/', 'get', 'the', 'first', 'record', 'from', 'the', 'input', 'file']",0
BinStorage.java,"['/', '/', 'and', 'figure', 'out', 'the', 'schema', 'from', 'the', 'data', 'in']",0
BinStorage.java,"['/', '/', 'the', 'first', 'record']",0
BinStorage.java,"['Tuple', 't', '=', 'getNext', '(', ')', ';']",0
BinStorage.java,"['is', '.', 'close', '(', ')', ';']",0
BinStorage.java,"['if', '(', 't', '=', '=', 'null', ')', '{']",0
BinStorage.java,"['/', '/', 'we', 'couldn', ""'"", 't', 'get', 'a', 'valid', 'record', 'from', 'the', 'input']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['int', 'numFields', '=', 't', '.', 'size', '(', ')', ';']",0
BinStorage.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
BinStorage.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'numFields', ';', 'i', '+', '+', ')', '{']",0
BinStorage.java,"['s', '.', 'add', '(', 'DataType', '.', 'determineFieldSchema', '(', 't', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2104', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'determining', 'schema', 'of', 'BinStorage', 'data', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
BinStorage.java,"['return', 's', ';']",0
BinStorage.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
BinStorage.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'bag', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'bag', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 's', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'chararray', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'd', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'double', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'f', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'float', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'i', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'int', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'l', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'long', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'm', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'map', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 't', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'tuple', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'boolean', 'equals', '(', 'Object', 'obj', ')', '{']",0
BinStorage.java,"['return', 'true', ';']",0
Grunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
Grunt.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', '*', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'TokenMgrError', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Grunt.java,"['public', 'class', 'Grunt']",0
Grunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Grunt.java,"['BufferedReader', 'in', ';']",0
Grunt.java,"['PigServer', 'pig', ';']",0
Grunt.java,"['GruntParser', 'parser', ';']",0
Grunt.java,"['public', 'Grunt', '(', 'BufferedReader', 'in', ',', 'PigContext', 'pigContext', ')', 'throws', 'ExecException']",0
Grunt.java,"['this', '.', 'in', '=', 'in', ';']",0
Grunt.java,"['this', '.', 'pig', '=', 'new', 'PigServer', '(', 'pigContext', ')', ';']",0
Grunt.java,"['if', '(', 'in', '!', '=', 'null', ')']",0
Grunt.java,"['parser', '=', 'new', 'GruntParser', '(', 'in', ')', ';']",0
Grunt.java,"['parser', '.', 'setParams', '(', 'pig', ')', ';']",0
Grunt.java,"['public', 'void', 'setConsoleReader', '(', 'ConsoleReader', 'c', ')']",0
Grunt.java,"['parser', '.', 'setConsoleReader', '(', 'c', ')', ';']",0
Grunt.java,"['public', 'void', 'run', '(', ')', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['while', '(', 'true', ')', '{']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'true', ')', ';']",0
Grunt.java,"['parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['parser', '.', 'ReInit', '(', 'in', ')', ';']",0
Grunt.java,"['public', 'void', 'exec', '(', ')', 'throws', 'Throwable', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'false', ')', ';']",0
Grunt.java,"['parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['throw', '(', 't', ')', ';']",0
Main.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
Main.java,"['import', 'java', '.', 'io', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', 'jar', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'text', '.', 'ParseException', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
Main.java,"['import', 'jline', '.', 'History', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'Level', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'PropertyConfigurator', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'JarManager', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'cmdline', '.', 'CmdLineParser', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'PigCompletor', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'timer', '.', 'PerformanceTimerFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
Main.java,"['public', 'class', 'Main']",0
Main.java,"['private', 'final', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'LOG4J_CONF', '=', '""', 'log4jconf', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'BRIEF', '=', '""', 'brief', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'DEBUG', '=', '""', 'debug', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'JAR', '=', '""', 'jar', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'VERBOSE', '=', '""', 'verbose', '""', ';']",0
Main.java,"['private', 'enum', 'ExecMode', '{', 'STRING', ',', 'FILE', ',', 'SHELL', ',', 'UNKNOWN', '}', ';']",0
Main.java,"['/', '*', '*']",0
Main.java,"['public', 'static', 'void', 'main', '(', 'String', 'args', '[', ']', ')']",0
Main.java,"['int', 'rc', '=', '1', ';']",0
Main.java,"['Properties', 'properties', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['PropertiesUtil', '.', 'loadPropertiesFromFile', '(', 'properties', ')', ';']",0
Main.java,"['boolean', 'verbose', '=', 'false', ';']",0
Main.java,"['boolean', 'gruntCalled', '=', 'false', ';']",0
Main.java,"['String', 'logFileName', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'pin', '=', 'null', ';']",0
Main.java,"['boolean', 'debug', '=', 'false', ';']",0
Main.java,"['boolean', 'dryrun', '=', 'false', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'params', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['CmdLineParser', 'opts', '=', 'new', 'CmdLineParser', '(', 'args', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", '4', ""'"", ',', '""', 'log4jconf', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'b', ""'"", ',', '""', 'brief', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'c', ""'"", ',', '""', 'cluster', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'd', ""'"", ',', '""', 'debug', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'e', ""'"", ',', '""', 'execute', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'f', ""'"", ',', '""', 'file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'h', ""'"", ',', '""', 'help', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'o', ""'"", ',', '""', 'hod', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'j', ""'"", ',', '""', 'jar', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'v', ""'"", ',', '""', 'verbose', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'x', ""'"", ',', '""', 'exectype', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'i', ""'"", ',', '""', 'version', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'p', ""'"", ',', '""', 'param', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'm', ""'"", ',', '""', 'param_file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'r', ""'"", ',', '""', 'dryrun', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'l', ""'"", ',', '""', 'logfile', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'w', ""'"", ',', '""', 'warning', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['ExecMode', 'mode', '=', 'ExecMode', '.', 'UNKNOWN', ';']",0
Main.java,"['String', 'file', '=', 'null', ';']",0
Main.java,"['ExecType', 'execType', '=', 'ExecType', '.', 'MAPREDUCE', ';']",0
Main.java,"['String', 'execTypeString', '=', 'properties', '.', 'getProperty', '(', '""', 'exectype', '""', ')', ';']",0
Main.java,"['if', '(', 'execTypeString', '!', '=', 'null', '&', '&', 'execTypeString', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'execTypeString', ')', ';']",0
Main.java,"['String', 'cluster', '=', '""', 'local', '""', ';']",0
Main.java,"['String', 'clusterConfigured', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '""', ')', ';']",0
Main.java,"['if', '(', 'clusterConfigured', '!', '=', 'null', '&', '&', 'clusterConfigured', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterConfigured', ';']",0
Main.java,"['/', '/', 'by', 'default', 'warning', 'aggregation', 'is', 'on']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['char', 'opt', ';']",0
Main.java,"['while', '(', '(', 'opt', '=', 'opts', '.', 'getNextOpt', '(', ')', ')', '!', '=', 'CmdLineParser', '.', 'EndOfOpts', ')', '{']",0
Main.java,"['switch', '(', 'opt', ')', '{']",0
Main.java,"['case', ""'"", '4', ""'"", ':']",0
Main.java,"['String', 'log4jconf', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'LOG4J_CONF', ',', 'log4jconf', ')', ';']",0
Main.java,"['case', ""'"", 'b', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'BRIEF', ',', '""', 'true', '""', ')', ';']",0
Main.java,"['case', ""'"", 'c', ""'"", ':']",0
Main.java,"['/', '/', 'Needed', 'away', 'to', 'specify', 'the', 'cluster', 'to', 'run', 'the', 'MR', 'job', 'on']",0
Main.java,"['/', '/', 'Bug', '831708', '-', 'fixed']",0
Main.java,"['String', 'clusterParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'clusterParameter', '!', '=', 'null', '&', '&', 'clusterParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterParameter', ';']",0
Main.java,"['case', ""'"", 'd', ""'"", ':']",0
Main.java,"['String', 'logLevel', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logLevel', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'DEBUG', ',', 'logLevel', ')', ';']",0
Main.java,"['debug', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'e', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'STRING', ';']",0
Main.java,"['case', ""'"", 'f', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['file', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['case', ""'"", 'h', ""'"", ':']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['case', ""'"", 'j', ""'"", ':']",0
Main.java,"['String', 'jarsString', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'jarsString', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'JAR', ',', 'jarsString', ')', ';']",0
Main.java,"['case', ""'"", 'l', ""'"", ':']",0
Main.java,"['/', '/', 'call', 'to', 'method', 'that', 'validates', 'the', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'and', 'sets', 'up', 'the', 'file', 'to', 'store', 'the', 'client', 'side', 'log', 'file']",0
Main.java,"['String', 'logFileParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logFileParameter', '!', '=', 'null', '&', '&', 'logFileParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileParameter', ',', 'null', ')', ';']",0
Main.java,"['}', 'else', '{']",1
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'null', ')', ';']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['case', ""'"", 'm', ""'"", ':']",0
Main.java,"['paramFiles', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'o', ""'"", ':']",0
Main.java,"['/', '/', 'TODO', 'sgroschupf', 'using', 'system', 'properties', 'is', 'always', 'a', 'very', 'bad', 'idea']",0
Main.java,"['String', 'gateway', '=', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['if', '(', 'gateway', '=', '=', 'null', '|', '|', 'gateway', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', '""', 'local', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ')', ';']",0
Main.java,"['case', ""'"", 'p', ""'"", ':']",0
Main.java,"['String', 'val', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['params', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'r', ""'"", ':']",0
Main.java,"['/', '/', 'currently', 'only', 'used', 'for', 'parameter', 'substitution']",0
Main.java,"['/', '/', 'will', 'be', 'extended', 'in', 'the', 'future']",0
Main.java,"['dryrun', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'v', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'VERBOSE', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['verbose', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'w', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['case', ""'"", 'x', ""'"", ':']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'ERROR', ':', 'Unrecognized', 'exectype', '.', '""', ',', 'e', ')', ';']",0
Main.java,"['case', ""'"", 'i', ""'"", ':']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', 'getVersionString', '(', ')', ')', ';']",0
Main.java,"['default', ':', '{']",0
Main.java,"['Character', 'cc', '=', 'new', 'Character', '(', 'opt', ')', ';']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Unhandled', 'option', '""', '+', 'cc', '.', 'toString', '(', ')', ')', ';']",0
Main.java,"['/', '/', 'configure', 'logging']",0
Main.java,"['configureLog4J', '(', 'properties', ')', ';']",0
Main.java,"['/', '/', 'create', 'the', 'context', 'with', 'the', 'parameter']",0
Main.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ';']",0
Main.java,"['if', '(', 'logFileName', '=', '=', 'null', ')', '{']",1
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'null', ',', 'null', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'pigContext', '.', 'createCl', '(', 'null', ')', ';']",0
Main.java,"['/', '/', 'construct', 'the', 'parameter', 'substitution', 'preprocessor']",0
Main.java,"['Grunt', 'grunt', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'in', ';']",0
Main.java,"['String', 'substFile', '=', 'null', ';']",0
Main.java,"['switch', '(', 'mode', ')', '{']",0
Main.java,"['case', 'FILE', ':']",0
Main.java,"['/', '/', 'Run', ',', 'using', 'the', 'provided', 'file', 'as', 'a', 'pig', 'file']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'file', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'file', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'file', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'file', ')', '.', 'getName', '(', ')']",0
Main.java,"['if', '(', '!', 'debug', ')']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['case', 'STRING', ':', '{']",0
Main.java,"['/', '/', 'Gather', 'up', 'all', 'the', 'remaining', 'arguments', 'into', 'a', 'string', 'and', 'pass', 'them', 'into']",0
Main.java,"['/', '/', 'grunt', '.']",0
Main.java,"['StringBuffer', 'sb', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'remainders', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Main.java,"['if', '(', 'i', '!', '=', '0', ')', 'sb', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
Main.java,"['sb', '.', 'append', '(', 'remainders', '[', 'i', ']', ')', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'sb', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'in', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['/', '/', 'If', 'we', ""'"", 're', 'here', ',', 'we', 'don', ""'"", 't', 'know', 'yet', 'what', 'they', 'want', '.', 'They', 'may', 'have', 'just']",0
Main.java,"['/', '/', 'given', 'us', 'a', 'jar', 'to', 'execute', ',', 'they', 'might', 'have', 'given', 'us', 'a', 'pig', 'script', 'to']",0
Main.java,"['/', '/', 'execute', ',', 'or', 'they', 'might', 'have', 'given', 'us', 'a', 'dash', '(', 'or', 'nothing', ')', 'which', 'means', 'to']",0
Main.java,"['/', '/', 'run', 'grunt', 'interactive', '.']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['if', '(', 'remainders', '=', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'Interactive']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'SHELL', ';']",0
Main.java,"['ConsoleReader', 'reader', '=', 'new', 'ConsoleReader', '(', 'System', '.', 'in', ',', 'new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
Main.java,"['reader', '.', 'addCompletor', '(', 'new', 'PigCompletor', '(', ')', ')', ';']",0
Main.java,"['reader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
Main.java,"['final', 'String', 'HISTORYFILE', '=', '""', '.', 'pig_history', '""', ';']",0
Main.java,"['String', 'historyFile', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'home', '""', ')', '+', 'File', '.', 'separator', '+', 'HISTORYFILE', ';']",0
Main.java,"['reader', '.', 'setHistory', '(', 'new', 'History', '(', 'new', 'File', '(', 'historyFile', ')', ')', ')', ';']",0
Main.java,"['ConsoleReaderInputStream', 'inputStream', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'inputStream', ')', ')', ',', 'pigContext', ')', ';']",0
Main.java,"['grunt', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'run', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'They', 'have', 'a', 'pig', 'script', 'they', 'want', 'us', 'to', 'run', '.']",0
Main.java,"['if', '(', 'remainders', '.', 'length', '>', '1', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'You', 'can', 'only', 'run', 'one', 'pig', 'script', '""']",0
Main.java,"['+', '""', 'at', 'a', 'time', 'from', 'the', 'command', 'line', '.', '""', ')', ';']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'remainders', '[', '0', ']', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'remainders', '[', '0', ']', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'remainders', '[', '0', ']', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['if', '(', '!', 'debug', ')']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'remainders', '[', '0', ']', ')', '.', 'getName', '(', ')']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['/', '/', 'Per', 'Utkarsh', 'and', 'Chris', 'invocation', 'of', 'jar', 'file', 'via', 'pig', 'depricated', '.']",0
Main.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'NumberFormatException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'PigException', 'pe', ')', '{']",0
Main.java,"['if', '(', 'pe', '.', 'retriable', '(', ')', ')', '{']",0
Main.java,"['rc', '=', '1', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'pe', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'catch', '(', 'Throwable', 'e', ')', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'e', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'finally', '{']",0
Main.java,"['/', '/', 'clear', 'temp', 'files']",0
Main.java,"['FileLocalizer', '.', 'deleteTempFiles', '(', ')', ';']",0
Main.java,"['PerformanceTimerFactory', '.', 'getPerfTimerFactory', '(', ')', '.', 'dumpTimers', '(', ')', ';']",0
Main.java,"['System', '.', 'exit', '(', 'rc', ')', ';']",0
Main.java,"['/', '/', 'TODO', 'jz', ':', 'log4j', '.', 'properties', 'should', 'be', 'used', 'instead']",0
Main.java,"['private', 'static', 'void', 'configureLog4J', '(', 'Properties', 'properties', ')', '{']",0
Main.java,"['/', '/', 'TODO', 'Add', 'a', 'file', 'appender', 'for', 'the', 'logs']",0
Main.java,"['/', '/', 'TODO', 'Need', 'to', 'create', 'a', 'property', 'in', 'the', 'properties', 'file', 'for', 'it', '.']",0
Main.java,"['/', '/', 'sgroschupf', ',', '25Feb2008', ':', 'this', 'method', 'will', 'be', 'obsolete', 'with', 'PIG', '-', '115', '.']",0
Main.java,"['String', 'log4jconf', '=', 'properties', '.', 'getProperty', '(', 'LOG4J_CONF', ')', ';']",0
Main.java,"['String', 'trueString', '=', '""', 'true', '""', ';']",0
Main.java,"['boolean', 'brief', '=', 'trueString', '.', 'equalsIgnoreCase', '(', 'properties', '.', 'getProperty', '(', 'BRIEF', ')', ')', ';']",0
Main.java,"['Level', 'logLevel', '=', 'Level', '.', 'INFO', ';']",0
Main.java,"['String', 'logLevelString', '=', 'properties', '.', 'getProperty', '(', 'DEBUG', ')', ';']",0
Main.java,"['if', '(', 'logLevelString', '!', '=', 'null', ')', '{']",0
Main.java,"['logLevel', '=', 'Level', '.', 'toLevel', '(', 'logLevelString', ',', 'Level', '.', 'INFO', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'log4jconf', ')', ';']",0
Main.java,"['}', 'else', 'if', '(', '!', 'brief', ')', '{']",0
Main.java,"['/', '/', 'non', '-', 'brief', 'logging', '-', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'd', '[', '%', 't', ']', '%', '-', '5p', '%', 'c', '-', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'brief', 'logging', '-', 'no', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['/', '/', 'returns', 'the', 'stream', 'of', 'final', 'pig', 'script', 'to', 'be', 'passed', 'to', 'Grunt']",0
Main.java,"['private', 'static', 'BufferedReader', 'runParamPreprocessor', '(', 'BufferedReader', 'origPigScript', ',', 'ArrayList', '<', 'String', '>', 'params', ',']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', ',', 'String', 'scriptFile', ',', 'boolean', 'createFile', ')']",0
Main.java,"['throws', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', ',', 'IOException', '{']",0
Main.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
Main.java,"['String', '[', ']', 'type1', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['String', '[', ']', 'type2', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['if', '(', 'createFile', ')', '{']",0
Main.java,"['BufferedWriter', 'fw', '=', 'new', 'BufferedWriter', '(', 'new', 'FileWriter', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'fw', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'writer', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'writer', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getVersionString', '(', ')', '{']",0
Main.java,"['String', 'findContainingJar', '=', 'JarManager', '.', 'findContainingJar', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['StringBuffer', 'buffer', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['JarFile', 'jar', '=', 'new', 'JarFile', '(', 'findContainingJar', ')', ';']",0
Main.java,"['final', 'Manifest', 'manifest', '=', 'jar', '.', 'getManifest', '(', ')', ';']",0
Main.java,"['final', 'Map', '<', 'String', ',', 'Attributes', '>', 'attrs', '=', 'manifest', '.', 'getEntries', '(', ')', ';']",0
Main.java,"['Attributes', 'attr', '=', 'attrs', '.', 'get', '(', '""', 'org', '/', 'apache', '/', 'pig', '""', ')', ';']",0
Main.java,"['String', 'version', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Implementation', '-', 'Version', '""', ')', ';']",0
Main.java,"['String', 'svnRevision', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Svn', '-', 'Revision', '""', ')', ';']",0
Main.java,"['String', 'buildTime', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Build', '-', 'TimeStamp', '""', ')', ';']",0
Main.java,"['/', '/', 'we', 'use', 'a', 'version', 'string', 'similar', 'to', 'svn']",0
Main.java,"['/', '/', 'svn', ',', 'version', '1', '.', '4', '.', '4', '(', 'r25188', ')']",0
Main.java,"['/', '/', 'compiled', 'Sep', '23', '2007', ',', '22', ':', '32', ':', '34']",0
Main.java,"['return', '""', 'Apache', 'Pig', 'version', '""', '+', 'version', '+', '""', '(', 'r', '""', '+', 'svnRevision', '+', '""', ')', '\\', 'ncompiled', '""', '+', 'buildTime', ';']",0
Main.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'unable', 'to', 'read', 'pigs', 'manifest', 'file', '""', ',', 'e', ')', ';']",0
Main.java,"['public', 'static', 'void', 'usage', '(', ')']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '\\', 'n', '""', '+', 'getVersionString', '(', ')', '+', '""', '\\', 'n', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'USAGE', ':', 'Pig', '[', 'options', ']', '[', '-', ']', ':', 'Run', 'interactively', 'in', 'grunt', 'shell', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '-', 'e', '[', 'xecute', ']', 'cmd', '[', 'cmd', '.', '.', '.', ']', ':', 'Run', 'cmd', '(', 's', ')', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '[', '-', 'f', '[', 'ile', ']', ']', 'file', ':', 'Run', 'cmds', 'found', 'in', 'file', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'options', 'include', ':', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '4', ',', '-', 'log4jconf', 'log4j', 'configuration', 'file', ',', 'overrides', 'log', 'conf', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'b', ',', '-', 'brief', 'brief', 'logging', '(', 'no', 'timestamps', ')', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'c', ',', '-', 'cluster', 'clustername', ',', 'kryptonite', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'd', ',', '-', 'debug', 'debug', 'level', ',', 'INFO', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'h', ',', '-', 'help', 'display', 'this', 'message', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'j', ',', '-', 'jar', 'jarfile', 'load', 'jarfile', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'o', ',', '-', 'hod', 'read', 'hod', 'server', 'from', 'system', 'property', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'v', ',', '-', 'verbose', 'print', 'all', 'error', 'messages', 'to', 'screen', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'x', ',', '-', 'exectype', 'local', '|', 'mapreduce', ',', 'mapreduce', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'i', ',', '-', 'version', 'display', 'version', 'information', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'l', ',', '-', 'logfile', 'path', 'to', 'client', 'side', 'log', 'file', ';', 'current', 'working', 'directory', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'w', ',', '-', 'warning', 'turn', 'warning', 'on', ';', 'also', 'turns', 'warning', 'aggregation', 'off', '""', ')', ';']",0
Main.java,"['private', 'static', 'String', 'validateLogFile', '(', 'String', 'logFileName', ',', 'String', 'scriptName', ')', '{']",0
Main.java,"['String', 'strippedDownScriptName', '=', 'null', ';']",0
Main.java,"['if', '(', 'scriptName', '!', '=', 'null', ')', '{']",0
Main.java,"['File', 'scriptFile', '=', 'new', 'File', '(', 'scriptName', ')', ';']",0
Main.java,"['if', '(', '!', 'scriptFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['String', 'scriptFileAbsPath', ';']",0
Main.java,"['scriptFileAbsPath', '=', 'scriptFile', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",1
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'script', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['strippedDownScriptName', '=', 'getFileFromCanonicalPath', '(', 'scriptFileAbsPath', ')', ';']",0
Main.java,"['String', 'defaultLogFileName', '=', '(', 'strippedDownScriptName', '=', '=', 'null', '?', '""', 'pig_', '""', ':', 'strippedDownScriptName', ')', '+', 'new', 'Date', '(', ')', '.', 'getTime', '(', ')', '+', '""', '.', 'log', '""', ';']",0
Main.java,"['File', 'logFile', ';']",0
Main.java,"['if', '(', 'logFileName', '!', '=', 'null', ')', '{']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Check', 'if', 'the', 'file', 'name', 'is', 'a', 'directory']",0
Main.java,"['/', '/', 'append', 'the', 'default', 'file', 'name', 'to', 'the', 'file']",0
Main.java,"['if', '(', 'logFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'logFile', '.', 'getCanonicalPath', '(', ')', '+', 'File', '.', 'separator', '+', 'defaultLogFileName', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFileName', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'we', 'have', 'a', 'relative', 'path', 'or', 'an', 'absolute', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'check', 'if', 'we', 'can', 'write', 'to', 'the', 'directory', 'where', 'this', 'file', 'is', '/', 'will', 'be', 'stored']",0
Main.java,"['if', '(', 'logFile', '.', 'exists', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'do', 'not', 'have', 'write', 'permissions', 'for', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'bail', 'out', 'with', 'an', 'error', 'message']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Cannot', 'write', 'to', 'file', ':', '""', '+', 'logFileName', '+', '""', '.', 'Need', 'write', 'permission', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['logFile', '=', 'logFile', '.', 'getParentFile', '(', ')', ';']",0
Main.java,"['if', '(', 'logFile', '!', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'if', 'the', 'directory', 'is', 'writable', 'we', 'are', 'good', 'to', 'go']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFile', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFile', '!', '=', 'null', 'else', 'is', 'the', 'default', 'in', 'fall', 'through']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'exists', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'isDirectory', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFileName', '!', '=', 'null']",0
Main.java,"['/', '/', 'file', 'name', 'is', 'null', 'or', 'its', 'in', 'the', 'current', 'working', 'directory']",0
Main.java,"['/', '/', 'revert', 'to', 'the', 'current', 'working', 'directory']",0
Main.java,"['String', 'currDir', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'dir', '""', ')', ';']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'currDir', ')', ';']",0
Main.java,"['logFileName', '=', 'currDir', '+', 'File', '.', 'separator', '+', '(', 'logFileName', '=', '=', 'null', '?', 'defaultLogFileName', ':', 'logFileName', ')', ';']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Cannot', 'write', 'to', 'log', 'file', ':', '""', '+', 'logFileName', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getFileFromCanonicalPath', '(', 'String', 'canonicalPath', ')', '{']",0
Main.java,"['return', 'canonicalPath', '.', 'substring', '(', 'canonicalPath', '.', 'lastIndexOf', '(', 'File', '.', 'separator', ')', ')', ';']",0
DataReaderWriter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataInput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataOutput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
DataReaderWriter.java,"['/', '*', '*']",0
DataReaderWriter.java,"['public', 'class', 'DataReaderWriter', '{']",0
DataReaderWriter.java,"['private', 'static', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['private', 'static', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['static', 'final', 'int', 'UNSIGNED_SHORT_MAX', '=', '65535', ';']",0
DataReaderWriter.java,"['static', 'final', 'String', 'UTF8', '=', '""', 'UTF', '-', '8', '""', ';']",0
DataReaderWriter.java,"['public', 'static', 'Tuple', 'bytesToTuple', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['/', '/', 'Don', ""'"", 't', 'use', 'Tuple', '.', 'readFields', ',', 'because', 'it', 'requires', 'you', 'to']",1
DataReaderWriter.java,"['/', '/', 'create', 'a', 'tuple', 'with', 'no', 'size', 'and', 'then', 'append', 'fields', '.']",1
DataReaderWriter.java,"['/', '/', 'That', ""'"", 's', 'less', 'efficient', 'than', 'allocating', 'the', 'tuple', 'size', 'up']",1
DataReaderWriter.java,"['/', '/', 'front', 'and', 'then', 'filling', 'in', 'the', 'spaces', '.']",1
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'size', '.']",1
DataReaderWriter.java,"['int', 'sz', '=', 'in', '.', 'readInt', '(', ')', ';']",1
DataReaderWriter.java,"['/', '/', 'if', 'sz', '=', '=', '0', ',', 'we', 'construct', 'an', '""', 'empty', '""', 'tuple', '-']",1
DataReaderWriter.java,"['/', '/', 'presumably', 'the', 'writer', 'wrote', 'an', 'empty', 'tuple', '!']",1
DataReaderWriter.java,"['if', '(', 'sz', '<', '0', ')', '{']",1
DataReaderWriter.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'size', '""', '+', 'sz', '+', '""', 'for', 'a', 'tuple', '""', ')', ';']",0
DataReaderWriter.java,"['Tuple', 't', '=', 'mTupleFactory', '.', 'newTuple', '(', 'sz', ')', ';']",1
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sz', ';', 'i', '+', '+', ')', '{']",1
DataReaderWriter.java,"['t', '.', 'set', '(', 'i', ',', 'readDatum', '(', 'in', ')', ')', ';']",1
DataReaderWriter.java,"['return', 't', ';']",1
DataReaderWriter.java,"['public', 'static', 'DataBag', 'bytesToBag', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['DataBag', 'bag', '=', 'mBagFactory', '.', 'newDefaultBag', '(', ')', ';']",1
DataReaderWriter.java,"['bag', '.', 'readFields', '(', 'in', ')', ';']",1
DataReaderWriter.java,"['return', 'bag', ';']",1
DataReaderWriter.java,"['public', 'static', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",1
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', 'new', 'HashMap', '<', 'Object', ',', 'Object', '>', '(', 'size', ')', ';']",1
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'size', ';', 'i', '+', '+', ')', '{']",1
DataReaderWriter.java,"['Object', 'key', '=', 'readDatum', '(', 'in', ')', ';']",1
DataReaderWriter.java,"['m', '.', 'put', '(', 'key', ',', 'readDatum', '(', 'in', ')', ')', ';']",1
DataReaderWriter.java,"['return', 'm', ';']",1
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readUnsignedShort', '(', ')', ';']",1
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",1
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",1
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",1
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToBigCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'Object', 'readDatum', '(', 'DataInput', 'in', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'b', '=', 'in', '.', 'readByte', '(', ')', ';']",0
DataReaderWriter.java,"['switch', '(', 'b', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['return', 'bytesToTuple', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['return', 'bytesToBag', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':']",0
DataReaderWriter.java,"['return', 'bytesToMap', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['return', 'new', 'Integer', '(', 'in', '.', 'readInt', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['return', 'new', 'Long', '(', 'in', '.', 'readLong', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['return', 'new', 'Float', '(', 'in', '.', 'readFloat', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Double', '(', 'in', '.', 'readDouble', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['return', 'new', 'Boolean', '(', 'in', '.', 'readBoolean', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Byte', '(', 'in', '.', 'readByte', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'DataByteArray', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BIGCHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToBigCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['return', 'null', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'b', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'void', 'writeDatum', '(']",0
DataReaderWriter.java,"['DataOutput', 'out', ',']",0
DataReaderWriter.java,"['Object', 'val', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'type', '=', 'DataType', '.', 'findType', '(', 'val', ')', ';']",0
DataReaderWriter.java,"['switch', '(', 'type', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['/', '/', 'Because', 'tuples', 'are', 'written', 'directly', 'by', 'hadoop', ',', 'the']",0
DataReaderWriter.java,"['/', '/', 'tuple', ""'"", 's', 'write', 'method', 'needs', 'to', 'write', 'the', 'indicator', 'byte', '.']",0
DataReaderWriter.java,"['/', '/', 'So', 'don', ""'"", 't', 'write', 'the', 'indicator', 'byte', 'here', 'as', 'it', 'is', 'for']",0
DataReaderWriter.java,"['/', '/', 'everyone', 'else', '.']",0
DataReaderWriter.java,"['(', '(', 'Tuple', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BAG', ')', ';']",0
DataReaderWriter.java,"['(', '(', 'DataBag', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':', '{']",1
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'MAP', ')', ';']",0
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'm', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', '>', 'i', '=']",0
DataReaderWriter.java,"['m', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', ';']",0
DataReaderWriter.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
DataReaderWriter.java,"['Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', 'entry', '=', 'i', '.', 'next', '(', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', '(', 'Integer', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'LONG', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeLong', '(', '(', 'Long', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeFloat', '(', '(', 'Float', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeDouble', '(', '(', 'Double', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BOOLEAN', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeBoolean', '(', '(', 'Boolean', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', '(', 'Byte', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
DataReaderWriter.java,"['DataByteArray', 'bytes', '=', '(', 'DataByteArray', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'bytes', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'bytes', '.', 'mData', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':', '{']",1
DataReaderWriter.java,"['String', 's', '=', '(', 'String', ')', 'val', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'utfBytes', '=', 's', '.', 'getBytes', '(', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['int', 'length', '=', 'utfBytes', '.', 'length', ';']",0
DataReaderWriter.java,"['if', '(', 'length', '<', 'DataReaderWriter', '.', 'UNSIGNED_SHORT_MAX', ')', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeShort', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['}', 'else', '{']",1
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BIGCHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'NULL', ')', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'type', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
MapReduceLauncher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Counters', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MRCompiler', '.', 'LastInputStreamingOptimizer', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRPrinter', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRStreamHandler', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'POPackageAnnotator', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POJoinPackage', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'Message', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ConfigurationValidator', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['public', 'class', 'MapReduceLauncher', 'extends', 'Launcher', '{']",0
MapReduceLauncher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'MapReduceLauncher', '.', 'class', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'used', 'to', 'track', 'the', 'exception', 'thrown', 'by', 'the', 'job', 'control', 'which', 'is', 'run', 'in', 'a', 'separate', 'thread']",0
MapReduceLauncher.java,"['private', 'Exception', 'jobControlException', '=', 'null', ';']",0
MapReduceLauncher.java,"['private', 'boolean', 'aggregateWarning', '=', 'false', ';']",0
MapReduceLauncher.java,"['public', 'boolean', 'launchPig', '(', 'PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['String', 'grpName', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',']",0
MapReduceLauncher.java,"['long', 'sleepTime', '=', '5000', ';']",0
MapReduceLauncher.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['ExecutionEngine', 'exe', '=', 'pc', '.', 'getExecutionEngine', '(', ')', ';']",0
MapReduceLauncher.java,"['ConfigurationValidator', '.', 'validatePigProperties', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['Configuration', 'conf', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['JobClient', 'jobClient', '=', '(', '(', 'HExecutionEngine', ')', 'exe', ')', '.', 'getJobClient', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControlCompiler', 'jcc', '=', 'new', 'JobControlCompiler', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControl', 'jc', '=', 'jcc', '.', 'compile', '(', 'mrp', ',', 'grpName', ',', 'conf', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['int', 'numMRJobs', '=', 'jc', '.', 'getWaitingJobs', '(', ')', '.', 'size', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'create', 'the', 'exception', 'handler', 'for', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['/', '/', 'and', 'register', 'the', 'handler', 'with', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['JobControlThreadExceptionHandler', 'jctExceptionHandler', '=', 'new', 'JobControlThreadExceptionHandler', '(', ')', ';']",0
MapReduceLauncher.java,"['Thread', 'jcThread', '=', 'new', 'Thread', '(', 'jc', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'setUncaughtExceptionHandler', '(', 'jctExceptionHandler', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'start', '(', ')', ';']",0
MapReduceLauncher.java,"['double', 'lastProg', '=', '-', '1', ';']",0
MapReduceLauncher.java,"['int', 'perCom', '=', '0', ';']",0
MapReduceLauncher.java,"['while', '(', '!', 'jc', '.', 'allFinished', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['Thread', '.', 'sleep', '(', 'sleepTime', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'InterruptedException', 'e', ')', '{', '}']",0
MapReduceLauncher.java,"['double', 'prog', '=', 'calculateProgress', '(', 'jc', ',', 'jobClient', ')', '/', 'numMRJobs', ';']",0
MapReduceLauncher.java,"['if', '(', 'prog', '>', '=', '(', 'lastProg', '+', '0', '.', '01', ')', ')', '{']",0
MapReduceLauncher.java,"['perCom', '=', '(', 'int', ')', '(', 'prog', '*', '100', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'perCom', '!', '=', '100', ')']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', 'perCom', '+', '""', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['lastProg', '=', 'prog', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'for', 'the', 'jobControlException', 'first']",0
MapReduceLauncher.java,"['/', '/', 'if', 'the', 'job', 'controller', 'fails', 'before', 'launching', 'the', 'jobs', 'then', 'there', 'are']",0
MapReduceLauncher.java,"['/', '/', 'no', 'jobs', 'to', 'check', 'for', 'failure']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', 'instanceof', 'PigException', ')', '{']",0
MapReduceLauncher.java,"['throw', 'jobControlException', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['int', 'errCode', '=', '2117', ';']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'jobControlException', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'Look', 'to', 'see', 'if', 'any', 'jobs', 'failed', '.', 'If', 'so', ',', 'we', 'need', 'to', 'report', 'that', '.']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'failedJobs', '=', 'jc', '.', 'getFailedJobs', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'failedJobs', '!', '=', 'null', '&', '&', 'failedJobs', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'error', '(', '""', 'Map', 'reduce', 'job', 'failed', '""', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'fj', ':', 'failedJobs', ')', '{']",0
MapReduceLauncher.java,"['getStats', '(', 'fj', ',', 'jobClient', ',', 'true', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['jc', '.', 'stop', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'false', ';']",0
MapReduceLauncher.java,"['Map', '<', 'Enum', ',', 'Long', '>', 'warningAggMap', '=', 'new', 'HashMap', '<', 'Enum', ',', 'Long', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'succJobs', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'succJobs', '!', '=', 'null', ')']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'job', ':', 'succJobs', ')', '{']",0
MapReduceLauncher.java,"['getStats', '(', 'job', ',', 'jobClient', ',', 'false', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['computeWarningAggregate', '(', 'job', ',', 'jobClient', ',', 'warningAggMap', ')', ';']",0
MapReduceLauncher.java,"['jc', '.', 'stop', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['CompilationMessageCollector', '.', 'logAggregate', '(', 'warningAggMap', ',', 'MessageType', '.', 'Warning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', '100', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Success', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['return', 'true', ';']",0
MapReduceLauncher.java,"['public', 'void', 'explain', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ',']",0
MapReduceLauncher.java,"['PrintStream', 'ps', ')', 'throws', 'PlanException', ',', 'VisitorException', ',']",0
MapReduceLauncher.java,"['log', '.', 'trace', '(', '""', 'Entering', 'MapReduceLauncher', '.', 'explain', '""', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['MRPrinter', 'printer', '=', 'new', 'MRPrinter', '(', 'ps', ',', 'mrp', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['private', 'MROperPlan', 'compile', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',', 'IOException', ',', 'VisitorException', '{']",0
MapReduceLauncher.java,"['MRCompiler', 'comp', '=', 'new', 'MRCompiler', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'randomizeFileLocalizer', '(', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'compile', '(', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'plan', '=', 'comp', '.', 'getMRPlan', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'MRCompiler']",0
MapReduceLauncher.java,"['comp', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['String', 'lastInputChunkSize', '=']",0
MapReduceLauncher.java,"['pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(']",0
MapReduceLauncher.java,"['""', 'last', '.', 'input', '.', 'chunksize', '""', ',', 'POJoinPackage', '.', 'DEFAULT_CHUNK_SIZE', ')', ';']",0
MapReduceLauncher.java,"['String', 'prop', '=', 'System', '.', 'getProperty', '(', '""', 'pig', '.', 'exec', '.', 'nocombiner', '""', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', '(', '""', 'true', '""', '.', 'equals', '(', 'prop', ')', ')', ')', '{']",0
MapReduceLauncher.java,"['CombinerOptimizer', 'co', '=', 'new', 'CombinerOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['co', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'CombinerOptimizer']",0
MapReduceLauncher.java,"['co', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'key', '-', 'value', 'handling', 'in', 'package']",0
MapReduceLauncher.java,"['POPackageAnnotator', 'pkgAnnotator', '=', 'new', 'POPackageAnnotator', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['pkgAnnotator', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'whether', 'stream', 'operator', 'is', 'present']",0
MapReduceLauncher.java,"['MRStreamHandler', 'checker', '=', 'new', 'MRStreamHandler', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['checker', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'joins']",0
MapReduceLauncher.java,"['LastInputStreamingOptimizer', 'liso', '=']",0
MapReduceLauncher.java,"['new', 'MRCompiler', '.', 'LastInputStreamingOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['liso', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'figure', 'out', 'the', 'type', 'of', 'the', 'key', 'for', 'the', 'map', 'plan']",0
MapReduceLauncher.java,"['/', '/', 'this', 'is', 'needed', 'when', 'the', 'key', 'is', 'null', 'to', 'create']",0
MapReduceLauncher.java,"['/', '/', 'an', 'appropriate', 'NullableXXXWritable', 'object']",0
MapReduceLauncher.java,"['KeyTypeDiscoveryVisitor', 'kdv', '=', 'new', 'KeyTypeDiscoveryVisitor', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['kdv', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'plan', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['class', 'JobControlThreadExceptionHandler', 'implements', 'Thread', '.', 'UncaughtExceptionHandler', '{']",0
MapReduceLauncher.java,"['public', 'void', 'uncaughtException', '(', 'Thread', 'thread', ',', 'Throwable', 'throwable', ')', '{']",0
MapReduceLauncher.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
MapReduceLauncher.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'baos', ')', ';']",0
MapReduceLauncher.java,"['throwable', '.', 'printStackTrace', '(', 'ps', ')', ';']",0
MapReduceLauncher.java,"['String', 'exceptionString', '=', 'baos', '.', 'toString', '(', ')', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'getExceptionFromString', '(', 'exceptionString', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MapReduceLauncher.java,"['String', 'errMsg', '=', '""', 'Could', 'not', 'resolve', 'error', 'that', 'occured', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'new', 'RuntimeException', '(', 'errMsg', ',', 'e', ')', ';']",0
MapReduceLauncher.java,"['void', 'computeWarningAggregate', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'Map', '<', 'Enum', ',', 'Long', '>', 'aggMap', ')', '{']",0
MapReduceLauncher.java,"['JobID', 'mapRedJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
MapReduceLauncher.java,"['RunningJob', 'runningJob', '=', 'null', ';']",0
MapReduceLauncher.java,"['runningJob', '=', 'jobClient', '.', 'getJob', '(', 'mapRedJobID', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'runningJob', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['Counters', 'counters', '=', 'runningJob', '.', 'getCounters', '(', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'Enum', 'e', ':', 'PigWarning', '.', 'values', '(', ')', ')', '{']",1
MapReduceLauncher.java,"['Long', 'currentCount', '=', 'aggMap', '.', 'get', '(', 'e', ')', ';']",1
MapReduceLauncher.java,"['currentCount', '=', '(', 'currentCount', '=', '=', 'null', '?', '0', ':', 'currentCount', ')', ';']",1
MapReduceLauncher.java,"['currentCount', '+', '=', 'counters', '.', 'getCounter', '(', 'e', ')', ';']",1
MapReduceLauncher.java,"['aggMap', '.', 'put', '(', 'e', ',', 'currentCount', ')', ';']",1
MapReduceLauncher.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'job', 'to', 'compute', 'warning', 'aggregation', '.', '""', ';']",0
MapReduceLauncher.java,"['log', '.', 'warn', '(', 'msg', ')', ';']",0
TestBestFitCast.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Arrays', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestBestFitCast.java,"['import', 'com', '.', 'sun', '.', 'org', '.', 'apache', '.', 'bcel', '.', 'internal', '.', 'ExceptionConstants', ';']",0
TestBestFitCast.java,"['import', 'com', '.', 'sun', '.', 'org', '.', 'apache', '.', 'xerces', '.', 'internal', '.', 'impl', '.', 'xpath', '.', 'regex', '.', 'ParseException', ';']",0
TestBestFitCast.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestBestFitCast.java,"['public', 'class', 'TestBestFitCast', 'extends', 'TestCase', '{']",0
TestBestFitCast.java,"['private', 'PigServer', 'pigServer', ';']",0
TestBestFitCast.java,"['private', 'MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestBestFitCast.java,"['private', 'File', 'tmpFile', ',', 'tmpFile2', ';']",0
TestBestFitCast.java,"['int', 'LOOP_SIZE', '=', '20', ';']",0
TestBestFitCast.java,"['public', 'TestBestFitCast', '(', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
TestBestFitCast.java,"['pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ')', ';']",0
TestBestFitCast.java,"['tmpFile', '=', 'File', '.', 'createTempFile', '(', '""', 'test', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile', ')', ')', ';']",0
TestBestFitCast.java,"['long', 'l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['tmpFile2', '=', 'File', '.', 'createTempFile', '(', '""', 'test2', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile2', ')', ')', ';']",0
TestBestFitCast.java,"['l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF1', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '*', 'funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'DoubleMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'FloatMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'IntMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'LongMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'LONG', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'StringMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ';', '*', '/']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF2', 'extends', 'EvalFunc', '<', 'String', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'String', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['String', 'str', '=', '(', 'String', ')', 'input', '.', 'get', '(', '0', ')', ';']",0
TestBestFitCast.java,"['return', 'str', '.', 'toUpperCase', '(', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['return', 'null', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF3', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'bytearray', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'int', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'is', '{', 'float', ',', 'bytearray', '}', 'since', 'bytearray', 'can', 'be', 'casted', 'either', 'to', 'long']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', '.', 'However', 'when', 'input', 'schema', 'is', '{', 'bytearray', ',', 'int', '}', ',', 'it', 'should', 'work']",0
TestBestFitCast.java,"['/', '/', 'since', 'bytearray', 'should', 'get', 'casted', 'to', 'float', 'and', 'int', 'to', 'long', '.', 'Likewise', 'if']",0
TestBestFitCast.java,"['/', '/', 'input', 'schema', 'is', '{', 'bytearray', ',', 'long', '}', 'or', '{', 'bytearray', ',', 'double', '}', 'it', 'should', 'work']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema', 'is']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'int', ',', 'int', '}', 'since', 'the', 'two', 'ints', 'could', 'be', 'casted', 'to', 'long', ',', 'double']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', ',', 'long', '.', 'Likewise', 'input', 'schema', 'of', 'either', '{', 'bytearray', ',', 'long', ',', 'long', '}']",0
TestBestFitCast.java,"['/', '/', 'or', '{', 'bytearray', ',', 'double', ',', 'double', '}', 'would', 'cause', 'conflict', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'double', '}', 'or', '{', 'bytearray', ',', 'double', ',', 'long', '}', 'should', 'not', 'cause']",0
TestBestFitCast.java,"['/', '/', 'conflict', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', 'to', 'float', '.', 'Input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'of', '{', 'float', ',', 'bytearray', ',', 'long', '}', 'or', '{', 'float', ',', 'long', ',', 'bytearray', '}', 'should', 'also']",0
TestBestFitCast.java,"['/', '/', 'work', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'float', ',', 'bytearray', ',', 'int', '}', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'int', '}', 'should', 'work', 'and', 'should', 'match', 'the', 'first', 'schema', 'below', 'for']",0
TestBestFitCast.java,"['/', '/', 'matching', 'wherein', 'the', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the', 'int', 'to', 'double', '.']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast1', '(', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '{', 'float', ',', 'double', '}', ',', '{', 'float', ',', 'long', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast2', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'in', 'both', 'cases', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the']",0
TestBestFitCast.java,"['/', '/', 'cost', 'of', 'casting', 'int', 'to', 'long', '<', 'int', 'to', 'double']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast3', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast4', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast5', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'ints', 'cannot', 'be', 'unambiguously']",0
TestBestFitCast.java,"['/', '/', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast6', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'longs', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'unambiguously', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast7', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'doubles', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'casted', 'with', 'a', 'permissible', 'cast']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Could', 'not', 'infer', 'the', 'matching', 'function', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast8', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast9', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast10', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'long', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ':', 'long', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast11', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast12', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast13', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'for', 'the', 'bytearray', 'there', 'is', 'a']",0
TestBestFitCast.java,"['/', '/', 'single', 'unambiguous', 'cast', 'to', 'float', '.', 'For', 'the', 'other', 'two', 'args', ',', 'it', 'is']",0
TestBestFitCast.java,"['/', '/', 'less', '""', 'costlier', '""', 'to', 'cast', 'the', 'last', 'int', 'to', 'double', 'than', 'cast', 'the', 'long']",0
TestBestFitCast.java,"['/', '/', 'to', 'double', 'and', 'int', 'to', 'long']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast14', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'bytearray', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'bytearray', ')', '}', 'because', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast15', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'bytearray', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'DataByteArray', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'expected', '=', 'Integer', '.', 'toString', '(', 'cnt', '+', '1', ')', '.', 'getBytes', '(', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'actual', '=', '(', '(', 'DataByteArray', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '.', 'length', ',', 'actual', '.', 'length', ')', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'expected', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '[', 'i', ']', ',', 'actual', '[', 'i', ']', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast16', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'int', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Integer', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Integer', '(', 'cnt', '+', '1', ')', ',', '(', 'Integer', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testIntSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'int', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'int', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testLongSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'long', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'long', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testFloatSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'float', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'float', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'float', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testDoubleSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'double', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'double', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test1', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'long', ',', 'double', ')', 'as', 'it', 'has', 'only', 'one', 'cast', 'compared', 'to', 'two', 'for', '(', 'float', ',', 'float', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test2', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'Exception', 'as', 'ambiguous', 'definitions', 'found']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'as', 'multiple', 'or', 'none', 'of', 'them', 'fit', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test3', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'float', ')', 'as', 'both', 'options', 'lead', 'to', 'same', 'score', 'and', '(', 'float', ',', 'float', ')', 'occurs', 'first', '.']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '(', 'float', ')', 'y', ',', '(', 'float', ')', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test4', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ')', ',', '(', 'integer', ')', ',', '(', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ')', 'as', 'it', 'leads', 'to', 'a', 'better', 'score', 'that', 'to', '(', 'double', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test5', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', 'bytearrays']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'exception', 'since', 'more', 'than', 'one', 'funcSpec', 'and', 'inp', 'is', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '$', '0', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test6', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'test', 'UDF', 'with', 'single', 'mapping', 'function']",0
TestBestFitCast.java,"['/', '/', 'where', 'bytearray', 'is', 'passed', 'in', 'as', 'input', 'parameter']",0
TestBestFitCast.java,"['File', 'input', '=', 'Util', '.', 'createInputFile', '(', '""', 'tmp', '""', ',', '""', '""', ',', 'new', 'String', '[', ']', '{', '""', 'abc', '""', '}', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'input', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'GENERATE', '""', '+', 'UDF2', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '""', 'ABC', '""', ',', 't', '.', 'get', '(', '0', ')', ')', ';']",0
PigServer.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PigServer.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Date', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', '.', 'JOB_STATUS', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOPrinter', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'PlanSetter', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'LogicalOptimizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'QueryParser', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', '.', 'LogicalPlanValidationExecutor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LODefine', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStore', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'pen', '.', 'ExampleGenerator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'class', 'PigServer', '{']",0
PigServer.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
PigServer.java,"['public', 'static', 'ExecType', 'parseExecType', '(', 'String', 'str', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['String', 'normStr', '=', 'str', '.', 'toLowerCase', '(', ')', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'local', '""', ')', ')', 'return', 'ExecType', '.', 'LOCAL', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapreduce', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapred', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pig', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pigbody', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['int', 'errCode', '=', '2040', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unknown', 'exec', 'type', ':', '""', '+', 'str', ';']",0
PigServer.java,"['throw', 'new', 'PigException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigServer.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'opTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['PigContext', 'pigContext', ';']",0
PigServer.java,"['private', 'String', 'scope', '=', 'constructScope', '(', ')', ';']",0
PigServer.java,"['private', 'ArrayList', '<', 'String', '>', 'cachedScript', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['private', 'boolean', 'aggregateWarning', '=', 'true', ';']",0
PigServer.java,"['private', 'String', 'constructScope', '(', ')', '{']",0
PigServer.java,"['/', '/', 'scope', 'servers', 'for', 'now', 'as', 'a', 'session', 'id']",0
PigServer.java,"['/', '/', 'scope', '=', 'user_id', '+', '""', '-', '""', '+', 'time_stamp', ';']",0
PigServer.java,"['String', 'user', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ',', '""', 'DEFAULT_USER_ID', '""', ')', ';']",0
PigServer.java,"['String', 'date', '=', '(', 'new', 'Date', '(', ')', ')', '.', 'toString', '(', ')', ';']",0
PigServer.java,"['return', 'user', '+', '""', '-', '""', '+', 'date', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'String', 'execTypeString', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
PigServer.java,"['this', '(', 'parseExecType', '(', 'execTypeString', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'execType', ',', 'PropertiesUtil', '.', 'loadPropertiesFromFile', '(', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ',', 'true', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'context', ',', 'true', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '.', 'pigContext', '=', 'context', ';']",0
PigServer.java,"['if', '(', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', 'PigContext', '.', 'JOB_NAME', ')', '=', '=', 'null', ')', '{']",0
PigServer.java,"['setJobName', '(', '""', 'DefaultJobName', '""', ')', ';']",0
PigServer.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
PigServer.java,"['if', '(', 'connect', ')', '{']",0
PigServer.java,"['pigContext', '.', 'connect', '(', ')', ';']",0
PigServer.java,"['public', 'PigContext', 'getPigContext', '(', ')', '{']",0
PigServer.java,"['return', 'pigContext', ';']",0
PigServer.java,"['public', 'void', 'debugOn', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'true', ';']",0
PigServer.java,"['public', 'void', 'debugOff', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'false', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'addPathToSkip', '(', 'String', 'path', ')', '{']",0
PigServer.java,"['pigContext', '.', 'addPathToSkip', '(', 'path', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'String', 'functionSpec', ')', '{']",0
PigServer.java,"['registerFunction', '(', 'function', ',', 'new', 'FuncSpec', '(', 'functionSpec', ')', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'FuncSpec', 'funcSpec', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerFunction', '(', 'function', ',', 'funcSpec', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerStreamingCommand', '(', 'String', 'commandAlias', ',', 'StreamingCommand', 'command', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerStreamCmd', '(', 'commandAlias', ',', 'command', ')', ';']",0
PigServer.java,"['private', 'URL', 'locateJarFromResources', '(', 'String', 'jarName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Enumeration', '<', 'URL', '>', 'urls', '=', 'ClassLoader', '.', 'getSystemResources', '(', 'jarName', ')', ';']",0
PigServer.java,"['URL', 'resourceLocation', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['resourceLocation', '=', 'urls', '.', 'nextElement', '(', ')', ';']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'debug', '&', '&', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['String', 'logMessage', '=', '""', 'Found', 'multiple', 'resources', 'that', 'match', '""']",0
PigServer.java,"['+', 'jarName', '+', '""', ':', '""', '+', 'resourceLocation', ';']",0
PigServer.java,"['while', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['logMessage', '+', '=', '(', 'logMessage', '+', 'urls', '.', 'nextElement', '(', ')', '+', '""', ';', '""', ')', ';']",0
PigServer.java,"['log', '.', 'debug', '(', 'logMessage', ')', ';']",0
PigServer.java,"['return', 'resourceLocation', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerJar', '(', 'String', 'name', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'first', 'try', 'to', 'locate', 'jar', 'via', 'system', 'resources']",0
PigServer.java,"['/', '/', 'if', 'this', 'fails', ',', 'try', 'by', 'using', '""', 'name', '""', 'as', 'File', '(', 'this', 'preserves']",0
PigServer.java,"['/', '/', 'compatibility', 'with', 'case', 'when', 'user', 'passes', 'absolute', 'path', 'or', 'path']",0
PigServer.java,"['/', '/', 'relative', 'to', 'current', 'working', 'directory', '.', ')']",0
PigServer.java,"['if', '(', 'name', '!', '=', 'null', ')', '{']",0
PigServer.java,"['URL', 'resource', '=', 'locateJarFromResources', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', 'resource', '=', '=', 'null', ')', '{']",0
PigServer.java,"['File', 'f', '=', 'new', 'File', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', '!', 'f', '.', 'canRead', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '4002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Can', ""'"", 't', 'read', 'jar', 'file', ':', '""', '+', 'name', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
PigServer.java,"['resource', '=', 'f', '.', 'toURI', '(', ')', '.', 'toURL', '(', ')', ';']",0
PigServer.java,"['pigContext', '.', 'addJar', '(', 'resource', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'parseQuery', '(', 'query', ',', 'startLine', ',', 'aliases', ',', 'opTable', ',', 'aliasOp', ')', ';']",0
PigServer.java,"['/', '/', 'store', 'away', 'the', 'query', 'for', 'use', 'in', 'cloning', 'later']",0
PigServer.java,"['cachedScript', '.', 'add', '(', 'query', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'lp', '.', 'getSingleLeafPlanOutputOp', '(', ')', ';']",0
PigServer.java,"['/', '/', 'No', 'need', 'to', 'do', 'anything', 'about', 'DEFINE']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LODefine', ')', '{']",0
PigServer.java,"['/', '/', 'Check', 'if', 'we', 'just', 'processed', 'a', 'LOStore', 'i', '.', 'e', '.', 'STORE']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LOStore', ')', '{']",0
PigServer.java,"['execute', '(', 'null', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'op', '.', 'getOperatorKey', '(', ')', '.', 'getId', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'parseQuery', '(', 'String', 'query', ',', 'int', 'startLine', ',', 'Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliasesMap', ',']",0
PigServer.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'opTableMap', ',', 'Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOpMap', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'query', '!', '=', 'null', ')', '{']",0
PigServer.java,"['query', '=', 'query', '.', 'trim', '(', ')', ';']",0
PigServer.java,"['if', '(', 'query', '.', 'length', '(', ')', '=', '=', '0', ')', 'return', 'null', ';']",0
PigServer.java,"['}', 'else', '{']",1
PigServer.java,"['return', 'null', ';']",0
PigServer.java,"['return', 'new', 'LogicalPlanBuilder', '(', 'pigContext', ')', '.', 'parse', '(', 'scope', ',', 'query', ',']",0
PigServer.java,"['aliasesMap', ',', 'opTableMap', ',', 'aliasOpMap', ',', 'startLine', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'throw', '(', 'IOException', ')', 'new', 'IOException', '(', 'e', '.', 'getMessage', '(', ')', ')', '.', 'initCause', '(', 'e', ')', ';']",0
PigServer.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
PigServer.java,"['int', 'errCode', '=', '1000', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Error', 'during', 'parsing', '.', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'e', ')', ';']",0
PigServer.java,"['public', 'LogicalPlan', 'clonePlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'There', 'are', 'two', 'choices', 'on', 'how', 'we', 'clone', 'the', 'logical', 'plan']",0
PigServer.java,"['/', '/', '1', '-', 'we', 'really', 'clone', 'each', 'operator', 'and', 'connect', 'up', 'the', 'cloned', 'operators']",0
PigServer.java,"['/', '/', '2', '-', 'we', 'cache', 'away', 'the', 'script', 'till', 'the', 'point', 'we', 'need', 'to', 'clone']",0
PigServer.java,"['/', '/', 'and', 'then', 'simply', 're', '-', 'parse', 'the', 'script', '.']",0
PigServer.java,"['/', '/', 'The', 'latter', 'approach', 'is', 'used', 'here']",0
PigServer.java,"['/', '/', 'FIXME', ':', 'There', 'is', 'one', 'open', 'issue', 'with', 'this', 'now', ':']",0
PigServer.java,"['/', '/', 'Consider', 'the', 'following', 'script', ':']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'B', '=', 'filter', 'A', 'by', '$', '0', '>', '10', ';']",0
PigServer.java,"['/', '/', 'store', 'B', 'into', ""'"", 'bla', ""'"", ';']",0
PigServer.java,"['/', '/', 'rm', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'someotherfile', ""'""]",0
PigServer.java,"['/', '/', 'when', 'we', 'try', 'to', 'clone', '-', 'we', 'try', 'to', 'reparse']",0
PigServer.java,"['/', '/', 'from', 'the', 'beginning', 'and', 'currently', 'the', 'parser']",0
PigServer.java,"['/', '/', 'checks', 'for', 'file', 'existence', 'of', 'files', 'in', 'the', 'load']",0
PigServer.java,"['/', '/', 'in', 'the', 'case', 'where', 'the', 'file', 'is', 'a', 'local', 'one', '-', 'i', '.', 'e', '.', 'with', 'file', ':', 'prefix']",0
PigServer.java,"['/', '/', 'This', 'will', 'be', 'a', 'known', 'issue', 'now', 'and', 'we', 'will', 'need', 'to', 'revisit', 'later']",0
PigServer.java,"['/', '/', 'parse', 'each', 'line', 'of', 'the', 'cached', 'script', 'and', 'the']",0
PigServer.java,"['/', '/', 'final', 'logical', 'plan', 'is', 'the', 'clone', 'that', 'we', 'want']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'null', ';']",0
PigServer.java,"['int', 'lineNumber', '=', '1', ';']",0
PigServer.java,"['/', '/', 'create', 'data', 'structures', 'needed', 'for', 'parsing']",0
PigServer.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'cloneAliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'cloneOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'cloneAliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'String', '>', 'it', '=', 'cachedScript', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', 'lineNumber', '+', '+', ')', '{']",0
PigServer.java,"['lp', '=', 'parseQuery', '(', 'it', '.', 'next', '(', ')', ',', 'lineNumber', ',', 'cloneAliases', ',', 'cloneOpTable', ',', 'cloneAliasOp', ')', ';']",0
PigServer.java,"['if', '(', 'alias', '=', '=', 'null', ')', '{']",0
PigServer.java,"['/', '/', 'a', 'store', 'prompted', 'the', 'execution', '-', 'so', 'return']",0
PigServer.java,"['/', '/', 'the', 'entire', 'logical', 'plan']",0
PigServer.java,"['return', 'lp', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['/', '/', 'return', 'the', 'logical', 'plan', 'corresponding', 'to', 'the']",0
PigServer.java,"['/', '/', 'alias', 'supplied']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'cloneAliasOp', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'op', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['return', 'cloneAliases', '.', 'get', '(', 'op', ')', ';']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['registerQuery', '(', 'query', ',', '1', ')', ';']",0
PigServer.java,"['public', 'void', 'registerScript', '(', 'String', 'fileName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['GruntParser', 'grunt', '=', 'new', 'GruntParser', '(', 'new', 'FileReader', '(', 'new', 'File', '(', 'fileName', ')', ')', ')', ';']",0
PigServer.java,"['grunt', '.', 'setInteractive', '(', 'false', ')', ';']",0
PigServer.java,"['grunt', '.', 'setParams', '(', 'this', ')', ';']",0
PigServer.java,"['grunt', '.', 'parseStopOnError', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FileNotFoundException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['public', 'void', 'printAliases', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['System', '.', 'out', '.', 'println', '(', '""', 'aliases', ':', '""', '+', 'aliasOp', '.', 'keySet', '(', ')', ')', ';']",0
PigServer.java,"['public', 'Schema', 'dumpSchema', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'getPlanFromAlias', '(', 'alias', ',', '""', 'describe', '""', ')', ';']",0
PigServer.java,"['lp', '=', 'compileLp', '(', 'alias', ',', 'false', ')', ';']",0
PigServer.java,"['Schema', 'schema', '=', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getSchema', '(', ')', ';']",0
PigServer.java,"['if', '(', 'schema', '!', '=', 'null', ')', 'System', '.', 'out', '.', 'println', '(', 'alias', '+', '""', ':', '""', '+', 'schema', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['else', 'System', '.', 'out', '.', 'println', '(', '""', 'Schema', 'for', '""', '+', 'alias', '+', '""', 'unknown', '.', '""', ')', ';']",0
PigServer.java,"['return', 'schema', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'describe', 'schema', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'fee', ')', ';']",0
PigServer.java,"['public', 'void', 'setJobName', '(', 'String', 'name', ')', '{']",0
PigServer.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',', 'PigContext', '.', 'JOB_NAME_PREFIX', '+', '""', ':', '""', '+', 'name', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'Iterator', '<', 'Tuple', '>', 'openIterator', '(', 'String', 'id', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'aliasOp', '.', 'get', '(', 'id', ')', ';']",0
PigServer.java,"['if', '(', 'null', '=', '=', 'op', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['/', '/', 'ExecJob', 'job', '=', 'execute', '(', 'getPlanFromAlias', '(', 'id', ',', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ')', ')', ';']",0
PigServer.java,"['ExecJob', 'job', '=', 'store', '(', 'id', ',', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ',', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';']",0
PigServer.java,"['/', '/', 'invocation', 'of', '""', 'execute', '""', 'is', 'synchronous', '!']",0
PigServer.java,"['if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'JOB_STATUS', '.', 'COMPLETED', ')', '{']",0
PigServer.java,"['return', 'job', '.', 'getResults', '(', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Job', 'terminated', 'with', 'anomalous', 'status', '""']",0
PigServer.java,"['+', 'job', '.', 'getStatus', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1066', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'open', 'iterator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(', 'String', 'id', ',', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['return', 'store', '(', 'id', ',', 'filename', ',', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';', '/', '/', 'SFPig', 'is', 'the', 'default', 'store', 'function']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(']",0
PigServer.java,"['String', 'id', ',']",0
PigServer.java,"['String', 'filename', ',']",0
PigServer.java,"['String', 'func', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', '!', 'aliasOp', '.', 'containsKey', '(', 'id', ')', ')']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'alias', ':', '""', '+', 'id', ')', ';']",0
PigServer.java,"['LogicalPlan', 'readFrom', '=', 'getPlanFromAlias', '(', 'id', ',', '""', 'store', '""', ')', ';']",0
PigServer.java,"['return', 'store', '(', 'id', ',', 'readFrom', ',', 'filename', ',', 'func', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
PigServer.java,"['public', 'ExecJob', 'store', '(']",0
PigServer.java,"['String', 'id', ',']",0
PigServer.java,"['LogicalPlan', 'readFrom', ',']",0
PigServer.java,"['String', 'filename', ',']",0
PigServer.java,"['String', 'func', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'id', ')', ';']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaf', 'to', 'which', 'the', 'store', 'needs', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'id', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['LogicalPlan', 'storePlan', '=', 'QueryParser', '.', 'generateStorePlan', '(', 'scope', ',', 'lp', ',', 'filename', ',', 'func', ',', 'leaf', ')', ';']",0
PigServer.java,"['return', 'executeCompiledLogicalPlan', '(', 'storePlan', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'explain', '(', 'String', 'alias', ',']",0
PigServer.java,"['PrintStream', 'stream', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaf', 'to', 'which', 'the', 'store', 'needs', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'alias', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['LogicalPlan', 'storePlan', '=', 'QueryParser', '.', 'generateStorePlan', '(']",0
PigServer.java,"['scope', ',', 'lp', ',', '""', 'fakefile', '""', ',', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ',', 'leaf', ')', ';']",0
PigServer.java,"['stream', '.', 'println', '(', '""', 'Logical', 'Plan', ':', '""', ')', ';']",0
PigServer.java,"['LOPrinter', 'lv', '=', 'new', 'LOPrinter', '(', 'stream', ',', 'storePlan', ')', ';']",0
PigServer.java,"['lv', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'storePlan', ')', ';']",0
PigServer.java,"['stream', '.', 'println', '(', '""', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
PigServer.java,"['stream', '.', 'println', '(', '""', 'Physical', 'Plan', ':', '""', ')', ';']",0
PigServer.java,"['stream', '.', 'println', '(', '""', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
PigServer.java,"['pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'explain', '(', 'pp', ',', 'stream', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1067', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'explain', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'capacity', '(', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'getExecType', '(', ')', '=', '=', 'ExecType', '.', 'LOCAL', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'capacity', 'only', 'supported', 'for', 'non', '-', 'local', 'execution', '""', ')', ';']",0
PigServer.java,"['DataStorage', 'dds', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'dds', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['String', 'rawCapacityStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_CAPACITY_KEY', ')', ';']",0
PigServer.java,"['String', 'rawUsedStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_USED_KEY', ')', ';']",0
PigServer.java,"['if', '(', '(', 'rawCapacityStr', '=', '=', 'null', ')', '|', '|', '(', 'rawUsedStr', '=', '=', 'null', ')', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Failed', 'to', 'retrieve', 'capacity', 'stats', '""', ')', ';']",0
PigServer.java,"['long', 'rawCapacityBytes', '=', 'new', 'Long', '(', 'rawCapacityStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['long', 'rawUsedBytes', '=', 'new', 'Long', '(', 'rawUsedStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['return', 'rawCapacityBytes', '-', 'rawUsedBytes', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'fileSize', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['DataStorage', 'dfs', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'dfs', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['long', 'length', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
PigServer.java,"['int', 'replication', '=', '(', 'Short', ')', 'stats']",0
PigServer.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
PigServer.java,"['return', 'length', '*', 'replication', ';']",0
PigServer.java,"['public', 'boolean', 'existsFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['return', 'elem', '.', 'exists', '(', ')', ';']",0
PigServer.java,"['public', 'boolean', 'deleteFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['elem', '.', 'delete', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'renameFile', '(', 'String', 'source', ',', 'String', 'target', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['pigContext', '.', 'rename', '(', 'source', ',', 'target', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'mkdirs', '(', 'String', 'dirs', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dirs', ')', ';']",0
PigServer.java,"['container', '.', 'create', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'String', '[', ']', 'listPaths', '(', 'String', 'dir', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Collection', '<', 'String', '>', 'allPaths', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dir', ')', ';']",0
PigServer.java,"['Iterator', '<', 'ElementDescriptor', '>', 'iter', '=', 'container', '.', 'iterator', '(', ')', ';']",0
PigServer.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'iter', '.', 'next', '(', ')', ';']",0
PigServer.java,"['allPaths', '.', 'add', '(', 'elem', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['return', '(', 'String', '[', ']', ')', '(', 'allPaths', '.', 'toArray', '(', ')', ')', ';']",0
PigServer.java,"['public', 'long', 'totalHadoopTimeSpent', '(', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'FIX', 'Need', 'to', 'uncomment', 'this', 'with', 'the', 'right', 'logic']",0
PigServer.java,"['/', '/', 'return', 'MapReduceLauncher', '.', 'totalHadoopTimeSpent', ';']",0
PigServer.java,"['return', '0L', ';']",0
PigServer.java,"['public', 'Map', '<', 'String', ',', 'LogicalPlan', '>', 'getAliases', '(', ')', '{']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalPlan', '>', 'aliasPlans', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'op', ':', 'this', '.', 'aliases', '.', 'keySet', '(', ')', ')', '{']",0
PigServer.java,"['String', 'alias', '=', 'op', '.', 'getAlias', '(', ')', ';']",0
PigServer.java,"['if', '(', 'null', '!', '=', 'alias', ')', '{']",0
PigServer.java,"['aliasPlans', '.', 'put', '(', 'alias', ',', 'this', '.', 'aliases', '.', 'get', '(', 'op', ')', ')', ';']",0
PigServer.java,"['return', 'aliasPlans', ';']",0
PigServer.java,"['public', 'void', 'shutdown', '(', ')', '{']",0
PigServer.java,"['/', '/', 'clean', '-', 'up', 'activities']",0
PigServer.java,"['/', '/', 'TODO', ':', 'reclaim', 'scope', 'to', 'free', 'up', 'resources', '.', 'Currently']",0
PigServer.java,"['/', '/', 'this', 'is', 'not', 'implemented', 'and', 'throws', 'an', 'exception']",0
PigServer.java,"['/', '/', 'hence', ',', 'for', 'now', ',', 'we', 'won', ""'"", 't', 'call', 'it', '.']",0
PigServer.java,"['/', '/', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'reclaimScope', '(', 'this', '.', 'scope', ')', ';']",0
PigServer.java,"['public', 'Map', '<', 'LogicalOperator', ',', 'DataBag', '>', 'getExamples', '(', 'String', 'alias', ')', '{']",0
PigServer.java,"['/', '/', 'LogicalPlan', 'plan', '=', 'aliases', '.', 'get', '(', 'aliasOp', '.', 'get', '(', 'alias', ')', ')', ';']",0
PigServer.java,"['LogicalPlan', 'plan', '=', 'null', ';']",0
PigServer.java,"['plan', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'Since', 'the', 'original', 'script', 'is', 'parsed', 'anyway', ',', 'there', 'should', 'not', 'be', 'an']",0
PigServer.java,"['/', '/', 'error', 'in', 'this', 'parsing', '.', 'The', 'only', 'reason', 'there', 'can', 'be', 'an', 'error', 'is', 'when']",0
PigServer.java,"['/', '/', 'the', 'files', 'being', 'loaded', 'in', 'load', 'don', ""'"", 't', 'exist', 'anymore', '.']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['ExampleGenerator', 'exgen', '=', 'new', 'ExampleGenerator', '(', 'plan', ',', 'pigContext', ')', ';']",0
PigServer.java,"['return', 'exgen', '.', 'getExamples', '(', ')', ';']",0
PigServer.java,"['private', 'ExecJob', 'execute', '(', 'String', 'alias', ')', 'throws', 'FrontendException', ',', 'ExecException', '{']",0
PigServer.java,"['ExecJob', 'job', '=', 'null', ';']",0
PigServer.java,"['/', '/', 'lp', '.', 'explain', '(', 'System', '.', 'out', ',', 'System', '.', 'err', ')', ';']",0
PigServer.java,"['LogicalPlan', 'typeCheckedLp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['return', 'executeCompiledLogicalPlan', '(', 'typeCheckedLp', ')', ';']",0
PigServer.java,"['/', '/', 'typeCheckedLp', '.', 'explain', '(', 'System', '.', 'out', ',', 'System', '.', 'err', ')', ';']",0
PigServer.java,"['private', 'ExecJob', 'executeCompiledLogicalPlan', '(', 'LogicalPlan', 'compiledLp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'compiledLp', ')', ';']",0
PigServer.java,"['/', '/', 'execute', 'using', 'appropriate', 'engine']",0
PigServer.java,"['FileLocalizer', '.', 'clearDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['ExecJob', 'execJob', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'execute', '(', 'pp', ',', '""', 'execute', '""', ')', ';']",0
PigServer.java,"['if', '(', 'execJob', '.', 'getStatus', '(', ')', '=', '=', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ')']",0
PigServer.java,"['FileLocalizer', '.', 'triggerDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['return', 'execJob', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['return', 'compileLp', '(', 'alias', ',', 'true', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['boolean', 'optimize', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['/', '/', 'create', 'a', 'clone', 'of', 'the', 'logical', 'plan', 'and', 'give', 'it']",0
PigServer.java,"['/', '/', 'to', 'the', 'operations', 'below']",0
PigServer.java,"['LogicalPlan', 'lpClone', ';']",0
PigServer.java,"['lpClone', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'clone', 'plan', 'before', 'compiling', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
PigServer.java,"['/', '/', 'Set', 'the', 'logical', 'plan', 'values', 'correctly', 'in', 'all', 'the', 'operators']",0
PigServer.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'lpClone', ')', ';']",0
PigServer.java,"['ps', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['/', '/', '(', 'new', 'SplitIntroducer', '(', 'lp', ')', ')', '.', 'introduceImplSplits', '(', ')', ';']",0
PigServer.java,"['/', '/', 'run', 'through', 'validator']",0
PigServer.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
PigServer.java,"['FrontendException', 'caught', '=', 'null', ';']",0
PigServer.java,"['LogicalPlanValidationExecutor', 'validator', '=']",0
PigServer.java,"['new', 'LogicalPlanValidationExecutor', '(', 'lpClone', ',', 'pigContext', ')', ';']",0
PigServer.java,"['validator', '.', 'validate', '(', 'lpClone', ',', 'collector', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
PigServer.java,"['/', '/', 'Need', 'to', 'go', 'through', 'and', 'see', 'what', 'the', 'collector', 'has', 'in', 'it', '.', 'But']",0
PigServer.java,"['/', '/', 'remember', 'what', 'we', ""'"", 've', 'caught', 'so', 'we', 'can', 'wrap', 'it', 'into', 'what', 'we']",0
PigServer.java,"['/', '/', 'throw', '.']",0
PigServer.java,"['caught', '=', 'fe', ';']",0
PigServer.java,"['if', '(', 'aggregateWarning', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logMessages', '(', 'collector', ',', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Enum', 'type', ':', 'MessageType', '.', 'values', '(', ')', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logAllMessages', '(', 'collector', ',', 'log', ')', ';']",0
PigServer.java,"['if', '(', 'caught', '!', '=', 'null', ')', '{']",0
PigServer.java,"['throw', 'caught', ';']",0
PigServer.java,"['/', '/', 'optimize']",0
PigServer.java,"['if', '(', 'optimize', ')', '{']",0
PigServer.java,"['/', '/', 'LogicalOptimizer', 'optimizer', '=', 'new', 'LogicalOptimizer', '(', 'lpClone', ')', ';']",0
PigServer.java,"['LogicalOptimizer', 'optimizer', '=', 'new', 'LogicalOptimizer', '(', 'lpClone', ',', 'pigContext', '.', 'getExecType', '(', ')', ')', ';']",0
PigServer.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
PigServer.java,"['return', 'lpClone', ';']",0
PigServer.java,"['private', 'PhysicalPlan', 'compilePp', '(', 'LogicalPlan', 'lp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['/', '/', 'translate', 'lp', 'to', 'physical', 'plan']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'compile', '(', 'lp', ',', 'null', ')', ';']",0
PigServer.java,"['/', '/', 'TODO', 'optimize']",0
PigServer.java,"['return', 'pp', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'getPlanFromAlias', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['String', 'operation', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['LogicalOperator', 'lo', '=', 'aliasOp', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'lo', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1004', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'alias', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'aliases', '.', 'get', '(', 'lo', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1005', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'plan', 'for', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['return', 'lp', ';']",0
GruntParser.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'Reader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorageException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParser', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParserTokenManager', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
GruntParser.java,"['public', 'class', 'GruntParser', 'extends', 'PigScriptParser', '{']",0
GruntParser.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'Reader', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ',', 'String', 'encoding', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ',', 'encoding', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'PigScriptParserTokenManager', 'tm', ')', '{']",0
GruntParser.java,"['super', '(', 'tm', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['private', 'void', 'init', '(', ')', '{']",0
GruntParser.java,"['/', '/', 'nothing', ',', 'for', 'now', '.']",0
GruntParser.java,"['public', 'void', 'parseStopOnError', '(', ')', 'throws', 'IOException', ',', 'ParseException']",0
GruntParser.java,"['prompt', '(', ')', ';']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['while', '(', '!', 'mDone', ')', '{']",0
GruntParser.java,"['parse', '(', ')', ';']",0
GruntParser.java,"['public', 'void', 'parseContOnError', '(', ')']",0
GruntParser.java,"['prompt', '(', ')', ';']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['while', '(', '!', 'mDone', ')', '{']",0
GruntParser.java,"['parse', '(', ')', ';']",0
GruntParser.java,"['catch', '(', 'Exception', 'e', ')']",0
GruntParser.java,"['Exception', 'pe', '=', 'LogUtils', '.', 'getPermissionException', '(', 'e', ')', ';']",0
GruntParser.java,"['if', '(', 'pe', '!', '=', 'null', ')']",0
GruntParser.java,"['log', '.', 'error', '(', '""', 'You', 'don', ""'"", 't', 'have', 'permission', 'to', 'perform', 'the', 'operation', '.', 'Error', 'from', 'the', 'server', ':', '""', '+', 'pe', '.', 'getMessage', '(', ')', ')', ';']",1
GruntParser.java,"['ByteArrayOutputStream', 'bs', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",1
GruntParser.java,"['e', '.', 'printStackTrace', '(', 'new', 'PrintStream', '(', 'bs', ')', ')', ';']",0
GruntParser.java,"['log', '.', 'error', '(', 'bs', '.', 'toString', '(', ')', ')', ';']",1
GruntParser.java,"['/', '/', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
GruntParser.java,"['/', '/', 'log', '.', 'error', '(', 'e', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'Error', 'e', ')', '{']",0
GruntParser.java,"['log', '.', 'error', '(', 'e', ')', ';']",0
GruntParser.java,"['public', 'void', 'setParams', '(', 'PigServer', 'pigServer', ')']",0
GruntParser.java,"['mPigServer', '=', 'pigServer', ';']",0
GruntParser.java,"['mDfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ';']",0
GruntParser.java,"['mLfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLfs', '(', ')', ';']",0
GruntParser.java,"['mConf', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', ';']",0
GruntParser.java,"['/', '/', 'TODO', ':', 'this', 'violates', 'the', 'abstraction', 'layer', 'decoupling', 'between']",0
GruntParser.java,"['/', '/', 'front', 'end', 'and', 'back', 'end', 'and', 'needs', 'to', 'be', 'changed', '.']",0
GruntParser.java,"['/', '/', 'Right', 'now', 'I', 'am', 'not', 'clear', 'on', 'how', 'the', 'Job', 'Id', 'comes', 'from', 'to', 'tell']",0
GruntParser.java,"['/', '/', 'the', 'back', 'end', 'to', 'kill', 'a', 'given', 'job', '(', 'mJobClient', 'is', 'used', 'only', 'in']",0
GruntParser.java,"['/', '/', 'processKill', ')']",0
GruntParser.java,"['ExecutionEngine', 'execEngine', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getExecutionEngine', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'execEngine', 'instanceof', 'HExecutionEngine', ')', '{']",0
GruntParser.java,"['mJobClient', '=', '(', '(', 'HExecutionEngine', ')', 'execEngine', ')', '.', 'getJobClient', '(', ')', ';']",0
GruntParser.java,"['mJobClient', '=', 'null', ';']",0
GruntParser.java,"['public', 'void', 'prompt', '(', ')']",0
GruntParser.java,"['if', '(', 'mInteractive', ')']",0
GruntParser.java,"['/', '*', 'System', '.', 'err', '.', 'print', '(', '""', 'grunt', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'err', '.', 'flush', '(', ')', ';', '*', '/']",0
GruntParser.java,"['mConsoleReader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'quit', '(', ')']",0
GruntParser.java,"['mDone', '=', 'true', ';']",0
GruntParser.java,"['protected', 'void', 'processDescribe', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'alias', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['alias', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLastAlias', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'dumpSchema', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printAliases', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'printAliases', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processExplain', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'alias', ',', 'System', '.', 'out', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRegister', '(', 'String', 'jar', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'registerJar', '(', 'jar', ')', ';']",0
GruntParser.java,"['private', 'String', 'runPreprocessor', '(', 'String', 'script', ',', 'ArrayList', '<', 'String', '>', 'params', ',']",0
GruntParser.java,"['ArrayList', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
GruntParser.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
GruntParser.java,"['psp', '.', 'genSubstitutedFile', '(', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'script', ')', ')', ',']",0
GruntParser.java,"['params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ',']",0
GruntParser.java,"['files', '.', 'size', '(', ')', '>', '0', '?', 'files', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', 'pex', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', 'pex', '.', 'getMessage', '(', ')', ')', ';']",0
GruntParser.java,"['return', 'writer', '.', 'toString', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processScript', '(', 'String', 'script', ',', 'boolean', 'batch', ',']",0
GruntParser.java,"['ArrayList', '<', 'String', '>', 'params', ',', 'ArrayList', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['Reader', 'inputReader', ';']",0
GruntParser.java,"['ConsoleReader', 'reader', ';']",0
GruntParser.java,"['boolean', 'interactive', ';']",0
GruntParser.java,"['String', 'cmds', '=', 'runPreprocessor', '(', 'script', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['if', '(', 'mInteractive', '&', '&', '!', 'batch', ')', '{', '/', '/', 'Write', 'prompt', 'and', 'echo', 'commands']",0
GruntParser.java,"['reader', '=', 'new', 'ConsoleReader', '(', 'new', 'ByteArrayInputStream', '(', 'cmds', '.', 'getBytes', '(', ')', ')', ',']",0
GruntParser.java,"['new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
GruntParser.java,"['reader', '.', 'setHistory', '(', 'mConsoleReader', '.', 'getHistory', '(', ')', ')', ';']",0
GruntParser.java,"['InputStream', 'in', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
GruntParser.java,"['inputReader', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'in', ')', ')', ';']",0
GruntParser.java,"['interactive', '=', 'true', ';']",0
GruntParser.java,"['}', 'else', '{', '/', '/', 'Quietly', 'parse', 'the', 'statements']",0
GruntParser.java,"['inputReader', '=', 'new', 'StringReader', '(', 'cmds', ')', ';']",0
GruntParser.java,"['reader', '=', 'null', ';']",0
GruntParser.java,"['interactive', '=', 'false', ';']",0
GruntParser.java,"['}', 'catch', '(', 'FileNotFoundException', 'fnfe', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'File', 'not', 'found', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'SecurityException', 'se', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Cannot', 'access', 'file', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['/', '/', 'In', 'batch', 'mode', ':', 'Use', 'a', 'new', 'server', 'to', 'avoid', 'side', '-', 'effects', '(', 'handles', ',', 'etc', ')']",0
GruntParser.java,"['PigServer', 'pigServer', '=', 'batch', '?']",0
GruntParser.java,"['new', 'PigServer', '(', 'mPigServer', '.', 'getPigContext', '(', ')', ',', 'false', ')', ':', 'mPigServer', ';']",0
GruntParser.java,"['GruntParser', 'parser', '=', 'new', 'GruntParser', '(', 'inputReader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setParams', '(', 'pigServer', ')', ';']",0
GruntParser.java,"['parser', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setInteractive', '(', 'interactive', ')', ';']",0
GruntParser.java,"['parser', '.', 'parseStopOnError', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'interactive', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processSet', '(', 'String', 'key', ',', 'String', 'value', ')', 'throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'key', '.', 'equals', '(', '""', 'debug', '""', ')', ')']",0
GruntParser.java,"['if', '(', 'value', '.', 'equals', '(', '""', 'on', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'on', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOn', '(', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'value', '.', 'equals', '(', '""', 'off', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'off', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOff', '(', ')', ';']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Invalid', 'value', '""', '+', 'value', '+', '""', 'provided', 'for', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'job', '.', 'name', '""', ')', ')']",0
GruntParser.java,"['/', '/', 'mPigServer', '.', 'setJobName', '(', 'unquote', '(', 'value', ')', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'setJobName', '(', 'value', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'stream', '.', 'skippath', '""', ')', ')', '{']",0
GruntParser.java,"['/', '/', 'Validate']",0
GruntParser.java,"['File', 'file', '=', 'new', 'File', '(', 'value', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'file', '.', 'exists', '(', ')', '|', '|', 'file', '.', 'isDirectory', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'value', 'for', 'stream', '.', 'skippath', ':', '""', '+']",0
GruntParser.java,"['value', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'addPathToSkip', '(', 'value', ')', ';']",0
GruntParser.java,"['/', '/', 'other', 'key', '-', 'value', 'pairs', 'can', 'go', 'there']",0
GruntParser.java,"['/', '/', 'for', 'now', 'just', 'throw', 'exception', 'since', 'we', 'don', ""'"", 't', 'support']",0
GruntParser.java,"['/', '/', 'anything', 'else']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Unrecognized', 'set', 'key', ':', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCat', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['byte', 'buffer', '[', ']', '=', 'new', 'byte', '[', '65536', ']', ';']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['int', 'rc', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'dfsDir', '=', '(', 'ContainerDescriptor', ')', 'dfsPath', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'paths', '=', 'dfsDir', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'paths', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'paths', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['InputStream', 'is', '=', 'curElem', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['InputStream', 'is', '=', 'dfsPath', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'Cat', ':', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCD', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'container', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'container', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', 'path', '+', '""', 'is', 'not', 'a', 'directory', '.', '""', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'change', 'working', 'directory', 'to', '""', '+']",0
GruntParser.java,"['(', '(', 'path', '=', '=', 'null', ')', '?', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')']",0
GruntParser.java,"[':', '(', 'path', ')', ')', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processDump', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['Iterator', 'result', '=', 'mPigServer', '.', 'openIterator', '(', 'alias', ')', ';']",0
GruntParser.java,"['while', '(', 'result', '.', 'hasNext', '(', ')', ')']",0
GruntParser.java,"['Tuple', 't', '=', '(', 'Tuple', ')', 'result', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 't', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processIllustrate', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['mPigServer', '.', 'getExamples', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processKill', '(', 'String', 'jobid', ')', 'throws', 'IOException']",0
GruntParser.java,"['if', '(', 'mJobClient', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['JobID', 'id', '=', 'JobID', '.', 'forName', '(', 'jobid', ')', ';']",0
GruntParser.java,"['RunningJob', 'job', '=', 'mJobClient', '.', 'getJob', '(', 'id', ')', ';']",0
GruntParser.java,"['if', '(', 'job', '=', '=', 'null', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', 'with', 'id', '""', '+', 'jobid', '+', '""', 'is', 'not', 'active', '""', ')', ';']",0
GruntParser.java,"['job', '.', 'killJob', '(', ')', ';']",0
GruntParser.java,"['log', '.', 'error', '(', '""', 'kill', 'submited', '.', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processLS', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'pathDescriptor', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'getActiveContainer', '(', ')', ';']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'pathDescriptor', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'pathDescriptor', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'container', '=', '(', 'ContainerDescriptor', ')', 'pathDescriptor', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'elems', '=', 'container', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'elems', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'elems', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'curElem', '.', 'toString', '(', ')', '+', '""', '\\', 't', '<', 'dir', '>', '""', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",1
GruntParser.java,"['printLengthAndReplication', '(', 'curElem', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['printLengthAndReplication', '(', 'pathDescriptor', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'LS', 'on', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['private', 'void', 'printLengthAndReplication', '(', 'ElementDescriptor', 'elem', ')']",0
GruntParser.java,"['throws', 'IOException', '{']",0
GruntParser.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
GruntParser.java,"['long', 'replication', '=', '(', 'Short', ')', 'stats']",0
GruntParser.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
GruntParser.java,"['long', 'len', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'elem', '.', 'toString', '(', ')', '+', '""', '<', 'r', '""', '+', 'replication', '+', '""', '>', '\\', 't', '""', '+', 'len', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPWD', '(', ')', 'throws', 'IOException']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'mDfs', '.', 'getActiveContainer', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printHelp', '(', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Commands', ':', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '<', 'pig', 'latin', 'statement', '>', ';', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'store', '<', 'alias', '>', 'into', '<', 'filename', '>', '[', 'using', '<', 'functionSpec', '>', ']', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'dump', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'describe', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'kill', '<', 'job_id', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'ls', '<', 'path', '>', '\\', 'r', '\\', 'ndu', '<', 'path', '>', '\\', 'r', '\\', 'nmv', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncp', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'nrm', '<', 'src', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'copyFromLocal', '<', 'localsrc', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncd', '<', 'dir', '>', '\\', 'r', '\\', 'npwd', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cat', '<', 'src', '>', '\\', 'r', '\\', 'ncopyToLocal', '<', 'src', '>', '<', 'localdst', '>', '\\', 'r', '\\', 'nmkdir', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cd', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'define', '<', 'functionAlias', '>', '<', 'functionSpec', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'register', '<', 'udfJar', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'set', 'key', 'value', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'quit', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMove', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'srcPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'src', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'rename', '(', 'dstPath', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'move', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopy', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'mConf', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyToLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mLfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '(', 'locally', ')', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyFromLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mLfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '(', 'loally', ')', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMkdir', '(', 'String', 'dir', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'dirDescriptor', '=', 'mDfs', '.', 'asContainer', '(', 'dir', ')', ';']",0
GruntParser.java,"['dirDescriptor', '.', 'create', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPig', '(', 'String', 'cmd', ')', 'throws', 'IOException']",0
GruntParser.java,"['int', 'start', '=', '1', ';']",0
GruntParser.java,"['if', '(', '!', 'mInteractive', ')']",0
GruntParser.java,"['start', '=', 'getLineNumber', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'cmd', '.', 'charAt', '(', 'cmd', '.', 'length', '(', ')', '-', '1', ')', '!', '=', ""'"", ';', ""'"", ')']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', '+', '""', ';', '""', ',', 'start', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', ',', 'start', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRemove', '(', 'String', 'path', ',', 'String', 'options', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'options', '=', '=', 'null', '|', '|', '!', 'options', '.', 'equalsIgnoreCase', '(', '""', 'force', '""', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['dfsPath', '.', 'delete', '(', ')', ';']",0
GruntParser.java,"['private', 'PigServer', 'mPigServer', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mDfs', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mLfs', ';']",0
GruntParser.java,"['private', 'Properties', 'mConf', ';']",0
GruntParser.java,"['private', 'JobClient', 'mJobClient', ';']",0
GruntParser.java,"['private', 'boolean', 'mDone', ';']",0
Utf8StorageConverter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PigLogger', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'ParseException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'TextDataParser', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Utf8StorageConverter.java,"['/', '*', '*']",0
Utf8StorageConverter.java,"['abstract', 'public', 'class', 'Utf8StorageConverter', '{']",0
Utf8StorageConverter.java,"['protected', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Integer', 'mMaxInt', '=', 'new', 'Integer', '(', 'Integer', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Long', 'mMaxLong', '=', 'new', 'Long', '(', 'Long', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'TextDataParser', 'dataParser', '=', 'null', ';']",0
Utf8StorageConverter.java,"['private', 'PigLogger', 'pigLogger', '=', 'PhysicalOperator', '.', 'getPigLogger', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Utf8StorageConverter', '(', ')', '{']",0
Utf8StorageConverter.java,"['private', 'Object', 'parseFromBytes', '(', 'byte', '[', ']', 'b', ')', 'throws', 'ParseException', '{']",0
Utf8StorageConverter.java,"['ByteArrayInputStream', 'in', '=', 'new', 'ByteArrayInputStream', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['if', '(', 'dataParser', '=', '=', 'null', ')', '{']",0
Utf8StorageConverter.java,"['dataParser', '=', 'new', 'TextDataParser', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['}', 'else', '{']",1
Utf8StorageConverter.java,"['dataParser', '.', 'ReInit', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['return', 'dataParser', '.', 'Parse', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['DataBag', 'db', ';']",0
Utf8StorageConverter.java,"['db', '=', '(', 'DataBag', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'ParseException', 'pe', ')', '{']",1
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', '(', 'DataBag', ')', 'db', ';']",0
Utf8StorageConverter.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'String', '(', 'b', ',', '""', 'UTF', '-', '8', '""', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'Double', '.', 'valueOf', '(', 'new', 'String', '(', 'b', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'double', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'F', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'f', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Float', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'float', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Integer', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Integer', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'int', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxInt', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Integer', '(', 'd', '.', 'intValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'int', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'L', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'l', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Long', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Long', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'long', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxLong', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Long', '(', 'd', '.', 'longValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'long', ',', 'caught', 'NumberFormatException', '<', '""', '+']",1
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'map', ';']",0
Utf8StorageConverter.java,"['map', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'map', ';']",0
Utf8StorageConverter.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",1
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Tuple', 't', ';']",0
Utf8StorageConverter.java,"['t', '=', '(', 'Tuple', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 't', ';']",1
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'bag', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 's', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'd', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'f', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'i', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'l', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'DataType', '.', 'mapToString', '(', 'm', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 't', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Launcher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Matcher', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Pattern', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskReport', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HConfiguration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Launcher.java,"['public', 'abstract', 'class', 'Launcher', '{']",0
Launcher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Launcher', '.', 'class', ')', ';']",0
Launcher.java,"['long', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['String', 'newLine', '=', '""', '\\', 'n', '""', ';']",0
Launcher.java,"['boolean', 'pigException', '=', 'false', ';']",0
Launcher.java,"['boolean', 'outOfMemory', '=', 'false', ';']",0
Launcher.java,"['final', 'String', 'OOM_ERR', '=', '""', 'OutOfMemoryError', '""', ';']",0
Launcher.java,"['protected', 'Launcher', '(', ')', '{']",0
Launcher.java,"['totalHadoopTimeSpent', '=', '0', ';']",0
Launcher.java,"['/', '/', 'handle', 'the', 'windows', 'portion', 'of', '\\', 'r']",0
Launcher.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')', '{']",0
Launcher.java,"['newLine', '=', '""', '\\', 'r', '\\', 'n', '""', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'boolean', 'launchPig', '(', 'PhysicalPlan', 'php', ',', 'String', 'grpName', ',', 'PigContext', 'pc', ')']",0
Launcher.java,"['throws', 'PlanException', ',', 'VisitorException', ',', 'IOException', ',', 'ExecException', ',']",0
Launcher.java,"['JobCreationException', ',', 'Exception', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'void', 'explain', '(']",0
Launcher.java,"['PhysicalPlan', 'pp', ',']",0
Launcher.java,"['PigContext', 'pc', ',']",0
Launcher.java,"['PrintStream', 'ps', ')', 'throws', 'PlanException', ',']",0
Launcher.java,"['protected', 'boolean', 'isComplete', '(', 'double', 'prog', ')', '{']",0
Launcher.java,"['return', '(', 'int', ')', '(', 'Math', '.', 'ceil', '(', 'prog', ')', ')', '=', '=', '(', 'int', ')', '1', ';']",0
Launcher.java,"['protected', 'void', 'getStats', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['JobID', 'MRJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['String', 'jobMessage', '=', 'job', '.', 'getMessage', '(', ')', ';']",0
Launcher.java,"['if', '(', 'MRJobID', '=', '=', 'null', ')', '{']",0
Launcher.java,"['throw', 'getExceptionFromString', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Launcher.java,"['/', '/', 'just', 'get', 'the', 'first', 'line', 'in', 'the', 'message', 'and', 'log', 'the', 'rest']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'jobMessage', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backend', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'mapRep', '=', 'jobClient', '.', 'getMapTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'mapRep', ',', '""', 'map', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'redRep', '=', 'jobClient', '.', 'getReduceTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'redRep', ',', '""', 'reduce', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Launcher.java,"['if', '(', 'job', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'job', 'succeeded', ',', 'let', 'the', 'user', 'know', 'that']",0
Launcher.java,"['/', '/', 'we', 'were', 'unable', 'to', 'get', 'statistics']",0
Launcher.java,"['log', '.', 'warn', '(', '""', 'Unable', 'to', 'get', 'job', 'related', 'diagnostics', '""', ')', ';']",0
Launcher.java,"['}', 'else', '{']",1
Launcher.java,"['throw', 'e', ';']",1
Launcher.java,"['protected', 'long', 'computeTimeSpent', '(', 'TaskReport', '[', ']', 'mapReports', ')', '{']",0
Launcher.java,"['long', 'timeSpent', '=', '0', ';']",0
Launcher.java,"['for', '(', 'TaskReport', 'r', ':', 'mapReports', ')', '{']",0
Launcher.java,"['timeSpent', '+', '=', '(', 'r', '.', 'getFinishTime', '(', ')', '-', 'r', '.', 'getStartTime', '(', ')', ')', ';']",0
Launcher.java,"['return', 'timeSpent', ';']",0
Launcher.java,"['protected', 'void', 'getErrorMessages', '(', 'TaskReport', 'reports', '[', ']', ',', 'String', 'type', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'reports', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Launcher.java,"['String', 'msgs', '[', ']', '=', 'reports', '[', 'i', ']', '.', 'getDiagnostics', '(', ')', ';']",0
Launcher.java,"['ArrayList', '<', 'Exception', '>', 'exceptions', '=', 'new', 'ArrayList', '<', 'Exception', '>', '(', ')', ';']",0
Launcher.java,"['boolean', 'jobFailed', '=', 'false', ';']",0
Launcher.java,"['float', 'successfulProgress', '=', '1', '.', '0f', ';']",0
Launcher.java,"['if', '(', 'msgs', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'progress', 'reported', 'is', 'not', '1', '.', '0f', 'then', 'the', 'map', 'or', 'reduce', 'job', 'failed']",0
Launcher.java,"['/', '/', 'this', 'comparison', 'is', 'in', 'place', 'till', 'Hadoop', '0', '.', '20', 'provides', 'methods', 'to', 'query']",0
Launcher.java,"['/', '/', 'job', 'status']",0
Launcher.java,"['if', '(', 'reports', '[', 'i', ']', '.', 'getProgress', '(', ')', '!', '=', 'successfulProgress', ')', '{']",0
Launcher.java,"['jobFailed', '=', 'true', ';']",0
Launcher.java,"['Set', '<', 'String', '>', 'errorMessageSet', '=', 'new', 'HashSet', '<', 'String', '>', '(', ')', ';']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'msgs', '.', 'length', ';', 'j', '+', '+', ')', '{']",0
Launcher.java,"['if', '(', '!', 'errorMessageSet', '.', 'contains', '(', 'msgs', '[', 'j', ']', ')', ')', '{']",0
Launcher.java,"['errorMessageSet', '.', 'add', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['if', '(', 'errNotDbg', ')', '{']",0
Launcher.java,"['/', '/', 'errNotDbg', 'is', 'used', 'only', 'for', 'failed', 'jobs']",0
Launcher.java,"['/', '/', 'keep', 'track', 'of', 'all', 'the', 'unique', 'exceptions']",0
Launcher.java,"['Exception', 'e', '=', 'getExceptionFromString', '(', 'msgs', '[', 'j', ']', ')', ';']",1
Launcher.java,"['exceptions', '.', 'add', '(', 'e', ')', ';']",1
Launcher.java,"['}', 'catch', '(', 'Exception', 'e1', ')', '{']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'msgs', '[', 'j', ']', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backed', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['log', '.', 'debug', '(', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+']",0
Launcher.java,"['reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', '+', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['/', '/', 'if', 'its', 'a', 'failed', 'job', 'then', 'check', 'if', 'there', 'is', 'more', 'than', 'one', 'exception']",0
Launcher.java,"['/', '/', 'more', 'than', 'one', 'exception', 'implies', 'possibly', 'different', 'kinds', 'of', 'failures']",0
Launcher.java,"['/', '/', 'log', 'all', 'the', 'different', 'failures', 'and', 'throw', 'the', 'exception', 'corresponding']",0
Launcher.java,"['/', '/', 'to', 'the', 'first', 'failure']",0
Launcher.java,"['if', '(', 'jobFailed', ')', '{']",0
Launcher.java,"['if', '(', 'exceptions', '.', 'size', '(', ')', '>', '1', ')', '{']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'exceptions', '.', 'size', '(', ')', ';', '+', '+', 'j', ')', '{']",0
Launcher.java,"['String', 'headerMessage', '=', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+', 'reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'exceptions', '.', 'get', '(', 'j', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'false', ',', 'headerMessage', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', 'if', '(', 'exceptions', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2115', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Expected', 'to', 'throw', 'exception', 'from', 'the', 'backend', '.', 'Did', 'not', 'find', 'any', 'exception', 'to', 'throw', '.', '""', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",1
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'calculateProgress', '(', 'JobControl', 'jc', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['double', 'prog', '=', '0', '.', '0', ';']",0
Launcher.java,"['prog', '+', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', '.', 'size', '(', ')', ';']",0
Launcher.java,"['List', 'runnJobs', '=', 'jc', '.', 'getRunningJobs', '(', ')', ';']",0
Launcher.java,"['for', '(', 'Object', 'object', ':', 'runnJobs', ')', '{']",0
Launcher.java,"['Job', 'j', '=', '(', 'Job', ')', 'object', ';']",0
Launcher.java,"['prog', '+', '=', 'progressOfRunningJob', '(', 'j', ',', 'jobClient', ')', ';']",0
Launcher.java,"['return', 'prog', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'progressOfRunningJob', '(', 'Job', 'j', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['JobID', 'mrJobID', '=', 'j', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['RunningJob', 'rj', '=', 'jobClient', '.', 'getJob', '(', 'mrJobID', ')', ';']",0
Launcher.java,"['if', '(', 'rj', '=', '=', 'null', '&', '&', 'j', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')']",0
Launcher.java,"['return', '1', ';']",0
Launcher.java,"['else', 'if', '(', 'rj', '=', '=', 'null', ')']",0
Launcher.java,"['return', '0', ';']",0
Launcher.java,"['double', 'mapProg', '=', 'rj', '.', 'mapProgress', '(', ')', ';']",0
Launcher.java,"['double', 'redProg', '=', 'rj', '.', 'reduceProgress', '(', ')', ';']",0
Launcher.java,"['return', '(', 'mapProg', '+', 'redProg', ')', '/', '2', ';']",0
Launcher.java,"['public', 'long', 'getTotalHadoopTimeSpent', '(', ')', '{']",0
Launcher.java,"['return', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['Exception', 'getExceptionFromString', '(', 'String', 'stackTrace', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'lines', '=', 'stackTrace', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['Throwable', 't', '=', 'getExceptionFromStrings', '(', 'lines', ',', '0', ')', ';']",0
Launcher.java,"['if', '(', '!', 'pigException', ')', '{']",0
Launcher.java,"['int', 'errCode', '=', '6015', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'During', 'execution', ',', 'encountered', 'a', 'Hadoop', 'error', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['pigException', '=', 'false', ';']",0
Launcher.java,"['if', '(', 'outOfMemory', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'false', ';']",0
Launcher.java,"['int', 'errCode', '=', '6016', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Out', 'of', 'memory', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['return', '(', 'Exception', ')', 't', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['private', 'Throwable', 'getExceptionFromStrings', '(', 'String', '[', ']', 'stackTraceLines', ',', 'int', 'startingLineNum', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ':', 'ERROR', '1075', ':', 'Received', 'a', 'bytearray', 'from', 'the', 'UDF', '.', 'Cannot', 'determine', 'how', 'to', 'convert', 'the', 'bytearray', 'to', 'int', '.']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POCast', '.', 'getNext', '(', 'POCast', '.', 'java', ':', '152', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'LessThanExpr', '.', 'getNext', '(', 'LessThanExpr', '.', 'java', ':', '85', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFilter', '.', 'getNext', '(', 'POFilter', '.', 'java', ':', '148', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'runPipeline', '(', 'PigMapBase', '.', 'java', ':', '184', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'map', '(', 'PigMapBase', '.', 'java', ':', '174', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapRunner', '.', 'run', '(', 'MapRunner', '.', 'java', ':', '47', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapTask', '.', 'run', '(', 'MapTask', '.', 'java', ':', '227', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskTracker', '$', 'Child', '.', 'main', '(', 'TaskTracker', '.', 'java', ':', '2207', ')']",0
Launcher.java,"['int', 'prevStartingLineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '.', 'length', '>', '0', '&', '&', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['/', '/', 'the', 'regex', 'for', 'matching', 'the', 'exception', 'class', 'name', ';', 'note', 'the', 'use', 'of', 'the', '$', 'for', 'matching', 'nested', 'classes']",0
Launcher.java,"['String', 'exceptionNameDelimiter', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '\\', '\\', 'w', '+', '""', ';']",0
Launcher.java,"['Pattern', 'exceptionNamePattern', '=', 'Pattern', '.', 'compile', '(', 'exceptionNameDelimiter', ')', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'first', 'line', 'extract', 'the', 'exception', 'name', 'and', 'the', 'exception', 'message']",0
Launcher.java,"['Matcher', 'exceptionNameMatcher', '=', 'exceptionNamePattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'startingLineNum', ']', ')', ';']",0
Launcher.java,"['String', 'exceptionName', '=', 'null', ';']",0
Launcher.java,"['String', 'exceptionMessage', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'exceptionNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['exceptionName', '=', 'exceptionNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['if', '(', 'exceptionName', '.', 'contains', '(', 'OOM_ERR', ')', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'true', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'length', '(', ')', '>', 'exceptionNameMatcher', '.', 'end', '(', ')', ')', '{']",0
Launcher.java,"['exceptionMessage', '=', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'substring', '(', 'exceptionNameMatcher', '.', 'end', '(', ')', '+', '2', ')', ';']",0
Launcher.java,"['+', '+', 'startingLineNum', ';']",0
Launcher.java,"['/', '/', 'the', 'exceptionName', 'should', 'not', 'be', 'null']",0
Launcher.java,"['if', '(', 'exceptionName', '!', '=', 'null', ')', '{']",0
Launcher.java,"['ArrayList', '<', 'StackTraceElement', '>', 'stackTraceElements', '=', 'new', 'ArrayList', '<', 'StackTraceElement', '>', '(', ')', ';']",0
Launcher.java,"['/', '/', 'Create', 'stack', 'trace', 'elements', 'for', 'the', 'remaining', 'lines']",0
Launcher.java,"['String', 'stackElementRegex', '=', '""', '\\', '\\', 's', '+', 'at', '\\', '\\', 's', '+', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '\\', '\\', '<', ')', '?', '\\', '\\', 'w', '+', '(', '\\', '\\', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'stackElementPattern', '=', 'Pattern', '.', 'compile', '(', 'stackElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigExceptionRegex', '=', '""', 'org', '\\', '\\', '.', 'apache', '\\', '\\', '.', 'pig', '\\', '\\', '.', '""', ';']",0
Launcher.java,"['Pattern', 'pigExceptionPattern', '=', 'Pattern', '.', 'compile', '(', 'pigExceptionRegex', ')', ';']",0
Launcher.java,"['String', 'moreElementRegex', '=', '""', '\\', '\\', 's', '+', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', '\\', '\\', 's', '+', 'more', '""', ';']",0
Launcher.java,"['Pattern', 'moreElementPattern', '=', 'Pattern', '.', 'compile', '(', 'moreElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigPackageRegex', '=', '""', 'org', '.', 'apache', '.', 'pig', '""', ';']",0
Launcher.java,"['int', 'lineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['for', '(', ';', 'lineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ';', '+', '+', 'lineNum', ')', '{']",0
Launcher.java,"['Matcher', 'stackElementMatcher', '=', 'stackElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'stackElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['StackTraceElement', 'ste', '=', 'getStackTraceElement', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['stackTraceElements', '.', 'add', '(', 'ste', ')', ';']",0
Launcher.java,"['String', 'className', '=', 'ste', '.', 'getClassName', '(', ')', ';']",0
Launcher.java,"['Matcher', 'pigExceptionMatcher', '=', 'pigExceptionPattern', '.', 'matcher', '(', 'className', ')', ';']",0
Launcher.java,"['if', '(', 'pigExceptionMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['pigException', '=', 'true', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['Matcher', 'moreElementMatcher', '=', 'moreElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'moreElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['+', '+', 'lineNum', ';']",0
Launcher.java,"['startingLineNum', '=', 'lineNum', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'appropriate', 'exception', ';', 'setup', 'the', 'stack', 'trace', 'and', 'message']",0
Launcher.java,"['Object', 'object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', ')', ';']",0
Launcher.java,"['if', '(', 'object', 'instanceof', 'PigException', ')', '{']",0
Launcher.java,"['/', '/', 'extract', 'the', 'error', 'code', 'and', 'message', 'the', 'regex', 'for', 'matching', 'the', 'custom', 'format', 'of', 'ERROR', '<', 'ERROR', 'CODE', '>', ':']",0
Launcher.java,"['String', 'errMessageRegex', '=', '""', 'ERROR', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', ':', '""', ';']",0
Launcher.java,"['Pattern', 'errMessagePattern', '=', 'Pattern', '.', 'compile', '(', 'errMessageRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errMessageMatcher', '=', 'errMessagePattern', '.', 'matcher', '(', 'exceptionMessage', ')', ';']",0
Launcher.java,"['if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['String', 'errMessageStub', '=', 'errMessageMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['exceptionMessage', '=', 'exceptionMessage', '.', 'substring', '(', 'errMessageMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['/', '/', 'the', 'regex', 'to', 'match', 'the', 'error', 'code', 'wich', 'is', 'a', 'string', 'of', 'numerals']",0
Launcher.java,"['String', 'errCodeRegex', '=', '""', '\\', '\\', 'd', '+', '""', ';']",0
Launcher.java,"['Pattern', 'errCodePattern', '=', 'Pattern', '.', 'compile', '(', 'errCodeRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errCodeMatcher', '=', 'errCodePattern', '.', 'matcher', '(', 'errMessageStub', ')', ';']",0
Launcher.java,"['String', 'code', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'errCodeMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['code', '=', 'errCodeMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['/', '/', 'could', 'receive', 'a', 'number', 'format', 'exception', 'here', 'but', 'it', 'will', 'be', 'propagated', 'up', 'the', 'stack']",0
Launcher.java,"['int', 'errCode', '=', 'Integer', '.', 'parseInt', '(', 'code', ')', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'exception', 'with', 'the', 'message', 'and', 'then', 'set', 'the', 'error', 'code', 'and', 'error', 'source']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', 'errCode', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'determineErrorSource', '(', 'errCode', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', '2997', ')', ';', '/', '/', 'generic', 'error', 'code']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'object', 'instanceof', 'PigException', ')']",0
Launcher.java,"['/', '/', 'its', 'not', 'PigException', ';', 'create', 'the', 'exception', 'with', 'the', 'message']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', '+', '""', '(', '""', '+', 'exceptionMessage', '+', '""', ')', '""', ')', ';']",0
Launcher.java,"['StackTraceElement', '[', ']', 'steArr', '=', 'new', 'StackTraceElement', '[', 'stackTraceElements', '.', 'size', '(', ')', ']', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'setStackTrace', '(', '(', 'StackTraceElement', '[', ']', ')', '(', 'stackTraceElements', '.', 'toArray', '(', 'steArr', ')', ')', ')', ';']",0
Launcher.java,"['if', '(', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['Throwable', 'e', '=', 'getExceptionFromStrings', '(', 'stackTraceLines', ',', 'startingLineNum', ')', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'initCause', '(', 'e', ')', ';']",0
Launcher.java,"['return', '(', 'Throwable', ')', 'object', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'exceptionName', '!', '=', 'null', ')']",0
Launcher.java,"['int', 'errCode', '=', '2055', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'exception', 'name', 'to', 'create', 'exception', 'from', 'string', ':', '""', '+', 'stackTraceLines', '.', 'toString', '(', ')', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'lines', '.', 'length', '>', '0', ')']",0
Launcher.java,"['int', 'errCode', '=', '2056', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Cannot', 'create', 'exception', 'from', 'empty', 'string', '.', '""', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'StackTraceElement', 'getStackTraceElement', '(', 'String', 'line', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'items', ';']",0
Launcher.java,"['String', 'qualifiedMethodNameRegex', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '<', ')', '?', '\\', '\\', 'w', '+', '(', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'qualifiedMethodNamePattern', '=', 'Pattern', '.', 'compile', '(', 'qualifiedMethodNameRegex', ')', ';']",0
Launcher.java,"['Matcher', 'contentMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'line', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'content', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'contentMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['content', '=', 'line', '.', 'substring', '(', 'contentMatcher', '.', 'start', '(', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['Matcher', 'qualifiedMethodNameMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'content', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map']",0
Launcher.java,"['String', 'qualifiedMethodName', '=', 'null', ';']",0
Launcher.java,"['/', '/', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'fileDetails', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'qualifiedMethodNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['qualifiedMethodName', '=', 'qualifiedMethodNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['fileDetails', '=', 'content', '.', 'substring', '(', 'qualifiedMethodNameMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '/', 'From', 'the', 'fully', 'qualified', 'method', 'name', ',', 'extract', 'the', 'declaring', 'class', 'and', 'method', 'name']",0
Launcher.java,"['items', '=', 'qualifiedMethodName', '.', 'split', '(', '""', '\\', '\\', '.', '""', ')', ';']",0
Launcher.java,"['/', '/', 'initialize', 'the', 'declaringClass', '(', 'to', 'org', 'in', 'most', 'cases', ')']",0
Launcher.java,"['String', 'declaringClass', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['/', '/', 'the', 'last', 'member', 'is', 'always', 'the', 'method', 'name']",0
Launcher.java,"['String', 'methodName', '=', 'items', '[', 'items', '.', 'length', '-', '1', ']', ';']",0
Launcher.java,"['/', '/', 'concatenate', 'the', 'names', 'by', 'adding', 'the', 'dot', '(', '.', ')', 'between', 'the', 'members', 'till', 'the', 'penultimate', 'member']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'items', '.', 'length', '-', '1', ';', '+', '+', 'i', ')', '{']",0
Launcher.java,"['declaringClass', '+', '=', '""', '.', '""', ';']",0
Launcher.java,"['declaringClass', '+', '=', 'items', '[', 'i', ']', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'file', 'details', 'extract', 'the', 'file', 'name', 'and', 'the', 'line', 'number']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java', ':', '65']",0
Launcher.java,"['fileDetails', '=', 'fileDetails', '.', 'substring', '(', '0', ',', 'fileDetails', '.', 'length', '(', ')', '-', '1', ')', ';']",0
Launcher.java,"['items', '=', 'fileDetails', '.', 'split', '(', '""', ':', '""', ')', ';']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java']",0
Launcher.java,"['String', 'fileName', '=', 'null', ';']",0
Launcher.java,"['int', 'lineNumber', '=', '0', ';']",0
Launcher.java,"['if', '(', 'items', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['fileName', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['lineNumber', '=', 'Integer', '.', 'parseInt', '(', 'items', '[', '1', ']', ')', ';']",0
Launcher.java,"['return', 'new', 'StackTraceElement', '(', 'declaringClass', ',', 'methodName', ',', 'fileName', ',', 'lineNumber', ')', ';']",0
Launcher.java,"['private', 'String', 'getFirstLineFromMessage', '(', 'String', 'message', ')', '{']",0
Launcher.java,"['String', '[', ']', 'messages', '=', 'message', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['if', '(', 'messages', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['return', 'messages', '[', '0', ']', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['return', 'new', 'String', '(', 'message', ')', ';']",0
TestGrunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestGrunt.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
TestGrunt.java,"['public', 'class', 'TestGrunt', 'extends', 'TestCase', '{']",0
TestGrunt.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestGrunt.java,"['private', 'String', 'basedir', ';']",0
TestGrunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestGrunt.java,"['public', 'TestGrunt', '(', 'String', 'name', ')', '{']",0
TestGrunt.java,"['super', '(', 'name', ')', ';']",0
TestGrunt.java,"['basedir', '=', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '""', ';']",0
TestGrunt.java,"['/', '*', '@', 'Test']",0
TestGrunt.java,"['public', 'void', 'testCopyFromLocal', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'copyFromLocal', '/', 'bin', '/', 'sh', '.', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', '*', '/']",0
TestGrunt.java,"['public', 'void', 'testDefine', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'define', 'myudf', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Encountered', '\\', '""', 'define', '\\', '""', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'null', '!', '=', 'context', '.', 'getFuncSpecFromAlias', '(', '""', 'myudf', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestGrunt.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Encountered', '\\', '""', '\\', '""', ';', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstant', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchemaInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock2', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'cash', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'foreach', 'cash', 'generate', 'fast', '*', '2', '.', '0', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'a', '.', 'regenerate', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'a', '.', 'regenerate', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'run', '-', 'param', 'LIMIT', '=', '5', '-', 'param_file', '""', '+', 'basedir', '+']",0
TestGrunt.java,"['""', '/', 'test_broken', '.', 'ppf', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'exec', '-', 'param', 'LIMIT', '=', '5', '-', 'param', 'FUNCTION', '=', 'COUNT', '""', '+']",0
TestGrunt.java,"['""', '-', 'param', 'FILE', '=', 'foo', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'run', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', '""', 'MAPREDUCE', '""', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'exec', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_exec', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
