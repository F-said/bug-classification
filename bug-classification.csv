File,Statement,Bug
TestLogicalPlanBuilder.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
TestLogicalPlanBuilder.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'GFAny', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'Identity', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestLogicalPlanBuilder.java,"['public', 'class', 'TestLogicalPlanBuilder', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestLogicalPlanBuilder.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', '$', '2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", ':', ""'"", ')', ')', 'generate', '$', '1', ',', ""'"", 'aoeuaoeu', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query3', 'and', 'Query4']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '1', ')', 'generate', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'AVG', '(', '$', '1', ',', '$', '2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery6', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'group', ',', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery7', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery10', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '1', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '(', '$', '1', ')', ')', 'generate', '$', '1', '.', '$', '1', ',', '$', '2', '.', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query11', 'and', 'Query12']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery11', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '2', ')', 'generate', 'group', ',', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery12', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery13', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery14', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '6', ',', '$', '7', ')', ')', 'generate', 'flatten', '(', 'group', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery15', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', ""'"", 'hello', ""'"", ',', '$', '3', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery100', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'define', 'syntax']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'buildPlan', '(', 'query', ')', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'lo', 'instanceof', 'LODefine', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'A', '=', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'A', '.', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', 'generate', '$', '1', '.', '*', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', 'DISTINCT', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '[', 'ORDER', 'BY', '$', '0', ']', '[', '$', '3', ',', '$', '4', ']', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '*', ')', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query17']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery17', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'A', ""'"", ')', '""', '+', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['static', 'public', 'class', 'TestApplyFunc', 'extends', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['Tuple', 'output', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', 'input', '.', 'getAll', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'output', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery18', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'FOREACH', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', 'PARALLEL', '16', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'root', '=', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'listOp', '=', 'lp', '.', 'getSuccessors', '(', 'root', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'listOp', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'lo', 'instanceof', 'LOCogroup', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOCogroup', ')', 'lo', ')', '.', 'getRequestedParallelism', '(', ')', '=', '=', '16', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'Error', ':', 'Unexpected', 'Parse', 'Tree', 'output', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery19', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery20', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '=', '=', ""'"", '3', ""'"", '?', '$', '2', ':', '$', '3', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery21', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ')', 'generate', 'A', ',', 'flatten', '(', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'order', 'B', 'by', '$', '0', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'FLATTEN', '(', 'A', ')', ',', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'Distinct', 'A', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', 'A', 'BY', '$', '1', '<', ""'"", 'z', ""'"", ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'A', 'sequence', 'of', 'filters', 'within', 'a', 'foreach', 'translates', 'to']",0
TestLogicalPlanBuilder.java,"['/', '/', 'a', 'split', 'statement', '.', 'Currently', 'it', 'breaks', 'as', 'adding', 'an']",0
TestLogicalPlanBuilder.java,"['/', '/', 'additional', 'output', 'to', 'the', 'filter', 'fails', 'as', 'filter', 'supports']",0
TestLogicalPlanBuilder.java,"['/', '/', 'single', 'output']",0
TestLogicalPlanBuilder.java,"['""', 'C', '=', 'FILTER', 'A', 'BY', '$', '2', '=', '=', '$', '3', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'ARRANGE', 'B', 'BY', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'GENERATE', 'A', ',', 'FLATTEN', '(', 'B', '.', '$', '0', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ',', 'B', 'by', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery24', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'a', 'generate', '(', '(', '$', '0', '=', '=', '$', '1', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', '$', '4', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery25', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', '$', '0', 'BY', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'AND', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'B', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery26', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '(', 'NOT', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'OR', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', ""'"", 'x', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query27', 'and', 'Query28']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery27', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'DISTINCT', '$', '3', '.', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '$', '1', '.', '(', '$', '1', ',', '$', '4', ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery28', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '$', '3', ')', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery29', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery30', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'static', 'class', 'TestStorageFunc', 'implements', 'LoadFunc', '{']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'is', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Boolean', 'bytesToBoolean', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestLogicalPlanBuilder.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
TestLogicalPlanBuilder.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery31', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery32', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'tuple', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', 'tuple', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery33', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', 'generate', 'group', ',', 'A', '.', 'aCol1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', ':', 'Nested', 'schemas', 'don', ""'"", 't', 'work', 'now', '.', 'Probably', 'a', 'bug', 'in', 'the', 'new', 'parser', '.']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery34', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ':', 'tuple', '(', 'subCol1', ',', 'subCol2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'filter', 'A', 'by', 'aCol2', '=', '=', ""'"", '1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ')', 'generate', 'A', '.', 'aCol2', ',', 'B', '.', 'bCol2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery35', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'generate', 'col1', ',', 'col2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery36', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'by', 'col1', ')', 'generate', '$', '1', '.', '(', 'col2', ',', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail37', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', 'asdasdas', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery38', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query39', 'and', 'Query40']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'url', ';', '""', ')', ';', '/', '/', 'url', 'has', 'been', 'falttened', 'and', 'hence', 'the', 'failure']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery40', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', 'IsEmpty', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', '(', 'IsEmpty', '(', '$', '2', ')', 'AND', '(', '$', '3', '=', '=', '$', '2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail41', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'a', 'as', '(', 'host', ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Currently', 'PIG', 'does', 'not', 'support', 'assigning', 'an', 'existing', 'relation', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'following', 'statement', 'was', 'earlier', 'present']",0
TestLogicalPlanBuilder.java,"['/', '/', 'eventually', 'when', 'we', 'do', 'allow', 'assignments', 'of', 'the', 'form']",0
TestLogicalPlanBuilder.java,"['/', '/', 'above', ',', 'we', 'should', 'test', 'with', 'the', 'line', 'below']",0
TestLogicalPlanBuilder.java,"['/', '/', 'uncommented']",0
TestLogicalPlanBuilder.java,"['/', '/', 'buildPlan', '(', '""', 'foreach', 'b', 'generate', 'host', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery42', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', 'as', 'url', ',', '$', '1', 'as', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'b', 'generate', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'url', ',', 'b', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'a', ':', ':', 'url', ',', 'b', ':', ':', 'url', ',', 'b', ':', ':', 'rank', ',', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'height', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery44', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'pagerank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'query', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'pagerank', '#', ""'"", 'nonspam', ""'"", ',', 'url', ')', ',', 'b', 'by', '(', 'rank', '/', ""'"", '2', ""'"", ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'c', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Commented', 'out', 'testQueryFail44', 'as', 'I', 'am', 'not', 'able', 'to', 'include', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail44', '(', ')', 'throws', 'Throwable', '{']",0
TestLogicalPlanBuilder.java,"['PigServer', 'pig', '=', 'null', ';']",0
TestLogicalPlanBuilder.java,"['pig', '=', 'new', 'PigServer', '(', '""', 'local', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';', '/', '/', 'pig', 'server', 'failed', 'for', 'some', 'reason']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerFunction', '(', '""', 'myTr', '""', ',']",0
TestLogicalPlanBuilder.java,"['new', 'FuncSpec', '(', 'GFAny', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", 'tr', 'o', '0', ""'"", ')', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerQuery', '(', '""', 'b', '=', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'myTr', '(', 'myTr', '(', '*', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery45', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'url', ',', 'hitCount', 'from', 'A', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'url', ',', 'hitCount', 'from', 'B', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select', '+', 'Join']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery46', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Mutliple', 'Joins']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery47', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'load', ""'"", 'c', ""'"", 'as', '(', 'pageRank', ',', 'position', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', '(', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ')', 'join', 'C', 'on', 'B', '.', 'pageRank', '=', '=', 'C', '.', 'pageRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery48', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Join', '+', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery49', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'B', '.', 'pageRank', ')', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', 'group', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery50', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery51', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery52', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery53', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery54', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery55', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', ',', 'SUM', '(', 'A', '.', 'size', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery56', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'date', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'date', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ',', 'date', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'date', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery57', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '+', '$', '2', ')', ',', '(', '$', '1', '-', '$', '2', ')', ',', '(', '$', '1', '*', '$', '2', ')', ',', '(', '$', '1', '/', '$', '2', ')', ',', '(', '$', '1', '%', '$', '2', ')', ',', '-', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'b', '{', 'd', '=', 'a', '.', 'name', ';', 'generate', 'group', ',', 'd', ';', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery59', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'join', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery60', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery61', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'order', 'a', 'by', 'name', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'order', 'a', 'by', '$', '0', 'asc', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'order', 'a', 'by', '*', 'asc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'i', '=', 'foreach', 'h', '{', 'i1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'i1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'name', ',', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ',', 'mymap', ':', 'map', '[', ']', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'bag', '{', 'mytuple', ':', 'tuple', '(', 'age', ':', 'int', ',', 'gpa', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'LOAD', ""'"", 'myfile', ""'"", 'AS', '(', 'garage', ':', 'bag', '{', 'tuple1', ':', 'tuple', '(', 'num_tools', ':', 'int', ')', '}', ',', 'links', ':', 'bag', '{', 'tuple2', ':', 'tuple', '(', 'websites', ':', 'chararray', ')', '}', ',', 'page', ':', 'bag', '{', 'something_stupid', ':', 'tuple', '(', 'yeah_double', ':', 'double', ')', '}', ',', 'coordinates', ':', 'bag', '{', 'another_tuple', ':', 'tuple', '(', 'ok_float', ':', 'float', ',', 'bite_the_array', ':', 'bytearray', ',', 'bag_of_unknown', ':', 'bag', '{', '}', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'bag', '{', 'age', ':', 'int', '}', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', 'as', 'aName', ',', 'b', '.', 'name', 'as', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', ',', 'b', '.', 'height', 'as', 'age', ',', 'a', '.', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '10', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', '12l', ',', ""'"", 'another', 'tuple', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery69', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '(', '1', ')', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery70', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '[', '10L', '#', ""'"", 'hello', ""'"", ',', '4', '.', '0e', '-', '2', '#', '10L', ',', '0', '.', '5f', '#', '(', '1', ')', ',', ""'"", 'world', ""'"", '#', '42', ',', '42', '#', '{', '(', ""'"", 'guide', ""'"", ')', '}', ']', 'as', 'mymap', ':', 'map', '[', ']', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'mymap', '#', '10L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', 'L', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '{', '(', ')', '}', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery71', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '(', 'int', ')', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'y', 'generate', '(', 'int', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'tuple', '(', 'int', ',', 'float', ')', '}', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', 'int', ',', 'float', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'foreach', 'x', 'generate', '(', 'chararray', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'int', ',', 'float', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'tuple', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery73', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'matches', ""'"", '^', 'fred', '.', '*', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '0', ',', '(', '$', '0', 'matches', ""'"", 'yuri', '.', '*', ""'"", '?', '$', '1', '-', '10', ':', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery74', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '(', '(', 'field1', '+', 'field2', ')', '*', 'field1', ')', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery77', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'limit', '(', 'load', ""'"", 'a', ""'"", ')', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery75', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'union', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ',', '(', 'load', ""'"", 'c', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'generate', '$', '0', ';', '}', 'parallel', '10', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery76', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'IS', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'filter', 'y', 'by', '$', '0', 'IS', 'NOT', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'b', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NULL', '?', '0', ':', '$', '1', '-', '7', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'c', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NOT', 'NULL', '?', '$', '1', '-', '5', ':', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery80', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['/', '/', '+', '""', 'generate', 'group', ',', 'flatten', '(', 'cd', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'gte', ""'"", 'f', ""'"", 'and', 'name', 'lte', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'ge', ""'"", 'f', ""'"", 'and', 'name', 'le', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', '.', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery83', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery84', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', '$', '2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery85', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'name', ',', 'group', '.', 'age', ',', 'COUNT', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'foreachExpectedSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'foreachExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery86', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery87', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'c1', '=', 'order', '$', '1', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'c1', ')', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'sortInput', '=', '(', 'LOProject', ')', 'nestedPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'nestedSort', '=', '(', 'LOSort', ')', 'nestedPlan', '.', 'getSuccessors', '(', 'sortInput', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'sortPlan', '=', 'nestedSort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sortPlan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery88', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'order', 'b', 'by', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'project1', '=', '(', 'LOProject', ')', 'sort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertEquals', '(', 'project1', '.', 'getExpression', '(', ')', ',', 'cogroup', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', ',', '$', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', 'as', 'zero', ',', 'i', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', ',', '$', '5', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Out', 'of', 'bound', 'access', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'and', 'second', 'elements', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'and', 'age', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'schema', 'of', 'group', 'is', 'unchanged']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'group', ':', ':', 'name', ':', 'chararray', ',', 'group', ':', ':', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', 'myname', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'first', 'element', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'elements', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'to', 'mygroup', 'as', 'the', 'tuple', 'schema', 'is', 'empty']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ',', 'y', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'y', ':', 'bytearray', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ':', 'int', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ':', 'int', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ':', 'chararray', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '{', 't', ':', '(', 'myname', ',', 'myage', ')', '}', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery91', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery92', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'alias', '=', 'name', '#', ""'"", 'alias', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'af', '=', 'alias', '#', ""'"", 'first', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'al', '=', 'alias', '#', ""'"", 'last', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'not', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'b', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ',', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', 'gpa', 'and', 'somethingelse']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'gpa', ',', 'somethingelse', ',', 'a', ':', ':', 'gpa', ',', 'b', ':', ':', 'somethingelse', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Found', 'more', 'than', 'one', 'match', ':', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery95', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'd', '=', 'order', 'a', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'd', ')', ',', 'MAX', '(', 'a', '.', 'age', ')', 'as', 'max_age', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'foreach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'cogroupExpectedSchema', ',', 'false', ',', 'false', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', ',', 'max_age', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery96', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', '20', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', '3', '.', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', '=', 'foreach', '.', 'getForEachPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'flattenPlan', '=', 'foreachPlans', '.', 'get', '(', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'project', '=', 'flattenPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'project', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'sort', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'project', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sort', 'instanceof', 'LOSort', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'distinct', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'distinct', 'instanceof', 'LODistinct', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'presence', 'of', 'the', 'nested', 'foreach']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedForeach', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'distinct', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedForeach', 'instanceof', 'LOForEach', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedForeachPlan', '=', '(', '(', 'LOForEach', ')', 'nestedForeach', ')', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedProject', '=', 'nestedForeachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedProject', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOProject', ')', 'nestedProject', ')', '.', 'getCol', '(', ')', '=', '=', '2', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'filter', 'inner', 'plan', 'for', 'the', 'absence', 'of', 'the', 'project', 'connected', 'to', 'project']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'filter', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'nestedForeach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'filter', 'instanceof', 'LOFilter', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'comparisonPlan', '=', '(', '(', 'LOFilter', ')', 'filter', ')', '.', 'getComparisonPlan', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOLesserThan', 'lessThan', '=', '(', 'LOLesserThan', ')', 'comparisonPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'filterProject', '=', '(', 'LOProject', ')', 'lessThan', '.', 'getLhsOperand', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'null', '=', '=', 'comparisonPlan', '.', 'getPredecessors', '(', 'filterProject', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery97', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'long', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0f', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'float', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', ""'"", 'hello', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'chararray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery98', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'int', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1L', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'long', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0f', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'float', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '1', ',', '1L', ',', '1', '.', '0f', ',', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'y', ':', 'int', ',', 'z', ':', 'long', ',', 'a', ':', 'float', ',', 'b', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '{', '(', '1', ')', ',', '(', '1', '.', '0', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'ib', ':', '{', 'it', ':', '(', 'd', ':', 'double', ')', '}', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery99', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '2', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1L', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'long', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0f', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ',', '3', '.', '14', ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery101', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'usage', 'of', 'an', 'alias', 'from', 'define']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['query', '=', '""', 'foreach', '(', 'load', ""'"", 'data', ""'"", ')', 'generate', 'FUNC', '(', '$', '0', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery102', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'basic', 'store']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery103', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'store', 'with', 'store', 'function']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery104', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'check', 'that', 'a', 'field', 'alias', 'can', 'be', 'referenced']",0
TestLogicalPlanBuilder.java,"['/', '/', 'by', 'unambiguous', 'free', 'form', 'alias', ',', 'fully', 'qualified', 'alias']",0
TestLogicalPlanBuilder.java,"['/', '/', 'and', 'partially', 'qualified', 'unambiguous', 'alias']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'name', '!', '=', ""'"", 'fred', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'group', 'd', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'flatten', '(', 'd', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'name', ',', 'd', ':', ':', 'a', ':', ':', 'name', ',', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery105', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'the', 'alias', '""', 'group', '""', 'can', 'be', 'used']",0
TestLogicalPlanBuilder.java,"['/', '/', 'after', 'a', 'flatten', '(', 'group', ')']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'cnt', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery106', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery107', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery108', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery109', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'first_name', ',', 'enrol_age', ',', 'high_school_gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagBSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'first_name', ':', 'bytearray', ',', 'enrol_age', ':', 'bytearray', ',', 'high_school_gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagBFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'b', '""', ',', 'bagBSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagBFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery110', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOLoad', 'load', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'mapGByPlans', '=', 'cogroup', '.', 'getGroupByPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'cogroupPlan', '=', '(', 'LogicalPlan', ')', '(', 'mapGByPlans', '.', 'get', '(', 'load', ')', '.', 'toArray', '(', ')', ')', '[', '0', ']', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'cogroupPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery111', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery112', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'a1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'a1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'foreachPlan', '.', 'getPredecessors', '(', 'foreachPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery113', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'exp1', '=', 'age', '+', 'gpa', ';', 'exp2', '=', 'exp1', '+', 'age', ';', 'generate', 'exp1', ',', 'exp2', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['printPlan', '(', 'foreachPlan', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery114', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery115', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery116', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery117', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsArithExprs', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', '+', 'null', ',', 'x', '*', 'null', ',', 'x', '/', 'null', ',', 'x', '-', 'null', ',', 'null', '%', 'x', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'y', '+', 'null', ',', 'y', '*', 'null', ',', 'y', '/', 'null', ',', 'y', '-', 'null', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '2', '>', '1', '?', 'null', ':', '1', ')', ',', '(', '2', '<', '1', '?', 'null', ':', '1', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '(', '2', '>', '1', '?', '1', ':', 'null', ')', ',', '(', '2', '<', '1', '?', '1', ':', 'null', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'null', 'is', 'null', '?', '1', ':', '2', ')', ',', '(', 'null', 'is', 'not', 'null', '?', '2', ':', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsForEachGenerate', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', ',', 'null', ',', 'y', ',', 'null', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsOuterJoin', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'u', ':', 'int', ',', 'v', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'x', ',', 'b', 'by', 'u', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', '(', 'SIZE', '(', 'a', ')', '=', '=', '0', '?', 'null', ':', 'a', ')', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'flatten', '(', '(', 'SIZE', '(', 'b', ')', '=', '=', '0', '?', 'null', ':', 'b', ')', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsConcatSize', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'SIZE', '(', 'null', ')', ',', 'CONCAT', '(', 'str', ',', 'null', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'CONCAT', '(', 'null', ',', 'str', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testFilterUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'isempty', 'IsEmpty', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'isempty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCastAlias', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', 'x', ',', '(', 'double', ')', 'y', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'x', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCast', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', '$', '0', ',', '(', 'double', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testReservedWordsInFunctionNames', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'define', 'can', 'contain', 'reserved', 'words', 'are', 'later', 'parts', 'of']",0
TestLogicalPlanBuilder.java,"['/', '/', 'fully', 'qualified', 'function', 'name']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'org', '.', 'apache', '.', 'iterators', '.', 'foreach', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'buildPlan', '(', 'query', ')', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'lo', 'instanceof', 'LODefine', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testTokenizeSchema', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'f1', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'TOKENIZE', '(', 'f1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tokenFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'token', '""', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'tupleSchema', '=', 'new', 'Schema', '(', 'tokenFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', ';']",0
TestLogicalPlanBuilder.java,"['tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'tuple_of_tokens', '""', ',', 'tupleSchema', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['bagSchema', '.', 'setTwoLevelAccessRequired', '(', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(']",0
TestLogicalPlanBuilder.java,"['""', 'bag_of_tokenTuples', '""', ',', 'bagSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'new', 'Schema', '(', 'bagFs', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'void', 'printPlan', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['LOPrinter', 'graphPrinter', '=', 'new', 'LOPrinter', '(', 'System', '.', 'err', ',', 'lp', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', '""', 'Printing', 'the', 'logical', 'plan', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['graphPrinter', '.', 'visit', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'boolean', 'checkPlanForProjectStar', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'leaves', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '(', '(', 'LOProject', ')', 'op', ')', '.', 'isStar', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'buildPlan', '(', 'query', ',', 'LogicalPlanBuilder', '.', 'class', '.', 'getClassLoader', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ',', 'ClassLoader', 'cldr', ')', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'cldr', ';']",0
TestLogicalPlanBuilder.java,"['pigContext', '.', 'connect', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', 'builder', '=', 'new', 'LogicalPlanBuilder', '(', 'pigContext', ')', ';', '/', '/']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'builder', '.', 'parse', '(', '""', 'Test', '-', 'Plan', '-', 'Builder', '""', ',']",0
TestLogicalPlanBuilder.java,"['fileNameMap', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'roots', '=', 'lp', '.', 'getRoots', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'roots', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'roots', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '!', '(', 'op', 'instanceof', 'LOLoad', ')', '&', '&', '!', '(', 'op', 'instanceof', 'LODefine', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['throw', 'new', 'Exception', '(', '""', 'Cannot', 'have', 'a', 'root', 'that', 'is', 'not', 'the', 'load', 'or', 'define', 'operator', '.', 'Found', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertNotNull', '(', 'lp', '!', '=', 'null', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'IOException', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'IOException', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Exception', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', 'e', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', '+', '""', '-', '-', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'logicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'String', ',', 'String', '>', 'fileNameMap', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'ExecType', '.', 'LOCAL', ',', 'new', 'Properties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'InetAddress', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'Socket', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketImplFactory', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URI', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URISyntaxException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'UnknownHostException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'ipc', '.', 'RPC', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobTracker', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecPhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'util', '.', 'ExecTools', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HDataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'LogToPhyTranslationVisitor', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MapReduceLauncher', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PlanPrinter', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
HExecutionEngine.java,"['public', 'class', 'HExecutionEngine', 'implements', 'ExecutionEngine', '{']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'HOD_SERVER', '=', '""', 'hod', '.', 'server', '""', ';']",0
HExecutionEngine.java,"['public', 'static', 'final', 'String', 'JOB_TRACKER_LOCATION', '=', '""', 'mapred', '.', 'job', '.', 'tracker', '""', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'FILE_SYSTEM_LOCATION', '=', '""', 'fs', '.', 'default', '.', 'name', '""', ';']",0
HExecutionEngine.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'LOCAL', '=', '""', 'local', '""', ';']",0
HExecutionEngine.java,"['private', 'StringBuilder', 'hodParams', '=', 'null', ';']",0
HExecutionEngine.java,"['protected', 'PigContext', 'pigContext', ';']",0
HExecutionEngine.java,"['protected', 'DataStorage', 'ds', ';']",0
HExecutionEngine.java,"['protected', 'JobClient', 'jobClient', ';']",0
HExecutionEngine.java,"['/', '/', 'key', ':', 'the', 'operator', 'key', 'from', 'the', 'logical', 'plan', 'that', 'originated', 'the', 'physical', 'plan']",0
HExecutionEngine.java,"['/', '/', 'val', ':', 'the', 'operator', 'key', 'for', 'the', 'root', 'of', 'the', 'phyisical', 'plan']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'OperatorKey', '>', 'logicalToPhysicalKeys', ';']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['/', '/', 'map', 'from', 'LOGICAL', 'key', 'to', 'into', 'about', 'the', 'execution']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'HExecutionEngine', '(', 'PigContext', 'pigContext', ')', '{']",0
HExecutionEngine.java,"['this', '.', 'pigContext', '=', 'pigContext', ';']",0
HExecutionEngine.java,"['this', '.', 'logicalToPhysicalKeys', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'OperatorKey', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'physicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'materializedResults', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'MapRedResult', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'ds', '=', 'null', ';']",0
HExecutionEngine.java,"['/', '/', 'to', 'be', 'set', 'in', 'the', 'init', 'method']",0
HExecutionEngine.java,"['this', '.', 'jobClient', '=', 'null', ';']",0
HExecutionEngine.java,"['public', 'JobClient', 'getJobClient', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'jobClient', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'getMaterializedResults', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'getPhysicalOpTable', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['public', 'DataStorage', 'getDataStorage', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'ds', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['/', '/', 'First', 'set', 'the', 'ssh', 'socket', 'factory']",0
HExecutionEngine.java,"['setSSHFactory', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'hodServer', '=', 'properties', '.', 'getProperty', '(', 'HOD_SERVER', ')', ';']",0
HExecutionEngine.java,"['String', 'cluster', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'nameNode', '=', 'null', ';']",0
HExecutionEngine.java,"['Configuration', 'configuration', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', 'hodServer', '!', '=', 'null', '&', '&', 'hodServer', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['String', 'hdfsAndMapred', '[', ']', '=', 'doHod', '(', 'hodServer', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'hdfsAndMapred', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'hdfsAndMapred', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'build', 'a', 'configuration', 'object', 'first', 'in', 'the', 'manner', 'described', 'below']",0
HExecutionEngine.java,"['/', '/', 'and', 'then', 'get', 'back', 'a', 'properties', 'object', 'to', 'inspect', 'the', 'JOB_TRACKER_LOCATION']",0
HExecutionEngine.java,"['/', '/', 'and', 'FILE_SYSTEM_LOCATION', '.', 'The', 'reason', 'to', 'do', 'this', 'is', 'if', 'we', 'looked', 'only', 'at']",0
HExecutionEngine.java,"['/', '/', 'the', 'existing', 'properties', 'object', ',', 'we', 'may', 'not', 'get', 'the', 'right', 'settings', '.', 'So', 'we', 'want']",0
HExecutionEngine.java,"['/', '/', 'to', 'read', 'the', 'configurations', 'in', 'the', 'order', 'specified', 'below', 'and', 'only', 'then', 'look']",0
HExecutionEngine.java,"['/', '/', 'for', 'JOB_TRACKER_LOCATION', 'and', 'FILE_SYSTEM_LOCATION', '.']",0
HExecutionEngine.java,"['/', '/', 'Hadoop', 'by', 'default', 'specifies', 'two', 'resources', ',', 'loaded', 'in', '-', 'order', 'from', 'the', 'classpath', ':']",0
HExecutionEngine.java,"['/', '/', '1', '.', 'hadoop', '-', 'default', '.', 'xml', ':', 'Read', '-', 'only', 'defaults', 'for', 'hadoop', '.']",0
HExecutionEngine.java,"['/', '/', '2', '.', 'hadoop', '-', 'site', '.', 'xml', ':', 'Site', '-', 'specific', 'configuration', 'for', 'a', 'given', 'hadoop', 'installation', '.']",0
HExecutionEngine.java,"['/', '/', 'Now', 'add', 'the', 'settings', 'from', '""', 'properties', '""', 'object', 'to', 'override', 'any', 'existing', 'properties']",0
HExecutionEngine.java,"['/', '/', 'All', 'of', 'the', 'above', 'is', 'accomplished', 'in', 'the', 'method', 'call', 'below']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hadoop', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '=', 'ConfigurationUtil', '.', 'toProperties', '(', 'configuration', ')', ';']",0
HExecutionEngine.java,"['cluster', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['nameNode', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', 'cluster', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'cluster', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['cluster', '=', 'cluster', '+', '""', ':', '50020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'cluster', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'nameNode', '!', '=', 'null', '&', '&', 'nameNode', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'nameNode', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'nameNode', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['nameNode', '=', 'nameNode', '+', '""', ':', '8020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'nameNode', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'hadoop', 'file', 'system', 'at', ':', '""', '+', '(', 'nameNode', '=', '=', 'null', '?', 'LOCAL', ':', 'nameNode', ')', ')', ';']",0
HExecutionEngine.java,"['ds', '=', 'new', 'HDataStorage', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'The', 'above', 'HDataStorage', 'constructor', 'sets', 'DEFAULT_REPLICATION_FACTOR_KEY', 'in', 'properties', '.']",0
HExecutionEngine.java,"['/', '/', 'So', 'we', 'need', 'to', 'reconstruct', 'the', 'configuration', 'object', 'for', 'the', 'non', 'HOD', 'case']",0
HExecutionEngine.java,"['/', '/', 'In', 'the', 'HOD', 'case', ',', 'this', 'is', 'the', 'first', 'time', 'the', 'configuration', 'object', 'will', 'be', 'created']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'map', '-', 'reduce', 'job', 'tracker', 'at', ':', '""', '+', 'properties', '.', 'get', '(', 'JOB_TRACKER_LOCATION', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Set', 'job', '-', 'specific', 'configuration', 'knobs']",0
HExecutionEngine.java,"['jobClient', '=', 'new', 'JobClient', '(', 'new', 'JobConf', '(', 'configuration', ')', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'IOException', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'job', 'client', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'close', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'Properties', 'getConfiguration', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'updateConfiguration', '(', 'Properties', 'newConfiguration', ')']",0
HExecutionEngine.java,"['throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'newConfiguration', ')', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'String', ',', 'Object', '>', 'getStatistics', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'PhysicalPlan', 'compile', '(', 'LogicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'plan', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2041', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'No', 'Plan', 'to', 'compile', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
HExecutionEngine.java,"['LogToPhyTranslationVisitor', 'translator', '=']",0
HExecutionEngine.java,"['new', 'LogToPhyTranslationVisitor', '(', 'plan', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'setPigContext', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'visit', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'translator', '.', 'getPhysicalPlan', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2042', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Unable', 'to', 'translate', 'logical', 'plan', 'to', 'physical', 'plan', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'List', '<', 'ExecJob', '>', 'execute', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'new', 'ArrayList', '<', 'ExecJob', '>', '(', ')', ';']",0
HExecutionEngine.java,"['PigStats', 'stats', '=', 'launcher', '.', 'launchPig', '(', 'plan', ',', 'jobName', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'FileSpec', 'spec', ':', 'launcher', '.', 'getSucceededFiles', '(', ')', ')', '{']",0
HExecutionEngine.java,"['jobs', '.', 'add', '(', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'COMPLETED', ',', 'pigContext', ',', 'spec', ',', 'stats', ')', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'FileSpec', 'spec', ':', 'launcher', '.', 'getFailedFiles', '(', ')', ')', '{']",0
HExecutionEngine.java,"['HJob', 'j', '=', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ',', 'pigContext', ',', 'spec', ',', 'stats', ')', ';']",0
HExecutionEngine.java,"['j', '.', 'setException', '(', 'launcher', '.', 'getError', '(', 'spec', ')', ')', ';']",0
HExecutionEngine.java,"['jobs', '.', 'add', '(', 'j', ')', ';']",0
HExecutionEngine.java,"['return', 'jobs', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'There', 'are', 'a', 'lot', 'of', 'exceptions', 'thrown', 'by', 'the', 'launcher', '.', 'If', 'this']",0
HExecutionEngine.java,"['/', '/', 'is', 'an', 'ExecException', ',', 'just', 'let', 'it', 'through', '.', 'Else', 'wrap', 'it', '.']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2043', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'during', 'execution', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['}', 'finally', '{']",0
HExecutionEngine.java,"['launcher', '.', 'reset', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'List', '<', 'ExecJob', '>', 'submit', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'explain', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'stream', ',', 'String', 'format', ',', 'boolean', 'verbose', ')', '{']",0
HExecutionEngine.java,"['ExecTools', '.', 'checkLeafIsStore', '(', 'plan', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['launcher', '.', 'explain', '(', 'plan', ',', 'pigContext', ',', 'stream', ',', 'format', ',', 'verbose', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 've', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'ExecJob', '>', 'runningJobs', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'String', '>', 'activeScopes', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'reclaimScope', '(', 'String', 'scope', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'setSSHFactory', '(', ')', '{']",0
HExecutionEngine.java,"['Properties', 'properties', '=', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'g', '=', 'properties', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'g', '=', '=', 'null', '|', '|', 'g', '.', 'length', '(', ')', '=', '=', '0', ')', 'return', ';']",0
HExecutionEngine.java,"['Class', 'clazz', '=', 'Class', '.', 'forName', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', '""', ')', ';']",0
HExecutionEngine.java,"['SocketImplFactory', 'f', '=', '(', 'SocketImplFactory', ')', 'clazz', '.', 'getMethod', '(', '""', 'getFactory', '""', ',', 'new', 'Class', '[', '0', ']', ')', '.', 'invoke', '(', '0', ',', 'new', 'Object', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['Socket', '.', 'setSocketImplFactory', '(', 'f', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'SocketException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'To', 'prevent', 'doing', 'hod', 'if', 'the', 'pig', 'server', 'is', 'constructed', 'multiple', 'times']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodMapRed', ';']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodHDFS', ';']",0
HExecutionEngine.java,"['private', 'String', 'hodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'remoteHodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'Process', 'hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['class', 'ShutdownThread', 'extends', 'Thread', '{']",0
HExecutionEngine.java,"['public', 'synchronized', 'void', 'run', '(', ')', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'String', '[', ']', 'doHod', '(', 'String', 'server', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'hodMapRed', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hodHDFS', ',', 'hodMapRed', '}', ';']",0
HExecutionEngine.java,"['/', '/', 'first', ',', 'create', 'temp', 'director', 'to', 'store', 'the', 'configuration']",0
HExecutionEngine.java,"['hodConfDir', '=', 'createTempDir', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['hodParams', '=', 'new', 'StringBuilder', '(', 'properties', '.', 'getProperty', '(']",0
HExecutionEngine.java,"['""', 'hod', '.', 'param', '""', ',', 'System', '.', 'getProperty', '(', '""', 'hod', '.', 'param', '""', ',', '""', '""', ')', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'get', 'the', 'number', 'of', 'nodes', 'out', 'of', 'the', 'command', 'or', 'use', 'default']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'getNumNodes', '(', 'hodParams', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'command', 'format', ':', 'hod', 'allocate', '-', 'd', '<', 'cluster_dir', '>', '-', 'n', '<', 'number_of_nodes', '>', '<', 'other', 'params', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'fixedCmdArray', '=', 'new', 'String', '[', ']', '{', '""', 'hod', '""', ',', '""', 'allocate', '""', ',', '""', '-', 'd', '""', ',']",0
HExecutionEngine.java,"['hodConfDir', ',', '""', '-', 'n', '""', ',', 'Integer', '.', 'toString', '(', 'nodes', ')', '}', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'extraParams', '=', 'hodParams', '.', 'toString', '(', ')', '.', 'split', '(', '""', '""', ')', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', 'fixedCmdArray', '.', 'length', '+', 'extraParams', '.', 'length', ']', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'fixedCmdArray', ',', '0', ',', 'cmdarray', ',', '0', ',', 'fixedCmdArray', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'extraParams', ',', '0', ',', 'cmdarray', ',', 'fixedCmdArray', '.', 'length', ',', 'extraParams', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'sending', 'HOD', 'command', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'setup', 'shutdown', 'hook', 'to', 'make', 'sure', 'we', 'tear', 'down', 'hod', 'connection']",0
HExecutionEngine.java,"['Runtime', '.', 'getRuntime', '(', ')', '.', 'addShutdownHook', '(', 'new', 'ShutdownThread', '(', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'true', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'print', 'all', 'the', 'information', 'provided', 'by', 'HOD']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'hodProcess', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'msg', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'msg', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['log', '.', 'info', '(', 'msg', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'connection', 'we', 'need', 'to', 'bring', 'the', 'file', 'locally']",0
HExecutionEngine.java,"['if', '(', '!', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['hodConfDir', '=', 'copyHadoopConfLocally', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['String', 'hdfs', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'mapred', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'hadoopConf', '=', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Hadoop', 'configuration', 'file', ':', '""', '+', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hod', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hdfs', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hdfs', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'fs', '.', 'default', '.', 'name', 'from', 'hadoop', 'configuration', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'HDFS', ':', '""', '+', 'hdfs', ')', ';']",0
HExecutionEngine.java,"['mapred', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'mapred', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'mapred', '.', 'job', '.', 'tracker', 'from', 'hadoop', 'configuration', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'JobTracker', ':', '""', '+', 'mapred', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'is', 'not', 'longer', 'needed', 'as', 'hadoop', '-', 'site', '.', 'xml', 'given', 'to', 'us', 'by', 'HOD']",0
HExecutionEngine.java,"['/', '/', 'contains', 'data', 'in', 'the', 'correct', 'format']",0
HExecutionEngine.java,"['/', '/', 'hdfs', '=', 'fixUpDomain', '(', 'hdfs', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'mapred', '=', 'fixUpDomain', '(', 'mapred', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hodHDFS', '=', 'hdfs', ';']",0
HExecutionEngine.java,"['hodMapRed', '=', 'mapred', ';']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hdfs', ',', 'mapred', '}', ';']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6010', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Could', 'not', 'connect', 'to', 'HOD', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'synchronized', 'void', 'closeHod', '(', 'String', 'server', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'hodProcess', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'just', 'cleanup', 'the', 'dir', 'if', 'it', 'exists', 'and', 'return']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'hod', 'deallocate', 'format', ':', 'hod', 'deallocate', '-', 'd', '<', 'conf', 'dir', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '4', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'hod', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', 'deallocate', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', '""', '-', 'd', '""', ';']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'remoteHodConfDir', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Disconnecting', 'from', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'Disconnect', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'disconnect', 'from', 'HOD', ';', 'error', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '.', 'destroy', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'finally', '{']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'remoteHodConfDir', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'LOCAL', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'copyHadoopConfLocally', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['String', 'localDir', '=', 'createTempDir', '(', 'LOCAL', ')', ';']",0
HExecutionEngine.java,"['String', 'remoteFile', '=', 'new', 'String', '(', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'localFile', '=', 'new', 'String', '(', 'localDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['remoteHodConfDir', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'cat', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'remoteFile', ';']",0
HExecutionEngine.java,"['Process', 'p', '=', 'runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['BufferedWriter', 'bw', ';']",0
HExecutionEngine.java,"['bw', '=', 'new', 'BufferedWriter', '(', 'new', 'OutputStreamWriter', '(', 'new', 'FileOutputStream', '(', 'localFile', ')', ')', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4008', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['bw', '.', 'write', '(', 'line', ',', '0', ',', 'line', '.', 'length', '(', ')', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'newLine', '(', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'copy', 'data', 'to', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'localDir', ';']",0
HExecutionEngine.java,"['private', 'String', 'cmdToString', '(', 'String', '[', ']', 'cmdarray', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'cmd', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'cmdarray', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', 'cmdarray', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
HExecutionEngine.java,"['return', 'cmd', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'Process', 'runCommand', '(', 'String', 'server', ',', 'String', '[', ']', 'cmdarray', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['Process', 'p', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['p', '=', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmdarray', ')', ';']",0
HExecutionEngine.java,"['SSHSocketImplFactory', 'fac', '=', 'SSHSocketImplFactory', '.', 'getFactory', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['p', '=', 'fac', '.', 'ssh', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'connect', ')']",0
HExecutionEngine.java,"['hodProcess', '=', 'p', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'should', 'return', 'as', 'soon', 'as', 'connection', 'is', 'shutdown']",0
HExecutionEngine.java,"['int', 'rc', '=', 'p', '.', 'waitFor', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'rc', '!', '=', '0', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'errMsg', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6011', ';']",0
HExecutionEngine.java,"['StringBuilder', 'msg', '=', 'new', 'StringBuilder', '(', '""', 'Failed', 'to', 'run', 'command', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', 'on', 'server', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'return', 'code', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'rc', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'error', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'errMsg', '.', 'toString', '(', ')', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', '.', 'toString', '(', ')', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6012', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'run', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', '+', '""', 'on', 'server', '""', '+', 'server', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'p', ';']",0
HExecutionEngine.java,"['private', 'FileSpec', 'checkLeafIsStore', '(', 'PhysicalPlan', 'plan', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['PhysicalOperator', 'leaf', '=', '(', 'PhysicalOperator', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
HExecutionEngine.java,"['FileSpec', 'spec', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', '!', '(', 'leaf', 'instanceof', 'POStore', ')', ')', '{']",0
HExecutionEngine.java,"['String', 'scope', '=', 'leaf', '.', 'getOperatorKey', '(', ')', '.', 'getScope', '(', ')', ';']",0
HExecutionEngine.java,"['POStore', 'str', '=', 'new', 'POStore', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
HExecutionEngine.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setPc', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['spec', '=', 'new', 'FileSpec', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',']",0
HExecutionEngine.java,"['pigContext', ')', '.', 'toString', '(', ')', ',']",0
HExecutionEngine.java,"['new', 'FuncSpec', '(', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setSFile', '(', 'spec', ')', ';']",0
HExecutionEngine.java,"['plan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['spec', '=', '(', '(', 'POStore', ')', 'leaf', ')', '.', 'getSFile', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'spec', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteDir', '(', 'String', 'server', ',', 'String', 'dir', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['File', 'path', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'path', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'send', 'rm', 'command', 'over', 'ssh']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '3', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'rm', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', '-', 'rf', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'remove', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteLocalDir', '(', 'File', 'path', ')', '{']",0
HExecutionEngine.java,"['File', '[', ']', 'files', '=', 'path', '.', 'listFiles', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'i', ';']",0
HExecutionEngine.java,"['for', '(', 'i', '=', '0', ';', 'i', '<', 'files', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isHidden', '(', ')', ')']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isFile', '(', ')', ')']",0
HExecutionEngine.java,"['files', '[', 'i', ']', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['else', 'if', '(', 'files', '[', 'i', ']', '.', 'isDirectory', '(', ')', ')']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'files', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['path', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'String', 'fixUpDomain', '(', 'String', 'hostPort', ',', 'Properties', 'properties', ')', 'throws', 'UnknownHostException', '{']",0
HExecutionEngine.java,"['URI', 'uri', '=', 'null', ';']",0
HExecutionEngine.java,"['uri', '=', 'new', 'URI', '(', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'URISyntaxException', 'use', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Illegal', 'hostPort', ':', '""', '+', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['String', 'hostname', '=', 'uri', '.', 'getHost', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'port', '=', 'uri', '.', 'getPort', '(', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Parse', 'manually', 'if', 'hostPort', 'wasn', ""'"", 't', 'non', '-', 'opaque', 'URI']",0
HExecutionEngine.java,"['/', '/', 'e', '.', 'g', '.', 'hostPort', 'is', '""', 'myhost', ':', 'myport', '""']",0
HExecutionEngine.java,"['if', '(', 'hostname', '=', '=', 'null', '|', '|', 'port', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['String', 'parts', '[', ']', '=', 'hostPort', '.', 'split', '(', '""', ':', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'parts', '[', '0', ']', ';']",0
HExecutionEngine.java,"['port', '=', 'Integer', '.', 'valueOf', '(', 'parts', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hostname', '.', 'indexOf', '(', ""'"", '.', ""'"", ')', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['String', 'domain', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ',', 'System', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'domain', '=', '=', 'null', ')']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Missing', 'cluster', '.', 'domain', 'property', '!', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'hostname', '+', '""', '.', '""', '+', 'domain', ';']",0
HExecutionEngine.java,"['InetAddress', '.', 'getByName', '(', 'hostname', ')', ';']",0
HExecutionEngine.java,"['return', 'hostname', '+', '""', ':', '""', '+', 'Integer', '.', 'toString', '(', 'port', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'create', 'temp', 'dir', 'to', 'store', 'hod', 'output', ';', 'removed', 'on', 'exit']",0
HExecutionEngine.java,"['/', '/', 'format', ':', '<', 'tempdir', '>', '/', 'PigHod', '.', '<', 'host', 'name', '>', '.', '<', 'user', 'name', '>', '.', '<', 'nanosecondts', '>']",0
HExecutionEngine.java,"['private', 'String', 'createTempDir', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['StringBuilder', 'tempDirPrefix', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'java', '.', 'io', '.', 'tmpdir', '""', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'access', 'we', 'assume', '/', 'tmp', 'as', 'temp', 'dir']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'tmp', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'PigHod', '.', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'InetAddress', '.', 'getLocalHost', '(', ')', '.', 'getHostName', '(', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'UnknownHostException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'path', ';']",0
HExecutionEngine.java,"['path', '=', 'tempDirPrefix', '.', 'toString', '(', ')', '+', 'System', '.', 'nanoTime', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'while', '(', '!', 'createDir', '(', 'server', ',', 'path', ')', ')', ';']",0
HExecutionEngine.java,"['return', 'path', ';']",0
HExecutionEngine.java,"['private', 'boolean', 'createDir', '(', 'String', 'server', ',', 'String', 'dir', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'create', 'local', 'directory']",0
HExecutionEngine.java,"['File', 'tempDir', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['boolean', 'success', '=', 'tempDir', '.', 'mkdir', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', '!', 'success', ')']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', '.', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'success', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'mkdir', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'ExecException', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'false', ';']",0
HExecutionEngine.java,"['return', 'true', ';']",0
HExecutionEngine.java,"['/', '/', 'returns', 'number', 'of', 'nodes', 'based', 'on', '-', 'm', 'option', 'in', 'hodParams', 'if', 'present', ';']",0
HExecutionEngine.java,"['/', '/', 'otherwise', ',', 'default', 'is', 'used', ';', '-', 'm', 'is', 'removed', 'from', 'the', 'params']",0
HExecutionEngine.java,"['int', 'getNumNodes', '(', 'StringBuilder', 'hodParams', ')', '{']",0
HExecutionEngine.java,"['String', 'val', '=', 'hodParams', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '=', '=', '-', '1', ')']",0
HExecutionEngine.java,"['startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '\\', 't', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '!', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['int', 'curPos', '=', 'startPos', '+', '3', ';']",0
HExecutionEngine.java,"['int', 'len', '=', 'val', '.', 'length', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isWhitespace', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'numStartPos', '=', 'curPos', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isDigit', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'Integer', '.', 'parseInt', '(', 'val', '.', 'substring', '(', 'numStartPos', ',', 'curPos', ')', ')', ';']",0
HExecutionEngine.java,"['hodParams', '.', 'delete', '(', 'startPos', ',', 'curPos', ')', ';']",0
HExecutionEngine.java,"['return', 'nodes', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['return', 'Integer', '.', 'getInteger', '(', '""', 'hod', '.', 'nodes', '""', ',', '15', ')', ';']",0
HExecutionEngine.java,"['/', '*', '*']",0
HExecutionEngine.java,"['private', 'void', 'recomputeProperties', '(', 'JobConf', 'jobConf', ',', 'Properties', 'properties', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'We', 'want', 'to', 'override', 'these', 'with', 'any', 'existing', 'properties', 'we', 'have', '.']",0
HExecutionEngine.java,"['if', '(', 'jobConf', '!', '=', 'null', '&', '&', 'properties', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['Properties', 'hadoopProperties', '=', 'new', 'Properties', '(', ')', ';']",0
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'entry', '.', 'getKey', '(', ')', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'override', 'hadoop', 'properties', 'with', 'user', 'defined', 'properties']",0
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",0
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'hodPropertiesIter', '=', 'hadoopProperties', '.', 'keys', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'val', '=', 'hadoopProperties', '.', 'getProperty', '(', 'key', ')', ';']",0
BinStorage.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'BufferedOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ReversibleLoadStoreFunc', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataReaderWriter', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
BinStorage.java,"['public', 'class', 'BinStorage', 'implements', 'ReversibleLoadStoreFunc', '{']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_1', '=', '0x01', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_2', '=', '0x02', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_3', '=', '0x03', ';']",0
BinStorage.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'null', ';']",0
BinStorage.java,"['protected', 'BufferedPositionedInputStream', 'in', '=', 'null', ';']",0
BinStorage.java,"['private', 'static', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'BinStorage', '.', 'class', ')', ';']",0
BinStorage.java,"['private', 'DataInputStream', 'inData', '=', 'null', ';']",0
BinStorage.java,"['protected', 'long', 'end', '=', 'Long', '.', 'MAX_VALUE', ';']",0
BinStorage.java,"['/', '*', '*']",0
BinStorage.java,"['public', 'BinStorage', '(', ')', '{']",0
BinStorage.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['byte', 'b', '=', '0', ';']",0
BinStorage.java,"['/', '/', 'skip', 'to', 'next', 'record']",0
BinStorage.java,"['while', '(', 'true', ')', '{']",0
BinStorage.java,"['if', '(', 'in', '=', '=', 'null', '|', '|', 'in', '.', 'getPosition', '(', ')', '>', '=', 'end', ')', '{']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '/', 'check', 'if', 'we', 'saw', 'RECORD_1', 'in', 'our', 'last', 'attempt']",0
BinStorage.java,"['/', '/', 'this', 'can', 'happen', 'if', 'we', 'have', 'the', 'following']",0
BinStorage.java,"['/', '/', 'sequence', 'RECORD_1', '-', 'RECORD_1', '-', 'RECORD_2', '-', 'RECORD_3']",0
BinStorage.java,"['/', '/', 'After', 'reading', 'the', 'second', 'RECORD_1', 'in', 'the', 'above']",0
BinStorage.java,"['/', '/', 'sequence', ',', 'we', 'should', 'not', 'look', 'for', 'RECORD_1', 'again']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', ')', '{']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_2', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_3', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'DataType', '.', 'TUPLE', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['/', '/', 'if', 'we', 'got', 'here', ',', 'we', 'have', 'seen', 'RECORD_1', '-', 'RECORD_2', '-', 'RECORD_3', '-', 'TUPLE_MARKER']",0
BinStorage.java,"['/', '/', 'sequence', '-', 'lets', 'now', 'read', 'the', 'contents', 'of', 'the', 'tuple']",0
BinStorage.java,"['return', '(', 'Tuple', ')', 'DataReaderWriter', '.', 'readDatum', '(', 'inData', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
BinStorage.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'in', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'in', '=', 'in', ';']",0
BinStorage.java,"['inData', '=', 'new', 'DataInputStream', '(', 'in', ')', ';']",0
BinStorage.java,"['this', '.', 'end', '=', 'end', ';']",0
BinStorage.java,"['DataOutputStream', 'out', '=', 'null', ';']",0
BinStorage.java,"['public', 'void', 'bindTo', '(', 'OutputStream', 'os', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'out', '=', 'new', 'DataOutputStream', '(', 'new', 'BufferedOutputStream', '(', 'os', ')', ')', ';']",0
BinStorage.java,"['public', 'void', 'finish', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'flush', '(', ')', ';']",0
BinStorage.java,"['public', 'void', 'putNext', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_1', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_2', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_3', ')', ';']",0
BinStorage.java,"['t', '.', 'write', '(', 'out', ')', ';']",0
BinStorage.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToBag', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'bag', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToCharArray', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'chararray', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Double', '(', 'dis', '.', 'readDouble', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'double', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Float', '(', 'dis', '.', 'readFloat', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'float', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Integer', '(', 'dis', '.', 'readInt', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'integer', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Long', '(', 'dis', '.', 'readLong', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'long', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToMap', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'map', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToTuple', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'tuple', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
BinStorage.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
BinStorage.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['if', '(', '!', 'FileLocalizer', '.', 'fileExists', '(', 'fileName', ',', 'storage', ')', ')', '{']",0
BinStorage.java,"['/', '/', 'At', 'compile', 'time', 'in', 'batch', 'mode', ',', 'the', 'file', 'may', 'not', 'exist']",0
BinStorage.java,"['/', '/', '(', 'such', 'as', 'intermediate', 'file', ')', '.', 'Just', 'return', 'null', '-', 'the']",0
BinStorage.java,"['/', '/', 'same', 'way', 'as', 'we', 'would', 'if', 'we', 'did', 'not', 'get', 'a', 'valid', 'record']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'fileName', ',', 'execType', ',', 'storage', ')', ';']",0
BinStorage.java,"['bindTo', '(', 'fileName', ',', 'new', 'BufferedPositionedInputStream', '(', 'is', ')', ',', '0', ',', 'Long', '.', 'MAX_VALUE', ')', ';']",0
BinStorage.java,"['/', '/', 'get', 'the', 'first', 'record', 'from', 'the', 'input', 'file']",0
BinStorage.java,"['/', '/', 'and', 'figure', 'out', 'the', 'schema', 'from', 'the', 'data', 'in']",0
BinStorage.java,"['/', '/', 'the', 'first', 'record']",0
BinStorage.java,"['Tuple', 't', '=', 'getNext', '(', ')', ';']",0
BinStorage.java,"['is', '.', 'close', '(', ')', ';']",0
BinStorage.java,"['if', '(', 't', '=', '=', 'null', ')', '{']",0
BinStorage.java,"['/', '/', 'we', 'couldn', ""'"", 't', 'get', 'a', 'valid', 'record', 'from', 'the', 'input']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['int', 'numFields', '=', 't', '.', 'size', '(', ')', ';']",0
BinStorage.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
BinStorage.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'numFields', ';', 'i', '+', '+', ')', '{']",0
BinStorage.java,"['s', '.', 'add', '(', 'DataType', '.', 'determineFieldSchema', '(', 't', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2104', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'determining', 'schema', 'of', 'BinStorage', 'data', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
BinStorage.java,"['return', 's', ';']",0
BinStorage.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
BinStorage.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'bag', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'bag', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 's', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'chararray', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'd', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'double', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'f', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'float', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'i', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'int', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'l', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'long', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'm', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'map', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 't', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'tuple', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'boolean', 'equals', '(', 'Object', 'obj', ')', '{']",0
BinStorage.java,"['return', 'true', ';']",0
BinStorage.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
BinStorage.java,"['public', 'Class', 'getStorePreparationClass', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
BinStorage.java,"['return', 'null', ';']",0
Grunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
Grunt.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Grunt.java,"['import', 'jline', '.', 'Completor', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'PigCompletor', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'PigCompletorAliases', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', '*', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'TokenMgrError', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Grunt.java,"['public', 'class', 'Grunt']",0
Grunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Grunt.java,"['BufferedReader', 'in', ';']",0
Grunt.java,"['PigServer', 'pig', ';']",0
Grunt.java,"['GruntParser', 'parser', ';']",0
Grunt.java,"['public', 'Grunt', '(', 'BufferedReader', 'in', ',', 'PigContext', 'pigContext', ')', 'throws', 'ExecException']",0
Grunt.java,"['this', '.', 'in', '=', 'in', ';']",0
Grunt.java,"['this', '.', 'pig', '=', 'new', 'PigServer', '(', 'pigContext', ')', ';']",0
Grunt.java,"['if', '(', 'in', '!', '=', 'null', ')']",0
Grunt.java,"['parser', '=', 'new', 'GruntParser', '(', 'in', ')', ';']",0
Grunt.java,"['parser', '.', 'setParams', '(', 'pig', ')', ';']",0
Grunt.java,"['public', 'void', 'setConsoleReader', '(', 'ConsoleReader', 'c', ')']",0
Grunt.java,"['c', '.', 'addCompletor', '(', 'new', 'PigCompletorAliases', '(', 'pig', ')', ')', ';']",0
Grunt.java,"['c', '.', 'addCompletor', '(', 'new', 'PigCompletor', '(', ')', ')', ';']",0
Grunt.java,"['parser', '.', 'setConsoleReader', '(', 'c', ')', ';']",0
Grunt.java,"['public', 'void', 'run', '(', ')', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['while', '(', 'true', ')', '{']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'true', ')', ';']",0
Grunt.java,"['parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['parser', '.', 'ReInit', '(', 'in', ')', ';']",0
Grunt.java,"['public', 'int', '[', ']', 'exec', '(', ')', 'throws', 'Throwable', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'false', ')', ';']",0
Grunt.java,"['return', 'parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['throw', '(', 't', ')', ';']",0
Main.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
Main.java,"['import', 'java', '.', 'io', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', 'jar', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'text', '.', 'ParseException', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
Main.java,"['import', 'jline', '.', 'History', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'Level', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'PropertyConfigurator', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'JarManager', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'cmdline', '.', 'CmdLineParser', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'timer', '.', 'PerformanceTimerFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
Main.java,"['public', 'class', 'Main']",0
Main.java,"['private', 'final', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'LOG4J_CONF', '=', '""', 'log4jconf', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'BRIEF', '=', '""', 'brief', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'DEBUG', '=', '""', 'debug', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'JAR', '=', '""', 'jar', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'VERBOSE', '=', '""', 'verbose', '""', ';']",0
Main.java,"['private', 'enum', 'ExecMode', '{', 'STRING', ',', 'FILE', ',', 'SHELL', ',', 'UNKNOWN', '}', ';']",0
Main.java,"['/', '*', '*']",0
Main.java,"['public', 'static', 'void', 'main', '(', 'String', 'args', '[', ']', ')']",0
Main.java,"['int', 'rc', '=', '1', ';']",0
Main.java,"['Properties', 'properties', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['PropertiesUtil', '.', 'loadPropertiesFromFile', '(', 'properties', ')', ';']",0
Main.java,"['boolean', 'verbose', '=', 'false', ';']",0
Main.java,"['boolean', 'gruntCalled', '=', 'false', ';']",0
Main.java,"['String', 'logFileName', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'pin', '=', 'null', ';']",0
Main.java,"['boolean', 'debug', '=', 'false', ';']",0
Main.java,"['boolean', 'dryrun', '=', 'false', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'params', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['HashSet', '<', 'String', '>', 'optimizerRules', '=', 'new', 'HashSet', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['CmdLineParser', 'opts', '=', 'new', 'CmdLineParser', '(', 'args', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", '4', ""'"", ',', '""', 'log4jconf', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'b', ""'"", ',', '""', 'brief', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'c', ""'"", ',', '""', 'cluster', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'd', ""'"", ',', '""', 'debug', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'e', ""'"", ',', '""', 'execute', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'f', ""'"", ',', '""', 'file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'h', ""'"", ',', '""', 'help', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'i', ""'"", ',', '""', 'version', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'j', ""'"", ',', '""', 'jar', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'l', ""'"", ',', '""', 'logfile', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'm', ""'"", ',', '""', 'param_file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'o', ""'"", ',', '""', 'hod', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'p', ""'"", ',', '""', 'param', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'r', ""'"", ',', '""', 'dryrun', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 't', ""'"", ',', '""', 'optimizer_off', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'v', ""'"", ',', '""', 'verbose', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'w', ""'"", ',', '""', 'warning', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'x', ""'"", ',', '""', 'exectype', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'F', ""'"", ',', '""', 'stop_on_failure', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'M', ""'"", ',', '""', 'no_multiquery', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['ExecMode', 'mode', '=', 'ExecMode', '.', 'UNKNOWN', ';']",0
Main.java,"['String', 'file', '=', 'null', ';']",0
Main.java,"['ExecType', 'execType', '=', 'ExecType', '.', 'MAPREDUCE', ';']",0
Main.java,"['String', 'execTypeString', '=', 'properties', '.', 'getProperty', '(', '""', 'exectype', '""', ')', ';']",0
Main.java,"['if', '(', 'execTypeString', '!', '=', 'null', '&', '&', 'execTypeString', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'execTypeString', ')', ';']",0
Main.java,"['String', 'cluster', '=', '""', 'local', '""', ';']",0
Main.java,"['String', 'clusterConfigured', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '""', ')', ';']",0
Main.java,"['if', '(', 'clusterConfigured', '!', '=', 'null', '&', '&', 'clusterConfigured', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterConfigured', ';']",0
Main.java,"['/', '/', 'by', 'default', 'warning', 'aggregation', 'is', 'on']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['/', '/', 'by', 'default', 'multiquery', 'optimization', 'is', 'on']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['/', '/', 'by', 'default', 'we', 'keep', 'going', 'on', 'error', 'on', 'the', 'backend']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['char', 'opt', ';']",0
Main.java,"['while', '(', '(', 'opt', '=', 'opts', '.', 'getNextOpt', '(', ')', ')', '!', '=', 'CmdLineParser', '.', 'EndOfOpts', ')', '{']",0
Main.java,"['switch', '(', 'opt', ')', '{']",0
Main.java,"['case', ""'"", '4', ""'"", ':']",0
Main.java,"['String', 'log4jconf', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'LOG4J_CONF', ',', 'log4jconf', ')', ';']",0
Main.java,"['case', ""'"", 'b', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'BRIEF', ',', '""', 'true', '""', ')', ';']",0
Main.java,"['case', ""'"", 'c', ""'"", ':']",0
Main.java,"['/', '/', 'Needed', 'away', 'to', 'specify', 'the', 'cluster', 'to', 'run', 'the', 'MR', 'job', 'on']",0
Main.java,"['/', '/', 'Bug', '831708', '-', 'fixed']",0
Main.java,"['String', 'clusterParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'clusterParameter', '!', '=', 'null', '&', '&', 'clusterParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterParameter', ';']",0
Main.java,"['case', ""'"", 'd', ""'"", ':']",0
Main.java,"['String', 'logLevel', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logLevel', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'DEBUG', ',', 'logLevel', ')', ';']",0
Main.java,"['debug', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'e', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'STRING', ';']",0
Main.java,"['case', ""'"", 'f', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['file', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['case', ""'"", 'F', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['case', ""'"", 'h', ""'"", ':']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['case', ""'"", 'i', ""'"", ':']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', 'getVersionString', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'j', ""'"", ':']",0
Main.java,"['String', 'jarsString', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'jarsString', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'JAR', ',', 'jarsString', ')', ';']",0
Main.java,"['case', ""'"", 'l', ""'"", ':']",0
Main.java,"['/', '/', 'call', 'to', 'method', 'that', 'validates', 'the', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'and', 'sets', 'up', 'the', 'file', 'to', 'store', 'the', 'client', 'side', 'log', 'file']",0
Main.java,"['String', 'logFileParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logFileParameter', '!', '=', 'null', '&', '&', 'logFileParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileParameter', ',', 'null', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'null', ')', ';']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['case', ""'"", 'm', ""'"", ':']",0
Main.java,"['paramFiles', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'M', ""'"", ':']",0
Main.java,"['/', '/', 'turns', 'off', 'multiquery', 'optimization']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['case', ""'"", 'o', ""'"", ':']",0
Main.java,"['/', '/', 'TODO', 'sgroschupf', 'using', 'system', 'properties', 'is', 'always', 'a', 'very', 'bad', 'idea']",0
Main.java,"['String', 'gateway', '=', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['if', '(', 'gateway', '=', '=', 'null', '|', '|', 'gateway', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', '""', 'local', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ')', ';']",0
Main.java,"['case', ""'"", 'p', ""'"", ':']",0
Main.java,"['String', 'val', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['params', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'r', ""'"", ':']",0
Main.java,"['/', '/', 'currently', 'only', 'used', 'for', 'parameter', 'substitution']",0
Main.java,"['/', '/', 'will', 'be', 'extended', 'in', 'the', 'future']",0
Main.java,"['dryrun', '=', 'true', ';']",0
Main.java,"['case', ""'"", 't', ""'"", ':']",0
Main.java,"['optimizerRules', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'v', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'VERBOSE', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['verbose', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'w', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['case', ""'"", 'x', ""'"", ':']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'ERROR', ':', 'Unrecognized', 'exectype', '.', '""', ',', 'e', ')', ';']",0
Main.java,"['default', ':', '{']",0
Main.java,"['Character', 'cc', '=', 'new', 'Character', '(', 'opt', ')', ';']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Unhandled', 'option', '""', '+', 'cc', '.', 'toString', '(', ')', ')', ';']",0
Main.java,"['/', '/', 'configure', 'logging']",0
Main.java,"['configureLog4J', '(', 'properties', ')', ';']",0
Main.java,"['/', '/', 'create', 'the', 'context', 'with', 'the', 'parameter']",0
Main.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'null', ',', 'null', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['if', '(', 'optimizerRules', '.', 'size', '(', ')', '>', '0', ')', '{']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'optimizer', '.', 'rules', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'optimizerRules', ')', ')', ';']",0
Main.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'pigContext', '.', 'createCl', '(', 'null', ')', ';']",0
Main.java,"['/', '/', 'construct', 'the', 'parameter', 'substitution', 'preprocessor']",0
Main.java,"['Grunt', 'grunt', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'in', ';']",0
Main.java,"['String', 'substFile', '=', 'null', ';']",0
Main.java,"['switch', '(', 'mode', ')', '{']",0
Main.java,"['case', 'FILE', ':', '{']",0
Main.java,"['/', '/', 'Run', ',', 'using', 'the', 'provided', 'file', 'as', 'a', 'pig', 'file']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'file', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'file', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'file', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'file', ')', '.', 'getName', '(', ')']",0
Main.java,"['if', '(', '!', 'debug', ')', '{']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', 'results', '[', ']', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['case', 'STRING', ':', '{']",0
Main.java,"['/', '/', 'Gather', 'up', 'all', 'the', 'remaining', 'arguments', 'into', 'a', 'string', 'and', 'pass', 'them', 'into']",0
Main.java,"['/', '/', 'grunt', '.']",0
Main.java,"['StringBuffer', 'sb', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'remainders', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Main.java,"['if', '(', 'i', '!', '=', '0', ')', 'sb', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
Main.java,"['sb', '.', 'append', '(', 'remainders', '[', 'i', ']', ')', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'sb', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'in', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', 'results', '[', ']', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['/', '/', 'If', 'we', ""'"", 're', 'here', ',', 'we', 'don', ""'"", 't', 'know', 'yet', 'what', 'they', 'want', '.', 'They', 'may', 'have', 'just']",0
Main.java,"['/', '/', 'given', 'us', 'a', 'jar', 'to', 'execute', ',', 'they', 'might', 'have', 'given', 'us', 'a', 'pig', 'script', 'to']",0
Main.java,"['/', '/', 'execute', ',', 'or', 'they', 'might', 'have', 'given', 'us', 'a', 'dash', '(', 'or', 'nothing', ')', 'which', 'means', 'to']",0
Main.java,"['/', '/', 'run', 'grunt', 'interactive', '.']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['if', '(', 'remainders', '=', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'Interactive']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'SHELL', ';']",0
Main.java,"['ConsoleReader', 'reader', '=', 'new', 'ConsoleReader', '(', 'System', '.', 'in', ',', 'new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
Main.java,"['reader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
Main.java,"['final', 'String', 'HISTORYFILE', '=', '""', '.', 'pig_history', '""', ';']",0
Main.java,"['String', 'historyFile', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'home', '""', ')', '+', 'File', '.', 'separator', '+', 'HISTORYFILE', ';']",0
Main.java,"['reader', '.', 'setHistory', '(', 'new', 'History', '(', 'new', 'File', '(', 'historyFile', ')', ')', ')', ';']",0
Main.java,"['ConsoleReaderInputStream', 'inputStream', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'inputStream', ')', ')', ',', 'pigContext', ')', ';']",0
Main.java,"['grunt', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'run', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'They', 'have', 'a', 'pig', 'script', 'they', 'want', 'us', 'to', 'run', '.']",0
Main.java,"['if', '(', 'remainders', '.', 'length', '>', '1', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'You', 'can', 'only', 'run', 'one', 'pig', 'script', '""']",0
Main.java,"['+', '""', 'at', 'a', 'time', 'from', 'the', 'command', 'line', '.', '""', ')', ';']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'remainders', '[', '0', ']', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'remainders', '[', '0', ']', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'remainders', '[', '0', ']', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['if', '(', '!', 'debug', ')', '{']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'remainders', '[', '0', ']', ')', '.', 'getName', '(', ')']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', '[', ']', 'results', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['/', '/', 'Per', 'Utkarsh', 'and', 'Chris', 'invocation', 'of', 'jar', 'file', 'via', 'pig', 'depricated', '.']",0
Main.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'NumberFormatException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'PigException', 'pe', ')', '{']",0
Main.java,"['if', '(', 'pe', '.', 'retriable', '(', ')', ')', '{']",0
Main.java,"['rc', '=', '1', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'pe', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'catch', '(', 'Throwable', 'e', ')', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'e', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'finally', '{']",0
Main.java,"['/', '/', 'clear', 'temp', 'files']",0
Main.java,"['FileLocalizer', '.', 'deleteTempFiles', '(', ')', ';']",0
Main.java,"['PerformanceTimerFactory', '.', 'getPerfTimerFactory', '(', ')', '.', 'dumpTimers', '(', ')', ';']",0
Main.java,"['System', '.', 'exit', '(', 'rc', ')', ';']",0
Main.java,"['private', 'static', 'int', 'getReturnCodeForStats', '(', 'int', '[', ']', 'stats', ')', '{']",0
Main.java,"['if', '(', 'stats', '[', '1', ']', '=', '=', '0', ')', '{']",0
Main.java,"['/', '/', 'no', 'failed', 'jobs']",0
Main.java,"['return', '0', ';']",0
Main.java,"['if', '(', 'stats', '[', '0', ']', '=', '=', '0', ')', '{']",0
Main.java,"['/', '/', 'no', 'succeeded', 'jobs']",0
Main.java,"['return', '2', ';']",0
Main.java,"['/', '/', 'some', 'jobs', 'have', 'failed']",0
Main.java,"['return', '3', ';']",0
Main.java,"['/', '/', 'TODO', 'jz', ':', 'log4j', '.', 'properties', 'should', 'be', 'used', 'instead']",0
Main.java,"['private', 'static', 'void', 'configureLog4J', '(', 'Properties', 'properties', ')', '{']",0
Main.java,"['/', '/', 'TODO', 'Add', 'a', 'file', 'appender', 'for', 'the', 'logs']",0
Main.java,"['/', '/', 'TODO', 'Need', 'to', 'create', 'a', 'property', 'in', 'the', 'properties', 'file', 'for', 'it', '.']",0
Main.java,"['/', '/', 'sgroschupf', ',', '25Feb2008', ':', 'this', 'method', 'will', 'be', 'obsolete', 'with', 'PIG', '-', '115', '.']",0
Main.java,"['String', 'log4jconf', '=', 'properties', '.', 'getProperty', '(', 'LOG4J_CONF', ')', ';']",0
Main.java,"['String', 'trueString', '=', '""', 'true', '""', ';']",0
Main.java,"['boolean', 'brief', '=', 'trueString', '.', 'equalsIgnoreCase', '(', 'properties', '.', 'getProperty', '(', 'BRIEF', ')', ')', ';']",0
Main.java,"['Level', 'logLevel', '=', 'Level', '.', 'INFO', ';']",0
Main.java,"['String', 'logLevelString', '=', 'properties', '.', 'getProperty', '(', 'DEBUG', ')', ';']",0
Main.java,"['if', '(', 'logLevelString', '!', '=', 'null', ')', '{']",0
Main.java,"['logLevel', '=', 'Level', '.', 'toLevel', '(', 'logLevelString', ',', 'Level', '.', 'INFO', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'log4jconf', ')', ';']",0
Main.java,"['}', 'else', 'if', '(', '!', 'brief', ')', '{']",0
Main.java,"['/', '/', 'non', '-', 'brief', 'logging', '-', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'd', '[', '%', 't', ']', '%', '-', '5p', '%', 'c', '-', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'brief', 'logging', '-', 'no', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['/', '/', 'returns', 'the', 'stream', 'of', 'final', 'pig', 'script', 'to', 'be', 'passed', 'to', 'Grunt']",0
Main.java,"['private', 'static', 'BufferedReader', 'runParamPreprocessor', '(', 'BufferedReader', 'origPigScript', ',', 'ArrayList', '<', 'String', '>', 'params', ',']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', ',', 'String', 'scriptFile', ',', 'boolean', 'createFile', ')']",0
Main.java,"['throws', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', ',', 'IOException', '{']",0
Main.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
Main.java,"['String', '[', ']', 'type1', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['String', '[', ']', 'type2', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['if', '(', 'createFile', ')', '{']",0
Main.java,"['BufferedWriter', 'fw', '=', 'new', 'BufferedWriter', '(', 'new', 'FileWriter', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'fw', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'writer', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'writer', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getVersionString', '(', ')', '{']",0
Main.java,"['String', 'findContainingJar', '=', 'JarManager', '.', 'findContainingJar', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['StringBuffer', 'buffer', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['JarFile', 'jar', '=', 'new', 'JarFile', '(', 'findContainingJar', ')', ';']",0
Main.java,"['final', 'Manifest', 'manifest', '=', 'jar', '.', 'getManifest', '(', ')', ';']",0
Main.java,"['final', 'Map', '<', 'String', ',', 'Attributes', '>', 'attrs', '=', 'manifest', '.', 'getEntries', '(', ')', ';']",0
Main.java,"['Attributes', 'attr', '=', 'attrs', '.', 'get', '(', '""', 'org', '/', 'apache', '/', 'pig', '""', ')', ';']",0
Main.java,"['String', 'version', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Implementation', '-', 'Version', '""', ')', ';']",0
Main.java,"['String', 'svnRevision', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Svn', '-', 'Revision', '""', ')', ';']",0
Main.java,"['String', 'buildTime', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Build', '-', 'TimeStamp', '""', ')', ';']",0
Main.java,"['/', '/', 'we', 'use', 'a', 'version', 'string', 'similar', 'to', 'svn']",0
Main.java,"['/', '/', 'svn', ',', 'version', '1', '.', '4', '.', '4', '(', 'r25188', ')']",0
Main.java,"['/', '/', 'compiled', 'Sep', '23', '2007', ',', '22', ':', '32', ':', '34']",0
Main.java,"['return', '""', 'Apache', 'Pig', 'version', '""', '+', 'version', '+', '""', '(', 'r', '""', '+', 'svnRevision', '+', '""', ')', '\\', 'ncompiled', '""', '+', 'buildTime', ';']",0
Main.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'unable', 'to', 'read', 'pigs', 'manifest', 'file', '""', ',', 'e', ')', ';']",0
Main.java,"['public', 'static', 'void', 'usage', '(', ')']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '\\', 'n', '""', '+', 'getVersionString', '(', ')', '+', '""', '\\', 'n', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'USAGE', ':', 'Pig', '[', 'options', ']', '[', '-', ']', ':', 'Run', 'interactively', 'in', 'grunt', 'shell', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '-', 'e', '[', 'xecute', ']', 'cmd', '[', 'cmd', '.', '.', '.', ']', ':', 'Run', 'cmd', '(', 's', ')', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '[', '-', 'f', '[', 'ile', ']', ']', 'file', ':', 'Run', 'cmds', 'found', 'in', 'file', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'options', 'include', ':', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '4', ',', '-', 'log4jconf', 'log4j', 'configuration', 'file', ',', 'overrides', 'log', 'conf', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'b', ',', '-', 'brief', 'brief', 'logging', '(', 'no', 'timestamps', ')', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'c', ',', '-', 'cluster', 'clustername', ',', 'kryptonite', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'd', ',', '-', 'debug', 'debug', 'level', ',', 'INFO', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'e', ',', '-', 'execute', 'commands', 'to', 'execute', '(', 'within', 'quotes', ')', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'f', ',', '-', 'file', 'path', 'to', 'the', 'script', 'to', 'execute', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'h', ',', '-', 'help', 'display', 'this', 'message', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'i', ',', '-', 'version', 'display', 'version', 'information', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'j', ',', '-', 'jar', 'jarfile', 'load', 'jarfile', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'l', ',', '-', 'logfile', 'path', 'to', 'client', 'side', 'log', 'file', ';', 'current', 'working', 'directory', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'm', ',', '-', 'param_file', 'path', 'to', 'the', 'parameter', 'file', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'o', ',', '-', 'hod', 'read', 'hod', 'server', 'from', 'system', 'property', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'p', ',', '-', 'param', 'key', 'value', 'pair', 'of', 'the', 'form', 'param', '=', 'val', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'r', ',', '-', 'dryrun', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 't', ',', '-', 'optimizer_off', 'optimizer', 'rule', 'name', ',', 'turn', 'optimizer', 'off', 'for', 'this', 'rule', ';', 'use', 'all', 'to', 'turn', 'all', 'rules', 'off', ',', 'optimizer', 'is', 'turned', 'on', 'by', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'v', ',', '-', 'verbose', 'print', 'all', 'error', 'messages', 'to', 'screen', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'w', ',', '-', 'warning', 'turn', 'warning', 'on', ';', 'also', 'turns', 'warning', 'aggregation', 'off', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'x', ',', '-', 'exectype', 'local', '|', 'mapreduce', ',', 'mapreduce', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'F', ',', '-', 'stop_on_failure', 'aborts', 'execution', 'on', 'the', 'first', 'failed', 'job', ';', 'off', 'by', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'M', ',', '-', 'no_multiquery', 'turn', 'multiquery', 'optimization', 'off', ';', 'Multiquery', 'is', 'on', 'by', 'default', '""', ')', ';']",0
Main.java,"['private', 'static', 'String', 'validateLogFile', '(', 'String', 'logFileName', ',', 'String', 'scriptName', ')', '{']",0
Main.java,"['String', 'strippedDownScriptName', '=', 'null', ';']",0
Main.java,"['if', '(', 'scriptName', '!', '=', 'null', ')', '{']",0
Main.java,"['File', 'scriptFile', '=', 'new', 'File', '(', 'scriptName', ')', ';']",0
Main.java,"['if', '(', '!', 'scriptFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['String', 'scriptFileAbsPath', ';']",0
Main.java,"['scriptFileAbsPath', '=', 'scriptFile', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'script', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['strippedDownScriptName', '=', 'getFileFromCanonicalPath', '(', 'scriptFileAbsPath', ')', ';']",0
Main.java,"['String', 'defaultLogFileName', '=', '(', 'strippedDownScriptName', '=', '=', 'null', '?', '""', 'pig_', '""', ':', 'strippedDownScriptName', ')', '+', 'new', 'Date', '(', ')', '.', 'getTime', '(', ')', '+', '""', '.', 'log', '""', ';']",0
Main.java,"['File', 'logFile', ';']",0
Main.java,"['if', '(', 'logFileName', '!', '=', 'null', ')', '{']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Check', 'if', 'the', 'file', 'name', 'is', 'a', 'directory']",0
Main.java,"['/', '/', 'append', 'the', 'default', 'file', 'name', 'to', 'the', 'file']",0
Main.java,"['if', '(', 'logFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'logFile', '.', 'getCanonicalPath', '(', ')', '+', 'File', '.', 'separator', '+', 'defaultLogFileName', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFileName', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'we', 'have', 'a', 'relative', 'path', 'or', 'an', 'absolute', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'check', 'if', 'we', 'can', 'write', 'to', 'the', 'directory', 'where', 'this', 'file', 'is', '/', 'will', 'be', 'stored']",0
Main.java,"['if', '(', 'logFile', '.', 'exists', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'do', 'not', 'have', 'write', 'permissions', 'for', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'bail', 'out', 'with', 'an', 'error', 'message']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Cannot', 'write', 'to', 'file', ':', '""', '+', 'logFileName', '+', '""', '.', 'Need', 'write', 'permission', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['logFile', '=', 'logFile', '.', 'getParentFile', '(', ')', ';']",0
Main.java,"['if', '(', 'logFile', '!', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'if', 'the', 'directory', 'is', 'writable', 'we', 'are', 'good', 'to', 'go']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFile', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFile', '!', '=', 'null', 'else', 'is', 'the', 'default', 'in', 'fall', 'through']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'exists', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'isDirectory', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFileName', '!', '=', 'null']",0
Main.java,"['/', '/', 'file', 'name', 'is', 'null', 'or', 'its', 'in', 'the', 'current', 'working', 'directory']",0
Main.java,"['/', '/', 'revert', 'to', 'the', 'current', 'working', 'directory']",0
Main.java,"['String', 'currDir', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'dir', '""', ')', ';']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'currDir', ')', ';']",0
Main.java,"['logFileName', '=', 'currDir', '+', 'File', '.', 'separator', '+', '(', 'logFileName', '=', '=', 'null', '?', 'defaultLogFileName', ':', 'logFileName', ')', ';']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Cannot', 'write', 'to', 'log', 'file', ':', '""', '+', 'logFileName', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getFileFromCanonicalPath', '(', 'String', 'canonicalPath', ')', '{']",0
Main.java,"['return', 'canonicalPath', '.', 'substring', '(', 'canonicalPath', '.', 'lastIndexOf', '(', 'File', '.', 'separator', ')', ')', ';']",0
DataReaderWriter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataInput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataOutput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
DataReaderWriter.java,"['/', '*', '*']",0
DataReaderWriter.java,"['public', 'class', 'DataReaderWriter', '{']",0
DataReaderWriter.java,"['private', 'static', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['private', 'static', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['static', 'final', 'int', 'UNSIGNED_SHORT_MAX', '=', '65535', ';']",0
DataReaderWriter.java,"['static', 'final', 'String', 'UTF8', '=', '""', 'UTF', '-', '8', '""', ';']",0
DataReaderWriter.java,"['public', 'static', 'Tuple', 'bytesToTuple', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'size', '""', '+', 'sz', '+', '""', 'for', 'a', 'tuple', '""', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'DataBag', 'bytesToBag', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['public', 'static', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToBigCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'Object', 'readDatum', '(', 'DataInput', 'in', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'b', '=', 'in', '.', 'readByte', '(', ')', ';']",0
DataReaderWriter.java,"['return', 'readDatum', '(', 'in', ',', 'b', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'Object', 'readDatum', '(', 'DataInput', 'in', ',', 'byte', 'type', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
DataReaderWriter.java,"['switch', '(', 'type', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['return', 'bytesToTuple', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['return', 'bytesToBag', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':']",0
DataReaderWriter.java,"['return', 'bytesToMap', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['return', 'new', 'Integer', '(', 'in', '.', 'readInt', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['return', 'new', 'Long', '(', 'in', '.', 'readLong', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['return', 'new', 'Float', '(', 'in', '.', 'readFloat', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Double', '(', 'in', '.', 'readDouble', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['return', 'new', 'Boolean', '(', 'in', '.', 'readBoolean', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Byte', '(', 'in', '.', 'readByte', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'DataByteArray', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BIGCHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToBigCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['return', 'null', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'type', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'void', 'writeDatum', '(']",0
DataReaderWriter.java,"['DataOutput', 'out', ',']",0
DataReaderWriter.java,"['Object', 'val', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'type', '=', 'DataType', '.', 'findType', '(', 'val', ')', ';']",0
DataReaderWriter.java,"['switch', '(', 'type', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['/', '/', 'Because', 'tuples', 'are', 'written', 'directly', 'by', 'hadoop', ',', 'the']",0
DataReaderWriter.java,"['/', '/', 'tuple', ""'"", 's', 'write', 'method', 'needs', 'to', 'write', 'the', 'indicator', 'byte', '.']",0
DataReaderWriter.java,"['/', '/', 'So', 'don', ""'"", 't', 'write', 'the', 'indicator', 'byte', 'here', 'as', 'it', 'is', 'for']",0
DataReaderWriter.java,"['/', '/', 'everyone', 'else', '.']",0
DataReaderWriter.java,"['(', '(', 'Tuple', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BAG', ')', ';']",0
DataReaderWriter.java,"['(', '(', 'DataBag', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'MAP', ')', ';']",0
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'm', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', '>', 'i', '=']",0
DataReaderWriter.java,"['m', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', ';']",0
DataReaderWriter.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
DataReaderWriter.java,"['Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', 'entry', '=', 'i', '.', 'next', '(', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', '(', 'Integer', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'LONG', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeLong', '(', '(', 'Long', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeFloat', '(', '(', 'Float', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeDouble', '(', '(', 'Double', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BOOLEAN', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeBoolean', '(', '(', 'Boolean', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', '(', 'Byte', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
DataReaderWriter.java,"['DataByteArray', 'bytes', '=', '(', 'DataByteArray', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'bytes', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'bytes', '.', 'mData', ')', ';']",0
DataReaderWriter.java,"['String', 's', '=', '(', 'String', ')', 'val', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'utfBytes', '=', 's', '.', 'getBytes', '(', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['int', 'length', '=', 'utfBytes', '.', 'length', ';']",0
DataReaderWriter.java,"['if', '(', 'length', '<', 'DataReaderWriter', '.', 'UNSIGNED_SHORT_MAX', ')', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeShort', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BIGCHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'NULL', ')', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'type', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
MapReduceLauncher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Counters', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MRCompiler', '.', 'LastInputStreamingOptimizer', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRPrinter', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'DotMRPrinter', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRStreamHandler', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'POPackageAnnotator', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POJoinPackage', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'Message', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ConfigurationValidator', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['public', 'class', 'MapReduceLauncher', 'extends', 'Launcher', '{']",0
MapReduceLauncher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'MapReduceLauncher', '.', 'class', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'used', 'to', 'track', 'the', 'exception', 'thrown', 'by', 'the', 'job', 'control', 'which', 'is', 'run', 'in', 'a', 'separate', 'thread']",0
MapReduceLauncher.java,"['private', 'Exception', 'jobControlException', '=', 'null', ';']",0
MapReduceLauncher.java,"['private', 'boolean', 'aggregateWarning', '=', 'false', ';']",0
MapReduceLauncher.java,"['private', 'Map', '<', 'FileSpec', ',', 'Exception', '>', 'failureMap', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['public', 'Exception', 'getError', '(', 'FileSpec', 'spec', ')', '{']",0
MapReduceLauncher.java,"['return', 'failureMap', '.', 'get', '(', 'spec', ')', ';']",0
MapReduceLauncher.java,"['public', 'void', 'reset', '(', ')', '{']",0
MapReduceLauncher.java,"['failureMap', '=', 'new', 'HashMap', '<', 'FileSpec', ',', 'Exception', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['super', '.', 'reset', '(', ')', ';']",0
MapReduceLauncher.java,"['public', 'PigStats', 'launchPig', '(', 'PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['String', 'grpName', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',']",0
MapReduceLauncher.java,"['long', 'sleepTime', '=', '500', ';']",0
MapReduceLauncher.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['PigStats', 'stats', '=', 'new', 'PigStats', '(', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setMROperatorPlan', '(', 'mrp', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setExecType', '(', 'pc', '.', 'getExecType', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setPhysicalPlan', '(', 'php', ')', ';']",0
MapReduceLauncher.java,"['ExecutionEngine', 'exe', '=', 'pc', '.', 'getExecutionEngine', '(', ')', ';']",0
MapReduceLauncher.java,"['ConfigurationValidator', '.', 'validatePigProperties', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['Configuration', 'conf', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['JobClient', 'jobClient', '=', '(', '(', 'HExecutionEngine', ')', 'exe', ')', '.', 'getJobClient', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControlCompiler', 'jcc', '=', 'new', 'JobControlCompiler', '(', 'pc', ',', 'conf', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'failedJobs', '=', 'new', 'LinkedList', '<', 'Job', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'succJobs', '=', 'new', 'LinkedList', '<', 'Job', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControl', 'jc', ';']",0
MapReduceLauncher.java,"['int', 'totalMRJobs', '=', 'mrp', '.', 'size', '(', ')', ';']",0
MapReduceLauncher.java,"['int', 'numMRJobsCompl', '=', '0', ';']",0
MapReduceLauncher.java,"['int', 'numMRJobsCurrent', '=', '0', ';']",0
MapReduceLauncher.java,"['double', 'lastProg', '=', '-', '1', ';']",0
MapReduceLauncher.java,"['/', '/', 'create', 'the', 'exception', 'handler', 'for', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['/', '/', 'and', 'register', 'the', 'handler', 'with', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['JobControlThreadExceptionHandler', 'jctExceptionHandler', '=', 'new', 'JobControlThreadExceptionHandler', '(', ')', ';']",0
MapReduceLauncher.java,"['while', '(', '(', 'jc', '=', 'jcc', '.', 'compile', '(', 'mrp', ',', 'grpName', ')', ')', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['numMRJobsCurrent', '=', 'jc', '.', 'getWaitingJobs', '(', ')', '.', 'size', '(', ')', ';']",0
MapReduceLauncher.java,"['Thread', 'jcThread', '=', 'new', 'Thread', '(', 'jc', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'setUncaughtExceptionHandler', '(', 'jctExceptionHandler', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'start', '(', ')', ';']",0
MapReduceLauncher.java,"['while', '(', '!', 'jc', '.', 'allFinished', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['Thread', '.', 'sleep', '(', 'sleepTime', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'InterruptedException', 'e', ')', '{', '}']",0
MapReduceLauncher.java,"['double', 'prog', '=', '(', 'numMRJobsCompl', '+', 'calculateProgress', '(', 'jc', ',', 'jobClient', ')', ')', '/', 'totalMRJobs', ';']",0
MapReduceLauncher.java,"['if', '(', 'prog', '>', '=', '(', 'lastProg', '+', '0', '.', '01', ')', ')', '{']",0
MapReduceLauncher.java,"['int', 'perCom', '=', '(', 'int', ')', '(', 'prog', '*', '100', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'perCom', '!', '=', '100', ')']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', 'perCom', '+', '""', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['lastProg', '=', 'prog', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'for', 'the', 'jobControlException', 'first']",0
MapReduceLauncher.java,"['/', '/', 'if', 'the', 'job', 'controller', 'fails', 'before', 'launching', 'the', 'jobs', 'then', 'there', 'are']",0
MapReduceLauncher.java,"['/', '/', 'no', 'jobs', 'to', 'check', 'for', 'failure']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', 'instanceof', 'PigException', ')', '{']",0
MapReduceLauncher.java,"['throw', 'jobControlException', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['int', 'errCode', '=', '2117', ';']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'jobControlException', ')', ';']",0
MapReduceLauncher.java,"['numMRJobsCompl', '+', '=', 'numMRJobsCurrent', ';']",0
MapReduceLauncher.java,"['failedJobs', '.', 'addAll', '(', 'jc', '.', 'getFailedJobs', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', 'failedJobs', '.', 'isEmpty', '(', ')']",0
MapReduceLauncher.java,"['&', '&', '""', 'true', '""', '.', 'equalsIgnoreCase', '(']",0
MapReduceLauncher.java,"['pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', 'false', '""', ')', ')', ')', '{']",0
MapReduceLauncher.java,"['int', 'errCode', '=', '6017', ';']",0
MapReduceLauncher.java,"['StringBuilder', 'msg', '=', 'new', 'StringBuilder', '(', '""', 'Execution', 'failed', ',', 'while', 'processing', '""', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'j', ':', 'failedJobs', ')', '{']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'j', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['msg', '.', 'append', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['msg', '.', 'append', '(', '""', ',', '""', ')', ';']",0
MapReduceLauncher.java,"['throw', 'new', 'ExecException', '(', 'msg', '.', 'substring', '(', '0', ',', 'msg', '.', 'length', '(', ')', '-', '2', ')', ',']",0
MapReduceLauncher.java,"['errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'jobs', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', ';']",0
MapReduceLauncher.java,"['jcc', '.', 'moveResults', '(', 'jobs', ')', ';']",0
MapReduceLauncher.java,"['succJobs', '.', 'addAll', '(', 'jobs', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setJobClient', '(', 'jobClient', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setJobControl', '(', 'jc', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'accumulateStats', '(', ')', ';']",0
MapReduceLauncher.java,"['jc', '.', 'stop', '(', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', '100', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['boolean', 'failed', '=', 'false', ';']",0
MapReduceLauncher.java,"['int', 'finalStores', '=', '0', ';']",0
MapReduceLauncher.java,"['/', '/', 'Look', 'to', 'see', 'if', 'any', 'jobs', 'failed', '.', 'If', 'so', ',', 'we', 'need', 'to', 'report', 'that', '.']",0
MapReduceLauncher.java,"['if', '(', 'failedJobs', '!', '=', 'null', '&', '&', 'failedJobs', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'error', '(', 'failedJobs', '.', 'size', '(', ')', '+', '""', 'map', 'reduce', 'job', '(', 's', ')', 'failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['Exception', 'backendException', '=', 'null', ';']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'fj', ':', 'failedJobs', ')', '{']",0
MapReduceLauncher.java,"['getStats', '(', 'fj', ',', 'jobClient', ',', 'true', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MapReduceLauncher.java,"['backendException', '=', 'e', ';']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'fj', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['if', '(', '!', 'st', '.', 'isTmpStore', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['failedStores', '.', 'add', '(', 'st', '.', 'getSFile', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['failureMap', '.', 'put', '(', 'st', '.', 'getSFile', '(', ')', ',', 'backendException', ')', ';']",0
MapReduceLauncher.java,"['finalStores', '+', '+', ';']",0
MapReduceLauncher.java,"['FileLocalizer', '.', 'registerDeleteOnFail', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'error', '(', '""', 'Failed', 'to', 'produce', 'result', 'in', ':', '\\', '""', '""', '+', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', '+', '""', '\\', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['failed', '=', 'true', ';']",0
MapReduceLauncher.java,"['Map', '<', 'Enum', ',', 'Long', '>', 'warningAggMap', '=', 'new', 'HashMap', '<', 'Enum', ',', 'Long', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'succJobs', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'job', ':', 'succJobs', ')', '{']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'job', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['if', '(', '!', 'st', '.', 'isTmpStore', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['succeededStores', '.', 'add', '(', 'st', '.', 'getSFile', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['finalStores', '+', '+', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Successfully', 'stored', 'result', 'in', ':', '\\', '""', '""', '+', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', '+', '""', '\\', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['getStats', '(', 'job', ',', 'jobClient', ',', 'false', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['computeWarningAggregate', '(', 'job', ',', 'jobClient', ',', 'warningAggMap', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['CompilationMessageCollector', '.', 'logAggregate', '(', 'warningAggMap', ',', 'MessageType', '.', 'Warning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'Report', 'records', 'and', 'bytes', 'written', '.', 'Only', 'do', 'this', 'in', 'the', 'single', 'store', 'case', '.', 'Multi', '-', 'store']",0
MapReduceLauncher.java,"['/', '/', 'scripts', 'mess', 'up', 'the', 'stats', 'reporting', 'from', 'hadoop', '.']",0
MapReduceLauncher.java,"['List', '<', 'String', '>', 'rji', '=', 'stats', '.', 'getRootJobIDs', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'rji', '!', '=', 'null', '&', '&', 'rji', '.', 'size', '(', ')', '=', '=', '1', '&', '&', 'finalStores', '=', '=', '1', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Records', 'written', ':', '""', '+', 'stats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Bytes', 'written', ':', '""', '+', 'stats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', 'failed', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Success', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['if', '(', 'succJobs', '!', '=', 'null', '&', '&', 'succJobs', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Some', 'jobs', 'have', 'failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['jcc', '.', 'reset', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'stats', ';']",0
MapReduceLauncher.java,"['public', 'void', 'explain', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ',']",0
MapReduceLauncher.java,"['PrintStream', 'ps', ',']",0
MapReduceLauncher.java,"['String', 'format', ',']",0
MapReduceLauncher.java,"['boolean', 'verbose', ')', 'throws', 'PlanException', ',', 'VisitorException', ',']",0
MapReduceLauncher.java,"['log', '.', 'trace', '(', '""', 'Entering', 'MapReduceLauncher', '.', 'explain', '""', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'format', '.', 'equals', '(', '""', 'text', '""', ')', ')', '{']",0
MapReduceLauncher.java,"['MRPrinter', 'printer', '=', 'new', 'MRPrinter', '(', 'ps', ',', 'mrp', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'setVerbose', '(', 'verbose', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', 'Map', 'Reduce', 'Plan', '""', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
MapReduceLauncher.java,"['DotMRPrinter', 'printer', '=', 'new', 'DotMRPrinter', '(', 'mrp', ',', 'ps', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'setVerbose', '(', 'verbose', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'dump', '(', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['private', 'MROperPlan', 'compile', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',', 'IOException', ',', 'VisitorException', '{']",0
MapReduceLauncher.java,"['MRCompiler', 'comp', '=', 'new', 'MRCompiler', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'randomizeFileLocalizer', '(', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'compile', '(', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'plan', '=', 'comp', '.', 'getMRPlan', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'MRCompiler']",0
MapReduceLauncher.java,"['comp', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['String', 'lastInputChunkSize', '=']",0
MapReduceLauncher.java,"['pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(']",0
MapReduceLauncher.java,"['""', 'last', '.', 'input', '.', 'chunksize', '""', ',', 'POJoinPackage', '.', 'DEFAULT_CHUNK_SIZE', ')', ';']",0
MapReduceLauncher.java,"['String', 'prop', '=', 'System', '.', 'getProperty', '(', '""', 'pig', '.', 'exec', '.', 'nocombiner', '""', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', '(', '""', 'true', '""', '.', 'equals', '(', 'prop', ')', ')', ')', '{']",0
MapReduceLauncher.java,"['CombinerOptimizer', 'co', '=', 'new', 'CombinerOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['co', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'CombinerOptimizer']",0
MapReduceLauncher.java,"['co', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'key', '-', 'value', 'handling', 'in', 'package']",0
MapReduceLauncher.java,"['POPackageAnnotator', 'pkgAnnotator', '=', 'new', 'POPackageAnnotator', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['pkgAnnotator', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'joins']",0
MapReduceLauncher.java,"['LastInputStreamingOptimizer', 'liso', '=']",0
MapReduceLauncher.java,"['new', 'MRCompiler', '.', 'LastInputStreamingOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['liso', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'figure', 'out', 'the', 'type', 'of', 'the', 'key', 'for', 'the', 'map', 'plan']",0
MapReduceLauncher.java,"['/', '/', 'this', 'is', 'needed', 'when', 'the', 'key', 'is', 'null', 'to', 'create']",0
MapReduceLauncher.java,"['/', '/', 'an', 'appropriate', 'NullableXXXWritable', 'object']",0
MapReduceLauncher.java,"['KeyTypeDiscoveryVisitor', 'kdv', '=', 'new', 'KeyTypeDiscoveryVisitor', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['kdv', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'removes', 'the', 'filter', '(', 'constant', '(', 'true', ')', ')', 'operators', 'introduced', 'by']",0
MapReduceLauncher.java,"['/', '/', 'splits', '.']",0
MapReduceLauncher.java,"['NoopFilterRemover', 'fRem', '=', 'new', 'NoopFilterRemover', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['fRem', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'reduces', 'the', 'number', 'of', 'MROpers', 'in', 'the', 'MR', 'plan', 'generated']",0
MapReduceLauncher.java,"['/', '/', 'by', 'multi', '-', 'query', '(', 'multi', '-', 'store', ')', 'script', '.']",0
MapReduceLauncher.java,"['MultiQueryOptimizer', 'mqOptimizer', '=', 'new', 'MultiQueryOptimizer', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['mqOptimizer', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'removes', 'unnecessary', 'stores', '(', 'as', 'can', 'happen', 'with', 'splits', 'in']",0
MapReduceLauncher.java,"['/', '/', 'some', 'cases', '.', ')', '.', 'This', 'has', 'to', 'run', 'after', 'the', 'MultiQuery', 'and']",0
MapReduceLauncher.java,"['/', '/', 'NoopFilterRemover', '.']",0
MapReduceLauncher.java,"['NoopStoreRemover', 'sRem', '=', 'new', 'NoopStoreRemover', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['sRem', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'whether', 'stream', 'operator', 'is', 'present']",0
MapReduceLauncher.java,"['/', '/', 'after', 'MultiQueryOptimizer', 'because', 'it', 'can', 'shift', 'streams', 'from']",0
MapReduceLauncher.java,"['/', '/', 'map', 'to', 'reduce', ',', 'etc', '.']",0
MapReduceLauncher.java,"['MRStreamHandler', 'checker', '=', 'new', 'MRStreamHandler', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['checker', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'plan', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['class', 'JobControlThreadExceptionHandler', 'implements', 'Thread', '.', 'UncaughtExceptionHandler', '{']",0
MapReduceLauncher.java,"['public', 'void', 'uncaughtException', '(', 'Thread', 'thread', ',', 'Throwable', 'throwable', ')', '{']",0
MapReduceLauncher.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
MapReduceLauncher.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'baos', ')', ';']",0
MapReduceLauncher.java,"['throwable', '.', 'printStackTrace', '(', 'ps', ')', ';']",0
MapReduceLauncher.java,"['String', 'exceptionString', '=', 'baos', '.', 'toString', '(', ')', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'getExceptionFromString', '(', 'exceptionString', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MapReduceLauncher.java,"['String', 'errMsg', '=', '""', 'Could', 'not', 'resolve', 'error', 'that', 'occured', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'new', 'RuntimeException', '(', 'errMsg', ',', 'e', ')', ';']",0
MapReduceLauncher.java,"['void', 'computeWarningAggregate', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'Map', '<', 'Enum', ',', 'Long', '>', 'aggMap', ')', '{']",0
MapReduceLauncher.java,"['JobID', 'mapRedJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
MapReduceLauncher.java,"['RunningJob', 'runningJob', '=', 'null', ';']",0
MapReduceLauncher.java,"['runningJob', '=', 'jobClient', '.', 'getJob', '(', 'mapRedJobID', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'runningJob', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['Counters', 'counters', '=', 'runningJob', '.', 'getCounters', '(', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'job', 'to', 'compute', 'warning', 'aggregation', '.', '""', ';']",0
MapReduceLauncher.java,"['log', '.', 'warn', '(', 'msg', ')', ';']",0
TestBestFitCast.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Arrays', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestBestFitCast.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestBestFitCast.java,"['public', 'class', 'TestBestFitCast', 'extends', 'TestCase', '{']",0
TestBestFitCast.java,"['private', 'PigServer', 'pigServer', ';']",0
TestBestFitCast.java,"['private', 'MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestBestFitCast.java,"['private', 'File', 'tmpFile', ',', 'tmpFile2', ';']",0
TestBestFitCast.java,"['int', 'LOOP_SIZE', '=', '20', ';']",0
TestBestFitCast.java,"['public', 'TestBestFitCast', '(', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
TestBestFitCast.java,"['pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ')', ';']",0
TestBestFitCast.java,"['tmpFile', '=', 'File', '.', 'createTempFile', '(', '""', 'test', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile', ')', ')', ';']",0
TestBestFitCast.java,"['long', 'l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['tmpFile2', '=', 'File', '.', 'createTempFile', '(', '""', 'test2', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile2', ')', ')', ';']",0
TestBestFitCast.java,"['l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF1', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '*', 'funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'DoubleMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'FloatMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'IntMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'LongMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'LONG', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'StringMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ';', '*', '/']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF2', 'extends', 'EvalFunc', '<', 'String', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'String', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['String', 'str', '=', '(', 'String', ')', 'input', '.', 'get', '(', '0', ')', ';']",0
TestBestFitCast.java,"['return', 'str', '.', 'toUpperCase', '(', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['return', 'null', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF3', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'bytearray', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'int', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'is', '{', 'float', ',', 'bytearray', '}', 'since', 'bytearray', 'can', 'be', 'casted', 'either', 'to', 'long']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', '.', 'However', 'when', 'input', 'schema', 'is', '{', 'bytearray', ',', 'int', '}', ',', 'it', 'should', 'work']",0
TestBestFitCast.java,"['/', '/', 'since', 'bytearray', 'should', 'get', 'casted', 'to', 'float', 'and', 'int', 'to', 'long', '.', 'Likewise', 'if']",0
TestBestFitCast.java,"['/', '/', 'input', 'schema', 'is', '{', 'bytearray', ',', 'long', '}', 'or', '{', 'bytearray', ',', 'double', '}', 'it', 'should', 'work']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema', 'is']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'int', ',', 'int', '}', 'since', 'the', 'two', 'ints', 'could', 'be', 'casted', 'to', 'long', ',', 'double']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', ',', 'long', '.', 'Likewise', 'input', 'schema', 'of', 'either', '{', 'bytearray', ',', 'long', ',', 'long', '}']",0
TestBestFitCast.java,"['/', '/', 'or', '{', 'bytearray', ',', 'double', ',', 'double', '}', 'would', 'cause', 'conflict', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'double', '}', 'or', '{', 'bytearray', ',', 'double', ',', 'long', '}', 'should', 'not', 'cause']",0
TestBestFitCast.java,"['/', '/', 'conflict', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', 'to', 'float', '.', 'Input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'of', '{', 'float', ',', 'bytearray', ',', 'long', '}', 'or', '{', 'float', ',', 'long', ',', 'bytearray', '}', 'should', 'also']",0
TestBestFitCast.java,"['/', '/', 'work', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'float', ',', 'bytearray', ',', 'int', '}', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'int', '}', 'should', 'work', 'and', 'should', 'match', 'the', 'first', 'schema', 'below', 'for']",0
TestBestFitCast.java,"['/', '/', 'matching', 'wherein', 'the', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the', 'int', 'to', 'double', '.']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast1', '(', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '{', 'float', ',', 'double', '}', ',', '{', 'float', ',', 'long', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast2', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'in', 'both', 'cases', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the']",0
TestBestFitCast.java,"['/', '/', 'cost', 'of', 'casting', 'int', 'to', 'long', '<', 'int', 'to', 'double']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast3', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast4', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast5', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'ints', 'cannot', 'be', 'unambiguously']",0
TestBestFitCast.java,"['/', '/', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast6', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'longs', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'unambiguously', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast7', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'doubles', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'casted', 'with', 'a', 'permissible', 'cast']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Could', 'not', 'infer', 'the', 'matching', 'function', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast8', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast9', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast10', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'long', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ':', 'long', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast11', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast12', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast13', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'for', 'the', 'bytearray', 'there', 'is', 'a']",0
TestBestFitCast.java,"['/', '/', 'single', 'unambiguous', 'cast', 'to', 'float', '.', 'For', 'the', 'other', 'two', 'args', ',', 'it', 'is']",0
TestBestFitCast.java,"['/', '/', 'less', '""', 'costlier', '""', 'to', 'cast', 'the', 'last', 'int', 'to', 'double', 'than', 'cast', 'the', 'long']",0
TestBestFitCast.java,"['/', '/', 'to', 'double', 'and', 'int', 'to', 'long']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast14', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'bytearray', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'bytearray', ')', '}', 'because', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast15', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'bytearray', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'DataByteArray', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'expected', '=', 'Integer', '.', 'toString', '(', 'cnt', '+', '1', ')', '.', 'getBytes', '(', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'actual', '=', '(', '(', 'DataByteArray', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '.', 'length', ',', 'actual', '.', 'length', ')', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'expected', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '[', 'i', ']', ',', 'actual', '[', 'i', ']', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast16', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'int', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Integer', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Integer', '(', 'cnt', '+', '1', ')', ',', '(', 'Integer', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testIntSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'int', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'int', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testLongSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'long', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'long', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testFloatSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'float', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'float', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'float', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testDoubleSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'double', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'double', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test1', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'long', ',', 'double', ')', 'as', 'it', 'has', 'only', 'one', 'cast', 'compared', 'to', 'two', 'for', '(', 'float', ',', 'float', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test2', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'Exception', 'as', 'ambiguous', 'definitions', 'found']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'as', 'multiple', 'or', 'none', 'of', 'them', 'fit', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test3', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'float', ')', 'as', 'both', 'options', 'lead', 'to', 'same', 'score', 'and', '(', 'float', ',', 'float', ')', 'occurs', 'first', '.']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '(', 'float', ')', 'y', ',', '(', 'float', ')', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test4', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ')', ',', '(', 'integer', ')', ',', '(', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ')', 'as', 'it', 'leads', 'to', 'a', 'better', 'score', 'that', 'to', '(', 'double', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test5', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', 'bytearrays']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'exception', 'since', 'more', 'than', 'one', 'funcSpec', 'and', 'inp', 'is', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '$', '0', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test6', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'test', 'UDF', 'with', 'single', 'mapping', 'function']",0
TestBestFitCast.java,"['/', '/', 'where', 'bytearray', 'is', 'passed', 'in', 'as', 'input', 'parameter']",0
TestBestFitCast.java,"['File', 'input', '=', 'Util', '.', 'createInputFile', '(', '""', 'tmp', '""', ',', '""', '""', ',', 'new', 'String', '[', ']', '{', '""', 'abc', '""', '}', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'input', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'GENERATE', '""', '+', 'UDF2', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '""', 'ABC', '""', ',', 't', '.', 'get', '(', '0', ')', ')', ';']",0
PigServer.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PigServer.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Date', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Stack', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', '.', 'JOB_STATUS', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOCogroup', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOFRJoin', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'PlanSetter', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'LogicalOptimizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'QueryParser', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', '.', 'LogicalPlanValidationExecutor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LODefine', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStore', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'pen', '.', 'ExampleGenerator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'class', 'PigServer', '{']",0
PigServer.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
PigServer.java,"['public', 'static', 'ExecType', 'parseExecType', '(', 'String', 'str', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['String', 'normStr', '=', 'str', '.', 'toLowerCase', '(', ')', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'local', '""', ')', ')', 'return', 'ExecType', '.', 'LOCAL', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapreduce', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapred', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pig', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pigbody', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['int', 'errCode', '=', '2040', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unknown', 'exec', 'type', ':', '""', '+', 'str', ';']",0
PigServer.java,"['throw', 'new', 'PigException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigServer.java,"['private', 'Stack', '<', 'Graph', '>', 'graphs', '=', 'new', 'Stack', '<', 'Graph', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Graph', 'currDAG', ';']",0
PigServer.java,"['private', 'PigContext', 'pigContext', ';']",0
PigServer.java,"['private', 'static', 'int', 'scopeCounter', '=', '0', ';']",0
PigServer.java,"['private', 'String', 'scope', '=', 'constructScope', '(', ')', ';']",0
PigServer.java,"['private', 'ArrayList', '<', 'String', '>', 'cachedScript', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['private', 'boolean', 'aggregateWarning', '=', 'true', ';']",0
PigServer.java,"['private', 'boolean', 'isMultiQuery', '=', 'true', ';']",0
PigServer.java,"['private', 'String', 'constructScope', '(', ')', '{']",0
PigServer.java,"['/', '/', 'scope', 'servers', 'for', 'now', 'as', 'a', 'session', 'id']",0
PigServer.java,"['/', '/', 'String', 'user', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ',', '""', 'DEFAULT_USER_ID', '""', ')', ';']",0
PigServer.java,"['/', '/', 'String', 'date', '=', '(', 'new', 'Date', '(', ')', ')', '.', 'toString', '(', ')', ';']",0
PigServer.java,"['/', '/', 'scope', 'is', 'not', 'really', 'used', 'in', 'the', 'system', 'right', 'now', '.', 'It', 'will']",0
PigServer.java,"['/', '/', 'however', 'make', 'your', 'explain', 'statements', 'look', 'lengthy', 'if', 'set', 'to']",0
PigServer.java,"['/', '/', 'username', '-', 'date', '.', 'For', 'now', 'let', ""'"", 's', 'simplify', 'the', 'scope', ',', 'if', 'a', 'real']",0
PigServer.java,"['/', '/', 'scope', 'is', 'needed', 'again', ',', 'we', 'might', 'need', 'to', 'update', 'all', 'the']",0
PigServer.java,"['/', '/', 'operators', 'to', 'not', 'include', 'scope', 'in', 'their', 'name', '(', ')', '.']",0
PigServer.java,"['return', '""', '""', '+', '(', '+', '+', 'scopeCounter', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'String', 'execTypeString', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
PigServer.java,"['this', '(', 'parseExecType', '(', 'execTypeString', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'execType', ',', 'PropertiesUtil', '.', 'loadPropertiesFromFile', '(', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'context', ',', 'true', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '.', 'pigContext', '=', 'context', ';']",0
PigServer.java,"['currDAG', '=', 'new', 'Graph', '(', 'false', ')', ';']",0
PigServer.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
PigServer.java,"['isMultiQuery', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ')', ';']",0
PigServer.java,"['if', '(', 'connect', ')', '{']",0
PigServer.java,"['pigContext', '.', 'connect', '(', ')', ';']",0
PigServer.java,"['public', 'PigContext', 'getPigContext', '(', ')', '{']",0
PigServer.java,"['return', 'pigContext', ';']",0
PigServer.java,"['public', 'void', 'debugOn', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'true', ';']",0
PigServer.java,"['public', 'void', 'debugOff', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'false', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'setBatchOn', '(', ')', '{']",0
PigServer.java,"['log', '.', 'debug', '(', '""', 'Create', 'a', 'new', 'graph', '.', '""', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '!', '=', 'null', ')', '{']",0
PigServer.java,"['graphs', '.', 'push', '(', 'currDAG', ')', ';']",0
PigServer.java,"['currDAG', '=', 'new', 'Graph', '(', 'isMultiQuery', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'boolean', 'isBatchOn', '(', ')', '{']",0
PigServer.java,"['/', '/', 'Batch', 'is', 'on', 'when', 'there', 'are', 'multiple', 'graphs', 'on', 'the']",0
PigServer.java,"['/', '/', 'stack', '.', 'That', 'gives', 'the', 'right', 'response', 'even', 'if', 'multiquery', 'was']",0
PigServer.java,"['/', '/', 'turned', 'off', '.']",0
PigServer.java,"['return', 'graphs', '.', 'size', '(', ')', '>', '0', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'boolean', 'isBatchEmpty', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['return', 'currDAG', '.', 'isBatchEmpty', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'List', '<', 'ExecJob', '>', 'executeBatch', '(', ')', 'throws', 'FrontendException', ',', 'ExecException', '{']",0
PigServer.java,"['if', '(', '!', 'isMultiQuery', ')', '{']",0
PigServer.java,"['/', '/', 'ignore', 'if', 'multiquery', 'is', 'off']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', '|', '|', '!', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['return', 'currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'discardBatch', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', '|', '|', '!', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['currDAG', '=', 'graphs', '.', 'pop', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'addPathToSkip', '(', 'String', 'path', ')', '{']",0
PigServer.java,"['pigContext', '.', 'addPathToSkip', '(', 'path', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'String', 'functionSpec', ')', '{']",0
PigServer.java,"['registerFunction', '(', 'function', ',', 'new', 'FuncSpec', '(', 'functionSpec', ')', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'FuncSpec', 'funcSpec', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerFunction', '(', 'function', ',', 'funcSpec', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerStreamingCommand', '(', 'String', 'commandAlias', ',', 'StreamingCommand', 'command', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerStreamCmd', '(', 'commandAlias', ',', 'command', ')', ';']",0
PigServer.java,"['private', 'URL', 'locateJarFromResources', '(', 'String', 'jarName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Enumeration', '<', 'URL', '>', 'urls', '=', 'ClassLoader', '.', 'getSystemResources', '(', 'jarName', ')', ';']",0
PigServer.java,"['URL', 'resourceLocation', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['resourceLocation', '=', 'urls', '.', 'nextElement', '(', ')', ';']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'debug', '&', '&', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['String', 'logMessage', '=', '""', 'Found', 'multiple', 'resources', 'that', 'match', '""']",0
PigServer.java,"['+', 'jarName', '+', '""', ':', '""', '+', 'resourceLocation', ';']",0
PigServer.java,"['while', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['logMessage', '+', '=', '(', 'logMessage', '+', 'urls', '.', 'nextElement', '(', ')', '+', '""', ';', '""', ')', ';']",0
PigServer.java,"['log', '.', 'debug', '(', 'logMessage', ')', ';']",0
PigServer.java,"['return', 'resourceLocation', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerJar', '(', 'String', 'name', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'first', 'try', 'to', 'locate', 'jar', 'via', 'system', 'resources']",0
PigServer.java,"['/', '/', 'if', 'this', 'fails', ',', 'try', 'by', 'using', '""', 'name', '""', 'as', 'File', '(', 'this', 'preserves']",0
PigServer.java,"['/', '/', 'compatibility', 'with', 'case', 'when', 'user', 'passes', 'absolute', 'path', 'or', 'path']",0
PigServer.java,"['/', '/', 'relative', 'to', 'current', 'working', 'directory', '.', ')']",0
PigServer.java,"['if', '(', 'name', '!', '=', 'null', ')', '{']",0
PigServer.java,"['URL', 'resource', '=', 'locateJarFromResources', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', 'resource', '=', '=', 'null', ')', '{']",0
PigServer.java,"['File', 'f', '=', 'new', 'File', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', '!', 'f', '.', 'canRead', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '4002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Can', ""'"", 't', 'read', 'jar', 'file', ':', '""', '+', 'name', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
PigServer.java,"['resource', '=', 'f', '.', 'toURI', '(', ')', '.', 'toURL', '(', ')', ';']",0
PigServer.java,"['pigContext', '.', 'addJar', '(', 'resource', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['currDAG', '.', 'registerQuery', '(', 'query', ',', 'startLine', ')', ';']",0
PigServer.java,"['public', 'LogicalPlan', 'clonePlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Graph', 'graph', '=', 'currDAG', '.', 'clone', '(', ')', ';']",0
PigServer.java,"['if', '(', 'graph', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2127', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Cloning', 'of', 'plan', 'failed', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigServer.java,"['return', 'graph', '.', 'getPlan', '(', 'alias', ')', ';']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['registerQuery', '(', 'query', ',', '1', ')', ';']",0
PigServer.java,"['public', 'void', 'registerScript', '(', 'String', 'fileName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['GruntParser', 'grunt', '=', 'new', 'GruntParser', '(', 'new', 'FileReader', '(', 'new', 'File', '(', 'fileName', ')', ')', ')', ';']",0
PigServer.java,"['grunt', '.', 'setInteractive', '(', 'false', ')', ';']",0
PigServer.java,"['grunt', '.', 'setParams', '(', 'this', ')', ';']",0
PigServer.java,"['grunt', '.', 'parseStopOnError', '(', 'true', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FileNotFoundException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['public', 'void', 'printAliases', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['System', '.', 'out', '.', 'println', '(', '""', 'aliases', ':', '""', '+', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'keySet', '(', ')', ')', ';']",0
PigServer.java,"['public', 'Schema', 'dumpSchema', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'getPlanFromAlias', '(', 'alias', ',', '""', 'describe', '""', ')', ';']",0
PigServer.java,"['lp', '=', 'compileLp', '(', 'alias', ',', 'false', ')', ';']",0
PigServer.java,"['Schema', 'schema', '=', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getSchema', '(', ')', ';']",0
PigServer.java,"['if', '(', 'schema', '!', '=', 'null', ')', 'System', '.', 'out', '.', 'println', '(', 'alias', '+', '""', ':', '""', '+', 'schema', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['else', 'System', '.', 'out', '.', 'println', '(', '""', 'Schema', 'for', '""', '+', 'alias', '+', '""', 'unknown', '.', '""', ')', ';']",0
PigServer.java,"['return', 'schema', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'describe', 'schema', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'fee', ')', ';']",0
PigServer.java,"['public', 'void', 'setJobName', '(', 'String', 'name', ')', '{']",0
PigServer.java,"['currDAG', '.', 'setJobName', '(', 'name', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'Iterator', '<', 'Tuple', '>', 'openIterator', '(', 'String', 'id', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'get', '(', 'id', ')', ';']",0
PigServer.java,"['if', '(', 'null', '=', '=', 'op', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '.', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['ExecJob', 'job', '=', 'store', '(', 'id', ',', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ',', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';']",0
PigServer.java,"['/', '/', 'invocation', 'of', '""', 'execute', '""', 'is', 'synchronous', '!']",0
PigServer.java,"['if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'JOB_STATUS', '.', 'COMPLETED', ')', '{']",0
PigServer.java,"['return', 'job', '.', 'getResults', '(', ')', ';']",0
PigServer.java,"['}', 'else', 'if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'JOB_STATUS', '.', 'FAILED']",0
PigServer.java,"['&', '&', 'job', '.', 'getException', '(', ')', '!', '=', 'null', ')', '{']",0
PigServer.java,"['/', '/', 'throw', 'the', 'backend', 'exception', 'in', 'the', 'failed', 'case']",0
PigServer.java,"['throw', 'job', '.', 'getException', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Job', 'terminated', 'with', 'anomalous', 'status', '""']",0
PigServer.java,"['+', 'job', '.', 'getStatus', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1066', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'open', 'iterator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(', 'String', 'id', ',', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['return', 'store', '(', 'id', ',', 'filename', ',', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';', '/', '/', 'SFPig', 'is', 'the', 'default', 'store', 'function']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(']",0
PigServer.java,"['String', 'id', ',']",0
PigServer.java,"['String', 'filename', ',']",0
PigServer.java,"['String', 'func', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', '!', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'containsKey', '(', 'id', ')', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'alias', ':', '""', '+', 'id', ')', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'id', ')', ';']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaf', 'to', 'which', 'the', 'store', 'needs', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'id', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['LogicalPlan', 'storePlan', '=', 'QueryParser', '.', 'generateStorePlan', '(', 'scope', ',', 'lp', ',', 'filename', ',', 'func', ',', 'leaf', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'executeCompiledLogicalPlan', '(', 'storePlan', ')', ';']",0
PigServer.java,"['if', '(', 'jobs', '.', 'size', '(', ')', '<', '1', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Couldn', ""'"", 't', 'retrieve', 'job', '.', '""', ')', ';']",0
PigServer.java,"['return', 'jobs', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'explain', '(', 'String', 'alias', ',']",0
PigServer.java,"['PrintStream', 'stream', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['explain', '(', 'alias', ',', '""', 'text', '""', ',', 'true', ',', 'false', ',', 'stream', ',', 'stream', ',', 'stream', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'explain', '(', 'String', 'alias', ',']",0
PigServer.java,"['String', 'format', ',']",0
PigServer.java,"['boolean', 'verbose', ',']",0
PigServer.java,"['boolean', 'markAsExecute', ',']",0
PigServer.java,"['PrintStream', 'lps', ',']",0
PigServer.java,"['PrintStream', 'pps', ',']",0
PigServer.java,"['PrintStream', 'eps', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['pigContext', '.', 'inExplain', '=', 'true', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'getStorePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['lps', '.', 'println', '(', '""', 'Logical', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['pps', '.', 'println', '(', '""', 'Physical', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['eps', '.', 'println', '(', '""', 'Execution', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'lp', ')', ';']",0
PigServer.java,"['lp', '.', 'explain', '(', 'lps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['pp', '.', 'explain', '(', 'pps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'explain', '(', 'pp', ',', 'eps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['if', '(', 'markAsExecute', ')', '{']",0
PigServer.java,"['currDAG', '.', 'markAsExecuted', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1067', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'explain', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['}', 'finally', '{']",0
PigServer.java,"['pigContext', '.', 'inExplain', '=', 'false', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'capacity', '(', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'getExecType', '(', ')', '=', '=', 'ExecType', '.', 'LOCAL', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'capacity', 'only', 'supported', 'for', 'non', '-', 'local', 'execution', '""', ')', ';']",0
PigServer.java,"['DataStorage', 'dds', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'dds', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['String', 'rawCapacityStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_CAPACITY_KEY', ')', ';']",0
PigServer.java,"['String', 'rawUsedStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_USED_KEY', ')', ';']",0
PigServer.java,"['if', '(', '(', 'rawCapacityStr', '=', '=', 'null', ')', '|', '|', '(', 'rawUsedStr', '=', '=', 'null', ')', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Failed', 'to', 'retrieve', 'capacity', 'stats', '""', ')', ';']",0
PigServer.java,"['long', 'rawCapacityBytes', '=', 'new', 'Long', '(', 'rawCapacityStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['long', 'rawUsedBytes', '=', 'new', 'Long', '(', 'rawUsedStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['return', 'rawCapacityBytes', '-', 'rawUsedBytes', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'fileSize', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['DataStorage', 'dfs', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'dfs', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['long', 'length', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
PigServer.java,"['int', 'replication', '=', '(', 'Short', ')', 'stats']",0
PigServer.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
PigServer.java,"['return', 'length', '*', 'replication', ';']",0
PigServer.java,"['public', 'boolean', 'existsFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['return', 'elem', '.', 'exists', '(', ')', ';']",0
PigServer.java,"['public', 'boolean', 'deleteFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['elem', '.', 'delete', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'renameFile', '(', 'String', 'source', ',', 'String', 'target', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['pigContext', '.', 'rename', '(', 'source', ',', 'target', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'mkdirs', '(', 'String', 'dirs', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dirs', ')', ';']",0
PigServer.java,"['container', '.', 'create', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'String', '[', ']', 'listPaths', '(', 'String', 'dir', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Collection', '<', 'String', '>', 'allPaths', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dir', ')', ';']",0
PigServer.java,"['Iterator', '<', 'ElementDescriptor', '>', 'iter', '=', 'container', '.', 'iterator', '(', ')', ';']",0
PigServer.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'iter', '.', 'next', '(', ')', ';']",0
PigServer.java,"['allPaths', '.', 'add', '(', 'elem', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['return', '(', 'String', '[', ']', ')', '(', 'allPaths', '.', 'toArray', '(', ')', ')', ';']",0
PigServer.java,"['public', 'long', 'totalHadoopTimeSpent', '(', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'FIX', 'Need', 'to', 'uncomment', 'this', 'with', 'the', 'right', 'logic']",0
PigServer.java,"['/', '/', 'return', 'MapReduceLauncher', '.', 'totalHadoopTimeSpent', ';']",0
PigServer.java,"['return', '0L', ';']",0
PigServer.java,"['public', 'Map', '<', 'String', ',', 'LogicalPlan', '>', 'getAliases', '(', ')', '{']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalPlan', '>', 'aliasPlans', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'op', ':', 'currDAG', '.', 'getAliases', '(', ')', '.', 'keySet', '(', ')', ')', '{']",0
PigServer.java,"['String', 'alias', '=', 'op', '.', 'getAlias', '(', ')', ';']",0
PigServer.java,"['if', '(', 'null', '!', '=', 'alias', ')', '{']",0
PigServer.java,"['aliasPlans', '.', 'put', '(', 'alias', ',', 'currDAG', '.', 'getAliases', '(', ')', '.', 'get', '(', 'op', ')', ')', ';']",0
PigServer.java,"['return', 'aliasPlans', ';']",0
PigServer.java,"['public', 'void', 'shutdown', '(', ')', '{']",0
PigServer.java,"['/', '/', 'clean', '-', 'up', 'activities']",0
PigServer.java,"['/', '/', 'TODO', ':', 'reclaim', 'scope', 'to', 'free', 'up', 'resources', '.', 'Currently']",0
PigServer.java,"['/', '/', 'this', 'is', 'not', 'implemented', 'and', 'throws', 'an', 'exception']",0
PigServer.java,"['/', '/', 'hence', ',', 'for', 'now', ',', 'we', 'won', ""'"", 't', 'call', 'it', '.']",0
PigServer.java,"['/', '/', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'reclaimScope', '(', 'this', '.', 'scope', ')', ';']",0
PigServer.java,"['public', 'Set', '<', 'String', '>', 'getAliasKeySet', '(', ')', '{']",0
PigServer.java,"['return', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'keySet', '(', ')', ';']",0
PigServer.java,"['public', 'Map', '<', 'LogicalOperator', ',', 'DataBag', '>', 'getExamples', '(', 'String', 'alias', ')', '{']",0
PigServer.java,"['LogicalPlan', 'plan', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'currDAG', '.', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['plan', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'Since', 'the', 'original', 'script', 'is', 'parsed', 'anyway', ',', 'there', 'should', 'not', 'be', 'an']",0
PigServer.java,"['/', '/', 'error', 'in', 'this', 'parsing', '.', 'The', 'only', 'reason', 'there', 'can', 'be', 'an', 'error', 'is', 'when']",0
PigServer.java,"['/', '/', 'the', 'files', 'being', 'loaded', 'in', 'load', 'don', ""'"", 't', 'exist', 'anymore', '.']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['ExampleGenerator', 'exgen', '=', 'new', 'ExampleGenerator', '(', 'plan', ',', 'pigContext', ')', ';']",0
PigServer.java,"['return', 'exgen', '.', 'getExamples', '(', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'getStorePlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', '!', 'isBatchOn', '(', ')', '|', '|', 'alias', '!', '=', 'null', ')', '{']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaves', 'to', 'which', 'stores', 'need', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'alias', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['lp', '=', 'QueryParser', '.', 'generateStorePlan', '(', 'scope', ',', 'lp', ',', '""', 'fakefile', '""', ',']",0
PigServer.java,"['PigStorage', '.', 'class', '.', 'getName', '(', ')', ',', 'leaf', ')', ';']",0
PigServer.java,"['return', 'lp', ';']",0
PigServer.java,"['private', 'List', '<', 'ExecJob', '>', 'execute', '(', 'String', 'alias', ')', 'throws', 'FrontendException', ',', 'ExecException', '{']",0
PigServer.java,"['LogicalPlan', 'typeCheckedLp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'typeCheckedLp', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'typeCheckedLp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LODefine', ')', '{']",0
PigServer.java,"['log', '.', 'info', '(', '""', 'Skip', 'execution', 'of', 'DEFINE', 'only', 'logical', 'plan', '.', '""', ')', ';']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['return', 'executeCompiledLogicalPlan', '(', 'typeCheckedLp', ')', ';']",0
PigServer.java,"['private', 'List', '<', 'ExecJob', '>', 'executeCompiledLogicalPlan', '(', 'LogicalPlan', 'compiledLp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'compiledLp', ')', ';']",0
PigServer.java,"['/', '/', 'execute', 'using', 'appropriate', 'engine']",0
PigServer.java,"['FileLocalizer', '.', 'clearDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'execJobs', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'execute', '(', 'pp', ',', '""', 'execute', '""', ')', ';']",0
PigServer.java,"['for', '(', 'ExecJob', 'execJob', ':', 'execJobs', ')', '{']",0
PigServer.java,"['if', '(', 'execJob', '.', 'getStatus', '(', ')', '=', '=', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ')', '{']",0
PigServer.java,"['FileLocalizer', '.', 'triggerDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['return', 'execJobs', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['return', 'compileLp', '(', 'alias', ',', 'true', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['boolean', 'optimize', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['/', '/', 'create', 'a', 'clone', 'of', 'the', 'logical', 'plan', 'and', 'give', 'it']",0
PigServer.java,"['/', '/', 'to', 'the', 'operations', 'below']",0
PigServer.java,"['LogicalPlan', 'lpClone', ';']",0
PigServer.java,"['lpClone', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'clone', 'plan', 'before', 'compiling', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
PigServer.java,"['/', '/', 'Set', 'the', 'logical', 'plan', 'values', 'correctly', 'in', 'all', 'the', 'operators']",0
PigServer.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'lpClone', ')', ';']",0
PigServer.java,"['ps', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['/', '/', 'run', 'through', 'validator']",0
PigServer.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
PigServer.java,"['FrontendException', 'caught', '=', 'null', ';']",0
PigServer.java,"['LogicalPlanValidationExecutor', 'validator', '=']",0
PigServer.java,"['new', 'LogicalPlanValidationExecutor', '(', 'lpClone', ',', 'pigContext', ')', ';']",0
PigServer.java,"['validator', '.', 'validate', '(', 'lpClone', ',', 'collector', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
PigServer.java,"['/', '/', 'Need', 'to', 'go', 'through', 'and', 'see', 'what', 'the', 'collector', 'has', 'in', 'it', '.', 'But']",0
PigServer.java,"['/', '/', 'remember', 'what', 'we', ""'"", 've', 'caught', 'so', 'we', 'can', 'wrap', 'it', 'into', 'what', 'we']",0
PigServer.java,"['/', '/', 'throw', '.']",0
PigServer.java,"['caught', '=', 'fe', ';']",0
PigServer.java,"['if', '(', 'aggregateWarning', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logMessages', '(', 'collector', ',', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Enum', 'type', ':', 'MessageType', '.', 'values', '(', ')', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logAllMessages', '(', 'collector', ',', 'log', ')', ';']",0
PigServer.java,"['if', '(', 'caught', '!', '=', 'null', ')', '{']",0
PigServer.java,"['throw', 'caught', ';']",0
PigServer.java,"['/', '/', 'optimize']",0
PigServer.java,"['if', '(', 'optimize', ')', '{']",0
PigServer.java,"['HashSet', '<', 'String', '>', 'optimizerRules', '=', 'null', ';']",0
PigServer.java,"['optimizerRules', '=', '(', 'HashSet', '<', 'String', '>', ')', 'ObjectSerializer']",0
PigServer.java,"['.', 'deserialize', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(']",0
PigServer.java,"['""', 'pig', '.', 'optimizer', '.', 'rules', '""', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2110', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'deserialize', 'optimizer', 'rules', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ioe', ')', ';']",0
PigServer.java,"['LogicalOptimizer', 'optimizer', '=', 'new', 'LogicalOptimizer', '(', 'lpClone', ',', 'pigContext', '.', 'getExecType', '(', ')', ',', 'optimizerRules', ')', ';']",0
PigServer.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
PigServer.java,"['return', 'lpClone', ';']",0
PigServer.java,"['private', 'PhysicalPlan', 'compilePp', '(', 'LogicalPlan', 'lp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['/', '/', 'translate', 'lp', 'to', 'physical', 'plan']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'compile', '(', 'lp', ',', 'null', ')', ';']",0
PigServer.java,"['/', '/', 'TODO', 'optimize']",0
PigServer.java,"['return', 'pp', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'getPlanFromAlias', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['String', 'operation', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['LogicalOperator', 'lo', '=', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'lo', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1004', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'alias', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'currDAG', '.', 'getAliases', '(', ')', '.', 'get', '(', 'lo', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1005', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'plan', 'for', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['return', 'lp', ';']",0
PigServer.java,"['private', 'class', 'Graph', '{']",0
PigServer.java,"['private', 'Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'opTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['private', 'List', '<', 'String', '>', 'scriptCache', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['/', '/', 'the', 'fileNameMap', 'contains', 'filename', 'to', 'canonical', 'filename']",0
PigServer.java,"['/', '/', 'mappings', '.', 'This', 'is', 'done', 'so', 'we', 'can', 'reparse', 'the', 'cached', 'script']",0
PigServer.java,"['/', '/', 'and', 'remember', 'the', 'translation', '(', 'current', 'directory', 'might', 'only']",0
PigServer.java,"['/', '/', 'be', 'correct', 'during', 'the', 'first', 'parse']",0
PigServer.java,"['private', 'Map', '<', 'String', ',', 'String', '>', 'fileNameMap', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'LOStore', ',', 'LogicalPlan', '>', 'storeOpTable', '=', 'new', 'HashMap', '<', 'LOStore', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Set', '<', 'LOLoad', '>', 'loadOps', '=', 'new', 'HashSet', '<', 'LOLoad', '>', '(', ')', ';']",0
PigServer.java,"['private', 'String', 'jobName', ';']",0
PigServer.java,"['private', 'boolean', 'batchMode', ';']",0
PigServer.java,"['private', 'int', 'processedStores', ';']",0
PigServer.java,"['private', 'int', 'ignoreNumStores', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'lp', ';']",0
PigServer.java,"['Graph', '(', 'boolean', 'batchMode', ')', '{']",0
PigServer.java,"['this', '.', 'batchMode', '=', 'batchMode', ';']",0
PigServer.java,"['this', '.', 'processedStores', '=', '0', ';']",0
PigServer.java,"['this', '.', 'ignoreNumStores', '=', '0', ';']",0
PigServer.java,"['this', '.', 'jobName', '=', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
PigServer.java,"['PigContext', '.', 'JOB_NAME_PREFIX', '+', '""', ':', 'DefaultJobName', '""', ')', ';']",0
PigServer.java,"['this', '.', 'lp', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'getAliases', '(', ')', '{', 'return', 'aliases', ';', '}']",0
PigServer.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'getOpTable', '(', ')', '{', 'return', 'opTable', ';', '}']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'getAliasOp', '(', ')', '{', 'return', 'aliasOp', ';', '}']",0
PigServer.java,"['List', '<', 'String', '>', 'getScriptCache', '(', ')', '{', 'return', 'scriptCache', ';', '}']",0
PigServer.java,"['boolean', 'isBatchOn', '(', ')', '{', 'return', 'batchMode', ';', '}', ';']",0
PigServer.java,"['boolean', 'isBatchEmpty', '(', ')', '{', 'return', 'processedStores', '=', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';', '}']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'execute', '(', ')', 'throws', 'ExecException', ',', 'FrontendException', '{']",0
PigServer.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',', 'jobName', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'PigServer', '.', 'this', '.', 'execute', '(', 'null', ')', ';']",0
PigServer.java,"['processedStores', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';']",0
PigServer.java,"['return', 'jobs', ';']",0
PigServer.java,"['void', 'markAsExecuted', '(', ')', '{']",0
PigServer.java,"['processedStores', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';']",0
PigServer.java,"['void', 'setJobName', '(', 'String', 'name', ')', '{']",0
PigServer.java,"['jobName', '=', 'PigContext', '.', 'JOB_NAME_PREFIX', '+', '""', ':', '""', '+', 'name', ';']",0
PigServer.java,"['LogicalPlan', 'getPlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'plan', '=', 'lp', ';']",0
PigServer.java,"['if', '(', 'alias', '!', '=', 'null', ')', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'aliasOp', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'op', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['plan', '=', 'aliases', '.', 'get', '(', 'op', ')', ';']",0
PigServer.java,"['return', 'plan', ';']",0
PigServer.java,"['void', 'registerQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'tmpLp', '=', 'parseQuery', '(', 'query', ',', 'startLine', ')', ';']",0
PigServer.java,"['/', '/', 'store', 'away', 'the', 'query', 'for', 'use', 'in', 'cloning', 'later']",0
PigServer.java,"['scriptCache', '.', 'add', '(', 'query', ')', ';']",0
PigServer.java,"['if', '(', 'tmpLp', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'tmpLp', '.', 'getSingleLeafPlanOutputOp', '(', ')', ';']",0
PigServer.java,"['/', '/', 'Check', 'if', 'we', 'just', 'processed', 'a', 'LOStore', 'i', '.', 'e', '.', 'STORE']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LOStore', ')', '{']",0
PigServer.java,"['if', '(', '!', 'batchMode', ')', '{']",0
PigServer.java,"['lp', '=', 'tmpLp', ';']",0
PigServer.java,"['execute', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""']",0
PigServer.java,"['+', 'op', '.', 'getOperatorKey', '(', ')', '.', 'getId', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',']",0
PigServer.java,"['PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['if', '(', '0', '=', '=', 'ignoreNumStores', ')', '{']",0
PigServer.java,"['storeOpTable', '.', 'put', '(', '(', 'LOStore', ')', 'op', ',', 'tmpLp', ')', ';']",0
PigServer.java,"['lp', '.', 'mergeSharedPlan', '(', 'tmpLp', ')', ';']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'roots', '=', 'tmpLp', '.', 'getRoots', '(', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'root', ':', 'roots', ')', '{']",0
PigServer.java,"['if', '(', 'root', 'instanceof', 'LOLoad', ')', '{']",0
PigServer.java,"['loadOps', '.', 'add', '(', '(', 'LOLoad', ')', 'root', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['-', '-', 'ignoreNumStores', ';']",0
PigServer.java,"['LogicalPlan', 'parseQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'query', '=', '=', 'null', '|', '|', 'query', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1084', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Invalid', 'Query', ':', 'Query', 'is', 'null', 'or', 'of', 'size', '0', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['query', '=', 'query', '.', 'trim', '(', ')', ';']",0
PigServer.java,"['return', 'new', 'LogicalPlanBuilder', '(', 'PigServer', '.', 'this', '.', 'pigContext', ')', '.', 'parse', '(', 'scope', ',', 'query', ',']",0
PigServer.java,"['aliases', ',', 'opTable', ',', 'aliasOp', ',', 'startLine', ',', 'fileNameMap', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
PigServer.java,"['int', 'errCode', '=', '1000', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Error', 'during', 'parsing', '.', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'e', ')', ';']",0
PigServer.java,"['protected', 'Graph', 'clone', '(', ')', '{']",0
PigServer.java,"['/', '/', 'There', 'are', 'two', 'choices', 'on', 'how', 'we', 'clone', 'the', 'logical', 'plan']",0
PigServer.java,"['/', '/', '1', '-', 'we', 'really', 'clone', 'each', 'operator', 'and', 'connect', 'up', 'the', 'cloned', 'operators']",0
PigServer.java,"['/', '/', '2', '-', 'we', 'cache', 'away', 'the', 'script', 'till', 'the', 'point', 'we', 'need', 'to', 'clone']",0
PigServer.java,"['/', '/', 'and', 'then', 'simply', 're', '-', 'parse', 'the', 'script', '.']",0
PigServer.java,"['/', '/', 'The', 'latter', 'approach', 'is', 'used', 'here']",0
PigServer.java,"['/', '/', 'FIXME', ':', 'There', 'is', 'one', 'open', 'issue', 'with', 'this', 'now', ':']",0
PigServer.java,"['/', '/', 'Consider', 'the', 'following', 'script', ':']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'B', '=', 'filter', 'A', 'by', '$', '0', '>', '10', ';']",0
PigServer.java,"['/', '/', 'store', 'B', 'into', ""'"", 'bla', ""'"", ';']",0
PigServer.java,"['/', '/', 'rm', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'someotherfile', ""'""]",0
PigServer.java,"['/', '/', 'when', 'we', 'try', 'to', 'clone', '-', 'we', 'try', 'to', 'reparse']",0
PigServer.java,"['/', '/', 'from', 'the', 'beginning', 'and', 'currently', 'the', 'parser']",0
PigServer.java,"['/', '/', 'checks', 'for', 'file', 'existence', 'of', 'files', 'in', 'the', 'load']",0
PigServer.java,"['/', '/', 'in', 'the', 'case', 'where', 'the', 'file', 'is', 'a', 'local', 'one', '-', 'i', '.', 'e', '.', 'with', 'file', ':', 'prefix']",0
PigServer.java,"['/', '/', 'This', 'will', 'be', 'a', 'known', 'issue', 'now', 'and', 'we', 'will', 'need', 'to', 'revisit', 'later']",0
PigServer.java,"['/', '/', 'parse', 'each', 'line', 'of', 'the', 'cached', 'script']",0
PigServer.java,"['int', 'lineNumber', '=', '1', ';']",0
PigServer.java,"['/', '/', 'create', 'data', 'structures', 'needed', 'for', 'parsing']",0
PigServer.java,"['Graph', 'graph', '=', 'new', 'Graph', '(', 'isBatchOn', '(', ')', ')', ';']",0
PigServer.java,"['graph', '.', 'ignoreNumStores', '=', 'processedStores', ';']",0
PigServer.java,"['graph', '.', 'processedStores', '=', 'processedStores', ';']",0
PigServer.java,"['graph', '.', 'fileNameMap', '=', 'fileNameMap', ';']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'String', '>', 'it', '=', 'getScriptCache', '(', ')', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', 'lineNumber', '+', '+', ')', '{']",0
PigServer.java,"['if', '(', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['graph', '.', 'registerQuery', '(', 'it', '.', 'next', '(', ')', ',', 'lineNumber', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['graph', '.', 'lp', '=', 'graph', '.', 'parseQuery', '(', 'it', '.', 'next', '(', ')', ',', 'lineNumber', ')', ';']",0
PigServer.java,"['graph', '.', 'postProcess', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PigServer.java,"['graph', '=', 'null', ';']",0
PigServer.java,"['return', 'graph', ';']",0
PigServer.java,"['private', 'void', 'postProcess', '(', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'Set', 'the', 'logical', 'plan', 'values', 'correctly', 'in', 'all', 'the', 'operators']",0
PigServer.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'lp', ')', ';']",0
PigServer.java,"['ps', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['/', '/', 'The', 'following', 'code', 'deals', 'with', 'store', '/', 'load', 'combination', 'of']",0
PigServer.java,"['/', '/', 'intermediate', 'files', '.', 'In', 'this', 'case', 'we', 'will', 'replace', 'the', 'load', 'operator']",0
PigServer.java,"['/', '/', 'with', 'a', '(', 'implicit', ')', 'split', 'operator', ',', 'iff', 'the', 'load', '/', 'store']",0
PigServer.java,"['/', '/', 'func', 'is', 'reversible', '(', 'because', 'that', ""'"", 's', 'when', 'we', 'can', 'safely']",0
PigServer.java,"['/', '/', 'skip', 'the', 'load', 'and', 'keep', 'going', 'with', 'the', 'split', 'output', ')', '.', 'If']",0
PigServer.java,"['/', '/', 'the', 'load', '/', 'store', 'func', 'is', 'not', 'reversible', '(', 'or', 'they', 'are']",0
PigServer.java,"['/', '/', 'different', 'functions', ')', ',', 'we', 'connect', 'the', 'store', 'and', 'the', 'load']",0
PigServer.java,"['/', '/', 'to', 'remember', 'the', 'dependency', '.']",0
PigServer.java,"['for', '(', 'LOLoad', 'load', ':', 'loadOps', ')', '{']",0
PigServer.java,"['for', '(', 'LOStore', 'store', ':', 'storeOpTable', '.', 'keySet', '(', ')', ')', '{']",0
PigServer.java,"['String', 'ifile', '=', 'load', '.', 'getInputFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
PigServer.java,"['String', 'ofile', '=', 'store', '.', 'getOutputFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
PigServer.java,"['if', '(', 'ofile', '.', 'compareTo', '(', 'ifile', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['LoadFunc', 'lFunc', '=', '(', 'LoadFunc', ')', 'pigContext', '.', 'instantiateFuncFromSpec', '(', 'load', '.', 'getInputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ')', ';']",0
PigServer.java,"['StoreFunc', 'sFunc', '=', '(', 'StoreFunc', ')', 'pigContext', '.', 'instantiateFuncFromSpec', '(', 'store', '.', 'getOutputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ')', ';']",0
PigServer.java,"['if', '(', 'lFunc', '.', 'getClass', '(', ')', '=', '=', 'sFunc', '.', 'getClass', '(', ')', '&', '&', 'lFunc', 'instanceof', 'ReversibleLoadStoreFunc', ')', '{']",0
PigServer.java,"['log', '.', 'info', '(', '""', 'Removing', 'unnecessary', 'load', 'operation', 'from', 'location', ':', '""', '+', 'ifile', ')', ';']",0
PigServer.java,"['/', '/', 'In', 'this', 'case', 'we', 'remember', 'the', 'input', 'file']",0
PigServer.java,"['/', '/', 'spec', 'in', 'the', 'store', '.', 'We', 'might', 'have', 'to', 'use', 'it']",0
PigServer.java,"['/', '/', 'in', 'the', 'MR', 'compiler', 'to', 'recreate', 'the', 'load', ',', 'if']",0
PigServer.java,"['/', '/', 'the', 'store', 'happens', 'on', 'a', 'job', 'boundary', '.']",0
PigServer.java,"['store', '.', 'setInputSpec', '(', 'load', '.', 'getInputFile', '(', ')', ')', ';']",0
PigServer.java,"['LogicalOperator', 'storePred', '=', 'lp', '.', 'getPredecessors', '(', 'store', ')', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['/', '/', 'In', 'this', 'case', 'we', 'remember', 'the', 'input', 'file']",0
PigServer.java,"['/', '/', 'spec', 'in', 'the', 'store', '.', 'We', 'might', 'have', 'to', 'use', 'it']",0
PigServer.java,"['/', '/', 'in', 'the', 'MR', 'compiler', 'to', 'recreate', 'the', 'load', ',', 'if']",0
PigServer.java,"['/', '/', 'the', 'store', 'happens', 'on', 'a', 'job', 'boundary', '.']",0
PigServer.java,"['store', '.', 'setInputSpec', '(', 'load', '.', 'getInputFile', '(', ')', ')', ';']",0
PigServer.java,"['lp', '.', 'disconnect', '(', 'store', ',', 'load', ')', ';']",0
PigServer.java,"['lp', '.', 'replace', '(', 'load', ',', 'storePred', ')', ';']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'succs', '=', 'lp', '.', 'getSuccessors', '(', 'storePred', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'succ', ':', 'succs', ')', '{']",0
PigServer.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'innerPls', '=', 'null', ';']",0
PigServer.java,"['/', '/', 'fix', 'inner', 'plans', 'for', 'cogroup', 'and', 'frjoin', 'operators']",0
PigServer.java,"['if', '(', 'succ', 'instanceof', 'LOCogroup', ')', '{']",0
PigServer.java,"['innerPls', '=', '(', '(', 'LOCogroup', ')', 'succ', ')', '.', 'getGroupByPlans', '(', ')', ';']",0
PigServer.java,"['}', 'else', 'if', '(', 'succ', 'instanceof', 'LOFRJoin', ')', '{']",0
PigServer.java,"['innerPls', '=', '(', '(', 'LOFRJoin', ')', 'succ', ')', '.', 'getJoinColPlans', '(', ')', ';']",0
PigServer.java,"['if', '(', 'innerPls', '!', '=', 'null', ')', '{']",0
PigServer.java,"['if', '(', 'innerPls', '.', 'containsKey', '(', 'load', ')', ')', '{']",0
PigServer.java,"['Collection', '<', 'LogicalPlan', '>', 'pls', '=', 'innerPls', '.', 'get', '(', 'load', ')', ';']",0
PigServer.java,"['innerPls', '.', 'removeKey', '(', 'load', ')', ';']",0
PigServer.java,"['innerPls', '.', 'put', '(', 'storePred', ',', 'pls', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['store', '.', 'getPlan', '(', ')', '.', 'connect', '(', 'store', ',', 'load', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'PlanException', 'ex', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2128', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'connect', 'store', 'with', 'dependent', 'load', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'ex', ')', ';']",0
GruntParser.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'Reader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Date', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorageException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', '.', 'JOB_STATUS', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParser', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParserTokenManager', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
GruntParser.java,"['public', 'class', 'GruntParser', 'extends', 'PigScriptParser', '{']",0
GruntParser.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'Reader', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ',', 'String', 'encoding', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ',', 'encoding', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'PigScriptParserTokenManager', 'tm', ')', '{']",0
GruntParser.java,"['super', '(', 'tm', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['private', 'void', 'init', '(', ')', '{']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['mLoadOnly', '=', 'false', ';']",0
GruntParser.java,"['mExplain', '=', 'null', ';']",0
GruntParser.java,"['private', 'void', 'setBatchOn', '(', ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'setBatchOn', '(', ')', ';']",0
GruntParser.java,"['private', 'void', 'executeBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchOn', '(', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'mExplain', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['explainCurrentBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mLoadOnly', ')', '{']",0
GruntParser.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'mPigServer', '.', 'executeBatch', '(', ')', ';']",0
GruntParser.java,"['for', '(', 'ExecJob', 'job', ':', 'jobs', ')', '{']",0
GruntParser.java,"['if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ')', '{']",0
GruntParser.java,"['mNumFailedJobs', '+', '+', ';']",0
GruntParser.java,"['if', '(', 'job', '.', 'getException', '(', ')', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['LogUtils', '.', 'writeLog', '(']",0
GruntParser.java,"['job', '.', 'getException', '(', ')', ',']",0
GruntParser.java,"['mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
GruntParser.java,"['""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ')', ';']",0
GruntParser.java,"['mNumSucceededJobs', '+', '+', ';']",0
GruntParser.java,"['private', 'void', 'discardBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchOn', '(', ')', ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'discardBatch', '(', ')', ';']",0
GruntParser.java,"['public', 'int', '[', ']', 'parseStopOnError', '(', ')', 'throws', 'IOException', ',', 'ParseException']",0
GruntParser.java,"['return', 'parseStopOnError', '(', 'false', ')', ';']",0
GruntParser.java,"['/', '*', '*']",0
GruntParser.java,"['public', 'int', '[', ']', 'parseStopOnError', '(', 'boolean', 'sameBatch', ')', 'throws', 'IOException', ',', 'ParseException']",0
GruntParser.java,"['if', '(', 'mPigServer', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IllegalStateException', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mInteractive', '&', '&', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['prompt', '(', ')', ';']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['while', '(', '!', 'mDone', ')', '{']",0
GruntParser.java,"['parse', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['int', '[', ']', 'res', '=', '{', 'mNumSucceededJobs', ',', 'mNumFailedJobs', '}', ';']",0
GruntParser.java,"['return', 'res', ';']",0
GruntParser.java,"['public', 'void', 'setLoadOnly', '(', 'boolean', 'loadOnly', ')']",0
GruntParser.java,"['mLoadOnly', '=', 'loadOnly', ';']",0
GruntParser.java,"['public', 'void', 'setParams', '(', 'PigServer', 'pigServer', ')']",0
GruntParser.java,"['mPigServer', '=', 'pigServer', ';']",0
GruntParser.java,"['mDfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ';']",0
GruntParser.java,"['mLfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLfs', '(', ')', ';']",0
GruntParser.java,"['mConf', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', ';']",0
GruntParser.java,"['/', '/', 'TODO', ':', 'this', 'violates', 'the', 'abstraction', 'layer', 'decoupling', 'between']",0
GruntParser.java,"['/', '/', 'front', 'end', 'and', 'back', 'end', 'and', 'needs', 'to', 'be', 'changed', '.']",0
GruntParser.java,"['/', '/', 'Right', 'now', 'I', 'am', 'not', 'clear', 'on', 'how', 'the', 'Job', 'Id', 'comes', 'from', 'to', 'tell']",0
GruntParser.java,"['/', '/', 'the', 'back', 'end', 'to', 'kill', 'a', 'given', 'job', '(', 'mJobClient', 'is', 'used', 'only', 'in']",0
GruntParser.java,"['/', '/', 'processKill', ')']",0
GruntParser.java,"['ExecutionEngine', 'execEngine', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getExecutionEngine', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'execEngine', 'instanceof', 'HExecutionEngine', ')', '{']",0
GruntParser.java,"['mJobClient', '=', '(', '(', 'HExecutionEngine', ')', 'execEngine', ')', '.', 'getJobClient', '(', ')', ';']",0
GruntParser.java,"['mJobClient', '=', 'null', ';']",0
GruntParser.java,"['public', 'void', 'prompt', '(', ')']",0
GruntParser.java,"['if', '(', 'mInteractive', ')', '{']",0
GruntParser.java,"['mConsoleReader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'quit', '(', ')']",0
GruntParser.java,"['mDone', '=', 'true', ';']",0
GruntParser.java,"['public', 'boolean', 'isDone', '(', ')', '{']",0
GruntParser.java,"['return', 'mDone', ';']",0
GruntParser.java,"['protected', 'void', 'processDescribe', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'alias', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['alias', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLastAlias', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'dumpSchema', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processExplain', '(', 'String', 'alias', ',', 'String', 'script', ',', 'boolean', 'isVerbose', ',']",0
GruntParser.java,"['String', 'format', ',', 'String', 'target', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'null', '!', '=', 'mExplain', ')', '{']",0
GruntParser.java,"['mExplain', '=', 'new', 'ExplainState', '(', 'alias', ',', 'target', ',', 'script', ',', 'isVerbose', ',', 'format', ')', ';']",0
GruntParser.java,"['if', '(', 'script', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['if', '(', '!', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'mPigServer', '.']",0
GruntParser.java,"['getPigContext', '(', ')']",0
GruntParser.java,"['.', 'getProperties', '(', ')', '.']",0
GruntParser.java,"['getProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Cannot', 'explain', 'script', 'if', 'multiquery', 'is', 'disabled', '.', '""', ')', ';']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'true', ',', 'true', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['throw', 'e', ';']",0
GruntParser.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['throw', 'e', ';']",0
GruntParser.java,"['mExplain', '.', 'mLast', '=', 'true', ';']",0
GruntParser.java,"['explainCurrentBatch', '(', ')', ';']",0
GruntParser.java,"['}', 'finally', '{']",0
GruntParser.java,"['if', '(', 'script', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['mExplain', '=', 'null', ';']",0
GruntParser.java,"['protected', 'void', 'explainCurrentBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['PrintStream', 'lp', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['PrintStream', 'pp', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['PrintStream', 'ep', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['if', '(', '!', '(', 'mExplain', '.', 'mLast', '&', '&', 'mExplain', '.', 'mCount', '=', '=', '0', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchEmpty', '(', ')', ')', '{']",0
GruntParser.java,"['mExplain', '.', 'mCount', '+', '+', ';']",0
GruntParser.java,"['boolean', 'markAsExecuted', '=', '(', 'mExplain', '.', 'mScript', '!', '=', 'null', ')', ';']",0
GruntParser.java,"['if', '(', 'mExplain', '.', 'mTarget', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['File', 'file', '=', 'new', 'File', '(', 'mExplain', '.', 'mTarget', ')', ';']",0
GruntParser.java,"['if', '(', 'file', '.', 'isDirectory', '(', ')', ')', '{']",0
GruntParser.java,"['String', 'sCount', '=', '(', 'mExplain', '.', 'mLast', '&', '&', 'mExplain', '.', 'mCount', '=', '=', '1', ')', '?', '""', '""', ':', '""', '_', '""', '+', 'mExplain', '.', 'mCount', ';']",0
GruntParser.java,"['lp', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'logical_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['pp', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'physical_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['ep', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'exec_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['lp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['pp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['ep', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['boolean', 'append', '=', '!', '(', 'mExplain', '.', 'mCount', '=', '=', '1', ')', ';']",0
GruntParser.java,"['lp', '=', 'pp', '=', 'ep', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'mExplain', '.', 'mTarget', ',', 'append', ')', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['lp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printAliases', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'printAliases', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRegister', '(', 'String', 'jar', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'registerJar', '(', 'jar', ')', ';']",0
GruntParser.java,"['private', 'String', 'runPreprocessor', '(', 'String', 'script', ',', 'List', '<', 'String', '>', 'params', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
GruntParser.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
GruntParser.java,"['psp', '.', 'genSubstitutedFile', '(', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'script', ')', ')', ',']",0
GruntParser.java,"['params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ',']",0
GruntParser.java,"['files', '.', 'size', '(', ')', '>', '0', '?', 'files', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', 'pex', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', 'pex', '.', 'getMessage', '(', ')', ')', ';']",0
GruntParser.java,"['return', 'writer', '.', 'toString', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processScript', '(', 'String', 'script', ',', 'boolean', 'batch', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'script', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'batch', ')', '{']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'setJobName', '(', 'script', ')', ';']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'true', ',', 'mLoadOnly', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['}', 'finally', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'false', ',', 'mLoadOnly', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['private', 'void', 'loadScript', '(', 'String', 'script', ',', 'boolean', 'batch', ',', 'boolean', 'loadOnly', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['Reader', 'inputReader', ';']",0
GruntParser.java,"['ConsoleReader', 'reader', ';']",0
GruntParser.java,"['boolean', 'interactive', ';']",0
GruntParser.java,"['String', 'cmds', '=', 'runPreprocessor', '(', 'script', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['if', '(', 'mInteractive', '&', '&', '!', 'batch', ')', '{', '/', '/', 'Write', 'prompt', 'and', 'echo', 'commands']",0
GruntParser.java,"['/', '/', 'Console', 'reader', 'treats', 'tabs', 'in', 'a', 'special', 'way']",0
GruntParser.java,"['cmds', '=', 'cmds', '.', 'replaceAll', '(', '""', '\\', 't', '""', ',', '""', '""', ')', ';']",0
GruntParser.java,"['reader', '=', 'new', 'ConsoleReader', '(', 'new', 'ByteArrayInputStream', '(', 'cmds', '.', 'getBytes', '(', ')', ')', ',']",0
GruntParser.java,"['new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
GruntParser.java,"['reader', '.', 'setHistory', '(', 'mConsoleReader', '.', 'getHistory', '(', ')', ')', ';']",0
GruntParser.java,"['InputStream', 'in', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
GruntParser.java,"['inputReader', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'in', ')', ')', ';']",0
GruntParser.java,"['interactive', '=', 'true', ';']",0
GruntParser.java,"['}', 'else', '{', '/', '/', 'Quietly', 'parse', 'the', 'statements']",0
GruntParser.java,"['inputReader', '=', 'new', 'StringReader', '(', 'cmds', ')', ';']",0
GruntParser.java,"['reader', '=', 'null', ';']",0
GruntParser.java,"['interactive', '=', 'false', ';']",0
GruntParser.java,"['}', 'catch', '(', 'FileNotFoundException', 'fnfe', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'File', 'not', 'found', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'SecurityException', 'se', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Cannot', 'access', 'file', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['GruntParser', 'parser', '=', 'new', 'GruntParser', '(', 'inputReader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setParams', '(', 'mPigServer', ')', ';']",0
GruntParser.java,"['parser', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setInteractive', '(', 'interactive', ')', ';']",0
GruntParser.java,"['parser', '.', 'setLoadOnly', '(', 'loadOnly', ')', ';']",0
GruntParser.java,"['parser', '.', 'mExplain', '=', 'mExplain', ';']",0
GruntParser.java,"['parser', '.', 'prompt', '(', ')', ';']",0
GruntParser.java,"['while', '(', '!', 'parser', '.', 'isDone', '(', ')', ')', '{']",0
GruntParser.java,"['parser', '.', 'parse', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'interactive', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processSet', '(', 'String', 'key', ',', 'String', 'value', ')', 'throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'key', '.', 'equals', '(', '""', 'debug', '""', ')', ')']",0
GruntParser.java,"['if', '(', 'value', '.', 'equals', '(', '""', 'on', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'on', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOn', '(', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'value', '.', 'equals', '(', '""', 'off', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'off', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOff', '(', ')', ';']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Invalid', 'value', '""', '+', 'value', '+', '""', 'provided', 'for', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'job', '.', 'name', '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'setJobName', '(', 'value', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'stream', '.', 'skippath', '""', ')', ')', '{']",0
GruntParser.java,"['/', '/', 'Validate']",0
GruntParser.java,"['File', 'file', '=', 'new', 'File', '(', 'value', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'file', '.', 'exists', '(', ')', '|', '|', 'file', '.', 'isDirectory', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'value', 'for', 'stream', '.', 'skippath', ':', '""', '+']",0
GruntParser.java,"['value', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'addPathToSkip', '(', 'value', ')', ';']",0
GruntParser.java,"['/', '/', 'other', 'key', '-', 'value', 'pairs', 'can', 'go', 'there']",0
GruntParser.java,"['/', '/', 'for', 'now', 'just', 'throw', 'exception', 'since', 'we', 'don', ""'"", 't', 'support']",0
GruntParser.java,"['/', '/', 'anything', 'else']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Unrecognized', 'set', 'key', ':', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCat', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['byte', 'buffer', '[', ']', '=', 'new', 'byte', '[', '65536', ']', ';']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['int', 'rc', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'dfsDir', '=', '(', 'ContainerDescriptor', ')', 'dfsPath', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'paths', '=', 'dfsDir', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'paths', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'paths', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['InputStream', 'is', '=', 'curElem', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['InputStream', 'is', '=', 'dfsPath', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'Cat', ':', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCD', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'container', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'container', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', 'path', '+', '""', 'is', 'not', 'a', 'directory', '.', '""', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'change', 'working', 'directory', 'to', '""', '+']",0
GruntParser.java,"['(', '(', 'path', '=', '=', 'null', ')', '?', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')']",0
GruntParser.java,"[':', '(', 'path', ')', ')', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processDump', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['Iterator', '<', 'Tuple', '>', 'result', '=', 'mPigServer', '.', 'openIterator', '(', 'alias', ')', ';']",0
GruntParser.java,"['while', '(', 'result', '.', 'hasNext', '(', ')', ')']",0
GruntParser.java,"['Tuple', 't', '=', 'result', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 't', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processIllustrate', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['mPigServer', '.', 'getExamples', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processKill', '(', 'String', 'jobid', ')', 'throws', 'IOException']",0
GruntParser.java,"['if', '(', 'mJobClient', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['JobID', 'id', '=', 'JobID', '.', 'forName', '(', 'jobid', ')', ';']",0
GruntParser.java,"['RunningJob', 'job', '=', 'mJobClient', '.', 'getJob', '(', 'id', ')', ';']",0
GruntParser.java,"['if', '(', 'job', '=', '=', 'null', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', 'with', 'id', '""', '+', 'jobid', '+', '""', 'is', 'not', 'active', '""', ')', ';']",0
GruntParser.java,"['job', '.', 'killJob', '(', ')', ';']",0
GruntParser.java,"['log', '.', 'error', '(', '""', 'kill', 'submitted', '.', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processLS', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'pathDescriptor', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'getActiveContainer', '(', ')', ';']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'pathDescriptor', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'pathDescriptor', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'container', '=', '(', 'ContainerDescriptor', ')', 'pathDescriptor', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'elems', '=', 'container', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'elems', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'elems', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'curElem', '.', 'toString', '(', ')', '+', '""', '\\', 't', '<', 'dir', '>', '""', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['printLengthAndReplication', '(', 'curElem', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['printLengthAndReplication', '(', 'pathDescriptor', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'LS', 'on', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['private', 'void', 'printLengthAndReplication', '(', 'ElementDescriptor', 'elem', ')']",0
GruntParser.java,"['throws', 'IOException', '{']",0
GruntParser.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
GruntParser.java,"['long', 'replication', '=', '(', 'Short', ')', 'stats']",0
GruntParser.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
GruntParser.java,"['long', 'len', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'elem', '.', 'toString', '(', ')', '+', '""', '<', 'r', '""', '+', 'replication', '+', '""', '>', '\\', 't', '""', '+', 'len', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPWD', '(', ')', 'throws', 'IOException']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'mDfs', '.', 'getActiveContainer', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printHelp', '(', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Commands', ':', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '<', 'pig', 'latin', 'statement', '>', ';', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'store', '<', 'alias', '>', 'into', '<', 'filename', '>', '[', 'using', '<', 'functionSpec', '>', ']', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'dump', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'describe', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'kill', '<', 'job_id', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'ls', '<', 'path', '>', '\\', 'r', '\\', 'ndu', '<', 'path', '>', '\\', 'r', '\\', 'nmv', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncp', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'nrm', '<', 'src', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'copyFromLocal', '<', 'localsrc', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncd', '<', 'dir', '>', '\\', 'r', '\\', 'npwd', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cat', '<', 'src', '>', '\\', 'r', '\\', 'ncopyToLocal', '<', 'src', '>', '<', 'localdst', '>', '\\', 'r', '\\', 'nmkdir', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cd', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'define', '<', 'functionAlias', '>', '<', 'functionSpec', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'register', '<', 'udfJar', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'set', 'key', 'value', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'quit', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMove', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'srcPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'src', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'rename', '(', 'dstPath', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'move', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopy', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'mConf', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyToLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mLfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '(', 'locally', ')', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyFromLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mLfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '(', 'loally', ')', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMkdir', '(', 'String', 'dir', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'dirDescriptor', '=', 'mDfs', '.', 'asContainer', '(', 'dir', ')', ';']",0
GruntParser.java,"['dirDescriptor', '.', 'create', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPig', '(', 'String', 'cmd', ')', 'throws', 'IOException']",0
GruntParser.java,"['int', 'start', '=', '1', ';']",0
GruntParser.java,"['if', '(', '!', 'mInteractive', ')', '{']",0
GruntParser.java,"['start', '=', 'getLineNumber', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'cmd', '.', 'charAt', '(', 'cmd', '.', 'length', '(', ')', '-', '1', ')', '!', '=', ""'"", ';', ""'"", ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', '+', '""', ';', '""', ',', 'start', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', ',', 'start', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRemove', '(', 'String', 'path', ',', 'String', 'options', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'options', '=', '=', 'null', '|', '|', '!', 'options', '.', 'equalsIgnoreCase', '(', '""', 'force', '""', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['dfsPath', '.', 'delete', '(', ')', ';']",0
GruntParser.java,"['private', 'class', 'ExplainState', '{']",0
GruntParser.java,"['public', 'long', 'mTime', ';']",0
GruntParser.java,"['public', 'int', 'mCount', ';']",0
GruntParser.java,"['public', 'String', 'mAlias', ';']",0
GruntParser.java,"['public', 'String', 'mTarget', ';']",0
GruntParser.java,"['public', 'String', 'mScript', ';']",0
GruntParser.java,"['public', 'boolean', 'mVerbose', ';']",0
GruntParser.java,"['public', 'String', 'mFormat', ';']",0
GruntParser.java,"['public', 'boolean', 'mLast', ';']",0
GruntParser.java,"['public', 'ExplainState', '(', 'String', 'alias', ',', 'String', 'target', ',', 'String', 'script', ',']",0
GruntParser.java,"['boolean', 'verbose', ',', 'String', 'format', ')', '{']",0
GruntParser.java,"['mTime', '=', 'new', 'Date', '(', ')', '.', 'getTime', '(', ')', ';']",0
GruntParser.java,"['mCount', '=', '0', ';']",0
GruntParser.java,"['mAlias', '=', 'alias', ';']",0
GruntParser.java,"['mTarget', '=', 'target', ';']",0
GruntParser.java,"['mScript', '=', 'script', ';']",0
GruntParser.java,"['mVerbose', '=', 'verbose', ';']",0
GruntParser.java,"['mFormat', '=', 'format', ';']",0
GruntParser.java,"['mLast', '=', 'false', ';']",0
GruntParser.java,"['private', 'PigServer', 'mPigServer', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mDfs', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mLfs', ';']",0
GruntParser.java,"['private', 'Properties', 'mConf', ';']",0
GruntParser.java,"['private', 'JobClient', 'mJobClient', ';']",0
GruntParser.java,"['private', 'boolean', 'mDone', ';']",0
GruntParser.java,"['private', 'boolean', 'mLoadOnly', ';']",0
GruntParser.java,"['private', 'ExplainState', 'mExplain', ';']",0
GruntParser.java,"['private', 'int', 'mNumFailedJobs', ';']",0
GruntParser.java,"['private', 'int', 'mNumSucceededJobs', ';']",0
Utf8StorageConverter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PigLogger', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'ParseException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'TextDataParser', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Utf8StorageConverter.java,"['/', '*', '*']",0
Utf8StorageConverter.java,"['abstract', 'public', 'class', 'Utf8StorageConverter', '{']",0
Utf8StorageConverter.java,"['protected', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Integer', 'mMaxInt', '=', 'new', 'Integer', '(', 'Integer', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Long', 'mMaxLong', '=', 'new', 'Long', '(', 'Long', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'TextDataParser', 'dataParser', '=', 'null', ';']",0
Utf8StorageConverter.java,"['private', 'PigLogger', 'pigLogger', '=', 'PhysicalOperator', '.', 'getPigLogger', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Utf8StorageConverter', '(', ')', '{']",0
Utf8StorageConverter.java,"['private', 'Object', 'parseFromBytes', '(', 'byte', '[', ']', 'b', ')', 'throws', 'ParseException', '{']",0
Utf8StorageConverter.java,"['ByteArrayInputStream', 'in', '=', 'new', 'ByteArrayInputStream', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['if', '(', 'dataParser', '=', '=', 'null', ')', '{']",0
Utf8StorageConverter.java,"['dataParser', '=', 'new', 'TextDataParser', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['dataParser', '.', 'ReInit', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['return', 'dataParser', '.', 'Parse', '(', ')', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['DataBag', 'db', ';']",0
Utf8StorageConverter.java,"['db', '=', '(', 'DataBag', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', '(', 'DataBag', ')', 'db', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'String', '(', 'b', ',', '""', 'UTF', '-', '8', '""', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'Double', '.', 'valueOf', '(', 'new', 'String', '(', 'b', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'double', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'F', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'f', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Float', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'float', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Integer', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Integer', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'int', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxInt', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Integer', '(', 'd', '.', 'intValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'int', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'L', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'l', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Long', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Long', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'long', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxLong', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Long', '(', 'd', '.', 'longValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'map', ';']",0
Utf8StorageConverter.java,"['map', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'map', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Tuple', 't', ';']",0
Utf8StorageConverter.java,"['t', '=', '(', 'Tuple', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'bag', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 's', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'd', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'f', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'i', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'l', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'DataType', '.', 'mapToString', '(', 'm', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 't', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Launcher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Matcher', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Pattern', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskReport', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HConfiguration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
Launcher.java,"['public', 'abstract', 'class', 'Launcher', '{']",0
Launcher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Launcher', '.', 'class', ')', ';']",0
Launcher.java,"['long', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['String', 'newLine', '=', '""', '\\', 'n', '""', ';']",0
Launcher.java,"['boolean', 'pigException', '=', 'false', ';']",0
Launcher.java,"['boolean', 'outOfMemory', '=', 'false', ';']",0
Launcher.java,"['final', 'String', 'OOM_ERR', '=', '""', 'OutOfMemoryError', '""', ';']",0
Launcher.java,"['protected', 'List', '<', 'FileSpec', '>', 'succeededStores', '=', 'null', ';']",0
Launcher.java,"['protected', 'List', '<', 'FileSpec', '>', 'failedStores', '=', 'null', ';']",0
Launcher.java,"['protected', 'Launcher', '(', ')', '{']",0
Launcher.java,"['totalHadoopTimeSpent', '=', '0', ';']",0
Launcher.java,"['/', '/', 'handle', 'the', 'windows', 'portion', 'of', '\\', 'r']",0
Launcher.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')', '{']",0
Launcher.java,"['newLine', '=', '""', '\\', 'r', '\\', 'n', '""', ';']",0
Launcher.java,"['reset', '(', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'List', '<', 'FileSpec', '>', 'getSucceededFiles', '(', ')', '{']",0
Launcher.java,"['return', 'succeededStores', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'List', '<', 'FileSpec', '>', 'getFailedFiles', '(', ')', '{']",0
Launcher.java,"['return', 'failedStores', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'void', 'reset', '(', ')', '{']",0
Launcher.java,"['succeededStores', '=', 'new', 'LinkedList', '<', 'FileSpec', '>', '(', ')', ';']",0
Launcher.java,"['failedStores', '=', 'new', 'LinkedList', '<', 'FileSpec', '>', '(', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'PigStats', 'launchPig', '(', 'PhysicalPlan', 'php', ',', 'String', 'grpName', ',', 'PigContext', 'pc', ')']",0
Launcher.java,"['throws', 'PlanException', ',', 'VisitorException', ',', 'IOException', ',', 'ExecException', ',']",0
Launcher.java,"['JobCreationException', ',', 'Exception', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'void', 'explain', '(']",0
Launcher.java,"['PhysicalPlan', 'pp', ',']",0
Launcher.java,"['PigContext', 'pc', ',']",0
Launcher.java,"['PrintStream', 'ps', ',']",0
Launcher.java,"['String', 'format', ',']",0
Launcher.java,"['boolean', 'verbose', ')', 'throws', 'PlanException', ',']",0
Launcher.java,"['protected', 'boolean', 'isComplete', '(', 'double', 'prog', ')', '{']",0
Launcher.java,"['return', '(', 'int', ')', '(', 'Math', '.', 'ceil', '(', 'prog', ')', ')', '=', '=', '(', 'int', ')', '1', ';']",0
Launcher.java,"['protected', 'void', 'getStats', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['JobID', 'MRJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['String', 'jobMessage', '=', 'job', '.', 'getMessage', '(', ')', ';']",0
Launcher.java,"['if', '(', 'MRJobID', '=', '=', 'null', ')', '{']",0
Launcher.java,"['throw', 'getExceptionFromString', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Launcher.java,"['/', '/', 'just', 'get', 'the', 'first', 'line', 'in', 'the', 'message', 'and', 'log', 'the', 'rest']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'jobMessage', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backend', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'mapRep', '=', 'jobClient', '.', 'getMapTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'mapRep', ',', '""', 'map', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'redRep', '=', 'jobClient', '.', 'getReduceTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'redRep', ',', '""', 'reduce', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Launcher.java,"['if', '(', 'job', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'job', 'succeeded', ',', 'let', 'the', 'user', 'know', 'that']",0
Launcher.java,"['/', '/', 'we', 'were', 'unable', 'to', 'get', 'statistics']",0
Launcher.java,"['log', '.', 'warn', '(', '""', 'Unable', 'to', 'get', 'job', 'related', 'diagnostics', '""', ')', ';']",0
Launcher.java,"['protected', 'long', 'computeTimeSpent', '(', 'TaskReport', '[', ']', 'mapReports', ')', '{']",0
Launcher.java,"['long', 'timeSpent', '=', '0', ';']",0
Launcher.java,"['for', '(', 'TaskReport', 'r', ':', 'mapReports', ')', '{']",0
Launcher.java,"['timeSpent', '+', '=', '(', 'r', '.', 'getFinishTime', '(', ')', '-', 'r', '.', 'getStartTime', '(', ')', ')', ';']",0
Launcher.java,"['return', 'timeSpent', ';']",0
Launcher.java,"['protected', 'void', 'getErrorMessages', '(', 'TaskReport', 'reports', '[', ']', ',', 'String', 'type', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'reports', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Launcher.java,"['String', 'msgs', '[', ']', '=', 'reports', '[', 'i', ']', '.', 'getDiagnostics', '(', ')', ';']",0
Launcher.java,"['ArrayList', '<', 'Exception', '>', 'exceptions', '=', 'new', 'ArrayList', '<', 'Exception', '>', '(', ')', ';']",0
Launcher.java,"['boolean', 'jobFailed', '=', 'false', ';']",0
Launcher.java,"['float', 'successfulProgress', '=', '1', '.', '0f', ';']",0
Launcher.java,"['if', '(', 'msgs', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'progress', 'reported', 'is', 'not', '1', '.', '0f', 'then', 'the', 'map', 'or', 'reduce', 'job', 'failed']",0
Launcher.java,"['/', '/', 'this', 'comparison', 'is', 'in', 'place', 'till', 'Hadoop', '0', '.', '20', 'provides', 'methods', 'to', 'query']",0
Launcher.java,"['/', '/', 'job', 'status']",0
Launcher.java,"['if', '(', 'reports', '[', 'i', ']', '.', 'getProgress', '(', ')', '!', '=', 'successfulProgress', ')', '{']",0
Launcher.java,"['jobFailed', '=', 'true', ';']",0
Launcher.java,"['Set', '<', 'String', '>', 'errorMessageSet', '=', 'new', 'HashSet', '<', 'String', '>', '(', ')', ';']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'msgs', '.', 'length', ';', 'j', '+', '+', ')', '{']",0
Launcher.java,"['if', '(', '!', 'errorMessageSet', '.', 'contains', '(', 'msgs', '[', 'j', ']', ')', ')', '{']",0
Launcher.java,"['errorMessageSet', '.', 'add', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['if', '(', 'errNotDbg', ')', '{']",0
Launcher.java,"['/', '/', 'errNotDbg', 'is', 'used', 'only', 'for', 'failed', 'jobs']",0
Launcher.java,"['/', '/', 'keep', 'track', 'of', 'all', 'the', 'unique', 'exceptions']",0
Launcher.java,"['}', 'catch', '(', 'Exception', 'e1', ')', '{']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'msgs', '[', 'j', ']', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backed', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['log', '.', 'debug', '(', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+']",0
Launcher.java,"['reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', '+', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['/', '/', 'if', 'its', 'a', 'failed', 'job', 'then', 'check', 'if', 'there', 'is', 'more', 'than', 'one', 'exception']",0
Launcher.java,"['/', '/', 'more', 'than', 'one', 'exception', 'implies', 'possibly', 'different', 'kinds', 'of', 'failures']",0
Launcher.java,"['/', '/', 'log', 'all', 'the', 'different', 'failures', 'and', 'throw', 'the', 'exception', 'corresponding']",0
Launcher.java,"['/', '/', 'to', 'the', 'first', 'failure']",0
Launcher.java,"['if', '(', 'jobFailed', ')', '{']",0
Launcher.java,"['if', '(', 'exceptions', '.', 'size', '(', ')', '>', '1', ')', '{']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'exceptions', '.', 'size', '(', ')', ';', '+', '+', 'j', ')', '{']",0
Launcher.java,"['String', 'headerMessage', '=', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+', 'reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'exceptions', '.', 'get', '(', 'j', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'false', ',', 'headerMessage', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', 'if', '(', 'exceptions', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2115', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Expected', 'to', 'throw', 'exception', 'from', 'the', 'backend', '.', 'Did', 'not', 'find', 'any', 'exception', 'to', 'throw', '.', '""', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'calculateProgress', '(', 'JobControl', 'jc', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['double', 'prog', '=', '0', '.', '0', ';']",0
Launcher.java,"['prog', '+', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', '.', 'size', '(', ')', ';']",0
Launcher.java,"['List', 'runnJobs', '=', 'jc', '.', 'getRunningJobs', '(', ')', ';']",0
Launcher.java,"['for', '(', 'Object', 'object', ':', 'runnJobs', ')', '{']",0
Launcher.java,"['Job', 'j', '=', '(', 'Job', ')', 'object', ';']",0
Launcher.java,"['prog', '+', '=', 'progressOfRunningJob', '(', 'j', ',', 'jobClient', ')', ';']",0
Launcher.java,"['return', 'prog', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'progressOfRunningJob', '(', 'Job', 'j', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['JobID', 'mrJobID', '=', 'j', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['RunningJob', 'rj', '=', 'jobClient', '.', 'getJob', '(', 'mrJobID', ')', ';']",0
Launcher.java,"['if', '(', 'rj', '=', '=', 'null', '&', '&', 'j', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')']",0
Launcher.java,"['return', '1', ';']",0
Launcher.java,"['else', 'if', '(', 'rj', '=', '=', 'null', ')']",0
Launcher.java,"['return', '0', ';']",0
Launcher.java,"['double', 'mapProg', '=', 'rj', '.', 'mapProgress', '(', ')', ';']",0
Launcher.java,"['double', 'redProg', '=', 'rj', '.', 'reduceProgress', '(', ')', ';']",0
Launcher.java,"['return', '(', 'mapProg', '+', 'redProg', ')', '/', '2', ';']",0
Launcher.java,"['public', 'long', 'getTotalHadoopTimeSpent', '(', ')', '{']",0
Launcher.java,"['return', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['Exception', 'getExceptionFromString', '(', 'String', 'stackTrace', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'lines', '=', 'stackTrace', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['Throwable', 't', '=', 'getExceptionFromStrings', '(', 'lines', ',', '0', ')', ';']",0
Launcher.java,"['if', '(', '!', 'pigException', ')', '{']",0
Launcher.java,"['int', 'errCode', '=', '6015', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'During', 'execution', ',', 'encountered', 'a', 'Hadoop', 'error', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['pigException', '=', 'false', ';']",0
Launcher.java,"['if', '(', 'outOfMemory', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'false', ';']",0
Launcher.java,"['int', 'errCode', '=', '6016', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Out', 'of', 'memory', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['return', '(', 'Exception', ')', 't', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['private', 'Throwable', 'getExceptionFromStrings', '(', 'String', '[', ']', 'stackTraceLines', ',', 'int', 'startingLineNum', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ':', 'ERROR', '1075', ':', 'Received', 'a', 'bytearray', 'from', 'the', 'UDF', '.', 'Cannot', 'determine', 'how', 'to', 'convert', 'the', 'bytearray', 'to', 'int', '.']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POCast', '.', 'getNext', '(', 'POCast', '.', 'java', ':', '152', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'LessThanExpr', '.', 'getNext', '(', 'LessThanExpr', '.', 'java', ':', '85', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFilter', '.', 'getNext', '(', 'POFilter', '.', 'java', ':', '148', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'runPipeline', '(', 'PigMapBase', '.', 'java', ':', '184', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'map', '(', 'PigMapBase', '.', 'java', ':', '174', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapRunner', '.', 'run', '(', 'MapRunner', '.', 'java', ':', '47', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapTask', '.', 'run', '(', 'MapTask', '.', 'java', ':', '227', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskTracker', '$', 'Child', '.', 'main', '(', 'TaskTracker', '.', 'java', ':', '2207', ')']",0
Launcher.java,"['int', 'prevStartingLineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '.', 'length', '>', '0', '&', '&', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['/', '/', 'the', 'regex', 'for', 'matching', 'the', 'exception', 'class', 'name', ';', 'note', 'the', 'use', 'of', 'the', '$', 'for', 'matching', 'nested', 'classes']",0
Launcher.java,"['String', 'exceptionNameDelimiter', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '\\', '\\', 'w', '+', '""', ';']",0
Launcher.java,"['Pattern', 'exceptionNamePattern', '=', 'Pattern', '.', 'compile', '(', 'exceptionNameDelimiter', ')', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'first', 'line', 'extract', 'the', 'exception', 'name', 'and', 'the', 'exception', 'message']",0
Launcher.java,"['Matcher', 'exceptionNameMatcher', '=', 'exceptionNamePattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'startingLineNum', ']', ')', ';']",0
Launcher.java,"['String', 'exceptionName', '=', 'null', ';']",0
Launcher.java,"['String', 'exceptionMessage', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'exceptionNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['exceptionName', '=', 'exceptionNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['if', '(', 'exceptionName', '.', 'contains', '(', 'OOM_ERR', ')', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'true', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'length', '(', ')', '>', 'exceptionNameMatcher', '.', 'end', '(', ')', ')', '{']",0
Launcher.java,"['exceptionMessage', '=', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'substring', '(', 'exceptionNameMatcher', '.', 'end', '(', ')', '+', '2', ')', ';']",0
Launcher.java,"['+', '+', 'startingLineNum', ';']",0
Launcher.java,"['/', '/', 'the', 'exceptionName', 'should', 'not', 'be', 'null']",0
Launcher.java,"['if', '(', 'exceptionName', '!', '=', 'null', ')', '{']",0
Launcher.java,"['ArrayList', '<', 'StackTraceElement', '>', 'stackTraceElements', '=', 'new', 'ArrayList', '<', 'StackTraceElement', '>', '(', ')', ';']",0
Launcher.java,"['/', '/', 'Create', 'stack', 'trace', 'elements', 'for', 'the', 'remaining', 'lines']",0
Launcher.java,"['String', 'stackElementRegex', '=', '""', '\\', '\\', 's', '+', 'at', '\\', '\\', 's', '+', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '\\', '\\', '<', ')', '?', '\\', '\\', 'w', '+', '(', '\\', '\\', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'stackElementPattern', '=', 'Pattern', '.', 'compile', '(', 'stackElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigExceptionRegex', '=', '""', 'org', '\\', '\\', '.', 'apache', '\\', '\\', '.', 'pig', '\\', '\\', '.', '""', ';']",0
Launcher.java,"['Pattern', 'pigExceptionPattern', '=', 'Pattern', '.', 'compile', '(', 'pigExceptionRegex', ')', ';']",0
Launcher.java,"['String', 'moreElementRegex', '=', '""', '\\', '\\', 's', '+', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', '\\', '\\', 's', '+', 'more', '""', ';']",0
Launcher.java,"['Pattern', 'moreElementPattern', '=', 'Pattern', '.', 'compile', '(', 'moreElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigPackageRegex', '=', '""', 'org', '.', 'apache', '.', 'pig', '""', ';']",0
Launcher.java,"['int', 'lineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['for', '(', ';', 'lineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ';', '+', '+', 'lineNum', ')', '{']",0
Launcher.java,"['Matcher', 'stackElementMatcher', '=', 'stackElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'stackElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['StackTraceElement', 'ste', '=', 'getStackTraceElement', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['stackTraceElements', '.', 'add', '(', 'ste', ')', ';']",0
Launcher.java,"['String', 'className', '=', 'ste', '.', 'getClassName', '(', ')', ';']",0
Launcher.java,"['Matcher', 'pigExceptionMatcher', '=', 'pigExceptionPattern', '.', 'matcher', '(', 'className', ')', ';']",0
Launcher.java,"['if', '(', 'pigExceptionMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['pigException', '=', 'true', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['Matcher', 'moreElementMatcher', '=', 'moreElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'moreElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['+', '+', 'lineNum', ';']",0
Launcher.java,"['startingLineNum', '=', 'lineNum', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'appropriate', 'exception', ';', 'setup', 'the', 'stack', 'trace', 'and', 'message']",0
Launcher.java,"['Object', 'object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', ')', ';']",0
Launcher.java,"['if', '(', 'object', 'instanceof', 'PigException', ')', '{']",0
Launcher.java,"['/', '/', 'extract', 'the', 'error', 'code', 'and', 'message', 'the', 'regex', 'for', 'matching', 'the', 'custom', 'format', 'of', 'ERROR', '<', 'ERROR', 'CODE', '>', ':']",0
Launcher.java,"['String', 'errMessageRegex', '=', '""', 'ERROR', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', ':', '""', ';']",0
Launcher.java,"['Pattern', 'errMessagePattern', '=', 'Pattern', '.', 'compile', '(', 'errMessageRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errMessageMatcher', '=', 'errMessagePattern', '.', 'matcher', '(', 'exceptionMessage', ')', ';']",0
Launcher.java,"['if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['String', 'errMessageStub', '=', 'errMessageMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['exceptionMessage', '=', 'exceptionMessage', '.', 'substring', '(', 'errMessageMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['/', '/', 'the', 'regex', 'to', 'match', 'the', 'error', 'code', 'wich', 'is', 'a', 'string', 'of', 'numerals']",0
Launcher.java,"['String', 'errCodeRegex', '=', '""', '\\', '\\', 'd', '+', '""', ';']",0
Launcher.java,"['Pattern', 'errCodePattern', '=', 'Pattern', '.', 'compile', '(', 'errCodeRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errCodeMatcher', '=', 'errCodePattern', '.', 'matcher', '(', 'errMessageStub', ')', ';']",0
Launcher.java,"['String', 'code', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'errCodeMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['code', '=', 'errCodeMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['/', '/', 'could', 'receive', 'a', 'number', 'format', 'exception', 'here', 'but', 'it', 'will', 'be', 'propagated', 'up', 'the', 'stack']",0
Launcher.java,"['int', 'errCode', '=', 'Integer', '.', 'parseInt', '(', 'code', ')', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'exception', 'with', 'the', 'message', 'and', 'then', 'set', 'the', 'error', 'code', 'and', 'error', 'source']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', 'errCode', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'determineErrorSource', '(', 'errCode', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', '2997', ')', ';', '/', '/', 'generic', 'error', 'code']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'object', 'instanceof', 'PigException', ')']",0
Launcher.java,"['/', '/', 'its', 'not', 'PigException', ';', 'create', 'the', 'exception', 'with', 'the', 'message']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', '+', '""', '(', '""', '+', 'exceptionMessage', '+', '""', ')', '""', ')', ';']",0
Launcher.java,"['StackTraceElement', '[', ']', 'steArr', '=', 'new', 'StackTraceElement', '[', 'stackTraceElements', '.', 'size', '(', ')', ']', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'setStackTrace', '(', '(', 'StackTraceElement', '[', ']', ')', '(', 'stackTraceElements', '.', 'toArray', '(', 'steArr', ')', ')', ')', ';']",0
Launcher.java,"['if', '(', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['Throwable', 'e', '=', 'getExceptionFromStrings', '(', 'stackTraceLines', ',', 'startingLineNum', ')', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'initCause', '(', 'e', ')', ';']",0
Launcher.java,"['return', '(', 'Throwable', ')', 'object', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'exceptionName', '!', '=', 'null', ')']",0
Launcher.java,"['int', 'errCode', '=', '2055', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'exception', 'name', 'to', 'create', 'exception', 'from', 'string', ':', '""', '+', 'stackTraceLines', '.', 'toString', '(', ')', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'lines', '.', 'length', '>', '0', ')']",0
Launcher.java,"['int', 'errCode', '=', '2056', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Cannot', 'create', 'exception', 'from', 'empty', 'string', '.', '""', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'StackTraceElement', 'getStackTraceElement', '(', 'String', 'line', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'items', ';']",0
Launcher.java,"['String', 'qualifiedMethodNameRegex', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '<', ')', '?', '\\', '\\', 'w', '+', '(', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'qualifiedMethodNamePattern', '=', 'Pattern', '.', 'compile', '(', 'qualifiedMethodNameRegex', ')', ';']",0
Launcher.java,"['Matcher', 'contentMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'line', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'content', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'contentMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['content', '=', 'line', '.', 'substring', '(', 'contentMatcher', '.', 'start', '(', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['Matcher', 'qualifiedMethodNameMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'content', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map']",0
Launcher.java,"['String', 'qualifiedMethodName', '=', 'null', ';']",0
Launcher.java,"['/', '/', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'fileDetails', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'qualifiedMethodNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['qualifiedMethodName', '=', 'qualifiedMethodNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['fileDetails', '=', 'content', '.', 'substring', '(', 'qualifiedMethodNameMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '/', 'From', 'the', 'fully', 'qualified', 'method', 'name', ',', 'extract', 'the', 'declaring', 'class', 'and', 'method', 'name']",0
Launcher.java,"['items', '=', 'qualifiedMethodName', '.', 'split', '(', '""', '\\', '\\', '.', '""', ')', ';']",0
Launcher.java,"['/', '/', 'initialize', 'the', 'declaringClass', '(', 'to', 'org', 'in', 'most', 'cases', ')']",0
Launcher.java,"['String', 'declaringClass', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['/', '/', 'the', 'last', 'member', 'is', 'always', 'the', 'method', 'name']",0
Launcher.java,"['String', 'methodName', '=', 'items', '[', 'items', '.', 'length', '-', '1', ']', ';']",0
Launcher.java,"['/', '/', 'concatenate', 'the', 'names', 'by', 'adding', 'the', 'dot', '(', '.', ')', 'between', 'the', 'members', 'till', 'the', 'penultimate', 'member']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'items', '.', 'length', '-', '1', ';', '+', '+', 'i', ')', '{']",0
Launcher.java,"['declaringClass', '+', '=', '""', '.', '""', ';']",0
Launcher.java,"['declaringClass', '+', '=', 'items', '[', 'i', ']', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'file', 'details', 'extract', 'the', 'file', 'name', 'and', 'the', 'line', 'number']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java', ':', '65']",0
Launcher.java,"['fileDetails', '=', 'fileDetails', '.', 'substring', '(', '0', ',', 'fileDetails', '.', 'length', '(', ')', '-', '1', ')', ';']",0
Launcher.java,"['items', '=', 'fileDetails', '.', 'split', '(', '""', ':', '""', ')', ';']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java']",0
Launcher.java,"['String', 'fileName', '=', 'null', ';']",0
Launcher.java,"['int', 'lineNumber', '=', '0', ';']",0
Launcher.java,"['if', '(', 'items', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['fileName', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['lineNumber', '=', 'Integer', '.', 'parseInt', '(', 'items', '[', '1', ']', ')', ';']",0
Launcher.java,"['return', 'new', 'StackTraceElement', '(', 'declaringClass', ',', 'methodName', ',', 'fileName', ',', 'lineNumber', ')', ';']",0
Launcher.java,"['private', 'String', 'getFirstLineFromMessage', '(', 'String', 'message', ')', '{']",0
Launcher.java,"['String', '[', ']', 'messages', '=', 'message', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['if', '(', 'messages', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['return', 'messages', '[', '0', ']', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['return', 'new', 'String', '(', 'message', ')', ';']",0
TestGrunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestGrunt.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
TestGrunt.java,"['public', 'class', 'TestGrunt', 'extends', 'TestCase', '{']",0
TestGrunt.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestGrunt.java,"['private', 'String', 'basedir', ';']",0
TestGrunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestGrunt.java,"['public', 'TestGrunt', '(', 'String', 'name', ')', '{']",0
TestGrunt.java,"['super', '(', 'name', ')', ';']",0
TestGrunt.java,"['cluster', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ';']",0
TestGrunt.java,"['basedir', '=', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '""', ';']",0
TestGrunt.java,"['/', '*', '@', 'Test']",0
TestGrunt.java,"['public', 'void', 'testCopyFromLocal', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'copyFromLocal', '/', 'bin', '/', 'sh', '.', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', '*', '/']",0
TestGrunt.java,"['public', 'void', 'testDefine', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'define', 'myudf', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Encountered', '\\', '""', 'define', '\\', '""', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'null', '!', '=', 'context', '.', 'getFuncSpecFromAlias', '(', '""', 'myudf', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestGrunt.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Encountered', '\\', '""', '\\', '""', ';', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstant', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchemaInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock2', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'cash', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'foreach', 'cash', 'generate', 'fast', '*', '2', '.', '0', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'a', '.', 'regenerate', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'a', '.', 'regenerate', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'run', '-', 'param', 'LIMIT', '=', '5', '-', 'param_file', '""', '+', 'basedir', '+']",0
TestGrunt.java,"['""', '/', 'test_broken', '.', 'ppf', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'exec', '-', 'param', 'LIMIT', '=', '5', '-', 'param', 'FUNCTION', '=', 'COUNT', '""', '+']",0
TestGrunt.java,"['""', '-', 'param', 'FILE', '=', 'foo', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'run', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'exec', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_exec', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainEmpty', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'run', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', 'explain', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainScript', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainBrief', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'brief', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainDot', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'dot', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainOut', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'out', '/', 'tmp', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testPartialExecution', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'rmf', 'bar', ';', 'rmf', 'baz', ';', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', 'exec', ';', 'a', '=', 'load', ""'"", 'bar', ""'"", ';', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testFileCmds', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cp', 'bar', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'bar', ';', 'rm', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'baz', ';', 'rm', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'mv', 'baz', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'b', '=', 'load', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'b', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'bar', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testCD', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'mkdir', '/', 'tmp', ';', '""']",0
TestGrunt.java,"['+', '""', 'mkdir', '/', 'tmp', '/', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', '/', 'tmp', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'bar', ';', 'rmf', 'foo', '/', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'copyFromLocal', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', '/', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', '/', 'tmp', '/', 'bar', ';', 'rm', '/', 'tmp', '/', 'foo', '/', 'baz', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testDump', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bla', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'e', '=', 'group', 'a', 'by', '$', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'COUNT', '(', '$', '1', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'f', 'into', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'f1', '=', 'load', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'g', '=', 'order', 'f1', 'by', '$', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'dump', 'g', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testIllustrate', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bla', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'e', '=', 'group', 'a', 'by', '$', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'COUNT', '(', '$', '1', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'f', 'into', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'f1', '=', 'load', ""'"", 'bla', ""'"", 'as', '(', 'f', ':', 'chararray', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'g', '=', 'order', 'f1', 'by', '$', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'illustrate', 'g', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testKeepGoing', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'foreach', 'A', 'generate', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'C', '=', 'foreach', 'A', 'generate', '0', '/', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'foo', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'C', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'bar', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testKeepGoigFailed', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'foreach', 'A', 'generate', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'C', '=', 'foreach', 'A', 'generate', '0', '/', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'foo', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'C', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'baz', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'baz', 'does', 'not', 'exist', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testInvalidParam', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'run', '-', 'param', '-', 'param', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Encountered', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testStopOnFailure', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['context', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'true', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'copyFromLocal', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', 'pre', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'bar', ""'"", 'using', 'BinStorage', '(', ')', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'bar', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'store', 'A', 'into', ""'"", 'foo', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'cp', 'pre', 'done', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'PigException', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getErrorCode', '(', ')', '=', '=', '6017', ')', ';']",0
TestGrunt.java,"['assertFalse', '(', 'server', '.', 'existsFile', '(', '""', 'done', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
MRCompiler.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
MRCompiler.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'Collections', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'Random', ';']",0
MRCompiler.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'FindQuantiles', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'RandomSampleLoader', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROpPlanVisitor', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'UDFFinder', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'ConstantExpression', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POProject', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POUserFunc', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhyPlanVisitor', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFRJoin', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POForEach', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'PODistinct', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFilter', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POGlobalRearrange', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POJoinPackage', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLimit', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLoad', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLocalRearrange', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POPackage', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POPackageLite', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POSort', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POSplit', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStream', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POUnion', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DepthFirstWalker', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
MRCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'util', '.', 'PlanHelper', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'class', 'MRCompiler', 'extends', 'PhyPlanVisitor', '{']",0
MRCompiler.java,"['private', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
MRCompiler.java,"['PigContext', 'pigContext', ';']",0
MRCompiler.java,"['/', '/', 'The', 'plan', 'that', 'is', 'being', 'compiled']",0
MRCompiler.java,"['PhysicalPlan', 'plan', ';']",0
MRCompiler.java,"['/', '/', 'The', 'plan', 'of', 'MapReduce', 'Operators']",0
MRCompiler.java,"['MROperPlan', 'MRPlan', ';']",0
MRCompiler.java,"['/', '/', 'The', 'current', 'MapReduce', 'Operator']",0
MRCompiler.java,"['/', '/', 'that', 'is', 'being', 'compiled']",0
MRCompiler.java,"['MapReduceOper', 'curMROp', ';']",0
MRCompiler.java,"['/', '/', 'The', 'output', 'of', 'compiling', 'the', 'inputs']",0
MRCompiler.java,"['MapReduceOper', '[', ']', 'compiledInputs', '=', 'null', ';']",0
MRCompiler.java,"['/', '/', 'Mapping', 'of', 'which', 'MapReduceOper', 'a', 'store', 'belongs', 'to', '.']",0
MRCompiler.java,"['Map', '<', 'POStore', ',', 'MapReduceOper', '>', 'storeToMapReduceMap', ';']",0
MRCompiler.java,"['/', '/', 'The', 'split', 'operators', 'seen', 'till', 'now', '.', 'If', 'not']",0
MRCompiler.java,"['/', '/', 'maintained', 'they', 'will', 'haunt', 'you', '.']",0
MRCompiler.java,"['/', '/', 'During', 'the', 'traversal', 'a', 'split', 'is', 'the', 'only']",0
MRCompiler.java,"['/', '/', 'operator', 'that', 'can', 'be', 'revisited', 'from', 'a', 'different']",0
MRCompiler.java,"['/', '/', 'path', '.', 'So', 'this', 'map', 'stores', 'the', 'split', 'job', '.', 'So']",0
MRCompiler.java,"['/', '/', 'whenever', 'we', 'hit', 'the', 'split', ',', 'we', 'create', 'a', 'new', 'MROper']",0
MRCompiler.java,"['/', '/', 'and', 'connect', 'the', 'split', 'job', 'using', 'load', '-', 'store', 'and', 'also']",0
MRCompiler.java,"['/', '/', 'in', 'the', 'MRPlan']",0
MRCompiler.java,"['Map', '<', 'OperatorKey', ',', 'MapReduceOper', '>', 'splitsSeen', ';']",0
MRCompiler.java,"['NodeIdGenerator', 'nig', ';']",0
MRCompiler.java,"['private', 'String', 'scope', ';']",0
MRCompiler.java,"['private', 'Random', 'r', ';']",0
MRCompiler.java,"['private', 'UDFFinder', 'udfFinder', ';']",0
MRCompiler.java,"['private', 'CompilationMessageCollector', 'messageCollector', '=', 'null', ';']",0
MRCompiler.java,"['public', 'static', 'String', 'USER_COMPARATOR_MARKER', '=', '""', 'user', '.', 'comparator', '.', 'func', ':', '""', ';']",0
MRCompiler.java,"['public', 'MRCompiler', '(', 'PhysicalPlan', 'plan', ')', 'throws', 'MRCompilerException', '{']",0
MRCompiler.java,"['this', '(', 'plan', ',', 'null', ')', ';']",0
MRCompiler.java,"['public', 'MRCompiler', '(', 'PhysicalPlan', 'plan', ',']",0
MRCompiler.java,"['PigContext', 'pigContext', ')', 'throws', 'MRCompilerException', '{']",0
MRCompiler.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'PhysicalOperator', ',', 'PhysicalPlan', '>', '(', 'plan', ')', ')', ';']",0
MRCompiler.java,"['this', '.', 'plan', '=', 'plan', ';']",0
MRCompiler.java,"['this', '.', 'pigContext', '=', 'pigContext', ';']",0
MRCompiler.java,"['splitsSeen', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['MRPlan', '=', 'new', 'MROperPlan', '(', ')', ';']",0
MRCompiler.java,"['nig', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
MRCompiler.java,"['r', '=', 'new', 'Random', '(', '1331', ')', ';']",0
MRCompiler.java,"['FileLocalizer', '.', 'setR', '(', 'r', ')', ';']",0
MRCompiler.java,"['udfFinder', '=', 'new', 'UDFFinder', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'roots', '=', 'plan', '.', 'getRoots', '(', ')', ';']",0
MRCompiler.java,"['if', '(', '(', 'roots', '=', '=', 'null', ')', '|', '|', '(', 'roots', '.', 'size', '(', ')', '<', '=', '0', ')', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2053', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Did', 'not', 'find', 'roots', 'in', 'the', 'physical', 'plan', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['scope', '=', 'roots', '.', 'get', '(', '0', ')', '.', 'getOperatorKey', '(', ')', '.', 'getScope', '(', ')', ';']",0
MRCompiler.java,"['messageCollector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
MRCompiler.java,"['storeToMapReduceMap', '=', 'new', 'HashMap', '<', 'POStore', ',', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['public', 'void', 'randomizeFileLocalizer', '(', ')', '{']",0
MRCompiler.java,"['FileLocalizer', '.', 'setR', '(', 'new', 'Random', '(', ')', ')', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'MROperPlan', 'getMRPlan', '(', ')', '{']",0
MRCompiler.java,"['return', 'MRPlan', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'PhysicalPlan', 'getPlan', '(', ')', '{']",0
MRCompiler.java,"['return', 'plan', ';']",0
MRCompiler.java,"['public', 'CompilationMessageCollector', 'getMessageCollector', '(', ')', '{']",0
MRCompiler.java,"['return', 'messageCollector', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'MROperPlan', 'compile', '(', ')', 'throws', 'IOException', ',', 'PlanException', ',', 'VisitorException', '{']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'leaves', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['for', '(', 'PhysicalOperator', 'op', ':', 'leaves', ')', '{']",0
MRCompiler.java,"['if', '(', '!', '(', 'op', 'instanceof', 'POStore', ')', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2025', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'leaf', 'of', 'reduce', 'plan', 'to', '""', '+']",0
MRCompiler.java,"['""', 'always', 'be', 'POStore', '.', 'Found', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['List', '<', 'POStore', '>', 'stores', '=', 'PlanHelper', '.', 'getStores', '(', 'plan', ')', ';']",0
MRCompiler.java,"['for', '(', 'POStore', 'store', ':', 'stores', ')', '{']",0
MRCompiler.java,"['compile', '(', 'store', ')', ';']",0
MRCompiler.java,"['/', '/', 'I', ""'"", 'm', 'quite', 'certain', 'this', 'is', 'not', 'the', 'best', 'way', 'to', 'do', 'this', '.', 'The', 'issue']",0
MRCompiler.java,"['/', '/', 'is', 'that', 'for', 'jobs', 'that', 'take', 'multiple', 'map', 'reduce', 'passes', ',', 'for']",0
MRCompiler.java,"['/', '/', 'non', '-', 'sort', 'jobs', ',', 'the', 'POLocalRearrange', 'is', 'being', 'put', 'into', 'the', 'reduce']",0
MRCompiler.java,"['/', '/', 'of', 'MR', 'job', 'n', ',', 'with', 'the', 'map', 'for', 'MR', 'job', 'n', '+', '1', 'empty', 'and', 'the', 'POPackage']",0
MRCompiler.java,"['/', '/', 'in', 'reduce', 'of', 'MR', 'job', 'n', '+', '1', '.', 'This', 'causes', 'problems', 'in', 'the', 'collect', 'of']",0
MRCompiler.java,"['/', '/', 'the', 'map', 'MR', 'job', 'n', '+', '1', '.', 'To', 'resolve', 'this', ',', 'the', 'following', 'visitor']",0
MRCompiler.java,"['/', '/', 'walks', 'the', 'resulting', 'compiled', 'jobs', ',', 'looks', 'for', 'the', 'pattern', 'described']",0
MRCompiler.java,"['/', '/', 'above', ',', 'and', 'then', 'moves', 'the', 'POLocalRearrange', 'to', 'the', 'map', 'of', 'MR', 'job']",0
MRCompiler.java,"['/', '/', 'n', '+', '1', '.', 'It', 'seems', 'to', 'me', 'there', 'are', 'two', 'possible', 'better', 'solutions', ':']",0
MRCompiler.java,"['/', '/', '1', ')', 'Change', 'the', 'logic', 'in', 'this', 'compiler', 'to', 'put', 'POLocalRearrange', 'in']",0
MRCompiler.java,"['/', '/', 'the', 'correct', 'place', 'to', 'begin', 'with', 'instead', 'of', 'patching', 'it', 'up', 'later', '.']",0
MRCompiler.java,"['/', '/', 'I', ""'"", 'd', 'do', 'this', 'but', 'I', 'don', ""'"", 't', 'fully', 'understand', 'the', 'logic', 'here', 'and', 'it', ""'"", 's']",0
MRCompiler.java,"['/', '/', 'complex', '.']",0
MRCompiler.java,"['/', '/', '2', ')', 'Change', 'our', 'map', 'reduce', 'execution', 'to', 'have', 'a', 'reduce', 'only', 'mode', '.', 'In']",0
MRCompiler.java,"['/', '/', 'this', 'case', 'the', 'map', 'would', 'not', 'even', 'try', 'to', 'parse', 'the', 'input', ',', 'it', 'would']",0
MRCompiler.java,"['/', '/', 'just', 'be', '100', '%', 'pass', 'through', '.', 'I', 'suspect', 'this', 'might', 'be', 'better', 'though']",0
MRCompiler.java,"['/', '/', 'I', 'don', ""'"", 't', 'fully', 'understand', 'the', 'consequences', 'of', 'this', '.']",0
MRCompiler.java,"['/', '/', 'Given', 'these', 'issues', ',', 'the', 'following', 'works', 'for', 'now', ',', 'and', 'we', 'can', 'fine']",0
MRCompiler.java,"['/', '/', 'tune', 'it', 'when', 'Shravan', 'returns', '.']",0
MRCompiler.java,"['RearrangeAdjuster', 'ra', '=', 'new', 'RearrangeAdjuster', '(', 'MRPlan', ')', ';']",0
MRCompiler.java,"['ra', '.', 'visit', '(', ')', ';']",0
MRCompiler.java,"['LimitAdjuster', 'la', '=', 'new', 'LimitAdjuster', '(', 'MRPlan', ')', ';']",0
MRCompiler.java,"['la', '.', 'visit', '(', ')', ';']",0
MRCompiler.java,"['la', '.', 'adjust', '(', ')', ';']",0
MRCompiler.java,"['return', 'MRPlan', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'void', 'compile', '(', 'PhysicalOperator', 'op', ')', 'throws', 'IOException', ',']",0
MRCompiler.java,"['PlanException', ',', 'VisitorException', '{']",0
MRCompiler.java,"['/', '/', 'An', 'artifact', 'of', 'the', 'Visitor', '.', 'Need', 'to', 'save']",0
MRCompiler.java,"['/', '/', 'this', 'so', 'that', 'it', 'is', 'not', 'overwritten', '.']",0
MRCompiler.java,"['MapReduceOper', '[', ']', 'prevCompInp', '=', 'compiledInputs', ';']",0
MRCompiler.java,"['/', '/', 'Compile', 'each', 'predecessor', 'into', 'the', 'MROper', 'and']",0
MRCompiler.java,"['/', '/', 'store', 'them', 'away', 'so', 'that', 'we', 'can', 'use', 'them', 'for', 'compiling']",0
MRCompiler.java,"['/', '/', 'op', '.']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'predecessors', '=', 'plan', '.', 'getPredecessors', '(', 'op', ')', ';']",0
MRCompiler.java,"['if', '(', 'predecessors', '!', '=', 'null', '&', '&', 'predecessors', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MRCompiler.java,"['/', '/', 'When', 'processing', 'an', 'entire', 'script', '(', 'multiquery', ')', ',', 'we', 'can']",0
MRCompiler.java,"['/', '/', 'get', 'into', 'a', 'situation', 'where', 'a', 'load', 'has']",0
MRCompiler.java,"['/', '/', 'predecessors', '.', 'This', 'means', 'that', 'it', 'depends', 'on', 'some', 'store']",0
MRCompiler.java,"['/', '/', 'earlier', 'in', 'the', 'plan', '.', 'We', 'need', 'to', 'take', 'that', 'dependency']",0
MRCompiler.java,"['/', '/', 'and', 'connect', 'the', 'respective', 'MR', 'operators', ',', 'while', 'at', 'the']",0
MRCompiler.java,"['/', '/', 'same', 'time', 'removing', 'the', 'connection', 'between', 'the', 'Physical']",0
MRCompiler.java,"['/', '/', 'operators', '.', 'That', 'way', 'the', 'jobs', 'will', 'run', 'in', 'the', 'right']",0
MRCompiler.java,"['/', '/', 'order', '.']",0
MRCompiler.java,"['if', '(', 'op', 'instanceof', 'POLoad', ')', '{']",0
MRCompiler.java,"['if', '(', 'predecessors', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2125', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'at', 'most', 'one', 'predecessor', 'of', 'load', '.', 'Got', '""', '+', 'predecessors', '.', 'size', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['PhysicalOperator', 'p', '=', 'predecessors', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'p', 'instanceof', 'POStore', ')', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2126', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Predecessor', 'of', 'load', 'should', 'be', 'a', 'store', '.', 'Got', '""', '+', 'p', '.', 'getClass', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['/', '/', 'Need', 'new', 'operator']",0
MRCompiler.java,"['curMROp', '=', 'getMROp', '(', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'mapPlan', '.', 'add', '(', 'op', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'add', '(', 'curMROp', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'oper', '=', 'storeToMapReduceMap', '.', 'get', '(', '(', 'POStore', ')', 'p', ')', ';']",0
MRCompiler.java,"['plan', '.', 'disconnect', '(', 'op', ',', 'p', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'oper', ',', 'curMROp', ')', ';']",0
MRCompiler.java,"['Collections', '.', 'sort', '(', 'predecessors', ')', ';']",0
MRCompiler.java,"['compiledInputs', '=', 'new', 'MapReduceOper', '[', 'predecessors', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['int', 'i', '=', '-', '1', ';']",0
MRCompiler.java,"['for', '(', 'PhysicalOperator', 'pred', ':', 'predecessors', ')', '{']",0
MRCompiler.java,"['if', '(', 'pred', 'instanceof', 'POSplit', '&', '&', 'splitsSeen', '.', 'containsKey', '(', 'pred', '.', 'getOperatorKey', '(', ')', ')', ')', '{']",0
MRCompiler.java,"['compiledInputs', '[', '+', '+', 'i', ']', '=', 'startNew', '(', '(', '(', 'POSplit', ')', 'pred', ')', '.', 'getSplitStore', '(', ')', ',', 'splitsSeen', '.', 'get', '(', 'pred', '.', 'getOperatorKey', '(', ')', ')', ')', ';']",0
MRCompiler.java,"['compile', '(', 'pred', ')', ';']",0
MRCompiler.java,"['compiledInputs', '[', '+', '+', 'i', ']', '=', 'curMROp', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['/', '/', 'No', 'predecessors', '.', 'Mostly', 'a', 'load', '.', 'But', 'this', 'is', 'where']",0
MRCompiler.java,"['/', '/', 'we', 'start', '.', 'We', 'create', 'a', 'new', 'MROp', 'and', 'add', 'its', 'first']",0
MRCompiler.java,"['/', '/', 'operator', 'op', '.', 'Also', 'this', 'should', 'be', 'added', 'to', 'the', 'MRPlan', '.']",0
MRCompiler.java,"['curMROp', '=', 'getMROp', '(', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'mapPlan', '.', 'add', '(', 'op', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'add', '(', 'curMROp', ')', ';']",0
MRCompiler.java,"['/', '/', 'Now', 'we', 'have', 'the', 'inputs', 'compiled', '.', 'Do', 'something']",0
MRCompiler.java,"['/', '/', 'with', 'the', 'input', 'oper', 'op', '.']",0
MRCompiler.java,"['op', '.', 'visit', '(', 'this', ')', ';']",0
MRCompiler.java,"['if', '(', 'op', '.', 'getRequestedParallelism', '(', ')', '>', 'curMROp', '.', 'requestedParallelism', ')']",0
MRCompiler.java,"['curMROp', '.', 'requestedParallelism', '=', 'op', '.', 'getRequestedParallelism', '(', ')', ';']",0
MRCompiler.java,"['compiledInputs', '=', 'prevCompInp', ';']",0
MRCompiler.java,"['private', 'MapReduceOper', 'getMROp', '(', ')', '{']",0
MRCompiler.java,"['return', 'new', 'MapReduceOper', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['private', 'POLoad', 'getLoad', '(', ')', '{']",0
MRCompiler.java,"['POLoad', 'ld', '=', 'new', 'POLoad', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'true', ')', ';']",0
MRCompiler.java,"['ld', '.', 'setPc', '(', 'pigContext', ')', ';']",0
MRCompiler.java,"['return', 'ld', ';']",0
MRCompiler.java,"['private', 'POStore', 'getStore', '(', ')', '{']",0
MRCompiler.java,"['POStore', 'st', '=', 'new', 'POStore', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['/', '/', 'mark', 'store', 'as', 'tmp', 'store', '.', 'These', 'could', 'be', 'removed', 'by', 'the']",0
MRCompiler.java,"['/', '/', 'optimizer', ',', 'because', 'it', 'wasn', ""'"", 't', 'the', 'user', 'requesting', 'it', '.']",0
MRCompiler.java,"['st', '.', 'setIsTmpStore', '(', 'true', ')', ';']",0
MRCompiler.java,"['return', 'st', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'void', 'nonBlocking', '(', 'PhysicalOperator', 'op', ')', 'throws', 'PlanException', ',', 'IOException', '{']",0
MRCompiler.java,"['if', '(', 'compiledInputs', '.', 'length', '=', '=', '1', ')', '{']",0
MRCompiler.java,"['/', '/', 'For', 'speed']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', '0', ']', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2022', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'while', 'compiling', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'mro', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'mergedPlans', '=', 'merge', '(', 'compiledInputs', ')', ';']",0
MRCompiler.java,"['/', '/', 'The', 'first', 'MROper', 'is', 'always', 'the', 'merged', 'map', 'MROper']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'mergedPlans', '.', 'remove', '(', '0', ')', ';']",0
MRCompiler.java,"['/', '/', 'Push', 'the', 'input', 'operator', 'into', 'the', 'merged', 'map', 'MROper']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['/', '/', 'Connect', 'all', 'the', 'reduce', 'MROpers']",0
MRCompiler.java,"['if', '(', 'mergedPlans', '.', 'size', '(', ')', '>', '0', ')']",0
MRCompiler.java,"['connRedOper', '(', 'mergedPlans', ',', 'mro', ')', ';']",0
MRCompiler.java,"['/', '/', 'return', 'the', 'compiled', 'MROper']",0
MRCompiler.java,"['curMROp', '=', 'mro', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'void', 'blocking', '(', 'PhysicalOperator', 'op', ')', 'throws', 'IOException', ',', 'PlanException', '{']",0
MRCompiler.java,"['if', '(', 'compiledInputs', '.', 'length', '=', '=', '1', ')', '{']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', '0', ']', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'setMapDoneSingle', '(', 'true', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'mro', ';']",0
MRCompiler.java,"['else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['FileSpec', 'fSpec', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['POStore', 'st', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['st', '.', 'setSFile', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'st', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'startNew', '(', 'fSpec', ',', 'mro', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'setMapDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'mergedPlans', '=', 'merge', '(', 'compiledInputs', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'mergedPlans', '.', 'remove', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', 'mergedPlans', '.', 'size', '(', ')', '>', '0', ')']",0
MRCompiler.java,"['mro', '.', 'setMapDoneMultiple', '(', 'true', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDoneSingle', '(', 'true', ')', ';']",0
MRCompiler.java,"['/', '/', 'Connect', 'all', 'the', 'reduce', 'MROpers']",0
MRCompiler.java,"['if', '(', 'mergedPlans', '.', 'size', '(', ')', '>', '0', ')']",0
MRCompiler.java,"['connRedOper', '(', 'mergedPlans', ',', 'mro', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'mro', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'void', 'connRedOper', '(', 'List', '<', 'MapReduceOper', '>', 'mergedPlans', ',', 'MapReduceOper', 'mro', ')', 'throws', 'PlanException', ',', 'IOException', '{']",0
MRCompiler.java,"['PhysicalOperator', 'leaf', '=', 'null', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'leaves', '=', 'mro', '.', 'mapPlan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'leaves', '!', '=', 'null', '&', '&', 'leaves', '.', 'size', '(', ')', '>', '0', ')']",0
MRCompiler.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'mmro', ':', 'mergedPlans', ')', '{']",0
MRCompiler.java,"['mmro', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['FileSpec', 'fileSpec', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['POLoad', 'ld', '=', 'getLoad', '(', ')', ';']",0
MRCompiler.java,"['ld', '.', 'setLFile', '(', 'fileSpec', ')', ';']",0
MRCompiler.java,"['POStore', 'str', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['str', '.', 'setSFile', '(', 'fileSpec', ')', ';']",0
MRCompiler.java,"['mmro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'add', '(', 'ld', ')', ';']",0
MRCompiler.java,"['if', '(', 'leaf', '!', '=', 'null', ')']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'connect', '(', 'ld', ',', 'leaf', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'mmro', ',', 'mro', ')', ';']",0
MRCompiler.java,"['private', 'MapReduceOper', 'endSingleInputPlanWithStr', '(', 'FileSpec', 'fSpec', ')', 'throws', 'PlanException', '{']",0
MRCompiler.java,"['if', '(', 'compiledInputs', '.', 'length', '>', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2023', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Received', 'a', 'multi', 'input', 'plan', 'when', 'expecting', 'only', 'a', 'single', 'input', 'one', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', '0', ']', ';']",0
MRCompiler.java,"['POStore', 'str', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['str', '.', 'setSFile', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDoneSingle', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2022', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'while', 'compiling', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['return', 'mro', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'MapReduceOper', 'startNew', '(', 'FileSpec', 'fSpec', ',', 'MapReduceOper', 'old', ')', 'throws', 'PlanException', '{']",0
MRCompiler.java,"['POLoad', 'ld', '=', 'getLoad', '(', ')', ';']",0
MRCompiler.java,"['ld', '.', 'setLFile', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'ret', '=', 'getMROp', '(', ')', ';']",0
MRCompiler.java,"['ret', '.', 'mapPlan', '.', 'add', '(', 'ld', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'add', '(', 'ret', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'old', ',', 'ret', ')', ';']",0
MRCompiler.java,"['return', 'ret', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'FileSpec', 'getTempFileSpec', '(', ')', 'throws', 'IOException', '{']",0
MRCompiler.java,"['return', 'new', 'FileSpec', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ',']",0
MRCompiler.java,"['new', 'FuncSpec', '(', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', 'List', '<', 'MapReduceOper', '>', 'merge', '(', 'MapReduceOper', '[', ']', 'compiledInputs', ')']",0
MRCompiler.java,"['throws', 'PlanException', '{']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'ret', '=', 'new', 'ArrayList', '<', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mergedMap', '=', 'getMROp', '(', ')', ';']",0
MRCompiler.java,"['ret', '.', 'add', '(', 'mergedMap', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'add', '(', 'mergedMap', ')', ';']",0
MRCompiler.java,"['Set', '<', 'MapReduceOper', '>', 'toBeConnected', '=', 'new', 'HashSet', '<', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'remLst', '=', 'new', 'ArrayList', '<', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'mpLst', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'mro', ':', 'compiledInputs', ')', '{']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['remLst', '.', 'add', '(', 'mro', ')', ';']",0
MRCompiler.java,"['mpLst', '.', 'add', '(', 'mro', '.', 'mapPlan', ')', ';']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'pmros', '=', 'MRPlan', '.', 'getPredecessors', '(', 'mro', ')', ';']",0
MRCompiler.java,"['if', '(', 'pmros', '!', '=', 'null', ')', '{']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'pmro', ':', 'pmros', ')']",0
MRCompiler.java,"['toBeConnected', '.', 'add', '(', 'pmro', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['ret', '.', 'add', '(', 'mro', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2027', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'for', 'a', 'merge', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['merge', '(', 'ret', '.', 'get', '(', '0', ')', '.', 'mapPlan', ',', 'mpLst', ')', ';']",0
MRCompiler.java,"['Iterator', '<', 'MapReduceOper', '>', 'it', '=', 'toBeConnected', '.', 'iterator', '(', ')', ';']",0
MRCompiler.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'it', '.', 'next', '(', ')', ',', 'mergedMap', ')', ';']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'rmro', ':', 'remLst', ')', '{']",0
MRCompiler.java,"['if', '(', 'rmro', '.', 'requestedParallelism', '>', 'mergedMap', '.', 'requestedParallelism', ')']",0
MRCompiler.java,"['mergedMap', '.', 'requestedParallelism', '=', 'rmro', '.', 'requestedParallelism', ';']",0
MRCompiler.java,"['MRPlan', '.', 'remove', '(', 'rmro', ')', ';']",0
MRCompiler.java,"['return', 'ret', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['private', '<', 'O', 'extends', 'Operator', ',', 'E', 'extends', 'OperatorPlan', '<', 'O', '>', '>', 'void', 'merge', '(']",0
MRCompiler.java,"['E', 'finPlan', ',', 'List', '<', 'E', '>', 'plans', ')', 'throws', 'PlanException', '{']",0
MRCompiler.java,"['for', '(', 'E', 'e', ':', 'plans', ')', '{']",0
MRCompiler.java,"['finPlan', '.', 'merge', '(', 'e', ')', ';']",0
MRCompiler.java,"['private', 'void', 'addUDFs', '(', 'PhysicalPlan', 'plan', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['if', '(', 'plan', '!', '=', 'null', ')', '{']",0
MRCompiler.java,"['udfFinder', '.', 'setPlan', '(', 'plan', ')', ';']",0
MRCompiler.java,"['udfFinder', '.', 'visit', '(', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'UDFs', '.', 'addAll', '(', 'udfFinder', '.', 'getUDFs', '(', ')', ')', ';']",0
MRCompiler.java,"['/', '*', 'The', 'visitOp', 'methods', 'that', 'decide', 'what', 'to', 'do', 'with', 'the', 'current', 'operator', '*', '/']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'void', 'visitSplit', '(', 'POSplit', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['FileSpec', 'fSpec', '=', 'op', '.', 'getSplitStore', '(', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'endSingleInputPlanWithStr', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setSplitter', '(', 'true', ')', ';']",0
MRCompiler.java,"['splitsSeen', '.', 'put', '(', 'op', '.', 'getOperatorKey', '(', ')', ',', 'mro', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'startNew', '(', 'fSpec', ',', 'mro', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitLoad', '(', 'POLoad', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitStore', '(', 'POStore', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['storeToMapReduceMap', '.', 'put', '(', 'op', ',', 'curMROp', ')', ';']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitFilter', '(', 'POFilter', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['addUDFs', '(', 'op', '.', 'getPlan', '(', ')', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitStream', '(', 'POStream', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'simpleConnectMapToReduce', '(', 'MapReduceOper', 'mro', ')', 'throws', 'PlanException']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prjStar', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prjStar', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['prjStar', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prjStar', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['eps', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['POLocalRearrange', 'lr', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setIndex', '(', '0', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2058', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'the', 'newly', 'created', 'POLocalRearrange', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setPlans', '(', 'eps', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'lr', ')', ';']",0
MRCompiler.java,"['POPackage', 'pkg', '=', 'new', 'POPackage', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setNumInps', '(', '1', ')', ';']",0
MRCompiler.java,"['boolean', '[', ']', 'inner', '=', '{', 'false', '}', ';']",0
MRCompiler.java,"['pkg', '.', 'setInner', '(', 'inner', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'pkg', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps1', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flat1', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['PhysicalPlan', 'ep1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj1', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setStar', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setColumn', '(', '1', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setOverloaded', '(', 'true', ')', ';']",0
MRCompiler.java,"['ep1', '.', 'add', '(', 'prj1', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep1', ')', ';']",0
MRCompiler.java,"['flat1', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['POForEach', 'nfe1', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig']",0
MRCompiler.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'eps1', ',', 'flat1', ')', ';']",0
MRCompiler.java,"['nfe1', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'nfe1', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitLimit', '(', 'POLimit', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', '0', ']', ';']",0
MRCompiler.java,"['mro', '.', 'limit', '=', 'op', '.', 'getLimit', '(', ')', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['/', '/', 'if', 'map', 'plan', 'is', 'open', ',', 'add', 'a', 'limit', 'for', 'optimization', ',', 'eventually', 'we']",0
MRCompiler.java,"['/', '/', 'will', 'add', 'another', 'limit', 'to', 'reduce', 'plan']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['if', '(', 'mro', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')']",0
MRCompiler.java,"['simpleConnectMapToReduce', '(', 'mro', ')', ';']",0
MRCompiler.java,"['mro', '.', 'requestedParallelism', '=', '1', ';']",0
MRCompiler.java,"['POLimit', 'pLimit2', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pLimit2', '.', 'setLimit', '(', 'op', '.', 'getLimit', '(', ')', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'pLimit2', ')', ';']",0
MRCompiler.java,"['messageCollector', '.', 'collect', '(', '""', 'Something', 'in', 'the', 'reduce', 'plan', 'while', 'map', 'plan', 'is', 'not', 'done', '.', 'Something', 'wrong', '!', '""', ',']",0
MRCompiler.java,"['MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'REDUCE_PLAN_NOT_EMPTY_WHILE_MAP_PLAN_UNDER_PROCESS', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['/', '/', 'limit', 'should', 'add', 'into', 'reduce', 'plan']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['messageCollector', '.', 'collect', '(', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'while', 'compiling', '!', '""', ',']",0
MRCompiler.java,"['MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'UNREACHABLE_CODE_BOTH_MAP_AND_REDUCE_PLANS_PROCESSED', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitLocalRearrange', '(', 'POLocalRearrange', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'plans', '=', 'op', '.', 'getPlans', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'plans', '!', '=', 'null', ')']",0
MRCompiler.java,"['for', '(', 'PhysicalPlan', 'ep', ':', 'plans', ')']",0
MRCompiler.java,"['addUDFs', '(', 'ep', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitPOForEach', '(', 'POForEach', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'plans', '=', 'op', '.', 'getInputPlans', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'plans', '!', '=', 'null', ')']",0
MRCompiler.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'plans', ')', '{']",0
MRCompiler.java,"['addUDFs', '(', 'plan', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitGlobalRearrange', '(', 'POGlobalRearrange', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['blocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitPackage', '(', 'POPackage', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitUnion', '(', 'POUnion', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['nonBlocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['/', '*', '*']",0
MRCompiler.java,"['public', 'void', 'visitFRJoin', '(', 'POFRJoin', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['FileSpec', '[', ']', 'replFiles', '=', 'new', 'FileSpec', '[', 'op', '.', 'getInputs', '(', ')', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'replFiles', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
MRCompiler.java,"['if', '(', 'i', '=', '=', 'op', '.', 'getFragment', '(', ')', ')', 'continue', ';']",0
MRCompiler.java,"['replFiles', '[', 'i', ']', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['op', '.', 'setReplFiles', '(', 'replFiles', ')', ';']",0
MRCompiler.java,"['List', '<', 'OperatorKey', '>', 'opKeys', '=', 'new', 'ArrayList', '<', 'OperatorKey', '>', '(', 'op', '.', 'getInputs', '(', ')', '.', 'size', '(', ')', ')', ';']",0
MRCompiler.java,"['for', '(', 'PhysicalOperator', 'pop', ':', 'op', '.', 'getInputs', '(', ')', ')', '{']",0
MRCompiler.java,"['opKeys', '.', 'add', '(', 'pop', '.', 'getOperatorKey', '(', ')', ')', ';']",0
MRCompiler.java,"['int', 'fragPlan', '=', '0', ';']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'compiledInputs', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', 'i', ']', ';']",0
MRCompiler.java,"['OperatorKey', 'opKey', '=', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '?', 'mro', '.', 'mapPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getOperatorKey', '(', ')']",0
MRCompiler.java,"[':', 'mro', '.', 'reducePlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getOperatorKey', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'opKeys', '.', 'indexOf', '(', 'opKey', ')', '=', '=', 'op', '.', 'getFragment', '(', ')', ')', '{']",0
MRCompiler.java,"['curMROp', '=', 'mro', ';']",0
MRCompiler.java,"['fragPlan', '=', 'i', ';']",0
MRCompiler.java,"['POStore', 'str', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['str', '.', 'setSFile', '(', 'replFiles', '[', 'opKeys', '.', 'indexOf', '(', 'opKey', ')', ']', ')', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDoneSingle', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2022', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'while', 'compiling', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'compiledInputs', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
MRCompiler.java,"['if', '(', 'i', '=', '=', 'fragPlan', ')', 'continue', ';']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'compiledInputs', '[', 'i', ']', ',', 'curMROp', ')', ';']",0
MRCompiler.java,"['if', '(', '!', 'curMROp', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['curMROp', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'else', 'if', '(', 'curMROp', '.', 'isMapDone', '(', ')', '&', '&', '!', 'curMROp', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['curMROp', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'op', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2022', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Both', 'map', 'and', 'reduce', 'phases', 'have', 'been', 'done', '.', 'This', 'is', 'unexpected', 'while', 'compiling', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['List', '<', 'List', '<', 'PhysicalPlan', '>', '>', 'joinPlans', '=', 'op', '.', 'getJoinPlans', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'joinPlans', '!', '=', 'null', ')']",0
MRCompiler.java,"['for', '(', 'List', '<', 'PhysicalPlan', '>', 'joinPlan', ':', 'joinPlans', ')', '{']",0
MRCompiler.java,"['if', '(', 'joinPlan', '!', '=', 'null', ')']",0
MRCompiler.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'joinPlan', ')', '{']",0
MRCompiler.java,"['addUDFs', '(', 'plan', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'setFrjoin', '(', 'true', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'setFragment', '(', 'op', '.', 'getFragment', '(', ')', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'setReplFiles', '(', 'op', '.', 'getReplFiles', '(', ')', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitDistinct', '(', 'PODistinct', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'compiledInputs', '[', '0', ']', ';']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prjStar', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prjStar', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['prjStar', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prjStar', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['eps', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['POLocalRearrange', 'lr', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setIndex', '(', '0', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setPlans', '(', 'eps', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setDistinct', '(', 'true', ')', ';']",0
MRCompiler.java,"['if', '(', '!', 'mro', '.', 'isMapDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'lr', ')', ';']",0
MRCompiler.java,"['else', 'if', '(', 'mro', '.', 'isMapDone', '(', ')', '&', '&', '!', 'mro', '.', 'isReduceDone', '(', ')', ')', '{']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'lr', ')', ';']",0
MRCompiler.java,"['blocking', '(', 'op', ')', ';']",0
MRCompiler.java,"['POPackage', 'pkg', '=', 'new', 'POPackage', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setDistinct', '(', 'true', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setNumInps', '(', '1', ')', ';']",0
MRCompiler.java,"['boolean', '[', ']', 'inner', '=', '{', 'false', '}', ';']",0
MRCompiler.java,"['pkg', '.', 'setInner', '(', 'inner', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'reducePlan', '.', 'add', '(', 'pkg', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps1', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flat1', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['PhysicalPlan', 'ep1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj1', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setStar', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setColumn', '(', '0', ')', ';']",0
MRCompiler.java,"['prj1', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['ep1', '.', 'add', '(', 'prj1', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep1', ')', ';']",0
MRCompiler.java,"['flat1', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['POForEach', 'nfe1', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig']",0
MRCompiler.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ',', 'eps1', ',']",0
MRCompiler.java,"['flat1', ')', ';']",0
MRCompiler.java,"['nfe1', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'nfe1', ')', ';']",0
MRCompiler.java,"['curMROp', '.', 'setNeedsDistinctCombiner', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitSort', '(', 'POSort', 'op', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['FileSpec', 'fSpec', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'endSingleInputPlanWithStr', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['FileSpec', 'quantFile', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['int', 'rp', '=', 'op', '.', 'getRequestedParallelism', '(', ')', ';']",0
MRCompiler.java,"['Pair', '<', 'Integer', ',', 'Byte', '>', '[', ']', 'fields', '=', 'getSortCols', '(', 'op', ')', ';']",0
MRCompiler.java,"['Pair', '<', 'MapReduceOper', ',', 'Integer', '>', 'quantJobParallelismPair', '=']",0
MRCompiler.java,"['getQuantileJob', '(', 'op', ',', 'mro', ',', 'fSpec', ',', 'quantFile', ',', 'rp', ',', 'fields', ')', ';']",0
MRCompiler.java,"['curMROp', '=', 'getSortJob', '(', 'op', ',', 'quantJobParallelismPair', '.', 'first', ',', 'fSpec', ',', 'quantFile', ',']",0
MRCompiler.java,"['quantJobParallelismPair', '.', 'second', ',', 'fields', ')', ';']",0
MRCompiler.java,"['if', '(', 'op', '.', 'isUDFComparatorUsed', ')', '{']",0
MRCompiler.java,"['curMROp', '.', 'UDFs', '.', 'add', '(', 'op', '.', 'getMSortFunc', '(', ')', '.', 'getFuncSpec', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2034', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'compiling', 'operator', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['private', 'Pair', '<', 'Integer', ',', 'Byte', '>', '[', ']', 'getSortCols', '(', 'POSort', 'sort', ')', 'throws', 'PlanException', ',', 'ExecException', '{']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'plans', '=', 'sort', '.', 'getSortPlans', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'plans', '!', '=', 'null', ')', '{']",0
MRCompiler.java,"['Pair', '[', ']', 'ret', '=', 'new', 'Pair', '[', 'plans', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['int', 'i', '=', '-', '1', ';']",0
MRCompiler.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'plans', ')', '{']",0
MRCompiler.java,"['if', '(', '(', '(', 'POProject', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'isStar', '(', ')', ')', 'return', 'null', ';']",0
MRCompiler.java,"['int', 'first', '=', '(', '(', 'POProject', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'getColumn', '(', ')', ';']",0
MRCompiler.java,"['byte', 'second', '=', '(', '(', 'POProject', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'getResultType', '(', ')', ';']",0
MRCompiler.java,"['ret', '[', '+', '+', 'i', ']', '=', 'new', 'Pair', '<', 'Integer', ',', 'Byte', '>', '(', 'first', ',', 'second', ')', ';']",0
MRCompiler.java,"['return', 'ret', ';']",0
MRCompiler.java,"['int', 'errCode', '=', '2026', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'No', 'expression', 'plan', 'found', 'in', 'POSort', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['public', 'MapReduceOper', 'getSortJob', '(']",0
MRCompiler.java,"['POSort', 'sort', ',']",0
MRCompiler.java,"['MapReduceOper', 'quantJob', ',']",0
MRCompiler.java,"['FileSpec', 'lFile', ',']",0
MRCompiler.java,"['FileSpec', 'quantFile', ',']",0
MRCompiler.java,"['int', 'rp', ',']",0
MRCompiler.java,"['Pair', '<', 'Integer', ',', 'Byte', '>', '[', ']', 'fields', ')', 'throws', 'PlanException', '{']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'startNew', '(', 'lFile', ',', 'quantJob', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setQuantFile', '(', 'quantFile', '.', 'getFileName', '(', ')', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setGlobalSort', '(', 'true', ')', ';']",0
MRCompiler.java,"['mro', '.', 'requestedParallelism', '=', 'rp', ';']",0
MRCompiler.java,"['long', 'limit', '=', 'sort', '.', 'getLimit', '(', ')', ';']",0
MRCompiler.java,"['mro', '.', 'limit', '=', 'limit', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps1', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['byte', 'keyType', '=', 'DataType', '.', 'UNKNOWN', ';']",0
MRCompiler.java,"['boolean', '[', ']', 'sortOrder', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'sortOrderList', '=', 'sort', '.', 'getMAscCols', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'sortOrderList', '!', '=', 'null', ')', '{']",0
MRCompiler.java,"['sortOrder', '=', 'new', 'boolean', '[', 'sortOrderList', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sortOrderList', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
MRCompiler.java,"['sortOrder', '[', 'i', ']', '=', 'sortOrderList', '.', 'get', '(', 'i', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setSortOrder', '(', 'sortOrder', ')', ';']",0
MRCompiler.java,"['if', '(', 'fields', '=', '=', 'null', ')', '{']",0
MRCompiler.java,"['/', '/', 'This', 'is', 'project', '*']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['for', '(', 'int', 'i', ':', 'fields', ')', '{']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
MRCompiler.java,"['nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setColumn', '(', 'i', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['/', '/', 'Attach', 'the', 'sort', 'plans', 'to', 'the', 'local', 'rearrange', 'to', 'get', 'the']",0
MRCompiler.java,"['/', '/', 'projection', '.']",0
MRCompiler.java,"['eps1', '.', 'addAll', '(', 'sort', '.', 'getSortPlans', '(', ')', ')', ';']",0
MRCompiler.java,"['/', '/', 'Visit', 'the', 'first', 'sort', 'plan', 'to', 'figure', 'out', 'our', 'key', 'type', '.', 'We', 'only']",0
MRCompiler.java,"['/', '/', 'have', 'to', 'visit', 'the', 'first', 'because', 'if', 'we', 'have', 'more', 'than', 'one', 'plan', ',']",0
MRCompiler.java,"['/', '/', 'then', 'the', 'key', 'type', 'will', 'be', 'tuple', '.']",0
MRCompiler.java,"['FindKeyTypeVisitor', 'fktv', '=']",0
MRCompiler.java,"['new', 'FindKeyTypeVisitor', '(', 'sort', '.', 'getSortPlans', '(', ')', '.', 'get', '(', '0', ')', ')', ';']",0
MRCompiler.java,"['fktv', '.', 'visit', '(', ')', ';']",0
MRCompiler.java,"['keyType', '=', 'fktv', '.', 'keyType', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2035', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Could', 'not', 'compute', 'key', 'type', 'of', 'sort', 'operator', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 've', ')', ';']",0
MRCompiler.java,"['POLocalRearrange', 'lr', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setIndex', '(', '0', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2058', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'created', 'POLocalRearrange', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setKeyType', '(', '(', 'fields', '=', '=', 'null', '|', '|', 'fields', '.', 'length', '>', '1', ')', '?', 'DataType', '.', 'TUPLE', ':']",0
MRCompiler.java,"['keyType', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setPlans', '(', 'eps1', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'lr', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['if', '(', 'limit', '!', '=', '-', '1', ')', '{']",0
MRCompiler.java,"['POPackageLite', 'pkg_c', '=', 'new', 'POPackageLite', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pkg_c', '.', 'setKeyType', '(', '(', 'fields', '.', 'length', '>', '1', ')', '?', 'DataType', '.', 'TUPLE', ':', 'keyType', ')', ';']",0
MRCompiler.java,"['pkg_c', '.', 'setNumInps', '(', '1', ')', ';']",0
MRCompiler.java,"['/', '/', 'pkg', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'combinePlan', '.', 'add', '(', 'pkg_c', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps_c1', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flat_c1', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['PhysicalPlan', 'ep_c1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj_c1', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj_c1', '.', 'setColumn', '(', '1', ')', ';']",0
MRCompiler.java,"['prj_c1', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj_c1', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
MRCompiler.java,"['ep_c1', '.', 'add', '(', 'prj_c1', ')', ';']",0
MRCompiler.java,"['eps_c1', '.', 'add', '(', 'ep_c1', ')', ';']",0
MRCompiler.java,"['flat_c1', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['POForEach', 'fe_c1', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',']",0
MRCompiler.java,"['-', '1', ',', 'eps_c1', ',', 'flat_c1', ')', ';']",0
MRCompiler.java,"['fe_c1', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'combinePlan', '.', 'addAsLeaf', '(', 'fe_c1', ')', ';']",0
MRCompiler.java,"['POLimit', 'pLimit', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pLimit', '.', 'setLimit', '(', 'limit', ')', ';']",0
MRCompiler.java,"['mro', '.', 'combinePlan', '.', 'addAsLeaf', '(', 'pLimit', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps_c2', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['eps_c2', '.', 'addAll', '(', 'sort', '.', 'getSortPlans', '(', ')', ')', ';']",0
MRCompiler.java,"['POLocalRearrange', 'lr_c2', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['lr_c2', '.', 'setIndex', '(', '0', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2058', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'created', 'POLocalRearrange', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['lr_c2', '.', 'setKeyType', '(', '(', 'fields', '.', 'length', '>', '1', ')', '?', 'DataType', '.', 'TUPLE', ':', 'keyType', ')', ';']",0
MRCompiler.java,"['lr_c2', '.', 'setPlans', '(', 'eps_c2', ')', ';']",0
MRCompiler.java,"['lr_c2', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'combinePlan', '.', 'addAsLeaf', '(', 'lr_c2', ')', ';']",0
MRCompiler.java,"['POPackageLite', 'pkg', '=', 'new', 'POPackageLite', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setKeyType', '(', '(', 'fields', '=', '=', 'null', '|', '|', 'fields', '.', 'length', '>', '1', ')', '?', 'DataType', '.', 'TUPLE', ':']",0
MRCompiler.java,"['keyType', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setNumInps', '(', '1', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'pkg', ')', ';']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setColumn', '(', '1', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps2', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['eps2', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flattened', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['flattened', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['POForEach', 'nfe1', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'eps2', ',', 'flattened', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'nfe1', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'connect', '(', 'pkg', ',', 'nfe1', ')', ';']",0
MRCompiler.java,"['if', '(', 'limit', '!', '=', '-', '1', ')']",0
MRCompiler.java,"['POLimit', 'pLimit2', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pLimit2', '.', 'setLimit', '(', 'limit', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'pLimit2', ')', ';']",0
MRCompiler.java,"['/', '/', 'ep1', '.', 'add', '(', 'innGen', ')', ';']",0
MRCompiler.java,"['return', 'mro', ';']",0
MRCompiler.java,"['public', 'Pair', '<', 'MapReduceOper', ',', 'Integer', '>', 'getQuantileJob', '(', 'POSort', 'inpSort', ',', 'MapReduceOper', 'prevJob', ',', 'FileSpec', 'lFile', ',', 'FileSpec', 'quantFile', ',', 'int', 'rp', ',', 'Pair', '<', 'Integer', ',', 'Byte', '>', '[', ']', 'fields', ')', 'throws', 'PlanException', ',', 'VisitorException', '{']",0
MRCompiler.java,"['FileSpec', 'quantLdFilName', '=', 'new', 'FileSpec', '(', 'lFile', '.', 'getFileName', '(', ')', ',', 'new', 'FuncSpec', '(', 'RandomSampleLoader', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'mro', '=', 'startNew', '(', 'quantLdFilName', ',', 'prevJob', ')', ';']",0
MRCompiler.java,"['POSort', 'sort', '=', 'new', 'POSort', '(', 'inpSort', '.', 'getOperatorKey', '(', ')', ',', 'inpSort']",0
MRCompiler.java,"['.', 'getRequestedParallelism', '(', ')', ',', 'null', ',', 'inpSort', '.', 'getSortPlans', '(', ')', ',']",0
MRCompiler.java,"['inpSort', '.', 'getMAscCols', '(', ')', ',', 'inpSort', '.', 'getMSortFunc', '(', ')', ')', ';']",0
MRCompiler.java,"['if', '(', 'sort', '.', 'isUDFComparatorUsed', ')', '{']",0
MRCompiler.java,"['mro', '.', 'UDFs', '.', 'add', '(', 'sort', '.', 'getMSortFunc', '(', ')', '.', 'getFuncSpec', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps1', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flat1', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['/', '/', 'Set', 'up', 'the', 'projections', 'of', 'the', 'key', 'columns']",0
MRCompiler.java,"['if', '(', 'fields', '=', '=', 'null', ')', '{']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
MRCompiler.java,"['nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['flat1', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['for', '(', 'Pair', '<', 'Integer', ',', 'Byte', '>', 'i', ':', 'fields', ')', '{']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setColumn', '(', 'i', '.', 'first', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'i', '.', 'second', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['eps1', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['flat1', '.', 'add', '(', 'true', ')', ';']",0
MRCompiler.java,"['/', '/', 'This', 'foreach', 'will', 'pick', 'the', 'sort', 'key', 'columns', 'from', 'the', 'RandomSampleLoader', 'output']",0
MRCompiler.java,"['POForEach', 'nfe1', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'eps1', ',', 'flat1', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'nfe1', ')', ';']",0
MRCompiler.java,"['/', '/', 'Now', 'set', 'up', 'a', 'POLocalRearrange', 'which', 'has', '""', 'all', '""', 'as', 'the', 'key', 'and', 'the', 'output', 'of', 'the']",0
MRCompiler.java,"['/', '/', 'foreach', 'will', 'be', 'the', '""', 'value', '""', 'out', 'of', 'POLocalRearrange']",0
MRCompiler.java,"['PhysicalPlan', 'ep1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['ConstantExpression', 'ce', '=', 'new', 'ConstantExpression', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['ce', '.', 'setValue', '(', '""', 'all', '""', ')', ';']",0
MRCompiler.java,"['ce', '.', 'setResultType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
MRCompiler.java,"['ep1', '.', 'add', '(', 'ce', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'eps', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['eps', '.', 'add', '(', 'ep1', ')', ';']",0
MRCompiler.java,"['POLocalRearrange', 'lr', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setIndex', '(', '0', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2058', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'created', 'POLocalRearrange', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setKeyType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setPlans', '(', 'eps', ')', ';']",0
MRCompiler.java,"['lr', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'add', '(', 'lr', ')', ';']",0
MRCompiler.java,"['mro', '.', 'mapPlan', '.', 'connect', '(', 'nfe1', ',', 'lr', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setMapDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['POPackage', 'pkg', '=', 'new', 'POPackage', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setKeyType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
MRCompiler.java,"['pkg', '.', 'setNumInps', '(', '1', ')', ';']",0
MRCompiler.java,"['boolean', '[', ']', 'inner', '=', '{', 'false', '}', ';']",0
MRCompiler.java,"['pkg', '.', 'setInner', '(', 'inner', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'pkg', ')', ';']",0
MRCompiler.java,"['/', '/', 'Lets', 'start', 'building', 'the', 'plan', 'which', 'will', 'have', 'the', 'sort']",0
MRCompiler.java,"['/', '/', 'for', 'the', 'foreach']",0
MRCompiler.java,"['PhysicalPlan', 'fe2Plan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['/', '/', 'Top', 'level', 'project', 'which', 'just', 'projects', 'the', 'tuple', 'which', 'is', 'coming']",0
MRCompiler.java,"['/', '/', 'from', 'the', 'foreach', 'after', 'the', 'package']",0
MRCompiler.java,"['POProject', 'topPrj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['topPrj', '.', 'setColumn', '(', '1', ')', ';']",0
MRCompiler.java,"['topPrj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['topPrj', '.', 'setOverloaded', '(', 'true', ')', ';']",0
MRCompiler.java,"['fe2Plan', '.', 'add', '(', 'topPrj', ')', ';']",0
MRCompiler.java,"['/', '/', 'the', 'projections', 'which', 'will', 'form', 'sort', 'plans']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'nesSortPlanLst', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'fields', '=', '=', 'null', ')', '{']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
MRCompiler.java,"['nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['nesSortPlanLst', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'fields', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
MRCompiler.java,"['PhysicalPlan', 'ep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setColumn', '(', 'i', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
MRCompiler.java,"['prj', '.', 'setResultType', '(', 'fields', '[', 'i', ']', '.', 'second', ')', ';']",0
MRCompiler.java,"['ep', '.', 'add', '(', 'prj', ')', ';']",0
MRCompiler.java,"['nesSortPlanLst', '.', 'add', '(', 'ep', ')', ';']",0
MRCompiler.java,"['sort', '.', 'setSortPlans', '(', 'nesSortPlanLst', ')', ';']",0
MRCompiler.java,"['sort', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
MRCompiler.java,"['fe2Plan', '.', 'add', '(', 'sort', ')', ';']",0
MRCompiler.java,"['fe2Plan', '.', 'connect', '(', 'topPrj', ',', 'sort', ')', ';']",0
MRCompiler.java,"['/', '/', 'The', 'plan', 'which', 'will', 'have', 'a', 'constant', 'representing', 'the']",0
MRCompiler.java,"['/', '/', 'degree', 'of', 'parallelism', 'for', 'the', 'final', 'order', 'by', 'map', '-', 'reduce', 'job']",0
MRCompiler.java,"['/', '/', 'this', 'will', 'either', 'come', 'from', 'a', '""', 'order', 'by', 'parallel', 'x', '""', 'in', 'the', 'script']",0
MRCompiler.java,"['/', '/', 'or', 'will', 'be', 'the', 'default', 'number', 'of', 'reducers', 'for', 'the', 'cluster', 'if']",0
MRCompiler.java,"['/', '/', '""', 'parallel', 'x', '""', 'is', 'not', 'used', 'in', 'the', 'script']",0
MRCompiler.java,"['PhysicalPlan', 'rpep', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['ConstantExpression', 'rpce', '=', 'new', 'ConstantExpression', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['rpce', '.', 'setRequestedParallelism', '(', 'rp', ')', ';']",0
MRCompiler.java,"['int', 'val', '=', 'rp', ';']",0
MRCompiler.java,"['if', '(', 'val', '<', '=', '0', ')', '{']",0
MRCompiler.java,"['ExecutionEngine', 'eng', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'eng', 'instanceof', 'HExecutionEngine', ')', '{']",0
MRCompiler.java,"['val', '=', 'Math', '.', 'round', '(', '0', '.', '9f', '*', '(', '(', 'HExecutionEngine', ')', 'eng', ')', '.', 'getJobClient', '(', ')', '.', 'getDefaultReduces', '(', ')', ')', ';']",0
MRCompiler.java,"['if', '(', 'val', '<', '=', '0', ')']",0
MRCompiler.java,"['val', '=', '1', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '6015', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Problem', 'getting', 'the', 'default', 'number', 'of', 'reduces', 'from', 'the', 'Job', 'Client', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
MRCompiler.java,"['}', 'else', '{']",0
MRCompiler.java,"['val', '=', '1', ';', '/', '/', 'local', 'mode', ',', 'set', 'it', 'to', '1']",0
MRCompiler.java,"['int', 'parallelismForSort', '=', '(', 'rp', '<', '=', '0', '?', 'val', ':', 'rp', ')', ';']",0
MRCompiler.java,"['rpce', '.', 'setValue', '(', 'parallelismForSort', ')', ';']",0
MRCompiler.java,"['rpce', '.', 'setResultType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
MRCompiler.java,"['rpep', '.', 'add', '(', 'rpce', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'genEps', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['genEps', '.', 'add', '(', 'rpep', ')', ';']",0
MRCompiler.java,"['genEps', '.', 'add', '(', 'fe2Plan', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flattened2', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['flattened2', '.', 'add', '(', 'false', ')', ';']",0
MRCompiler.java,"['flattened2', '.', 'add', '(', 'false', ')', ';']",0
MRCompiler.java,"['POForEach', 'nfe2', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'genEps', ',', 'flattened2', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'nfe2', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'connect', '(', 'pkg', ',', 'nfe2', ')', ';']",0
MRCompiler.java,"['/', '/', 'Let', ""'"", 's', 'connect', 'the', 'output', 'from', 'the', 'foreach', 'containing']",0
MRCompiler.java,"['/', '/', 'number', 'of', 'quantiles', 'and', 'the', 'sorted', 'bag', 'of', 'samples', 'to']",0
MRCompiler.java,"['/', '/', 'another', 'foreach', 'with', 'the', 'FindQuantiles', 'udf', '.', 'The', 'input']",0
MRCompiler.java,"['/', '/', 'to', 'the', 'FindQuantiles', 'udf', 'is', 'a', 'project', '(', '*', ')', 'which', 'takes', 'the']",0
MRCompiler.java,"['/', '/', 'foreach', 'input', 'and', 'gives', 'it', 'to', 'the', 'udf']",0
MRCompiler.java,"['PhysicalPlan', 'ep4', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'prjStar4', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['prjStar4', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
MRCompiler.java,"['prjStar4', '.', 'setStar', '(', 'true', ')', ';']",0
MRCompiler.java,"['ep4', '.', 'add', '(', 'prjStar4', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'ufInps', '=', 'new', 'ArrayList', '<', 'PhysicalOperator', '>', '(', ')', ';']",0
MRCompiler.java,"['ufInps', '.', 'add', '(', 'prjStar4', ')', ';']",0
MRCompiler.java,"['/', '/', 'Turn', 'the', 'asc', '/', 'desc', 'array', 'into', 'an', 'array', 'of', 'strings', 'so', 'that', 'we', 'can', 'pass', 'it']",0
MRCompiler.java,"['/', '/', 'to', 'the', 'FindQuantiles', 'function', '.']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'ascCols', '=', 'inpSort', '.', 'getMAscCols', '(', ')', ';']",0
MRCompiler.java,"['String', '[', ']', 'ascs', '=', 'new', 'String', '[', 'ascCols', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ascCols', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', 'ascs', '[', 'i', ']', '=', 'ascCols', '.', 'get', '(', 'i', ')', '.', 'toString', '(', ')', ';']",0
MRCompiler.java,"['/', '/', 'check', 'if', 'user', 'defined', 'comparator', 'is', 'used', 'in', 'the', 'sort', ',', 'if', 'so']",0
MRCompiler.java,"['/', '/', 'prepend', 'the', 'name', 'of', 'the', 'comparator', 'as', 'the', 'first', 'fields', 'in', 'the']",0
MRCompiler.java,"['/', '/', 'constructor', 'args', 'array', 'to', 'the', 'FindQuantiles', 'udf']",0
MRCompiler.java,"['String', '[', ']', 'ctorArgs', '=', 'ascs', ';']",0
MRCompiler.java,"['if', '(', 'sort', '.', 'isUDFComparatorUsed', ')', '{']",0
MRCompiler.java,"['String', 'userComparatorFuncSpec', '=', 'sort', '.', 'getMSortFunc', '(', ')', '.', 'getFuncSpec', '(', ')', '.', 'toString', '(', ')', ';']",0
MRCompiler.java,"['ctorArgs', '=', 'new', 'String', '[', 'ascs', '.', 'length', '+', '1', ']', ';']",0
MRCompiler.java,"['ctorArgs', '[', '0', ']', '=', 'USER_COMPARATOR_MARKER', '+', 'userComparatorFuncSpec', ';']",0
MRCompiler.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'ascs', '.', 'length', ';', 'j', '+', '+', ')', '{']",0
MRCompiler.java,"['ctorArgs', '[', 'j', '+', '1', ']', '=', 'ascs', '[', 'j', ']', ';']",0
MRCompiler.java,"['POUserFunc', 'uf', '=', 'new', 'POUserFunc', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'ufInps', ',']",0
MRCompiler.java,"['new', 'FuncSpec', '(', 'FindQuantiles', '.', 'class', '.', 'getName', '(', ')', ',', 'ctorArgs', ')', ')', ';']",0
MRCompiler.java,"['ep4', '.', 'add', '(', 'uf', ')', ';']",0
MRCompiler.java,"['ep4', '.', 'connect', '(', 'prjStar4', ',', 'uf', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'ep4s', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
MRCompiler.java,"['ep4s', '.', 'add', '(', 'ep4', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flattened3', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
MRCompiler.java,"['flattened3', '.', 'add', '(', 'false', ')', ';']",0
MRCompiler.java,"['POForEach', 'nfe3', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', '-', '1', ',', 'ep4s', ',', 'flattened3', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'nfe3', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'connect', '(', 'nfe2', ',', 'nfe3', ')', ';']",0
MRCompiler.java,"['POStore', 'str', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['str', '.', 'setSFile', '(', 'quantFile', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'add', '(', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'reducePlan', '.', 'connect', '(', 'nfe3', ',', 'str', ')', ';']",0
MRCompiler.java,"['mro', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['mro', '.', 'requestedParallelism', '=', '1', ';']",0
MRCompiler.java,"['return', 'new', 'Pair', '<', 'MapReduceOper', ',', 'Integer', '>', '(', 'mro', ',', 'parallelismForSort', ')', ';']",0
MRCompiler.java,"['static', 'class', 'LastInputStreamingOptimizer', 'extends', 'MROpPlanVisitor', '{']",0
MRCompiler.java,"['Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'this', '.', 'getClass', '(', ')', ')', ';']",0
MRCompiler.java,"['String', 'chunkSize', ';']",0
MRCompiler.java,"['LastInputStreamingOptimizer', '(', 'MROperPlan', 'plan', ',', 'String', 'chunkSize', ')', '{']",0
MRCompiler.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'MapReduceOper', ',', 'MROperPlan', '>', '(', 'plan', ')', ')', ';']",0
MRCompiler.java,"['this', '.', 'chunkSize', '=', 'chunkSize', ';']",0
MRCompiler.java,"['/', '*', '*', 'indTupIter']",0
MRCompiler.java,"['public', 'void', 'visitMROp', '(', 'MapReduceOper', 'mr', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['/', '/', 'Only', 'optimize', ':']",0
MRCompiler.java,"['/', '/', '1', '.', 'POPackage', '-', '>', 'POForEach', 'is', 'the', 'root', 'of', 'reduce', 'plan']",0
MRCompiler.java,"['/', '/', '2', '.', 'POUnion', 'is', 'the', 'leaf', 'of', 'map', 'plan', '(', 'so', 'that', 'we', 'exclude', 'distinct', ',', 'sort', '.', '.', '.', ')']",0
MRCompiler.java,"['/', '/', '3', '.', 'No', 'combiner', 'plan']",0
MRCompiler.java,"['/', '/', '4', '.', 'POForEach', 'nested', 'plan', 'only', 'contains', 'POProject', 'in', 'any', 'depth']",0
MRCompiler.java,"['/', '/', '5', '.', 'Inside', 'POForEach', ',', 'all', 'occurrences', 'of', 'the', 'last', 'input', 'are', 'flattened']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'mapPlan', '.', 'isEmpty', '(', ')', ')', 'return', ';']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')', 'return', ';']",0
MRCompiler.java,"['/', '/', 'Check', 'combiner', 'plan']",0
MRCompiler.java,"['if', '(', '!', 'mr', '.', 'combinePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
MRCompiler.java,"['/', '/', 'Check', 'map', 'plan']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'mpLeaves', '=', 'mr', '.', 'mapPlan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'mpLeaves', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['PhysicalOperator', 'op', '=', 'mpLeaves', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'op', 'instanceof', 'POUnion', ')', ')', '{']",0
MRCompiler.java,"['/', '/', 'Check', 'reduce', 'plan']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'mrRoots', '=', 'mr', '.', 'reducePlan', '.', 'getRoots', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'mrRoots', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['op', '=', 'mrRoots', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'op', 'instanceof', 'POPackage', ')', ')', '{']",0
MRCompiler.java,"['POPackage', 'pack', '=', '(', 'POPackage', ')', 'op', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'sucs', '=', 'mr', '.', 'reducePlan', '.', 'getSuccessors', '(', 'pack', ')', ';']",0
MRCompiler.java,"['if', '(', 'sucs', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['op', '=', 'sucs', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['boolean', 'lastInputFlattened', '=', 'true', ';']",0
MRCompiler.java,"['boolean', 'allSimple', '=', 'true', ';']",0
MRCompiler.java,"['if', '(', 'op', 'instanceof', 'POForEach', ')']",0
MRCompiler.java,"['POForEach', 'forEach', '=', '(', 'POForEach', ')', 'op', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalPlan', '>', 'planList', '=', 'forEach', '.', 'getInputPlans', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'Boolean', '>', 'flatten', '=', 'forEach', '.', 'getToBeFlattened', '(', ')', ';']",0
MRCompiler.java,"['POProject', 'projOfLastInput', '=', 'null', ';']",0
MRCompiler.java,"['int', 'i', '=', '0', ';']",0
MRCompiler.java,"['/', '/', 'check', 'all', 'nested', 'foreach', 'plans']",0
MRCompiler.java,"['/', '/', '1', '.', 'If', 'it', 'is', 'simple', 'projection']",0
MRCompiler.java,"['/', '/', '2', '.', 'If', 'last', 'input', 'is', 'all', 'flattened']",0
MRCompiler.java,"['for', '(', 'PhysicalPlan', 'p', ':', 'planList', ')']",0
MRCompiler.java,"['PhysicalOperator', 'opProj', '=', 'p', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'opProj', 'instanceof', 'POProject', ')', ')']",0
MRCompiler.java,"['allSimple', '=', 'false', ';']",0
MRCompiler.java,"['POProject', 'proj', '=', '(', 'POProject', ')', 'opProj', ';']",0
MRCompiler.java,"['/', '/', 'the', 'project', 'should', 'just', 'be', 'for', 'one', 'column']",0
MRCompiler.java,"['/', '/', 'from', 'the', 'input']",0
MRCompiler.java,"['if', '(', 'proj', '.', 'getColumns', '(', ')', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['allSimple', '=', 'false', ';']",0
MRCompiler.java,"['/', '/', 'if', 'input', 'to', 'project', 'is', 'the', 'last', 'input']",0
MRCompiler.java,"['if', '(', 'proj', '.', 'getColumn', '(', ')', '=', '=', 'pack', '.', 'getNumInps', '(', ')', ')']",0
MRCompiler.java,"['/', '/', 'if', 'we', 'had', 'already', 'seen', 'another', 'project']",0
MRCompiler.java,"['/', '/', 'which', 'was', 'also', 'for', 'the', 'last', 'input', ',', 'then']",0
MRCompiler.java,"['/', '/', 'we', 'might', 'be', 'trying', 'to', 'flatten', 'twice', 'on', 'the']",0
MRCompiler.java,"['/', '/', 'last', 'input', 'in', 'which', 'case', 'we', 'can', ""'"", 't', 'optimize', 'by']",0
MRCompiler.java,"['/', '/', 'just', 'streaming', 'the', 'tuple', 'to', 'those', 'projects']",0
MRCompiler.java,"['/', '/', 'IMPORTANT', 'NOTE', ':', 'THIS', 'WILL', 'NEED', 'TO', 'CHANGE', 'WHEN', 'WE']",0
MRCompiler.java,"['/', '/', 'OPTIMIZE', 'BUILTINS', 'LIKE', 'SUM', '(', ')', 'AND', 'COUNT', '(', ')', 'TO']",0
MRCompiler.java,"['/', '/', 'TAKE', 'IN', 'STREAMING', 'INPUT']",0
MRCompiler.java,"['if', '(', 'projOfLastInput', '!', '=', 'null', ')', '{']",0
MRCompiler.java,"['allSimple', '=', 'false', ';']",0
MRCompiler.java,"['projOfLastInput', '=', 'proj', ';']",0
MRCompiler.java,"['/', '/', 'make', 'sure', 'the', 'project', 'is', 'on', 'a', 'bag', 'which', 'needs', 'to', 'be']",0
MRCompiler.java,"['/', '/', 'flattened']",0
MRCompiler.java,"['if', '(', '!', 'flatten', '.', 'get', '(', 'i', ')', '|', '|', 'proj', '.', 'getResultType', '(', ')', '!', '=', 'DataType', '.', 'BAG', ')']",0
MRCompiler.java,"['lastInputFlattened', '=', 'false', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2069', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'during', 'map', 'reduce', 'compilation', '.', 'Problem', 'in', 'accessing', 'column', 'from', 'project', 'operator', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['/', '/', 'if', 'all', 'deeper', 'operators', 'are', 'all', 'project']",0
MRCompiler.java,"['PhysicalOperator', 'succ', '=', 'p', '.', 'getSuccessors', '(', 'proj', ')', '!', '=', 'null', '?', 'p', '.', 'getSuccessors', '(', 'proj', ')', '.', 'get', '(', '0', ')', ':', 'null', ';']",0
MRCompiler.java,"['while', '(', 'succ', '!', '=', 'null', ')']",0
MRCompiler.java,"['if', '(', '!', '(', 'succ', 'instanceof', 'POProject', ')', ')']",0
MRCompiler.java,"['allSimple', '=', 'false', ';']",0
MRCompiler.java,"['/', '/', 'make', 'sure', 'successors', 'of', 'the', 'last', 'project', 'also', 'project', 'bags']",0
MRCompiler.java,"['/', '/', 'we', 'will', 'be', 'changing', 'it', 'to', 'project', 'tuples']",0
MRCompiler.java,"['if', '(', 'proj', '=', '=', 'projOfLastInput', '&', '&', '(', '(', 'POProject', ')', 'succ', ')', '.', 'getResultType', '(', ')', '!', '=', 'DataType', '.', 'BAG', ')', '{']",0
MRCompiler.java,"['allSimple', '=', 'false', ';']",0
MRCompiler.java,"['succ', '=', 'p', '.', 'getSuccessors', '(', 'succ', ')', '!', '=', 'null', '?', 'p', '.', 'getSuccessors', '(', 'succ', ')', '.', 'get', '(', '0', ')', ':', 'null', ';']",0
MRCompiler.java,"['i', '+', '+', ';']",0
MRCompiler.java,"['if', '(', 'allSimple', '=', '=', 'false', ')']",0
MRCompiler.java,"['if', '(', 'lastInputFlattened', '&', '&', 'allSimple', '&', '&', 'projOfLastInput', '!', '=', 'null', ')']",0
MRCompiler.java,"['/', '/', 'Now', 'we', 'can', 'optimize', 'the', 'map', '-', 'reduce', 'plan']",0
MRCompiler.java,"['/', '/', 'Replace', 'POPackage', '-', '>', 'POForeach', 'to', 'POJoinPackage']",0
MRCompiler.java,"['replaceWithPOJoinPackage', '(', 'mr', '.', 'reducePlan', ',', 'pack', ',', 'forEach', ',', 'chunkSize', ')', ';']",0
MRCompiler.java,"['public', 'static', 'void', 'replaceWithPOJoinPackage', '(', 'PhysicalPlan', 'plan', ',']",0
MRCompiler.java,"['POPackage', 'pack', ',', 'POForEach', 'forEach', ',', 'String', 'chunkSize', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['String', 'scope', '=', 'pack', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
MRCompiler.java,"['NodeIdGenerator', 'nig', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
MRCompiler.java,"['POJoinPackage', 'joinPackage', ';']",0
MRCompiler.java,"['joinPackage', '=', 'new', 'POJoinPackage', '(']",0
MRCompiler.java,"['new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',']",0
MRCompiler.java,"['-', '1', ',', 'pack', ',', 'forEach', ')', ';']",0
MRCompiler.java,"['joinPackage', '.', 'setChunkSize', '(', 'Long', '.', 'parseLong', '(', 'chunkSize', ')', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'succs', '=', 'plan', '.', 'getSuccessors', '(', 'forEach', ')', ';']",0
MRCompiler.java,"['if', '(', 'succs', '!', '=', 'null', ')']",0
MRCompiler.java,"['if', '(', 'succs', '.', 'size', '(', ')', '!', '=', '1', ')']",0
MRCompiler.java,"['int', 'errCode', '=', '2028', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'ForEach', 'can', 'only', 'have', 'one', 'successor', '.', 'Found', '""', '+', 'succs', '.', 'size', '(', ')', '+', '""', 'successors', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['plan', '.', 'remove', '(', 'pack', ')', ';']",0
MRCompiler.java,"['plan', '.', 'replace', '(', 'forEach', ',', 'joinPackage', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2029', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Error', 'rewriting', 'POJoinPackage', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
MRCompiler.java,"['getLog', '(', 'LastInputStreamingOptimizer', '.', 'class', ')', '.', 'info', '(', '""', 'Rewrite', ':', 'POPackage', '-', '>', 'POForEach', 'to', 'POJoinPackage', '""', ')', ';']",0
MRCompiler.java,"['private', 'class', 'RearrangeAdjuster', 'extends', 'MROpPlanVisitor', '{']",0
MRCompiler.java,"['RearrangeAdjuster', '(', 'MROperPlan', 'plan', ')', '{']",0
MRCompiler.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'MapReduceOper', ',', 'MROperPlan', '>', '(', 'plan', ')', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitMROp', '(', 'MapReduceOper', 'mr', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['/', '/', 'Look', 'for', 'map', 'reduce', 'operators', 'whose', 'reduce', 'starts', 'in', 'a', 'local']",0
MRCompiler.java,"['/', '/', 'rearrange', '.', 'If', 'it', 'has', 'a', 'successor', 'and', 'that', 'predecessor', ""'"", 's', 'map']",0
MRCompiler.java,"['/', '/', 'plan', 'is', 'just', 'a', 'load', ',', 'push', 'the', 'porearrange', 'to', 'the', 'successor', '.']",0
MRCompiler.java,"['/', '/', 'Else', ',', 'throw', 'an', 'error', '.']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')', 'return', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'mpLeaves', '=', 'mr', '.', 'reducePlan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'mpLeaves', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2024', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'reduce', 'to', 'have', 'single', 'leaf', '.', 'Found', '""', '+', 'mpLeaves', '.', 'size', '(', ')', '+', '""', 'leaves', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['PhysicalOperator', 'mpLeaf', '=', 'mpLeaves', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'mpLeaf', 'instanceof', 'POStore', ')', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2025', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'leaf', 'of', 'reduce', 'plan', 'to', '""', '+']",0
MRCompiler.java,"['""', 'always', 'be', 'POStore', '.', 'Found', '""', '+', 'mpLeaf', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'preds', '=']",0
MRCompiler.java,"['mr', '.', 'reducePlan', '.', 'getPredecessors', '(', 'mpLeaf', ')', ';']",0
MRCompiler.java,"['if', '(', 'preds', '=', '=', 'null', ')', 'return', ';']",0
MRCompiler.java,"['if', '(', 'preds', '.', 'size', '(', ')', '>', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2030', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'reduce', 'plan', 'leaf', 'to', 'have', 'a', 'single', 'predecessor', '.', 'Found', '""', '+', 'preds', '.', 'size', '(', ')', '+', '""', 'predecessors', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['PhysicalOperator', 'pred', '=', 'preds', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'pred', 'instanceof', 'POLocalRearrange', ')', ')', 'return', ';']",0
MRCompiler.java,"['/', '/', 'Next', 'question', ',', 'does', 'the', 'next', 'MROper', 'have', 'an', 'empty', 'map', '?']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'succs', '=', 'mPlan', '.', 'getSuccessors', '(', 'mr', ')', ';']",0
MRCompiler.java,"['if', '(', 'succs', '=', '=', 'null', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2031', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Found', 'map', 'reduce', 'operator', 'with', 'POLocalRearrange', 'as', '""']",0
MRCompiler.java,"['+', '""', 'last', 'oper', 'but', 'with', 'no', 'succesor', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['if', '(', 'succs', '.', 'size', '(', ')', '>', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2032', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'map', 'reduce', 'operator', 'to', 'have', 'a', 'single', 'successor', '.', 'Found', '""', '+', 'succs', '.', 'size', '(', ')', '+', '""', 'successors', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'succ', '=', 'succs', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'succMpLeaves', '=', 'succ', '.', 'mapPlan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'succMpRoots', '=', 'succ', '.', 'mapPlan', '.', 'getRoots', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'succMpLeaves', '=', '=', 'null', '|', '|', 'succMpLeaves', '.', 'size', '(', ')', '>', '1', '|', '|']",0
MRCompiler.java,"['succMpRoots', '=', '=', 'null', '|', '|', 'succMpRoots', '.', 'size', '(', ')', '>', '1', '|', '|']",0
MRCompiler.java,"['succMpLeaves', '.', 'get', '(', '0', ')', '!', '=', 'succMpRoots', '.', 'get', '(', '0', ')', ')', '{']",0
MRCompiler.java,"['messageCollector', '.', 'collect', '(', '""', 'Expected', 'to', 'find', 'subsequent', 'map', '""', '+']",0
MRCompiler.java,"['""', 'with', 'just', 'a', 'load', ',', 'but', 'didn', ""'"", 't', '""', ',']",0
MRCompiler.java,"['MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'DID_NOT_FIND_LOAD_ONLY_MAP_PLAN', ')', ';']",0
MRCompiler.java,"['PhysicalOperator', 'load', '=', 'succMpRoots', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['mr', '.', 'reducePlan', '.', 'removeAndReconnect', '(', 'pred', ')', ';']",0
MRCompiler.java,"['succ', '.', 'mapPlan', '.', 'add', '(', 'pred', ')', ';']",0
MRCompiler.java,"['succ', '.', 'mapPlan', '.', 'connect', '(', 'load', ',', 'pred', ')', ';']",0
MRCompiler.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2033', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Problems', 'in', 'rearranging', 'map', 'reduce', 'operators', 'in', 'plan', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
MRCompiler.java,"['private', 'class', 'LimitAdjuster', 'extends', 'MROpPlanVisitor', '{']",0
MRCompiler.java,"['ArrayList', '<', 'MapReduceOper', '>', 'opsToAdjust', '=', 'new', 'ArrayList', '<', 'MapReduceOper', '>', '(', ')', ';']",0
MRCompiler.java,"['LimitAdjuster', '(', 'MROperPlan', 'plan', ')', '{']",0
MRCompiler.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'MapReduceOper', ',', 'MROperPlan', '>', '(', 'plan', ')', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitMROp', '(', 'MapReduceOper', 'mr', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['/', '/', 'Look', 'for', 'map', 'reduce', 'operators', 'which', 'contains', 'limit', 'operator', '.']",0
MRCompiler.java,"['/', '/', 'If', 'so', 'and', 'the', 'requestedParallelism', '>', '1', ',', 'add', 'one', 'additional', 'map', '-', 'reduce']",0
MRCompiler.java,"['/', '/', 'operator', 'with', '1', 'reducer', 'into', 'the', 'original', 'plan']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'limit', '!', '=', '-', '1', '&', '&', 'mr', '.', 'requestedParallelism', '!', '=', '1', ')']",0
MRCompiler.java,"['opsToAdjust', '.', 'add', '(', 'mr', ')', ';']",0
MRCompiler.java,"['public', 'void', 'adjust', '(', ')', 'throws', 'IOException', ',', 'PlanException']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'mr', ':', 'opsToAdjust', ')']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')', 'return', ';']",0
MRCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'mpLeaves', '=', 'mr', '.', 'reducePlan', '.', 'getLeaves', '(', ')', ';']",0
MRCompiler.java,"['if', '(', 'mpLeaves', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2024', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'reduce', 'to', 'have', 'single', 'leaf', '.', 'Found', '""', '+', 'mpLeaves', '.', 'size', '(', ')', '+', '""', 'leaves', '.', '""', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['PhysicalOperator', 'mpLeaf', '=', 'mpLeaves', '.', 'get', '(', '0', ')', ';']",0
MRCompiler.java,"['if', '(', '!', '(', 'mpLeaf', 'instanceof', 'POStore', ')', ')', '{']",0
MRCompiler.java,"['int', 'errCode', '=', '2025', ';']",0
MRCompiler.java,"['String', 'msg', '=', '""', 'Expected', 'leaf', 'of', 'reduce', 'plan', 'to', '""', '+']",0
MRCompiler.java,"['""', 'always', 'be', 'POStore', '.', 'Found', '""', '+', 'mpLeaf', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
MRCompiler.java,"['throw', 'new', 'MRCompilerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
MRCompiler.java,"['FileSpec', 'oldSpec', '=', '(', '(', 'POStore', ')', 'mpLeaf', ')', '.', 'getSFile', '(', ')', ';']",0
MRCompiler.java,"['FileSpec', 'fSpec', '=', 'getTempFileSpec', '(', ')', ';']",0
MRCompiler.java,"['(', '(', 'POStore', ')', 'mpLeaf', ')', '.', 'setSFile', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['mr', '.', 'setReduceDone', '(', 'true', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'limitAdjustMROp', '=', 'getMROp', '(', ')', ';']",0
MRCompiler.java,"['POLoad', 'ld', '=', 'getLoad', '(', ')', ';']",0
MRCompiler.java,"['ld', '.', 'setLFile', '(', 'fSpec', ')', ';']",0
MRCompiler.java,"['limitAdjustMROp', '.', 'mapPlan', '.', 'add', '(', 'ld', ')', ';']",0
MRCompiler.java,"['POLimit', 'pLimit', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pLimit', '.', 'setLimit', '(', 'mr', '.', 'limit', ')', ';']",0
MRCompiler.java,"['limitAdjustMROp', '.', 'mapPlan', '.', 'addAsLeaf', '(', 'pLimit', ')', ';']",0
MRCompiler.java,"['simpleConnectMapToReduce', '(', 'limitAdjustMROp', ')', ';']",0
MRCompiler.java,"['POLimit', 'pLimit2', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nig', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
MRCompiler.java,"['pLimit2', '.', 'setLimit', '(', 'mr', '.', 'limit', ')', ';']",0
MRCompiler.java,"['limitAdjustMROp', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'pLimit2', ')', ';']",0
MRCompiler.java,"['POStore', 'st', '=', 'getStore', '(', ')', ';']",0
MRCompiler.java,"['st', '.', 'setSFile', '(', 'oldSpec', ')', ';']",0
MRCompiler.java,"['limitAdjustMROp', '.', 'reducePlan', '.', 'addAsLeaf', '(', 'st', ')', ';']",0
MRCompiler.java,"['limitAdjustMROp', '.', 'requestedParallelism', '=', '1', ';']",0
MRCompiler.java,"['/', '/', 'If', 'the', 'operator', 'we', ""'"", 're', 'following', 'has', 'global', 'sort', 'set', ',', 'we']",0
MRCompiler.java,"['/', '/', 'need', 'to', 'indicate', 'that', 'this', 'is', 'a', 'limit', 'after', 'a', 'sort', '.']",0
MRCompiler.java,"['/', '/', 'This', 'will', 'assure', 'that', 'we', 'get', 'the', 'right', 'sort', 'comparator']",0
MRCompiler.java,"['/', '/', 'set', '.', 'Otherwise', 'our', 'order', 'gets', 'wacked', '(', 'PIG', '-', '461', ')', '.']",0
MRCompiler.java,"['if', '(', 'mr', '.', 'isGlobalSort', '(', ')', ')', 'limitAdjustMROp', '.', 'setLimitAfterSort', '(', 'true', ')', ';']",0
MRCompiler.java,"['List', '<', 'MapReduceOper', '>', 'successorList', '=', 'MRPlan', '.', 'getSuccessors', '(', 'mr', ')', ';']",0
MRCompiler.java,"['MapReduceOper', 'successors', '[', ']', '=', 'null', ';']",0
MRCompiler.java,"['/', '/', 'Save', 'a', 'snapshot', 'for', 'successors', ',', 'since', 'we', 'will', 'modify', 'MRPlan', ',']",0
MRCompiler.java,"['/', '/', 'use', 'the', 'list', 'directly', 'will', 'be', 'problematic']",0
MRCompiler.java,"['if', '(', 'successorList', '!', '=', 'null', '&', '&', 'successorList', '.', 'size', '(', ')', '>', '0', ')']",0
MRCompiler.java,"['successors', '=', 'new', 'MapReduceOper', '[', 'successorList', '.', 'size', '(', ')', ']', ';']",0
MRCompiler.java,"['int', 'i', '=', '0', ';']",0
MRCompiler.java,"['for', '(', 'MapReduceOper', 'op', ':', 'successorList', ')']",0
MRCompiler.java,"['successors', '[', 'i', '+', '+', ']', '=', 'op', ';']",0
MRCompiler.java,"['MRPlan', '.', 'add', '(', 'limitAdjustMROp', ')', ';']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'mr', ',', 'limitAdjustMROp', ')', ';']",0
MRCompiler.java,"['if', '(', 'successors', '!', '=', 'null', ')']",0
MRCompiler.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'successors', '.', 'length', ';', 'i', '+', '+', ')']",0
MRCompiler.java,"['MapReduceOper', 'nextMr', '=', 'successors', '[', 'i', ']', ';']",0
MRCompiler.java,"['if', '(', 'nextMr', '!', '=', 'null', ')']",0
MRCompiler.java,"['MRPlan', '.', 'disconnect', '(', 'mr', ',', 'nextMr', ')', ';']",0
MRCompiler.java,"['if', '(', 'nextMr', '!', '=', 'null', ')']",0
MRCompiler.java,"['MRPlan', '.', 'connect', '(', 'limitAdjustMROp', ',', 'nextMr', ')', ';']",0
MRCompiler.java,"['private', 'class', 'FindKeyTypeVisitor', 'extends', 'PhyPlanVisitor', '{']",0
MRCompiler.java,"['byte', 'keyType', '=', 'DataType', '.', 'UNKNOWN', ';']",0
MRCompiler.java,"['FindKeyTypeVisitor', '(', 'PhysicalPlan', 'plan', ')', '{']",0
MRCompiler.java,"['super', '(', 'plan', ',']",0
MRCompiler.java,"['new', 'DepthFirstWalker', '<', 'PhysicalOperator', ',', 'PhysicalPlan', '>', '(', 'plan', ')', ')', ';']",0
MRCompiler.java,"['public', 'void', 'visitProject', '(', 'POProject', 'p', ')', 'throws', 'VisitorException', '{']",0
MRCompiler.java,"['keyType', '=', 'p', '.', 'getResultType', '(', ')', ';']",0
LOAnd.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOAnd.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOAnd.java,"['public', 'class', 'LOAnd', 'extends', 'BinaryExpressionOperator', '{']",0
LOAnd.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOAnd.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOAnd', '.', 'class', ')', ';']",0
LOAnd.java,"['/', '*', '*']",1
LOAnd.java,"['public', 'LOAnd', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOAnd.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOAnd.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOAnd.java,"['return', 'mSchema', ';']",0
LOAnd.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOAnd.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOAnd.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOAnd.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOAnd.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOAnd.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOAnd.java,"['return', 'mFieldSchema', ';']",0
LOAnd.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOAnd.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOAnd.java,"['public', 'String', 'name', '(', ')', '{']",0
LOAnd.java,"['return', '""', 'And', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
DotLOPrinter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DotLOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
DotLOPrinter.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
DotLOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DotPlanDumper', ';']",0
DotLOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
DotLOPrinter.java,"['/', '*', '*']",0
DotLOPrinter.java,"['public', 'class', 'DotLOPrinter', 'extends', 'DotPlanDumper', '<', 'LogicalOperator', ',', 'LogicalPlan', ',']",0
DotLOPrinter.java,"['LogicalOperator', ',', 'LogicalPlan', '>', '{']",0
DotLOPrinter.java,"['public', 'DotLOPrinter', '(', 'LogicalPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotLOPrinter.java,"['this', '(', 'plan', ',', 'ps', ',', 'false', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',']",0
DotLOPrinter.java,"['new', 'HashSet', '<', 'Operator', '>', '(', ')', ')', ';']",0
DotLOPrinter.java,"['private', 'DotLOPrinter', '(', 'LogicalPlan', 'plan', ',', 'PrintStream', 'ps', ',', 'boolean', 'isSubGraph', ',']",0
DotLOPrinter.java,"['Set', '<', 'Operator', '>', 'subgraphs', ',']",0
DotLOPrinter.java,"['Set', '<', 'Operator', '>', 'multiInSubgraphs', ',']",0
DotLOPrinter.java,"['Set', '<', 'Operator', '>', 'multiOutSubgraphs', ')', '{']",0
DotLOPrinter.java,"['super', '(', 'plan', ',', 'ps', ',', 'isSubGraph', ',', 'subgraphs', ',']",0
DotLOPrinter.java,"['multiInSubgraphs', ',', 'multiOutSubgraphs', ')', ';']",0
DotLOPrinter.java,"['protected', 'DotPlanDumper', 'makeDumper', '(', 'LogicalPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotLOPrinter.java,"['return', 'new', 'DotLOPrinter', '(', 'plan', ',', 'ps', ',', 'true', ',', 'mSubgraphs', ',']",0
DotLOPrinter.java,"['mMultiOutputSubgraphs', ')', ';']",0
DotLOPrinter.java,"['protected', 'String', 'getName', '(', 'LogicalOperator', 'op', ')', '{']",0
DotLOPrinter.java,"['String', 'info', '=', '(', 'op', '.', 'name', '(', ')', '.', 'split', '(', '""', '\\', '\\', 'd', '+', '-', '\\', '\\', 'd', '+', '""', ')', ')', '[', '0', ']', ';']",0
DotLOPrinter.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
DotLOPrinter.java,"['LOProject', 'pr', '=', '(', 'LOProject', ')', 'op', ';']",0
DotLOPrinter.java,"['info', '+', '=', 'pr', '.', 'isStar', '(', ')', '?', '""', '[', '*', ']', '""', ':', 'pr', '.', 'getProjection', '(', ')', ';']",0
DotLOPrinter.java,"['return', 'info', ';']",0
DotLOPrinter.java,"['protected', 'String', '[', ']', 'getAttributes', '(', 'LogicalOperator', 'op', ')', '{']",0
DotLOPrinter.java,"['if', '(', 'op', 'instanceof', 'LOStore', '|', '|', 'op', 'instanceof', 'LOLoad', ')', '{']",0
DotLOPrinter.java,"['String', '[', ']', 'attributes', '=', 'new', 'String', '[', '3', ']', ';']",0
DotLOPrinter.java,"['attributes', '[', '0', ']', '=', '""', 'label', '=', '\\', '""', '""', '+', 'getName', '(', 'op', ')', '.', 'replace', '(', '""', ':', '""', ',', '""', ',', '\\', '\\', 'n', '""', ')', '+', '""', '\\', '""', '""', ';']",0
DotLOPrinter.java,"['attributes', '[', '1', ']', '=', '""', 'style', '=', '\\', '""', 'filled', '\\', '""', '""', ';']",0
DotLOPrinter.java,"['attributes', '[', '2', ']', '=', '""', 'fillcolor', '=', '\\', '""', 'gray', '\\', '""', '""', ';']",0
DotLOPrinter.java,"['return', 'attributes', ';']",0
DotLOPrinter.java,"['return', 'super', '.', 'getAttributes', '(', 'op', ')', ';']",0
DotLOPrinter.java,"['protected', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>']",0
DotLOPrinter.java,"['getMultiInputNestedPlans', '(', 'LogicalOperator', 'op', ')', '{']",0
DotLOPrinter.java,"['if', '(', 'op', 'instanceof', 'LOCogroup', ')', '{']",0
DotLOPrinter.java,"['return', '(', '(', 'LOCogroup', ')', 'op', ')', '.', 'getGroupByPlans', '(', ')', ';']",0
DotLOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'LOFRJoin', ')', '{']",0
DotLOPrinter.java,"['return', '(', '(', 'LOFRJoin', ')', 'op', ')', '.', 'getJoinColPlans', '(', ')', ';']",0
DotLOPrinter.java,"['return', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
DotLOPrinter.java,"['protected', 'Collection', '<', 'LogicalPlan', '>', 'getNestedPlans', '(', 'LogicalOperator', 'op', ')', '{']",0
DotLOPrinter.java,"['Collection', '<', 'LogicalPlan', '>', 'plans', '=', 'new', 'LinkedList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
DotLOPrinter.java,"['if', '(', 'op', 'instanceof', 'LOFilter', ')', '{']",0
DotLOPrinter.java,"['plans', '.', 'add', '(', '(', '(', 'LOFilter', ')', 'op', ')', '.', 'getComparisonPlan', '(', ')', ')', ';']",0
DotLOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'LOForEach', ')', '{']",0
DotLOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'LOForEach', ')', 'op', ')', '.', 'getForEachPlans', '(', ')', ')', ';']",0
DotLOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'LOGenerate', ')', '{']",0
DotLOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'LOGenerate', ')', 'op', ')', '.', 'getGeneratePlans', '(', ')', ')', ';']",0
DotLOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'LOSort', ')', '{']",0
DotLOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'LOSort', ')', 'op', ')', '.', 'getSortColPlans', '(', ')', ')', ';']",0
DotLOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'LOSplitOutput', ')', '{']",0
DotLOPrinter.java,"['plans', '.', 'add', '(', '(', '(', 'LOSplitOutput', ')', 'op', ')', '.', 'getConditionPlan', '(', ')', ')', ';']",0
DotLOPrinter.java,"['return', 'plans', ';']",0
TestLogicalPlanBuilder.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestLogicalPlanBuilder.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
TestLogicalPlanBuilder.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'GFAny', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'Identity', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestLogicalPlanBuilder.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestLogicalPlanBuilder.java,"['public', 'class', 'TestLogicalPlanBuilder', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestLogicalPlanBuilder.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', '$', '2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", ':', ""'"", ')', ')', 'generate', '$', '1', ',', ""'"", 'aoeuaoeu', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query3', 'and', 'Query4']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '1', ')', 'generate', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'AVG', '(', '$', '1', ',', '$', '2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery6', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'group', ',', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery7', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery10', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '1', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '(', '$', '1', ')', ')', 'generate', '$', '1', '.', '$', '1', ',', '$', '2', '.', '$', '1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query11', 'and', 'Query12']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery11', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '2', ')', 'generate', 'group', ',', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery12', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', ')', 'generate', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery13', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery14', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '6', ',', '$', '7', ')', ')', 'generate', 'flatten', '(', 'group', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery15', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', ""'"", 'hello', ""'"", ',', '$', '3', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery100', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'define', 'syntax']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'buildPlan', '(', 'query', ')', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'lo', 'instanceof', 'LODefine', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'A', '=', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'A', '.', ""'"", '1', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', 'generate', '$', '1', '.', '*', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail3', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', 'DISTINCT', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail4', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '[', 'ORDER', 'BY', '$', '0', ']', '[', '$', '3', ',', '$', '4', ']', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail5', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '*', ')', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query17']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery17', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'A', ""'"", ')', '""', '+', '""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['static', 'public', 'class', 'TestApplyFunc', 'extends', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['Tuple', 'output', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', 'input', '.', 'getAll', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'output', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '*']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery18', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'FOREACH', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', 'PARALLEL', '16', ')', 'generate', 'group', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'root', '=', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'listOp', '=', 'lp', '.', 'getSuccessors', '(', 'root', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'listOp', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'lo', 'instanceof', 'LOCogroup', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOCogroup', ')', 'lo', ')', '.', 'getRequestedParallelism', '(', ')', '=', '=', '16', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'else', '{']",0
TestLogicalPlanBuilder.java,"['}', 'else', '{']",0
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'Error', ':', 'Unexpected', 'Parse', 'Tree', 'output', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery19', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery20', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '=', '=', ""'"", '3', ""'"", '?', '$', '2', ':', '$', '3', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery21', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ')', 'generate', 'A', ',', 'flatten', '(', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'order', 'B', 'by', '$', '0', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'FLATTEN', '(', 'A', ')', ',', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery22Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'Distinct', 'A', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', 'A', 'BY', '$', '1', '<', ""'"", 'z', ""'"", ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'A', 'sequence', 'of', 'filters', 'within', 'a', 'foreach', 'translates', 'to']",0
TestLogicalPlanBuilder.java,"['/', '/', 'a', 'split', 'statement', '.', 'Currently', 'it', 'breaks', 'as', 'adding', 'an']",0
TestLogicalPlanBuilder.java,"['/', '/', 'additional', 'output', 'to', 'the', 'filter', 'fails', 'as', 'filter', 'supports']",0
TestLogicalPlanBuilder.java,"['/', '/', 'single', 'output']",0
TestLogicalPlanBuilder.java,"['""', 'C', '=', 'FILTER', 'A', 'BY', '$', '2', '=', '=', '$', '3', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'ARRANGE', 'B', 'BY', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'GENERATE', 'A', ',', 'FLATTEN', '(', 'B', '.', '$', '0', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery23Fail', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'group', 'A', 'by', '(', '*', ',', '$', '0', ')', ',', 'B', 'by', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery24', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'a', 'generate', '(', '(', '$', '0', '=', '=', '$', '1', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', '$', '4', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery25', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'B', '=', 'FILTER', '$', '0', 'BY', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'AND', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', 'B', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery26', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '(', 'NOT', '(', '(', '$', '1', '=', '=', '$', '2', ')', 'OR', '(', ""'"", 'a', ""'"", '<', ""'"", 'b', ""'"", ')', ')', ')', '?', ""'"", 'a', ""'"", ':', '$', '2', ')', ',', ""'"", 'x', ""'"", ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query27', 'and', 'Query28']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery27', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', '{', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'A', '=', 'DISTINCT', '$', '3', '.', '$', '1', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '$', '1', '.', '(', '$', '1', ',', '$', '4', ')', ')', ';', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery28', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', ',', '""', '+', 'TestApplyFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '2', '.', '$', '3', ')', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery29', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery30', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'using', '""', '+', 'TestStorageFunc', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'static', 'class', 'TestStorageFunc', 'implements', 'LoadFunc', '{']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'is', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
TestLogicalPlanBuilder.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Boolean', 'bytesToBoolean', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestLogicalPlanBuilder.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
TestLogicalPlanBuilder.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery31', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery32', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'tuple', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', 'tuple', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery33', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'C', 'generate', 'group', ',', 'A', '.', 'aCol1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', ':', 'Nested', 'schemas', 'don', ""'"", 't', 'work', 'now', '.', 'Probably', 'a', 'bug', 'in', 'the', 'new', 'parser', '.']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery34', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'aCol1', ',', 'aCol2', ':', 'tuple', '(', 'subCol1', ',', 'subCol2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'filter', 'A', 'by', 'aCol2', '=', '=', ""'"", '1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'bCol1', ',', 'bCol2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', 'aCol1', ')', ',', 'B', 'by', 'bCol1', ')', 'generate', 'A', '.', 'aCol2', ',', 'B', '.', 'bCol2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery35', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'generate', 'col1', ',', 'col2', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery36', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'col1', ',', 'col2', ')', ')', 'by', 'col1', ')', 'generate', '$', '1', '.', '(', 'col2', ',', 'col1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail37', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', 'asdasdas', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery38', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO', 'FIX', 'Query39', 'and', 'Query40']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail39', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'url', ',', 'host', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', '.', 'url', ')', ',', 'SUM', '(', 'a', '.', 'rank', ')', 'as', 'totalRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'totalRank', '>', ""'"", '10', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'url', ';', '""', ')', ';', '/', '/', 'url', 'has', 'been', 'falttened', 'and', 'hence', 'the', 'failure']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery40', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', 'IsEmpty', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'FILTER', '(', 'load', ""'"", 'a', ""'"", ')', 'BY', '(', 'IsEmpty', '(', '$', '2', ')', 'AND', '(', '$', '3', '=', '=', '$', '2', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail41', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'a', 'as', '(', 'host', ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Currently', 'PIG', 'does', 'not', 'support', 'assigning', 'an', 'existing', 'relation', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'following', 'statement', 'was', 'earlier', 'present']",0
TestLogicalPlanBuilder.java,"['/', '/', 'eventually', 'when', 'we', 'do', 'allow', 'assignments', 'of', 'the', 'form']",0
TestLogicalPlanBuilder.java,"['/', '/', 'above', ',', 'we', 'should', 'test', 'with', 'the', 'line', 'below']",0
TestLogicalPlanBuilder.java,"['/', '/', 'uncommented']",0
TestLogicalPlanBuilder.java,"['/', '/', 'buildPlan', '(', '""', 'foreach', 'b', 'generate', 'host', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery42', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', 'as', 'url', ',', '$', '1', 'as', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'b', 'generate', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'url', ',', 'b', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'a', ':', ':', 'url', ',', 'b', ':', ':', 'url', ',', 'b', ':', ':', 'rank', ',', 'rank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail43', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'height', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery44', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'pagerank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'query', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'pagerank', '#', ""'"", 'nonspam', ""'"", ',', 'url', ')', ',', 'b', 'by', '(', 'rank', '/', ""'"", '2', ""'"", ',', 'url', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'foreach', 'c', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'TODO']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Commented', 'out', 'testQueryFail44', 'as', 'I', 'am', 'not', 'able', 'to', 'include', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail44', '(', ')', 'throws', 'Throwable', '{']",0
TestLogicalPlanBuilder.java,"['PigServer', 'pig', '=', 'null', ';']",0
TestLogicalPlanBuilder.java,"['pig', '=', 'new', 'PigServer', '(', '""', 'local', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';', '/', '/', 'pig', 'server', 'failed', 'for', 'some', 'reason']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerFunction', '(', '""', 'myTr', '""', ',']",0
TestLogicalPlanBuilder.java,"['new', 'FuncSpec', '(', 'GFAny', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", 'tr', 'o', '0', ""'"", ')', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['pig', '.', 'registerQuery', '(', '""', 'b', '=', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'myTr', '(', 'myTr', '(', '*', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery45', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'url', ',', 'hitCount', 'from', 'A', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'url', ',', 'hitCount', 'from', 'B', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Select', '+', 'Join']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery46', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Mutliple', 'Joins']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery47', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'load', ""'"", 'c', ""'"", 'as', '(', 'pageRank', ',', 'position', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'hitCount', ',', 'B', '.', 'pageRank', 'from', '(', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', ')', 'join', 'C', 'on', 'B', '.', 'pageRank', '=', '=', 'C', '.', 'pageRank', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery48', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Join', '+', 'Group']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery49', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'pageRank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'B', '.', 'pageRank', ')', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'join', 'B', 'on', 'A', '.', 'url', '=', '=', 'B', '.', 'url', 'group', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery50', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery51', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery52', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery53', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery54', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery55', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'size', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'AVG', '(', 'A', '.', 'hitCount', ')', ',', 'SUM', '(', 'A', '.', 'size', ')', 'from', 'A', 'group', 'by', 'url', 'having', 'AVG', '(', 'A', '.', 'size', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'AVG', '(', 'A', '.', 'hitCount', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Group', '+', 'Having', '+', 'Order', '2']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery56', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ',', 'date', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'C', '=', 'select', 'A', '.', 'url', ',', 'A', '.', 'date', ',', 'SUM', '(', 'A', '.', 'hitCount', ')', 'from', 'A', 'group', 'by', 'url', ',', 'date', 'having', 'AVG', '(', 'A', '.', 'hitCount', ')', '>', ""'"", '6', ""'"", 'order', 'by', 'A', '.', 'date', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery57', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '+', '$', '2', ')', ',', '(', '$', '1', '-', '$', '2', ')', ',', '(', '$', '1', '*', '$', '2', ')', ',', '(', '$', '1', '/', '$', '2', ')', ',', '(', '$', '1', '%', '$', '2', ')', ',', '-', '(', '$', '1', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', 'b', '{', 'd', '=', 'a', '.', 'name', ';', 'generate', 'group', ',', 'd', ';', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail58', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'host', ',', 'rank', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'url', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery59', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'join', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery60', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery61', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'order', 'a', 'by', 'name', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'order', 'a', 'by', '$', '0', 'asc', ',', 'age', ',', 'gpa', 'desc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'order', 'a', 'by', '*', 'asc', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'i', '=', 'foreach', 'h', '{', 'i1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'i1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail62', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'order', 'c', 'by', 'name', ',', 'b', ':', ':', 'name', ',', 'height', ',', 'a', ':', ':', 'gpa', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail63', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', '(', 'sub1', ',', 'sub2', ')', ',', 'col3', ':', '(', 'bag1', ')', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ',', 'mymap', ':', 'map', '[', ']', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'details', ':', 'bag', '{', 'mytuple', ':', 'tuple', '(', 'age', ':', 'int', ',', 'gpa', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'b', 'generate', 'group', '.', 'age', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'LOAD', ""'"", 'myfile', ""'"", 'AS', '(', 'garage', ':', 'bag', '{', 'tuple1', ':', 'tuple', '(', 'num_tools', ':', 'int', ')', '}', ',', 'links', ':', 'bag', '{', 'tuple2', ':', 'tuple', '(', 'websites', ':', 'chararray', ')', '}', ',', 'page', ':', 'bag', '{', 'something_stupid', ':', 'tuple', '(', 'yeah_double', ':', 'double', ')', '}', ',', 'coordinates', ':', 'bag', '{', 'another_tuple', ':', 'tuple', '(', 'ok_float', ':', 'float', ',', 'bite_the_array', ':', 'bytearray', ',', 'bag_of_unknown', ':', 'bag', '{', '}', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail64', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'col1', ',', 'col2', ':', 'bag', '{', 'age', ':', 'int', '}', ')', ')', 'generate', 'col1', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', 'as', 'aName', ',', 'b', '.', 'name', 'as', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail65', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '(', 'name', ',', 'age', ')', ',', 'b', 'by', '(', 'name', ',', 'height', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', '.', 'name', ',', 'a', '.', 'name', ',', 'b', '.', 'height', 'as', 'age', ',', 'a', '.', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '10', ',', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', '12l', ',', ""'"", 'another', 'tuple', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery69', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '(', '1', ')', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery70', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '[', '10L', '#', ""'"", 'hello', ""'"", ',', '4', '.', '0e', '-', '2', '#', '10L', ',', '0', '.', '5f', '#', '(', '1', ')', ',', ""'"", 'world', ""'"", '#', '42', ',', '42', '#', '{', '(', ""'"", 'guide', ""'"", ')', '}', ']', 'as', 'mymap', ':', 'map', '[', ']', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'mymap', '#', '10L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail67', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'age', ',', 'age', '*', '10L', ',', 'gpa', '/', '0', '.', '2f', ',', '{', '16', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail68', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '16', 'L', ',', '4', '.', '0e', '-', '2', ',', ""'"", 'hello', ""'"", ')', ',', '(', '0', '.', '5f', ',', ""'"", 'another', 'tuple', ""'"", ',', '12L', ',', '{', '(', ')', '}', ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery71', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'x', 'generate', '(', 'int', ')', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'y', 'generate', '(', 'int', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'tuple', '(', 'int', ',', 'float', ')', '}', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', 'int', ',', 'float', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'x', 'generate', '(', 'tuple', '(', ')', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'h', '=', 'foreach', 'x', 'generate', '(', 'chararray', ')', '(', '$', '1', '/', '2', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail72', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'bag', '{', 'int', ',', 'float', '}', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '(', 'tuple', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery73', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'matches', ""'"", '^', 'fred', '.', '*', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'y', 'generate', '$', '0', ',', '(', '$', '0', 'matches', ""'"", 'yuri', '.', '*', ""'"", '?', '$', '1', '-', '10', ':', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery74', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '(', '(', 'field1', '+', 'field2', ')', '*', 'field1', ')', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery77', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'limit', '(', 'load', ""'"", 'a', ""'"", ')', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery75', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'union', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ',', '(', 'load', ""'"", 'c', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'generate', '$', '0', ';', '}', 'parallel', '10', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery76', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', '(', 'load', ""'"", 'a', ""'"", ')', 'into', 'x', 'if', '$', '0', '>', ""'"", '7', ""'"", ',', 'y', 'if', '$', '0', '<', ""'"", '7', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'x', 'by', '$', '0', 'IS', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'filter', 'y', 'by', '$', '0', 'IS', 'NOT', 'NULL', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'b', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NULL', '?', '0', ':', '$', '1', '-', '7', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'c', 'generate', '$', '0', ',', '(', '$', '1', 'IS', 'NOT', 'NULL', '?', '$', '1', '-', '5', ':', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery80', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['/', '/', '+', '""', 'generate', 'group', ',', 'flatten', '(', 'cd', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'gte', ""'"", 'f', ""'"", 'and', 'name', 'lte', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail81', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'name', 'lt', ""'"", 'f', ""'"", ',', 'c', 'if', '(', 'name', 'ge', ""'"", 'f', ""'"", 'and', 'name', 'le', ""'"", 'h', ""'"", ')', ',', 'd', 'if', 'name', 'gt', ""'"", 'h', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', '.', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail82', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c1', '=', 'order', '$', '1', 'by', '*', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'c2', '=', '$', '1', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'flatten', '(', 'c1', ')', ',', 'c2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Exception', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery83', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery84', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', ""'"", '20', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', ""'"", '3', '.', '0', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cp', '=', 'cf', '.', '$', '2', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cp', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery85', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '.', 'name', ',', 'group', '.', 'age', ',', 'COUNT', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'foreachExpectedSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreachExpectedSchema', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'foreachExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery86', '(', ')', 'throws', 'FrontendException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'nameFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'ageFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'gpaFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['groupSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'loadSchema', '=', 'new', 'Schema', '(', 'nameFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'ageFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['loadSchema', '.', 'add', '(', 'gpaFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'loadSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'cogroup', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'cogroupExpectedSchema', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery87', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'c1', '=', 'order', '$', '1', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'c1', ')', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'sortInput', '=', '(', 'LOProject', ')', 'nestedPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'nestedSort', '=', '(', 'LOSort', ')', 'nestedPlan', '.', 'getSuccessors', '(', 'sortInput', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'sortPlan', '=', 'nestedSort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sortPlan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery88', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'order', 'b', 'by', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'project1', '=', '(', 'LOProject', ')', 'sort', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', '0', ')', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertEquals', '(', 'project1', '.', 'getExpression', '(', ')', ',', 'cogroup', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', ',', '$', '100', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', 'as', 'zero', ',', 'i', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail89', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', ',', '$', '5', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Out', 'of', 'bound', 'access', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'and', 'second', 'elements', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'and', 'age', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'schema', 'of', 'group', 'is', 'unchanged']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'group', ':', ':', 'name', ':', 'chararray', ',', 'group', ':', ':', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'the', 'first', 'element', 'in', 'group', ',', 'i', '.', 'e', '.', ',', 'name', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', 'myname', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'first', 'element', 'is', 'renamed', 'as', 'myname']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'as', 'mygroup', 'and', 'the', 'elements', 'are', 'renamed', 'as', 'myname', 'and', 'myage']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'myname', ':', 'chararray', ',', 'myage', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'group', 'is', 'renamed', 'to', 'mygroup', 'as', 'the', 'tuple', 'schema', 'is', 'empty']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'mygroup', ':', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ')', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ',', 'y', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'y', ':', 'bytearray', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'y', ':', 'float', ',', 'z', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'bytearray', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'setting', 'the', 'schema', 'of', 'flattened', 'bag', 'that', 'has', 'no', 'schema', 'with', 'the', 'user', 'defined', 'schema']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'load', ""'"", 'another_file', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'c', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'c', ')', ')', 'as', 'x', ':', 'int', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'foreach', '.', 'getSchema', '(', ')', '.', 'equals', '(', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', ',', 'mycount', ':', 'long', '""', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail90', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ':', 'int', ',', 'myage', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '(', 'myname', ',', 'myage', ':', 'chararray', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', 'as', 'mygroup', ':', '{', 't', ':', '(', 'myname', ',', 'myage', ')', '}', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Type', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', 'as', '(', 'myname', ',', 'myage', ',', 'mygpa', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'mycount', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Schema', 'size', 'mismatch', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery91', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ':', 'Chararray', ',', 'age', ':', 'Int', ',', 'gpa', ':', 'Float', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery92', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'c', '=', 'foreach', 'b', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'alias', '=', 'name', '#', ""'"", 'alias', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'af', '=', 'alias', '#', ""'"", 'first', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'al', '=', 'alias', '#', ""'"", 'last', ""'"", ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'SUM', '(', 'a', '.', 'age', ')', '+', 'SUM', '(', 'a', '.', 'gpa', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'not', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail93', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'name', '""', 'field', 'and', 'a', ':', ':', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'b', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'a', ':', ':', 'name', ',', 'b', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', 'gpa', 'and', 'somethingelse']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'gpa', ',', 'somethingelse', ',', 'a', ':', ':', 'gpa', ',', 'b', ':', ':', 'somethingelse', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQueryFail94', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'name', ',', 'age', ',', 'somethingelse', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'name', ',', 'b', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'we', 'can', 'refer', 'to', '""', 'a', ':', ':', 'name', '""', 'field', 'and', 'not', 'name']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'AssertionFailedError', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Found', 'more', 'than', 'one', 'match', ':', '""', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery95', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'myfile', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'd', '=', 'order', 'a', 'by', '$', '1', ';', 'generate', 'flatten', '(', 'd', ')', ',', 'MAX', '(', 'a', '.', 'age', ')', 'as', 'max_age', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getPredecessors', '(', 'foreach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'cogroupExpectedSchema', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroupExpectedSchema', '.', 'add', '(', 'bagFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'cogroupExpectedSchema', ',', 'false', ',', 'false', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', ',', 'max_age', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery96', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'input', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'age', '<', '20', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'age', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'd', '=', 'foreach', 'c', '{', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cf', '=', 'filter', 'b', 'by', 'gpa', '<', '3', '.', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'cd', '=', 'distinct', 'cf', '.', 'gpa', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'co', '=', 'order', 'cd', 'by', '$', '0', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', 'generate', 'group', ',', 'flatten', '(', 'co', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['+', '""', '}', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', '=', 'foreach', '.', 'getForEachPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'flattenPlan', '=', 'foreachPlans', '.', 'get', '(', '1', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'project', '=', 'flattenPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'project', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'sort', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'project', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'sort', 'instanceof', 'LOSort', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'distinct', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'sort', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'distinct', 'instanceof', 'LODistinct', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'presence', 'of', 'the', 'nested', 'foreach']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedForeach', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'distinct', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedForeach', 'instanceof', 'LOForEach', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'nestedForeachPlan', '=', '(', '(', 'LOForEach', ')', 'nestedForeach', ')', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'nestedProject', '=', 'nestedForeachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'nestedProject', 'instanceof', 'LOProject', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', '(', '(', 'LOProject', ')', 'nestedProject', ')', '.', 'getCol', '(', ')', '=', '=', '2', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'testing', 'the', 'filter', 'inner', 'plan', 'for', 'the', 'absence', 'of', 'the', 'project', 'connected', 'to', 'project']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'filter', '=', 'flattenPlan', '.', 'getPredecessors', '(', 'nestedForeach', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'filter', 'instanceof', 'LOFilter', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'comparisonPlan', '=', '(', '(', 'LOFilter', ')', 'filter', ')', '.', 'getComparisonPlan', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOLesserThan', 'lessThan', '=', '(', 'LOLesserThan', ')', 'comparisonPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LOProject', 'filterProject', '=', '(', 'LOProject', ')', 'lessThan', '.', 'getLhsOperand', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'null', '=', '=', 'comparisonPlan', '.', 'getPredecessors', '(', 'filterProject', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery97', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'int', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1L', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'long', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'double', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '.', '0f', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'float', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', ""'"", 'hello', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'x', ':', 'chararray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery98', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'int', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1L', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'long', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '1', '.', '0f', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'float', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '1', ',', '1L', ',', '1', '.', '0f', ',', '1', '.', '0', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'y', ':', 'int', ',', 'z', ':', 'long', ',', 'a', ':', 'float', ',', 'b', ':', 'double', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', ""'"", 'hello', ""'"", ',', '{', '(', '1', ')', ',', '(', '1', '.', '0', ')', '}', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 't', ':', '(', 'x', ':', 'chararray', ',', 'ib', ':', '{', 'it', ':', '(', 'd', ':', 'double', ')', '}', ')', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery99', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '2', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1L', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'long', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'float', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1L', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0f', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', 'x', ':', 'double', ',', 'y', ':', 'chararray', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', '.', '0', ',', ""'"", 'hello', ""'"", ',', '3', '.', '14', ')', ',', '(', '1', '.', '0f', ',', ""'"", 'world', ""'"", ')', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'b', ':', '{', 't', ':', '(', ')', '}', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery101', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'usage', 'of', 'an', 'alias', 'from', 'define']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'ARITY', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['query', '=', '""', 'foreach', '(', 'load', ""'"", 'data', ""'"", ')', 'generate', 'FUNC', '(', '$', '0', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery102', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'basic', 'store']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery103', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'store', 'with', 'store', 'function']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'a', 'into', ""'"", 'out', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery104', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'check', 'that', 'a', 'field', 'alias', 'can', 'be', 'referenced']",0
TestLogicalPlanBuilder.java,"['/', '/', 'by', 'unambiguous', 'free', 'form', 'alias', ',', 'fully', 'qualified', 'alias']",0
TestLogicalPlanBuilder.java,"['/', '/', 'and', 'partially', 'qualified', 'unambiguous', 'alias']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'filter', 'c', 'by', 'name', '!', '=', ""'"", 'fred', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'e', '=', 'group', 'd', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'flatten', '(', 'd', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'name', ',', 'd', ':', ':', 'a', ':', ':', 'name', ',', 'a', ':', ':', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery105', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'the', 'alias', '""', 'group', '""', 'can', 'be', 'used']",0
TestLogicalPlanBuilder.java,"['/', '/', 'after', 'a', 'flatten', '(', 'group', ')']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'st10k', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', ',', 'COUNT', '(', 'a', ')', 'as', 'cnt', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery106', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery107', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery108', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery109', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", 'as', '(', 'first_name', ',', 'enrol_age', ',', 'high_school_gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'groupSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagASchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'name', ':', 'bytearray', ',', 'age', ':', 'bytearray', ',', 'gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagBSchema', '=', 'Util', '.', 'getSchemaFromString', '(', '""', 'first_name', ':', 'bytearray', ',', 'enrol_age', ':', 'bytearray', ',', 'high_school_gpa', ':', 'bytearray', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagAFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'a', '""', ',', 'bagASchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagBFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'b', '""', ',', 'bagBSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'groupFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagAFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['expectedSchema', '.', 'add', '(', 'bagBFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'cogroup', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery110', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOLoad', 'load', ';']",0
TestLogicalPlanBuilder.java,"['LOCogroup', 'cogroup', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'two', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'mapGByPlans', '=', 'cogroup', '.', 'getGroupByPlans', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'cogroupPlan', '=', '(', 'LogicalPlan', ')', '(', 'mapGByPlans', '.', 'get', '(', 'load', ')', '.', 'toArray', '(', ')', ')', '[', '0', ']', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'cogroupPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery111', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery112', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', '{', 'a1', '=', 'order', 'a', 'by', '*', ';', 'generate', 'a1', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['sort', '=', '(', 'LOSort', ')', 'foreachPlan', '.', 'getPredecessors', '(', 'foreachPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'sortPlan', ':', 'sort', '.', 'getSortColPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'sortPlan', ')', '=', '=', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery113', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', '{', 'exp1', '=', 'age', '+', 'gpa', ';', 'exp2', '=', 'exp1', '+', 'age', ';', 'generate', 'exp1', ',', 'exp2', ';', '}', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalPlan', 'foreachPlan', ':', 'foreach', '.', 'getForEachPlans', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['printPlan', '(', 'foreachPlan', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'checkPlanForProjectStar', '(', 'foreachPlan', ')', '=', '=', 'false', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery114', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'name', ',', 'age', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery115', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'name', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'age', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'gpa', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery116', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['s', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testQuery117', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['LOSort', 'sort', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsArithExprs', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', '+', 'null', ',', 'x', '*', 'null', ',', 'x', '/', 'null', ',', 'x', '-', 'null', ',', 'null', '%', 'x', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'y', '+', 'null', ',', 'y', '*', 'null', ',', 'y', '/', 'null', ',', 'y', '-', 'null', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond1', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '2', '>', '1', '?', 'null', ':', '1', ')', ',', '(', '2', '<', '1', '?', 'null', ':', '1', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', '(', '2', '>', '1', '?', '1', ':', 'null', ')', ',', '(', '2', '<', '1', '?', '1', ':', 'null', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsBincond2', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'null', 'is', 'null', '?', '1', ':', '2', ')', ',', '(', 'null', 'is', 'not', 'null', '?', '2', ':', '1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsForEachGenerate', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'x', ',', 'null', ',', 'y', ',', 'null', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsOuterJoin', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'u', ':', 'int', ',', 'v', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'x', ',', 'b', 'by', 'u', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', '(', 'SIZE', '(', 'a', ')', '=', '=', '0', '?', 'null', ':', 'a', ')', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'flatten', '(', '(', 'SIZE', '(', 'b', ')', '=', '=', '0', '?', 'null', ':', 'b', ')', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testNullConsConcatSize', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'SIZE', '(', 'null', ')', ',', 'CONCAT', '(', 'str', ',', 'null', ')', ',', '""', '+']",0
TestLogicalPlanBuilder.java,"['""', 'CONCAT', '(', 'null', ',', 'str', ')', ';', '""']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testFilterUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'isempty', 'IsEmpty', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'isempty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testLoadUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testStoreUdfConstructorArgDefine', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'define', 'PS', 'PigStorage', '(', ""'"", ':', ""'"", ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PS', 'as', '(', 'x', ':', 'int', ',', 'y', ':', 'double', ',', 'str', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'IsEmpty', '(', '*', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'store', 'b', 'into', ""'"", 'x', ""'"", 'using', 'PS', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCastAlias', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', 'x', ',', '(', 'double', ')', 'y', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'x', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testCast', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', '.', 'txt', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'int', ')', '$', '0', ',', '(', 'double', ')', '$', '1', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testReservedWordsInFunctionNames', '(', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'test', 'that', 'define', 'can', 'contain', 'reserved', 'words', 'are', 'later', 'parts', 'of']",0
TestLogicalPlanBuilder.java,"['/', '/', 'fully', 'qualified', 'function', 'name']",0
TestLogicalPlanBuilder.java,"['String', 'query', '=', '""', 'define', 'FUNC', 'org', '.', 'apache', '.', 'iterators', '.', 'foreach', '(', ')', ';', '""', ';']",0
TestLogicalPlanBuilder.java,"['LogicalOperator', 'lo', '=', 'buildPlan', '(', 'query', ')', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'lo', 'instanceof', 'LODefine', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'void', 'testTokenizeSchema', '(', ')', 'throws', 'FrontendException', ',', 'ParseException', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['LOForEach', 'foreach', ';']",0
TestLogicalPlanBuilder.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'one', ""'"", 'as', '(', 'f1', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['lp', '=', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'TOKENIZE', '(', 'f1', ')', ';', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tokenFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'token', '""', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'CHARARRAY', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'tupleSchema', '=', 'new', 'Schema', '(', 'tokenFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'tupleFs', ';']",0
TestLogicalPlanBuilder.java,"['tupleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'tuple_of_tokens', '""', ',', 'tupleSchema', ',']",0
TestLogicalPlanBuilder.java,"['DataType', '.', 'TUPLE', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', 'bagSchema', '=', 'new', 'Schema', '(', 'tupleFs', ')', ';']",0
TestLogicalPlanBuilder.java,"['bagSchema', '.', 'setTwoLevelAccessRequired', '(', 'true', ')', ';']",0
TestLogicalPlanBuilder.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(']",0
TestLogicalPlanBuilder.java,"['""', 'bag_of_tokenTuples', '""', ',', 'bagSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'new', 'Schema', '(', 'bagFs', ')', ',', 'false', ',', 'true', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'void', 'printPlan', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['LOPrinter', 'graphPrinter', '=', 'new', 'LOPrinter', '(', 'System', '.', 'err', ',', 'lp', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', '""', 'Printing', 'the', 'logical', 'plan', '""', ')', ';']",0
TestLogicalPlanBuilder.java,"['graphPrinter', '.', 'visit', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['System', '.', 'err', '.', 'println', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['private', 'boolean', 'checkPlanForProjectStar', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'leaves', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '(', '(', 'LOProject', ')', 'op', ')', '.', 'isStar', '(', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'true', ';']",0
TestLogicalPlanBuilder.java,"['return', 'true', ';']",0
TestLogicalPlanBuilder.java,"['return', 'false', ';']",0
TestLogicalPlanBuilder.java,"['return', 'false', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', 'Helper', 'Functions']",0
TestLogicalPlanBuilder.java,"['/', '/', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ')', '{']",0
TestLogicalPlanBuilder.java,"['return', 'buildPlan', '(', 'query', ',', 'LogicalPlanBuilder', '.', 'class', '.', 'getClassLoader', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['public', 'LogicalPlan', 'buildPlan', '(', 'String', 'query', ',', 'ClassLoader', 'cldr', ')', '{']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'cldr', ';']",0
TestLogicalPlanBuilder.java,"['pigContext', '.', 'connect', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['LogicalPlanBuilder', 'builder', '=', 'new', 'LogicalPlanBuilder', '(', 'pigContext', ')', ';', '/', '/']",0
TestLogicalPlanBuilder.java,"['LogicalPlan', 'lp', '=', 'builder', '.', 'parse', '(', '""', 'Test', '-', 'Plan', '-', 'Builder', '""', ',']",0
TestLogicalPlanBuilder.java,"['fileNameMap', ')', ';']",0
TestLogicalPlanBuilder.java,"['List', '<', 'LogicalOperator', '>', 'roots', '=', 'lp', '.', 'getRoots', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['if', '(', 'roots', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TestLogicalPlanBuilder.java,"['for', '(', 'LogicalOperator', 'op', ':', 'roots', ')', '{']",0
TestLogicalPlanBuilder.java,"['if', '(', '!', '(', 'op', 'instanceof', 'LOLoad', ')', '&', '&', '!', '(', 'op', 'instanceof', 'LODefine', ')', ')', '{']",0
TestLogicalPlanBuilder.java,"['throw', 'new', 'Exception', '(', '""', 'Cannot', 'have', 'a', 'root', 'that', 'is', 'not', 'the', 'load', 'or', 'define', 'operator', '.', 'Found', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['assertNotNull', '(', 'lp', '!', '=', 'null', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'lp', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['/', '/', 'log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'IOException', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', '""', 'IOException', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ')', ';']",0
TestLogicalPlanBuilder.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestLogicalPlanBuilder.java,"['log', '.', 'error', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'System', '.', 'err', '.', 'println', '(', '""', 'Exception', 'Stack', 'trace', 'for', 'query', ':', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['/', '/', 'e', '.', 'printStackTrace', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestLogicalPlanBuilder.java,"['fail', '(', 'e', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', ':', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', '+', '""', '-', '-', '""', '+', 'query', ')', ';']",0
TestLogicalPlanBuilder.java,"['return', 'null', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'logicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['Map', '<', 'String', ',', 'String', '>', 'fileNameMap', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
TestLogicalPlanBuilder.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'ExecType', '.', 'LOCAL', ',', 'new', 'Properties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'InetAddress', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'Socket', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'SocketImplFactory', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URI', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'URISyntaxException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'net', '.', 'UnknownHostException', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
HExecutionEngine.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'ipc', '.', 'RPC', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobTracker', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecPhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'util', '.', 'ExecTools', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HDataStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'LogToPhyTranslationVisitor', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MapReduceLauncher', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PlanPrinter', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
HExecutionEngine.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
HExecutionEngine.java,"['public', 'class', 'HExecutionEngine', 'implements', 'ExecutionEngine', '{']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'HOD_SERVER', '=', '""', 'hod', '.', 'server', '""', ';']",0
HExecutionEngine.java,"['public', 'static', 'final', 'String', 'JOB_TRACKER_LOCATION', '=', '""', 'mapred', '.', 'job', '.', 'tracker', '""', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'FILE_SYSTEM_LOCATION', '=', '""', 'fs', '.', 'default', '.', 'name', '""', ';']",0
HExecutionEngine.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'static', 'final', 'String', 'LOCAL', '=', '""', 'local', '""', ';']",0
HExecutionEngine.java,"['private', 'StringBuilder', 'hodParams', '=', 'null', ';']",0
HExecutionEngine.java,"['protected', 'PigContext', 'pigContext', ';']",0
HExecutionEngine.java,"['protected', 'DataStorage', 'ds', ';']",0
HExecutionEngine.java,"['protected', 'JobClient', 'jobClient', ';']",0
HExecutionEngine.java,"['/', '/', 'key', ':', 'the', 'operator', 'key', 'from', 'the', 'logical', 'plan', 'that', 'originated', 'the', 'physical', 'plan']",0
HExecutionEngine.java,"['/', '/', 'val', ':', 'the', 'operator', 'key', 'for', 'the', 'root', 'of', 'the', 'phyisical', 'plan']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'OperatorKey', '>', 'logicalToPhysicalKeys', ';']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['/', '/', 'map', 'from', 'LOGICAL', 'key', 'to', 'into', 'about', 'the', 'execution']",0
HExecutionEngine.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'HExecutionEngine', '(', 'PigContext', 'pigContext', ')', '{']",0
HExecutionEngine.java,"['this', '.', 'pigContext', '=', 'pigContext', ';']",0
HExecutionEngine.java,"['this', '.', 'logicalToPhysicalKeys', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'OperatorKey', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'physicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'materializedResults', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'MapRedResult', '>', '(', ')', ';']",0
HExecutionEngine.java,"['this', '.', 'ds', '=', 'null', ';']",0
HExecutionEngine.java,"['/', '/', 'to', 'be', 'set', 'in', 'the', 'init', 'method']",0
HExecutionEngine.java,"['this', '.', 'jobClient', '=', 'null', ';']",0
HExecutionEngine.java,"['public', 'JobClient', 'getJobClient', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'jobClient', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'MapRedResult', '>', 'getMaterializedResults', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'materializedResults', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'OperatorKey', ',', 'ExecPhysicalOperator', '>', 'getPhysicalOpTable', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'physicalOpTable', ';']",0
HExecutionEngine.java,"['public', 'DataStorage', 'getDataStorage', '(', ')', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'ds', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'init', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['/', '/', 'First', 'set', 'the', 'ssh', 'socket', 'factory']",0
HExecutionEngine.java,"['setSSHFactory', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'hodServer', '=', 'properties', '.', 'getProperty', '(', 'HOD_SERVER', ')', ';']",0
HExecutionEngine.java,"['String', 'cluster', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'nameNode', '=', 'null', ';']",0
HExecutionEngine.java,"['Configuration', 'configuration', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', 'hodServer', '!', '=', 'null', '&', '&', 'hodServer', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['String', 'hdfsAndMapred', '[', ']', '=', 'doHod', '(', 'hodServer', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'hdfsAndMapred', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'hdfsAndMapred', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'build', 'a', 'configuration', 'object', 'first', 'in', 'the', 'manner', 'described', 'below']",0
HExecutionEngine.java,"['/', '/', 'and', 'then', 'get', 'back', 'a', 'properties', 'object', 'to', 'inspect', 'the', 'JOB_TRACKER_LOCATION']",0
HExecutionEngine.java,"['/', '/', 'and', 'FILE_SYSTEM_LOCATION', '.', 'The', 'reason', 'to', 'do', 'this', 'is', 'if', 'we', 'looked', 'only', 'at']",0
HExecutionEngine.java,"['/', '/', 'the', 'existing', 'properties', 'object', ',', 'we', 'may', 'not', 'get', 'the', 'right', 'settings', '.', 'So', 'we', 'want']",0
HExecutionEngine.java,"['/', '/', 'to', 'read', 'the', 'configurations', 'in', 'the', 'order', 'specified', 'below', 'and', 'only', 'then', 'look']",0
HExecutionEngine.java,"['/', '/', 'for', 'JOB_TRACKER_LOCATION', 'and', 'FILE_SYSTEM_LOCATION', '.']",0
HExecutionEngine.java,"['/', '/', 'Hadoop', 'by', 'default', 'specifies', 'two', 'resources', ',', 'loaded', 'in', '-', 'order', 'from', 'the', 'classpath', ':']",0
HExecutionEngine.java,"['/', '/', '1', '.', 'hadoop', '-', 'default', '.', 'xml', ':', 'Read', '-', 'only', 'defaults', 'for', 'hadoop', '.']",0
HExecutionEngine.java,"['/', '/', '2', '.', 'hadoop', '-', 'site', '.', 'xml', ':', 'Site', '-', 'specific', 'configuration', 'for', 'a', 'given', 'hadoop', 'installation', '.']",0
HExecutionEngine.java,"['/', '/', 'Now', 'add', 'the', 'settings', 'from', '""', 'properties', '""', 'object', 'to', 'override', 'any', 'existing', 'properties']",0
HExecutionEngine.java,"['/', '/', 'All', 'of', 'the', 'above', 'is', 'accomplished', 'in', 'the', 'method', 'call', 'below']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hadoop', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['properties', '=', 'ConfigurationUtil', '.', 'toProperties', '(', 'configuration', ')', ';']",0
HExecutionEngine.java,"['cluster', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['nameNode', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', 'cluster', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'cluster', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['cluster', '=', 'cluster', '+', '""', ':', '50020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'JOB_TRACKER_LOCATION', ',', 'cluster', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'nameNode', '!', '=', 'null', '&', '&', 'nameNode', '.', 'length', '(', ')', '>', '0', ')', '{']",0
HExecutionEngine.java,"['if', '(', '!', 'nameNode', '.', 'contains', '(', '""', ':', '""', ')', '&', '&', '!', 'nameNode', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['nameNode', '=', 'nameNode', '+', '""', ':', '8020', '""', ';']",0
HExecutionEngine.java,"['properties', '.', 'setProperty', '(', 'FILE_SYSTEM_LOCATION', ',', 'nameNode', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'hadoop', 'file', 'system', 'at', ':', '""', '+', '(', 'nameNode', '=', '=', 'null', '?', 'LOCAL', ':', 'nameNode', ')', ')', ';']",0
HExecutionEngine.java,"['ds', '=', 'new', 'HDataStorage', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'The', 'above', 'HDataStorage', 'constructor', 'sets', 'DEFAULT_REPLICATION_FACTOR_KEY', 'in', 'properties', '.']",0
HExecutionEngine.java,"['/', '/', 'So', 'we', 'need', 'to', 'reconstruct', 'the', 'configuration', 'object', 'for', 'the', 'non', 'HOD', 'case']",0
HExecutionEngine.java,"['/', '/', 'In', 'the', 'HOD', 'case', ',', 'this', 'is', 'the', 'first', 'time', 'the', 'configuration', 'object', 'will', 'be', 'created']",0
HExecutionEngine.java,"['configuration', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'properties', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'cluster', '!', '=', 'null', '&', '&', '!', 'cluster', '.', 'equalsIgnoreCase', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'map', '-', 'reduce', 'job', 'tracker', 'at', ':', '""', '+', 'properties', '.', 'get', '(', 'JOB_TRACKER_LOCATION', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Set', 'job', '-', 'specific', 'configuration', 'knobs']",0
HExecutionEngine.java,"['jobClient', '=', 'new', 'JobClient', '(', 'new', 'JobConf', '(', 'configuration', ')', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'IOException', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'job', 'client', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'close', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['public', 'Properties', 'getConfiguration', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['return', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'updateConfiguration', '(', 'Properties', 'newConfiguration', ')']",0
HExecutionEngine.java,"['throws', 'ExecException', '{']",0
HExecutionEngine.java,"['init', '(', 'newConfiguration', ')', ';']",0
HExecutionEngine.java,"['public', 'Map', '<', 'String', ',', 'Object', '>', 'getStatistics', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'PhysicalPlan', 'compile', '(', 'LogicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'plan', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2041', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'No', 'Plan', 'to', 'compile', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
HExecutionEngine.java,"['LogToPhyTranslationVisitor', 'translator', '=']",0
HExecutionEngine.java,"['new', 'LogToPhyTranslationVisitor', '(', 'plan', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'setPigContext', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['translator', '.', 'visit', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'translator', '.', 'getPhysicalPlan', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2042', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Unable', 'to', 'translate', 'logical', 'plan', 'to', 'physical', 'plan', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'List', '<', 'ExecJob', '>', 'execute', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'new', 'ArrayList', '<', 'ExecJob', '>', '(', ')', ';']",0
HExecutionEngine.java,"['PigStats', 'stats', '=', 'launcher', '.', 'launchPig', '(', 'plan', ',', 'jobName', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'FileSpec', 'spec', ':', 'launcher', '.', 'getSucceededFiles', '(', ')', ')', '{']",0
HExecutionEngine.java,"['jobs', '.', 'add', '(', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'COMPLETED', ',', 'pigContext', ',', 'spec', ',', 'stats', ')', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'FileSpec', 'spec', ':', 'launcher', '.', 'getFailedFiles', '(', ')', ')', '{']",0
HExecutionEngine.java,"['HJob', 'j', '=', 'new', 'HJob', '(', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ',', 'pigContext', ',', 'spec', ',', 'stats', ')', ';']",0
HExecutionEngine.java,"['j', '.', 'setException', '(', 'launcher', '.', 'getError', '(', 'spec', ')', ')', ';']",0
HExecutionEngine.java,"['jobs', '.', 'add', '(', 'j', ')', ';']",0
HExecutionEngine.java,"['return', 'jobs', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'There', 'are', 'a', 'lot', 'of', 'exceptions', 'thrown', 'by', 'the', 'launcher', '.', 'If', 'this']",0
HExecutionEngine.java,"['/', '/', 'is', 'an', 'ExecException', ',', 'just', 'let', 'it', 'through', '.', 'Else', 'wrap', 'it', '.']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '2043', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'during', 'execution', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['}', 'finally', '{']",0
HExecutionEngine.java,"['launcher', '.', 'reset', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'List', '<', 'ExecJob', '>', 'submit', '(', 'PhysicalPlan', 'plan', ',']",0
HExecutionEngine.java,"['String', 'jobName', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'explain', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'stream', ',', 'String', 'format', ',', 'boolean', 'verbose', ')', '{']",0
HExecutionEngine.java,"['ExecTools', '.', 'checkLeafIsStore', '(', 'plan', ',', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['MapReduceLauncher', 'launcher', '=', 'new', 'MapReduceLauncher', '(', ')', ';']",0
HExecutionEngine.java,"['launcher', '.', 'explain', '(', 'plan', ',', 'pigContext', ',', 'stream', ',', 'format', ',', 'verbose', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 've', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 've', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'ExecJob', '>', 'runningJobs', '(', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'Collection', '<', 'String', '>', 'activeScopes', '(', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['public', 'void', 'reclaimScope', '(', 'String', 'scope', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['throw', 'new', 'UnsupportedOperationException', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'setSSHFactory', '(', ')', '{']",0
HExecutionEngine.java,"['Properties', 'properties', '=', 'this', '.', 'pigContext', '.', 'getProperties', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'g', '=', 'properties', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'g', '=', '=', 'null', '|', '|', 'g', '.', 'length', '(', ')', '=', '=', '0', ')', 'return', ';']",0
HExecutionEngine.java,"['Class', 'clazz', '=', 'Class', '.', 'forName', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'shock', '.', 'SSHSocketImplFactory', '""', ')', ';']",0
HExecutionEngine.java,"['SocketImplFactory', 'f', '=', '(', 'SocketImplFactory', ')', 'clazz', '.', 'getMethod', '(', '""', 'getFactory', '""', ',', 'new', 'Class', '[', '0', ']', ')', '.', 'invoke', '(', '0', ',', 'new', 'Object', '[', '0', ']', ')', ';']",0
HExecutionEngine.java,"['Socket', '.', 'setSocketImplFactory', '(', 'f', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'SocketException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'To', 'prevent', 'doing', 'hod', 'if', 'the', 'pig', 'server', 'is', 'constructed', 'multiple', 'times']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodMapRed', ';']",0
HExecutionEngine.java,"['private', 'static', 'String', 'hodHDFS', ';']",0
HExecutionEngine.java,"['private', 'String', 'hodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'remoteHodConfDir', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'Process', 'hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['class', 'ShutdownThread', 'extends', 'Thread', '{']",0
HExecutionEngine.java,"['public', 'synchronized', 'void', 'run', '(', ')', '{']",0
HExecutionEngine.java,"['closeHod', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'hod', '.', 'server', '""', ')', ')', ';']",0
HExecutionEngine.java,"['private', 'String', '[', ']', 'doHod', '(', 'String', 'server', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'hodMapRed', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hodHDFS', ',', 'hodMapRed', '}', ';']",0
HExecutionEngine.java,"['/', '/', 'first', ',', 'create', 'temp', 'director', 'to', 'store', 'the', 'configuration']",0
HExecutionEngine.java,"['hodConfDir', '=', 'createTempDir', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['hodParams', '=', 'new', 'StringBuilder', '(', 'properties', '.', 'getProperty', '(']",0
HExecutionEngine.java,"['""', 'hod', '.', 'param', '""', ',', 'System', '.', 'getProperty', '(', '""', 'hod', '.', 'param', '""', ',', '""', '""', ')', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'get', 'the', 'number', 'of', 'nodes', 'out', 'of', 'the', 'command', 'or', 'use', 'default']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'getNumNodes', '(', 'hodParams', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'command', 'format', ':', 'hod', 'allocate', '-', 'd', '<', 'cluster_dir', '>', '-', 'n', '<', 'number_of_nodes', '>', '<', 'other', 'params', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'fixedCmdArray', '=', 'new', 'String', '[', ']', '{', '""', 'hod', '""', ',', '""', 'allocate', '""', ',', '""', '-', 'd', '""', ',']",0
HExecutionEngine.java,"['hodConfDir', ',', '""', '-', 'n', '""', ',', 'Integer', '.', 'toString', '(', 'nodes', ')', '}', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'extraParams', '=', 'hodParams', '.', 'toString', '(', ')', '.', 'split', '(', '""', '""', ')', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', 'fixedCmdArray', '.', 'length', '+', 'extraParams', '.', 'length', ']', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'fixedCmdArray', ',', '0', ',', 'cmdarray', ',', '0', ',', 'fixedCmdArray', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['System', '.', 'arraycopy', '(', 'extraParams', ',', '0', ',', 'cmdarray', ',', 'fixedCmdArray', '.', 'length', ',', 'extraParams', '.', 'length', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Connecting', 'to', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'sending', 'HOD', 'command', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'setup', 'shutdown', 'hook', 'to', 'make', 'sure', 'we', 'tear', 'down', 'hod', 'connection']",0
HExecutionEngine.java,"['Runtime', '.', 'getRuntime', '(', ')', '.', 'addShutdownHook', '(', 'new', 'ShutdownThread', '(', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'true', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'print', 'all', 'the', 'information', 'provided', 'by', 'HOD']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'hodProcess', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'msg', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'msg', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['log', '.', 'info', '(', 'msg', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'connection', 'we', 'need', 'to', 'bring', 'the', 'file', 'locally']",0
HExecutionEngine.java,"['if', '(', '!', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['hodConfDir', '=', 'copyHadoopConfLocally', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['String', 'hdfs', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'mapred', '=', 'null', ';']",0
HExecutionEngine.java,"['String', 'hadoopConf', '=', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Hadoop', 'configuration', 'file', ':', '""', '+', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', 'hadoopConf', ')', ';']",0
HExecutionEngine.java,"['jobConf', '.', 'addResource', '(', '""', 'pig', '-', 'cluster', '-', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'the', 'method', 'below', 'alters', 'the', 'properties', 'object', 'by', 'overriding', 'the']",0
HExecutionEngine.java,"['/', '/', 'hod', 'properties', 'with', 'the', 'values', 'from', 'properties', 'and', 'recomputing']",0
HExecutionEngine.java,"['/', '/', 'the', 'properties']",0
HExecutionEngine.java,"['recomputeProperties', '(', 'jobConf', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hdfs', '=', 'properties', '.', 'getProperty', '(', 'FILE_SYSTEM_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hdfs', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'fs', '.', 'default', '.', 'name', 'from', 'hadoop', 'configuration', '.', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'HDFS', ':', '""', '+', 'hdfs', ')', ';']",0
HExecutionEngine.java,"['mapred', '=', 'properties', '.', 'getProperty', '(', 'JOB_TRACKER_LOCATION', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'mapred', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4007', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Missing', 'mapred', '.', 'job', '.', 'tracker', 'from', 'hadoop', 'configuration', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'JobTracker', ':', '""', '+', 'mapred', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'is', 'not', 'longer', 'needed', 'as', 'hadoop', '-', 'site', '.', 'xml', 'given', 'to', 'us', 'by', 'HOD']",0
HExecutionEngine.java,"['/', '/', 'contains', 'data', 'in', 'the', 'correct', 'format']",0
HExecutionEngine.java,"['/', '/', 'hdfs', '=', 'fixUpDomain', '(', 'hdfs', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'mapred', '=', 'fixUpDomain', '(', 'mapred', ',', 'properties', ')', ';']",0
HExecutionEngine.java,"['hodHDFS', '=', 'hdfs', ';']",0
HExecutionEngine.java,"['hodMapRed', '=', 'mapred', ';']",0
HExecutionEngine.java,"['return', 'new', 'String', '[', ']', '{', 'hdfs', ',', 'mapred', '}', ';']",0
HExecutionEngine.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6010', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Could', 'not', 'connect', 'to', 'HOD', '""', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'synchronized', 'void', 'closeHod', '(', 'String', 'server', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'hodProcess', '=', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'just', 'cleanup', 'the', 'dir', 'if', 'it', 'exists', 'and', 'return']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'hod', 'deallocate', 'format', ':', 'hod', 'deallocate', '-', 'd', '<', 'conf', 'dir', '>']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '4', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'hod', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', 'deallocate', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', '""', '-', 'd', '""', ';']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'remoteHodConfDir', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '3', ']', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['log', '.', 'info', '(', '""', 'Disconnecting', 'from', 'HOD', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['log', '.', 'debug', '(', '""', 'Disconnect', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'disconnect', 'from', 'HOD', ';', 'error', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '.', 'destroy', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'finally', '{']",0
HExecutionEngine.java,"['if', '(', 'remoteHodConfDir', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'remoteHodConfDir', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hodConfDir', '!', '=', 'null', ')']",0
HExecutionEngine.java,"['deleteDir', '(', 'LOCAL', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['deleteDir', '(', 'server', ',', 'hodConfDir', ')', ';']",0
HExecutionEngine.java,"['hodProcess', '=', 'null', ';']",0
HExecutionEngine.java,"['private', 'String', 'copyHadoopConfLocally', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['String', 'localDir', '=', 'createTempDir', '(', 'LOCAL', ')', ';']",0
HExecutionEngine.java,"['String', 'remoteFile', '=', 'new', 'String', '(', 'hodConfDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'localFile', '=', 'new', 'String', '(', 'localDir', '+', '""', '/', 'hadoop', '-', 'site', '.', 'xml', '""', ')', ';']",0
HExecutionEngine.java,"['remoteHodConfDir', '=', 'hodConfDir', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'cat', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'remoteFile', ';']",0
HExecutionEngine.java,"['Process', 'p', '=', 'runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['BufferedWriter', 'bw', ';']",0
HExecutionEngine.java,"['bw', '=', 'new', 'BufferedWriter', '(', 'new', 'OutputStreamWriter', '(', 'new', 'FileOutputStream', '(', 'localFile', ')', ')', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4008', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'create', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['bw', '.', 'write', '(', 'line', ',', '0', ',', 'line', '.', 'length', '(', ')', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'newLine', '(', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['bw', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['int', 'errCode', '=', '4009', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'copy', 'data', 'to', 'local', 'hadoop', 'file', '""', '+', 'localFile', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'localDir', ';']",0
HExecutionEngine.java,"['private', 'String', 'cmdToString', '(', 'String', '[', ']', 'cmdarray', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'cmd', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'cmdarray', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', 'cmdarray', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['cmd', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
HExecutionEngine.java,"['return', 'cmd', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'Process', 'runCommand', '(', 'String', 'server', ',', 'String', '[', ']', 'cmdarray', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['Process', 'p', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['p', '=', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmdarray', ')', ';']",0
HExecutionEngine.java,"['SSHSocketImplFactory', 'fac', '=', 'SSHSocketImplFactory', '.', 'getFactory', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['p', '=', 'fac', '.', 'ssh', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'connect', ')']",0
HExecutionEngine.java,"['hodProcess', '=', 'p', ';']",0
HExecutionEngine.java,"['/', '/', 'this', 'should', 'return', 'as', 'soon', 'as', 'connection', 'is', 'shutdown']",0
HExecutionEngine.java,"['int', 'rc', '=', 'p', '.', 'waitFor', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'rc', '!', '=', '0', ')', '{']",0
HExecutionEngine.java,"['StringBuilder', 'errMsg', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['String', 'line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['br', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'p', '.', 'getErrorStream', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['line', '=', 'null', ';']",0
HExecutionEngine.java,"['while', '(', '(', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['errMsg', '.', 'append', '(', 'line', ')', ';']",0
HExecutionEngine.java,"['br', '.', 'close', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{', '}']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6011', ';']",0
HExecutionEngine.java,"['StringBuilder', 'msg', '=', 'new', 'StringBuilder', '(', '""', 'Failed', 'to', 'run', 'command', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'cmdToString', '(', 'cmdarray', ')', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', 'on', 'server', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'server', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'return', 'code', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'rc', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', '""', ';', 'error', ':', '""', ')', ';']",0
HExecutionEngine.java,"['msg', '.', 'append', '(', 'errMsg', '.', 'toString', '(', ')', ')', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', '.', 'toString', '(', ')', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'e', 'instanceof', 'ExecException', ')', 'throw', '(', 'ExecException', ')', 'e', ';']",0
HExecutionEngine.java,"['int', 'errCode', '=', '6012', ';']",0
HExecutionEngine.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'run', 'command', ':', '""', '+', 'cmdToString', '(', 'cmdarray', ')', '+', '""', 'on', 'server', '""', '+', 'server', ';']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 'e', ')', ';']",0
HExecutionEngine.java,"['return', 'p', ';']",0
HExecutionEngine.java,"['private', 'FileSpec', 'checkLeafIsStore', '(', 'PhysicalPlan', 'plan', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['PhysicalOperator', 'leaf', '=', '(', 'PhysicalOperator', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
HExecutionEngine.java,"['FileSpec', 'spec', '=', 'null', ';']",0
HExecutionEngine.java,"['if', '(', '!', '(', 'leaf', 'instanceof', 'POStore', ')', ')', '{']",0
HExecutionEngine.java,"['String', 'scope', '=', 'leaf', '.', 'getOperatorKey', '(', ')', '.', 'getScope', '(', ')', ';']",0
HExecutionEngine.java,"['POStore', 'str', '=', 'new', 'POStore', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
HExecutionEngine.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setPc', '(', 'pigContext', ')', ';']",0
HExecutionEngine.java,"['spec', '=', 'new', 'FileSpec', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',']",0
HExecutionEngine.java,"['pigContext', ')', '.', 'toString', '(', ')', ',']",0
HExecutionEngine.java,"['new', 'FuncSpec', '(', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
HExecutionEngine.java,"['str', '.', 'setSFile', '(', 'spec', ')', ';']",0
HExecutionEngine.java,"['plan', '.', 'addAsLeaf', '(', 'str', ')', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['spec', '=', '(', '(', 'POStore', ')', 'leaf', ')', '.', 'getSFile', '(', ')', ';']",0
HExecutionEngine.java,"['return', 'spec', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'ExecException', '(', 'e', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteDir', '(', 'String', 'server', ',', 'String', 'dir', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['File', 'path', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'path', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'send', 'rm', 'command', 'over', 'ssh']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '3', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'rm', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', '""', '-', 'rf', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '2', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'remove', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', ')', ';']",0
HExecutionEngine.java,"['private', 'void', 'deleteLocalDir', '(', 'File', 'path', ')', '{']",0
HExecutionEngine.java,"['File', '[', ']', 'files', '=', 'path', '.', 'listFiles', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'i', ';']",0
HExecutionEngine.java,"['for', '(', 'i', '=', '0', ';', 'i', '<', 'files', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isHidden', '(', ')', ')']",0
HExecutionEngine.java,"['if', '(', 'files', '[', 'i', ']', '.', 'isFile', '(', ')', ')']",0
HExecutionEngine.java,"['files', '[', 'i', ']', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['else', 'if', '(', 'files', '[', 'i', ']', '.', 'isDirectory', '(', ')', ')']",0
HExecutionEngine.java,"['deleteLocalDir', '(', 'files', '[', 'i', ']', ')', ';']",0
HExecutionEngine.java,"['path', '.', 'delete', '(', ')', ';']",0
HExecutionEngine.java,"['private', 'String', 'fixUpDomain', '(', 'String', 'hostPort', ',', 'Properties', 'properties', ')', 'throws', 'UnknownHostException', '{']",0
HExecutionEngine.java,"['URI', 'uri', '=', 'null', ';']",0
HExecutionEngine.java,"['uri', '=', 'new', 'URI', '(', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'URISyntaxException', 'use', ')', '{']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Illegal', 'hostPort', ':', '""', '+', 'hostPort', ')', ';']",0
HExecutionEngine.java,"['String', 'hostname', '=', 'uri', '.', 'getHost', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'port', '=', 'uri', '.', 'getPort', '(', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'Parse', 'manually', 'if', 'hostPort', 'wasn', ""'"", 't', 'non', '-', 'opaque', 'URI']",0
HExecutionEngine.java,"['/', '/', 'e', '.', 'g', '.', 'hostPort', 'is', '""', 'myhost', ':', 'myport', '""']",0
HExecutionEngine.java,"['if', '(', 'hostname', '=', '=', 'null', '|', '|', 'port', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['String', 'parts', '[', ']', '=', 'hostPort', '.', 'split', '(', '""', ':', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'parts', '[', '0', ']', ';']",0
HExecutionEngine.java,"['port', '=', 'Integer', '.', 'valueOf', '(', 'parts', '[', '1', ']', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'hostname', '.', 'indexOf', '(', ""'"", '.', ""'"", ')', '=', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'jz', ':', 'fallback', 'to', 'systemproperty', 'cause', 'this', 'not', 'handled', 'in', 'Main']",0
HExecutionEngine.java,"['String', 'domain', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ',', 'System', '.', 'getProperty', '(', '""', 'cluster', '.', 'domain', '""', ')', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'domain', '=', '=', 'null', ')']",0
HExecutionEngine.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Missing', 'cluster', '.', 'domain', 'property', '!', '""', ')', ';']",0
HExecutionEngine.java,"['hostname', '=', 'hostname', '+', '""', '.', '""', '+', 'domain', ';']",0
HExecutionEngine.java,"['InetAddress', '.', 'getByName', '(', 'hostname', ')', ';']",0
HExecutionEngine.java,"['return', 'hostname', '+', '""', ':', '""', '+', 'Integer', '.', 'toString', '(', 'port', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'create', 'temp', 'dir', 'to', 'store', 'hod', 'output', ';', 'removed', 'on', 'exit']",0
HExecutionEngine.java,"['/', '/', 'format', ':', '<', 'tempdir', '>', '/', 'PigHod', '.', '<', 'host', 'name', '>', '.', '<', 'user', 'name', '>', '.', '<', 'nanosecondts', '>']",0
HExecutionEngine.java,"['private', 'String', 'createTempDir', '(', 'String', 'server', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['StringBuilder', 'tempDirPrefix', '=', 'new', 'StringBuilder', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'java', '.', 'io', '.', 'tmpdir', '""', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'for', 'remote', 'access', 'we', 'assume', '/', 'tmp', 'as', 'temp', 'dir']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'tmp', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '/', 'PigHod', '.', '""', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'InetAddress', '.', 'getLocalHost', '(', ')', '.', 'getHostName', '(', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['}', 'catch', '(', 'UnknownHostException', 'e', ')', '{', '}']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
HExecutionEngine.java,"['tempDirPrefix', '.', 'append', '(', '""', '.', '""', ')', ';']",0
HExecutionEngine.java,"['String', 'path', ';']",0
HExecutionEngine.java,"['path', '=', 'tempDirPrefix', '.', 'toString', '(', ')', '+', 'System', '.', 'nanoTime', '(', ')', ';']",0
HExecutionEngine.java,"['}', 'while', '(', '!', 'createDir', '(', 'server', ',', 'path', ')', ')', ';']",0
HExecutionEngine.java,"['return', 'path', ';']",0
HExecutionEngine.java,"['private', 'boolean', 'createDir', '(', 'String', 'server', ',', 'String', 'dir', ')', 'throws', 'ExecException', '{']",0
HExecutionEngine.java,"['if', '(', 'server', '.', 'equals', '(', 'LOCAL', ')', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'create', 'local', 'directory']",0
HExecutionEngine.java,"['File', 'tempDir', '=', 'new', 'File', '(', 'dir', ')', ';']",0
HExecutionEngine.java,"['boolean', 'success', '=', 'tempDir', '.', 'mkdir', '(', ')', ';']",0
HExecutionEngine.java,"['if', '(', '!', 'success', ')']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', '.', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'success', ';']",0
HExecutionEngine.java,"['String', '[', ']', 'cmdarray', '=', 'new', 'String', '[', '2', ']', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '0', ']', '=', '""', 'mkdir', '""', ';']",0
HExecutionEngine.java,"['cmdarray', '[', '1', ']', '=', 'dir', ';']",0
HExecutionEngine.java,"['runCommand', '(', 'server', ',', 'cmdarray', ',', 'false', ')', ';']",0
HExecutionEngine.java,"['catch', '(', 'ExecException', 'e', ')', '{']",0
HExecutionEngine.java,"['log', '.', 'warn', '(', '""', 'Failed', 'to', 'create', 'HOD', 'configuration', 'directory', '-', '""', '+', 'dir', '+', '""', 'Retrying', '.', '.', '.', '""', ')', ';']",0
HExecutionEngine.java,"['return', 'false', ';']",0
HExecutionEngine.java,"['return', 'true', ';']",0
HExecutionEngine.java,"['/', '/', 'returns', 'number', 'of', 'nodes', 'based', 'on', '-', 'm', 'option', 'in', 'hodParams', 'if', 'present', ';']",0
HExecutionEngine.java,"['/', '/', 'otherwise', ',', 'default', 'is', 'used', ';', '-', 'm', 'is', 'removed', 'from', 'the', 'params']",0
HExecutionEngine.java,"['int', 'getNumNodes', '(', 'StringBuilder', 'hodParams', ')', '{']",0
HExecutionEngine.java,"['String', 'val', '=', 'hodParams', '.', 'toString', '(', ')', ';']",0
HExecutionEngine.java,"['int', 'startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '=', '=', '-', '1', ')']",0
HExecutionEngine.java,"['startPos', '=', 'val', '.', 'indexOf', '(', '""', '-', 'm', '\\', 't', '""', ')', ';']",0
HExecutionEngine.java,"['if', '(', 'startPos', '!', '=', '-', '1', ')', '{']",0
HExecutionEngine.java,"['int', 'curPos', '=', 'startPos', '+', '3', ';']",0
HExecutionEngine.java,"['int', 'len', '=', 'val', '.', 'length', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isWhitespace', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'numStartPos', '=', 'curPos', ';']",0
HExecutionEngine.java,"['while', '(', 'curPos', '<', 'len', '&', '&', 'Character', '.', 'isDigit', '(', 'val', '.', 'charAt', '(', 'curPos', ')', ')', ')', 'curPos', '+', '+', ';']",0
HExecutionEngine.java,"['int', 'nodes', '=', 'Integer', '.', 'parseInt', '(', 'val', '.', 'substring', '(', 'numStartPos', ',', 'curPos', ')', ')', ';']",0
HExecutionEngine.java,"['hodParams', '.', 'delete', '(', 'startPos', ',', 'curPos', ')', ';']",0
HExecutionEngine.java,"['return', 'nodes', ';']",0
HExecutionEngine.java,"['}', 'else', '{']",0
HExecutionEngine.java,"['return', 'Integer', '.', 'getInteger', '(', '""', 'hod', '.', 'nodes', '""', ',', '15', ')', ';']",0
HExecutionEngine.java,"['/', '*', '*']",0
HExecutionEngine.java,"['private', 'void', 'recomputeProperties', '(', 'JobConf', 'jobConf', ',', 'Properties', 'properties', ')', '{']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'load', 'the', 'properties', 'from', 'the', 'hadoop', 'configuration']",0
HExecutionEngine.java,"['/', '/', 'We', 'need', 'to', 'load', 'the', 'properties', 'from', 'the', 'hadoop', 'configuration']",0
HExecutionEngine.java,"['/', '/', 'We', 'want', 'to', 'override', 'these', 'with', 'any', 'existing', 'properties', 'we', 'have', '.']",0
HExecutionEngine.java,"['if', '(', 'jobConf', '!', '=', 'null', '&', '&', 'properties', '!', '=', 'null', ')', '{']",0
HExecutionEngine.java,"['Properties', 'hadoopProperties', '=', 'new', 'Properties', '(', ')', ';']",0
HExecutionEngine.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', '>', 'iter', '=', 'jobConf', '.', 'iterator', '(', ')', ';']",0
HExecutionEngine.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', '>', 'iter', '=', 'jobConf', '.', 'iterator', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
HExecutionEngine.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
HExecutionEngine.java,"['Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'entry', '=', 'iter', '.', 'next', '(', ')', ';']",0
HExecutionEngine.java,"['Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'entry', '=', 'iter', '.', 'next', '(', ')', ';']",0
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'entry', '.', 'getKey', '(', ')', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'override', 'hadoop', 'properties', 'with', 'user', 'defined', 'properties']",0
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'propertiesIter', '=', 'properties', '.', 'keys', '(', ')', ';']",0
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'propertiesIter', '=', 'properties', '.', 'keys', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'propertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",0
HExecutionEngine.java,"['while', '(', 'propertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",0
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'propertiesIter', '.', 'nextElement', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'propertiesIter', '.', 'nextElement', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'val', '=', 'properties', '.', 'getProperty', '(', 'key', ')', ';']",0
HExecutionEngine.java,"['String', 'val', '=', 'properties', '.', 'getProperty', '(', 'key', ')', ';']",0
HExecutionEngine.java,"['hadoopProperties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",0
HExecutionEngine.java,"['/', '/', 'clear', 'user', 'defined', 'properties', 'and', 're', '-', 'populate']",0
HExecutionEngine.java,"['/', '/', 'clear', 'user', 'defined', 'properties', 'and', 're', '-', 'populate']",0
HExecutionEngine.java,"['properties', '.', 'clear', '(', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'clear', '(', ')', ';']",0
HExecutionEngine.java,"['Enumeration', '<', 'Object', '>', 'hodPropertiesIter', '=', 'hadoopProperties', '.', 'keys', '(', ')', ';']",0
HExecutionEngine.java,"['while', '(', 'hodPropertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",0
HExecutionEngine.java,"['while', '(', 'hodPropertiesIter', '.', 'hasMoreElements', '(', ')', ')', '{']",0
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'hodPropertiesIter', '.', 'nextElement', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'key', '=', '(', 'String', ')', 'hodPropertiesIter', '.', 'nextElement', '(', ')', ';']",0
HExecutionEngine.java,"['String', 'val', '=', 'hadoopProperties', '.', 'getProperty', '(', 'key', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",0
HExecutionEngine.java,"['properties', '.', 'put', '(', 'key', ',', 'val', ')', ';']",0
POForEach.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', ';']",0
POForEach.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
POForEach.java,"['import', 'java', '.', 'io', '.', 'UnsupportedEncodingException', ';']",0
POForEach.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
POForEach.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
POForEach.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
POForEach.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
POForEach.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POProject', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'PORelationToExprProject', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhyPlanVisitor', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DependencyOrderWalker', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
POForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'pen', '.', 'util', '.', 'ExampleTuple', ';']",0
POForEach.java,"['public', 'class', 'POForEach', 'extends', 'PhysicalOperator', '{']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
POForEach.java,"['protected', 'List', '<', 'PhysicalPlan', '>', 'inputPlans', ';']",0
POForEach.java,"['protected', 'List', '<', 'PhysicalOperator', '>', 'opsToBeReset', ';']",0
POForEach.java,"['protected', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
POForEach.java,"['protected', 'static', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
POForEach.java,"['/', '/', 'Since', 'the', 'plan', 'has', 'a', 'generate', ',', 'this', 'needs', 'to', 'be', 'maintained']",0
POForEach.java,"['/', '/', 'as', 'the', 'generate', 'can', 'potentially', 'return', 'multiple', 'tuples', 'for']",0
POForEach.java,"['/', '/', 'same', 'call', '.']",0
POForEach.java,"['protected', 'boolean', 'processingPlan', '=', 'false', ';']",0
POForEach.java,"['/', '/', 'its', 'holds', 'the', 'iterators', 'of', 'the', 'databags', 'given', 'by', 'the', 'input', 'expressions', 'which', 'need', 'flattening', '.']",0
POForEach.java,"['protected', 'Iterator', '<', 'Tuple', '>', '[', ']', 'its', '=', 'null', ';']",0
POForEach.java,"['/', '/', 'This', 'holds', 'the', 'outputs', 'given', 'out', 'by', 'the', 'input', 'expressions', 'of', 'any', 'datatype']",0
POForEach.java,"['protected', 'Object', '[', ']', 'bags', '=', 'null', ';']",0
POForEach.java,"['/', '/', 'This', 'is', 'the', 'template', 'whcih', 'contains', 'tuples', 'and', 'is', 'flattened', 'out', 'in', 'CreateTuple', '(', ')', 'to', 'generate', 'the', 'final', 'output']",0
POForEach.java,"['protected', 'Object', '[', ']', 'data', '=', 'null', ';']",0
POForEach.java,"['/', '/', 'store', 'result', 'types', 'of', 'the', 'plan', 'leaves']",0
POForEach.java,"['protected', 'byte', '[', ']', 'resultTypes', '=', 'null', ';']",0
POForEach.java,"['/', '/', 'array', 'version', 'of', 'isToBeFlattened', '-', 'this', 'is', 'purely']",0
POForEach.java,"['/', '/', 'for', 'optimization', '-', 'instead', 'of', 'calling', 'isToBeFlattened', '.', 'get', '(', 'i', ')']",0
POForEach.java,"['/', '/', 'we', 'can', 'do', 'the', 'quicker', 'array', 'access', '-', 'isToBeFlattenedArray', '[', 'i', ']', '.']",0
POForEach.java,"['/', '/', 'Also', 'we', 'can', 'store', '""', 'boolean', '""', 'values', 'rather', 'than', '""', 'Boolean', '""', 'objects']",0
POForEach.java,"['/', '/', 'so', 'we', 'can', 'also', 'save', 'on', 'the', 'Boolean', '.', 'booleanValue', '(', ')', 'calls']",0
POForEach.java,"['protected', 'boolean', '[', ']', 'isToBeFlattenedArray', ';']",0
POForEach.java,"['ExampleTuple', 'tIn', '=', 'null', ';']",0
POForEach.java,"['protected', 'int', 'noItems', ';']",0
POForEach.java,"['protected', 'PhysicalOperator', '[', ']', 'planLeafOps', '=', 'null', ';']",0
POForEach.java,"['public', 'POForEach', '(', 'OperatorKey', 'k', ')', '{']",0
POForEach.java,"['this', '(', 'k', ',', '-', '1', ',', 'null', ',', 'null', ')', ';']",0
POForEach.java,"['public', 'POForEach', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'List', 'inp', ')', '{']",0
POForEach.java,"['this', '(', 'k', ',', 'rp', ',', 'inp', ',', 'null', ')', ';']",0
POForEach.java,"['public', 'POForEach', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
POForEach.java,"['this', '(', 'k', ',', 'rp', ',', 'null', ',', 'null', ')', ';']",0
POForEach.java,"['public', 'POForEach', '(', 'OperatorKey', 'k', ',', 'List', 'inp', ')', '{']",0
POForEach.java,"['this', '(', 'k', ',', '-', '1', ',', 'inp', ',', 'null', ')', ';']",0
POForEach.java,"['public', 'POForEach', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'List', '<', 'PhysicalPlan', '>', 'inp', ',', 'List', '<', 'Boolean', '>', 'isToBeFlattened', ')', '{']",0
POForEach.java,"['super', '(', 'k', ',', 'rp', ')', ';']",0
POForEach.java,"['setUpFlattens', '(', 'isToBeFlattened', ')', ';']",0
POForEach.java,"['this', '.', 'inputPlans', '=', 'inp', ';']",0
POForEach.java,"['opsToBeReset', '=', 'new', 'ArrayList', '<', 'PhysicalOperator', '>', '(', ')', ';']",0
POForEach.java,"['getLeaves', '(', ')', ';']",0
POForEach.java,"['public', 'void', 'visit', '(', 'PhyPlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
POForEach.java,"['v', '.', 'visitPOForEach', '(', 'this', ')', ';']",0
POForEach.java,"['public', 'String', 'name', '(', ')', '{']",0
POForEach.java,"['String', 'fString', '=', 'getFlatStr', '(', ')', ';']",0
POForEach.java,"['return', '""', 'New', 'For', 'Each', '""', '+', '""', '(', '""', '+', 'fString', '+', '""', ')', '""', '+', '""', '[', '""', '+', 'DataType', '.', 'findTypeName', '(', 'resultType', ')', '+', '""', ']', '""', '+', '""', '-', '""', '+', 'mKey', '.', 'toString', '(', ')', ';']",0
POForEach.java,"['String', 'getFlatStr', '(', ')', '{']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '=', '=', 'null', ')']",0
POForEach.java,"['return', '""', '""', ';']",0
POForEach.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
POForEach.java,"['for', '(', 'Boolean', 'b', ':', 'isToBeFlattenedArray', ')', '{']",0
POForEach.java,"['sb', '.', 'append', '(', 'b', ')', ';']",0
POForEach.java,"['sb', '.', 'append', '(', ""'"", ',', ""'"", ')', ';']",0
POForEach.java,"['if', '(', 'sb', '.', 'length', '(', ')', '>', '0', ')', '{']",0
POForEach.java,"['sb', '.', 'deleteCharAt', '(', 'sb', '.', 'length', '(', ')', '-', '1', ')', ';']",0
POForEach.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
POForEach.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
POForEach.java,"['return', 'false', ';']",0
POForEach.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
POForEach.java,"['return', 'false', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['public', 'Result', 'getNext', '(', 'Tuple', 't', ')', 'throws', 'ExecException', '{']",0
POForEach.java,"['Result', 'res', '=', 'null', ';']",0
POForEach.java,"['Result', 'inp', '=', 'null', ';']",0
POForEach.java,"['/', '/', 'The', 'nested', 'plan', 'is', 'under', 'processing']",0
POForEach.java,"['/', '/', 'So', 'return', 'tuples', 'that', 'the', 'generate', 'oper']",0
POForEach.java,"['/', '/', 'returns']",0
POForEach.java,"['if', '(', 'processingPlan', ')', '{']",0
POForEach.java,"['while', '(', 'true', ')', '{']",0
POForEach.java,"['res', '=', 'processPlan', '(', ')', ';']",0
POForEach.java,"['if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_OK', ')', '{']",0
POForEach.java,"['if', '(', 'lineageTracer', '!', '=', 'null', '&', '&', 'res', '.', 'result', '!', '=', 'null', ')', '{']",0
POForEach.java,"['ExampleTuple', 'tOut', '=', 'new', 'ExampleTuple', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
POForEach.java,"['tOut', '.', 'synthetic', '=', 'tIn', '.', 'synthetic', ';']",0
POForEach.java,"['lineageTracer', '.', 'insert', '(', 'tOut', ')', ';']",0
POForEach.java,"['lineageTracer', '.', 'union', '(', 'tOut', ',', 'tIn', ')', ';']",0
POForEach.java,"['res', '.', 'result', '=', 'tOut', ';']",0
POForEach.java,"['if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_EOP', ')', '{']",0
POForEach.java,"['processingPlan', '=', 'false', ';']",0
POForEach.java,"['if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_ERR', ')', '{']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_NULL', ')', '{']",0
POForEach.java,"['/', '/', 'The', 'nested', 'plan', 'processing', 'is', 'done', 'or', 'is']",0
POForEach.java,"['/', '/', 'yet', 'to', 'begin', '.', 'So', 'process', 'the', 'input', 'and', 'start']",0
POForEach.java,"['/', '/', 'nested', 'plan', 'processing', 'on', 'the', 'input', 'tuple']",0
POForEach.java,"['/', '/', 'read']",0
POForEach.java,"['while', '(', 'true', ')', '{']",0
POForEach.java,"['inp', '=', 'processInput', '(', ')', ';']",0
POForEach.java,"['if', '(', 'inp', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_EOP', '|', '|']",0
POForEach.java,"['inp', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_ERR', ')', '{']",0
POForEach.java,"['return', 'inp', ';']",0
POForEach.java,"['if', '(', 'inp', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_NULL', ')', '{']",0
POForEach.java,"['attachInputToPlans', '(', '(', 'Tuple', ')', 'inp', '.', 'result', ')', ';']",0
POForEach.java,"['for', '(', 'PhysicalOperator', 'po', ':', 'opsToBeReset', ')', '{']",0
POForEach.java,"['po', '.', 'reset', '(', ')', ';']",0
POForEach.java,"['res', '=', 'processPlan', '(', ')', ';']",0
POForEach.java,"['processingPlan', '=', 'true', ';']",0
POForEach.java,"['if', '(', 'lineageTracer', '!', '=', 'null', '&', '&', 'res', '.', 'result', '!', '=', 'null', ')', '{']",0
POForEach.java,"['/', '/', 'we', 'check', 'for', 'res', '.', 'result', 'since', 'that', 'can', 'also', 'be', 'null', 'in', 'the', 'case', 'of', 'flatten']",0
POForEach.java,"['tIn', '=', '(', 'ExampleTuple', ')', 'inp', '.', 'result', ';']",0
POForEach.java,"['ExampleTuple', 'tOut', '=', 'new', 'ExampleTuple', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
POForEach.java,"['tOut', '.', 'synthetic', '=', 'tIn', '.', 'synthetic', ';']",0
POForEach.java,"['lineageTracer', '.', 'insert', '(', 'tOut', ')', ';']",0
POForEach.java,"['lineageTracer', '.', 'union', '(', 'tOut', ',', 'tIn', ')', ';']",0
POForEach.java,"['res', '.', 'result', '=', 'tOut', ';']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['protected', 'Result', 'processPlan', '(', ')', 'throws', 'ExecException', '{']",0
POForEach.java,"['Result', 'res', '=', 'new', 'Result', '(', ')', ';']",0
POForEach.java,"['/', '/', 'We', 'check', 'if', 'all', 'the', 'databags', 'have', 'exhausted', 'the', 'tuples', '.', 'If', 'so', 'we', 'enforce', 'the', 'reading', 'of', 'new', 'data', 'by', 'setting', 'data', 'and', 'its', 'to', 'null']",0
POForEach.java,"['if', '(', 'its', '!', '=', 'null', ')', '{']",0
POForEach.java,"['boolean', 'restartIts', '=', 'true', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'noItems', ';', '+', '+', 'i', ')', '{']",0
POForEach.java,"['if', '(', 'its', '[', 'i', ']', '!', '=', 'null', '&', '&', 'isToBeFlattenedArray', '[', 'i', ']', '=', '=', 'true', ')']",0
POForEach.java,"['restartIts', '&', '=', '!', 'its', '[', 'i', ']', '.', 'hasNext', '(', ')', ';']",0
POForEach.java,"['/', '/', 'this', 'means', 'that', 'all', 'the', 'databags', 'have', 'reached', 'their', 'last', 'elements', '.', 'so', 'we', 'need', 'to', 'force', 'reading', 'of', 'fresh', 'databags']",0
POForEach.java,"['if', '(', 'restartIts', ')', '{']",0
POForEach.java,"['its', '=', 'null', ';']",0
POForEach.java,"['data', '=', 'null', ';']",0
POForEach.java,"['if', '(', 'its', '=', '=', 'null', ')', '{']",0
POForEach.java,"['/', '/', 'getNext', 'being', 'called', 'for', 'the', 'first', 'time', 'OR', 'starting', 'with', 'a', 'set', 'of', 'new', 'data', 'from', 'inputs']",0
POForEach.java,"['its', '=', 'new', 'Iterator', '[', 'noItems', ']', ';']",0
POForEach.java,"['bags', '=', 'new', 'Object', '[', 'noItems', ']', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'noItems', ';', '+', '+', 'i', ')', '{']",0
POForEach.java,"['/', '/', 'Getting', 'the', 'iterators']",0
POForEach.java,"['/', '/', 'populate', 'the', 'input', 'data']",0
POForEach.java,"['Result', 'inputData', '=', 'null', ';']",0
POForEach.java,"['switch', '(', 'resultTypes', '[', 'i', ']', ')', '{']",0
POForEach.java,"['case', 'DataType', '.', 'BAG', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyBag', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyTuple', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'BYTEARRAY', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyDBA', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'MAP', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyMap', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyBool', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyInt', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyDouble', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'LONG', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyLong', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyFloat', ')', ';']",0
POForEach.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
POForEach.java,"['inputData', '=', 'planLeafOps', '[', 'i', ']', '.', 'getNext', '(', 'dummyString', ')', ';']",0
POForEach.java,"['default', ':', '{']",0
POForEach.java,"['int', 'errCode', '=', '2080', ';']",0
POForEach.java,"['String', 'msg', '=', '""', 'Foreach', 'currently', 'does', 'not', 'handle', 'type', '""', '+', 'DataType', '.', 'findTypeName', '(', 'resultTypes', '[', 'i', ']', ')', ';']",0
POForEach.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
POForEach.java,"['if', '(', 'inputData', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_EOP', ')', '{']",0
POForEach.java,"['/', '/', 'we', 'are', 'done', 'with', 'all', 'the', 'elements', '.', 'Time', 'to', 'return', '.']",0
POForEach.java,"['its', '=', 'null', ';']",0
POForEach.java,"['bags', '=', 'null', ';']",0
POForEach.java,"['return', 'inputData', ';']",0
POForEach.java,"['/', '/', 'if', 'we', 'see', 'a', 'error', 'just', 'return', 'it']",0
POForEach.java,"['if', '(', 'inputData', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_ERR', ')', '{']",0
POForEach.java,"['return', 'inputData', ';']",0
POForEach.java,"['/', '/', 'Object', 'input', '=', 'null', ';']",0
POForEach.java,"['bags', '[', 'i', ']', '=', 'inputData', '.', 'result', ';']",0
POForEach.java,"['if', '(', 'inputData', '.', 'result', 'instanceof', 'DataBag', '&', '&', 'isToBeFlattenedArray', '[', 'i', ']', ')']",0
POForEach.java,"['its', '[', 'i', ']', '=', '(', '(', 'DataBag', ')', 'bags', '[', 'i', ']', ')', '.', 'iterator', '(', ')', ';']",0
POForEach.java,"['its', '[', 'i', ']', '=', 'null', ';']",0
POForEach.java,"['while', '(', 'true', ')', '{']",0
POForEach.java,"['if', '(', 'data', '=', '=', 'null', ')', '{']",0
POForEach.java,"['/', '/', 'getNext', 'being', 'called', 'for', 'the', 'first', 'time', 'or', 'starting', 'on', 'new', 'input', 'data']",0
POForEach.java,"['/', '/', 'we', 'instantiate', 'the', 'template', 'array', 'and', 'start', 'populating', 'it', 'with', 'data']",0
POForEach.java,"['data', '=', 'new', 'Object', '[', 'noItems', ']', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'noItems', ';', '+', '+', 'i', ')', '{']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '[', 'i', ']', '&', '&', 'bags', '[', 'i', ']', 'instanceof', 'DataBag', ')', '{']",0
POForEach.java,"['if', '(', 'its', '[', 'i', ']', '.', 'hasNext', '(', ')', ')', '{']",0
POForEach.java,"['data', '[', 'i', ']', '=', 'its', '[', 'i', ']', '.', 'next', '(', ')', ';']",0
POForEach.java,"['}', 'else', '{']",0
POForEach.java,"['/', '/', 'the', 'input', 'set', 'is', 'null', ',', 'so', 'we', 'return', '.', 'This', 'is']",0
POForEach.java,"['/', '/', 'caught', 'above', 'and', 'this', 'function', 'recalled', 'with']",0
POForEach.java,"['/', '/', 'new', 'inputs', '.']",0
POForEach.java,"['its', '=', 'null', ';']",0
POForEach.java,"['data', '=', 'null', ';']",0
POForEach.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_NULL', ';']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['}', 'else', '{']",0
POForEach.java,"['data', '[', 'i', ']', '=', 'bags', '[', 'i', ']', ';']",0
POForEach.java,"['if', '(', 'reporter', '!', '=', 'null', ')', 'reporter', '.', 'progress', '(', ')', ';']",0
POForEach.java,"['/', '/', 'CreateTuple', '(', 'data', ')', ';']",0
POForEach.java,"['res', '.', 'result', '=', 'CreateTuple', '(', 'data', ')', ';']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['}', 'else', '{']",0
POForEach.java,"['/', '/', 'we', 'try', 'to', 'find', 'the', 'last', 'expression', 'which', 'needs', 'flattening', 'and', 'start', 'iterating', 'over', 'it']",0
POForEach.java,"['/', '/', 'we', 'also', 'try', 'to', 'update', 'the', 'template', 'array']",0
POForEach.java,"['for', '(', 'int', 'index', '=', 'noItems', '-', '1', ';', 'index', '>', '=', '0', ';', '-', '-', 'index', ')', '{']",0
POForEach.java,"['if', '(', 'its', '[', 'index', ']', '!', '=', 'null', '&', '&', 'isToBeFlattenedArray', '[', 'index', ']', ')', '{']",0
POForEach.java,"['if', '(', 'its', '[', 'index', ']', '.', 'hasNext', '(', ')', ')', '{']",0
POForEach.java,"['data', '[', 'index', ']', '=', 'its', '[', 'index', ']', '.', 'next', '(', ')', ';']",0
POForEach.java,"['res', '.', 'result', '=', 'CreateTuple', '(', 'data', ')', ';']",0
POForEach.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POForEach.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POForEach.java,"['return', 'res', ';']",0
POForEach.java,"['/', '/', 'reset', 'this', 'index', ""'"", 's', 'iterator', 'so', 'cross', 'product', 'can', 'be', 'achieved']",0
POForEach.java,"['/', '/', 'we', 'would', 'be', 'resetting', 'this', 'way', 'only', 'for', 'the', 'indexes', 'from', 'the', 'end']",0
POForEach.java,"['/', '/', 'when', 'the', 'first', 'index', 'which', 'needs', 'to', 'be', 'flattened', 'has', 'reached', 'the']",0
POForEach.java,"['/', '/', 'last', 'element', 'in', 'its', 'iterator', ',', 'we', 'won', ""'"", 't', 'come', 'here', '-', 'instead', ',', 'we', 'reset']",0
POForEach.java,"['/', '/', 'all', 'iterators', 'at', 'the', 'beginning', 'of', 'this', 'method', '.']",0
POForEach.java,"['its', '[', 'index', ']', '=', '(', '(', 'DataBag', ')', 'bags', '[', 'index', ']', ')', '.', 'iterator', '(', ')', ';']",0
POForEach.java,"['data', '[', 'index', ']', '=', 'its', '[', 'index', ']', '.', 'next', '(', ')', ';']",0
POForEach.java,"['/', '/', 'return', 'null', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['protected', 'Tuple', 'CreateTuple', '(', 'Object', '[', ']', 'data', ')', 'throws', 'ExecException', '{']",0
POForEach.java,"['Tuple', 'out', '=', 'mTupleFactory', '.', 'newTuple', '(', ')', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'data', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
POForEach.java,"['Object', 'in', '=', 'data', '[', 'i', ']', ';']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '[', 'i', ']', '&', '&', 'in', 'instanceof', 'Tuple', ')', '{']",0
POForEach.java,"['Tuple', 't', '=', '(', 'Tuple', ')', 'in', ';']",0
POForEach.java,"['int', 'size', '=', 't', '.', 'size', '(', ')', ';']",0
POForEach.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'size', ';', '+', '+', 'j', ')', '{']",0
POForEach.java,"['out', '.', 'append', '(', 't', '.', 'get', '(', 'j', ')', ')', ';']",0
POForEach.java,"['out', '.', 'append', '(', 'in', ')', ';']",0
POForEach.java,"['if', '(', 'lineageTracer', '!', '=', 'null', ')', '{']",0
POForEach.java,"['ExampleTuple', 'tOut', '=', 'new', 'ExampleTuple', '(', ')', ';']",0
POForEach.java,"['tOut', '.', 'reference', '(', 'out', ')', ';']",0
POForEach.java,"['return', 'out', ';']",0
POForEach.java,"['protected', 'void', 'attachInputToPlans', '(', 'Tuple', 't', ')', '{']",0
POForEach.java,"['/', '/', 'super', '.', 'attachInput', '(', 't', ')', ';']",0
POForEach.java,"['for', '(', 'PhysicalPlan', 'p', ':', 'inputPlans', ')', '{']",0
POForEach.java,"['p', '.', 'attachInput', '(', 't', ')', ';']",0
POForEach.java,"['protected', 'void', 'getLeaves', '(', ')', '{']",0
POForEach.java,"['if', '(', 'inputPlans', '!', '=', 'null', ')', '{']",0
POForEach.java,"['int', 'i', '=', '-', '1', ';']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '=', '=', 'null', ')', '{']",0
POForEach.java,"['isToBeFlattenedArray', '=', 'new', 'boolean', '[', 'inputPlans', '.', 'size', '(', ')', ']', ';']",0
POForEach.java,"['planLeafOps', '=', 'new', 'PhysicalOperator', '[', 'inputPlans', '.', 'size', '(', ')', ']', ';']",0
POForEach.java,"['for', '(', 'PhysicalPlan', 'p', ':', 'inputPlans', ')', '{']",0
POForEach.java,"['+', '+', 'i', ';']",0
POForEach.java,"['PhysicalOperator', 'leaf', '=', '(', 'PhysicalOperator', ')', 'p', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
POForEach.java,"['planLeafOps', '[', 'i', ']', '=', 'leaf', ';']",0
POForEach.java,"['if', '(', 'leaf', 'instanceof', 'POProject', '&', '&']",0
POForEach.java,"['leaf', '.', 'getResultType', '(', ')', '=', '=', 'DataType', '.', 'TUPLE', '&', '&']",0
POForEach.java,"['(', '(', 'POProject', ')', 'leaf', ')', '.', 'isStar', '(', ')', ')']",0
POForEach.java,"['isToBeFlattenedArray', '[', 'i', ']', '=', 'true', ';']",0
POForEach.java,"['/', '/', 'we', 'are', 'calculating', 'plan', 'leaves']",0
POForEach.java,"['/', '/', 'so', 'lets', 'reinitialize']",0
POForEach.java,"['reInitialize', '(', ')', ';']",0
POForEach.java,"['private', 'void', 'reInitialize', '(', ')', '{']",0
POForEach.java,"['if', '(', 'planLeafOps', '!', '=', 'null', ')', '{']",0
POForEach.java,"['noItems', '=', 'planLeafOps', '.', 'length', ';']",0
POForEach.java,"['resultTypes', '=', 'new', 'byte', '[', 'noItems', ']', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'resultTypes', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
POForEach.java,"['resultTypes', '[', 'i', ']', '=', 'planLeafOps', '[', 'i', ']', '.', 'getResultType', '(', ')', ';']",0
POForEach.java,"['}', 'else', '{']",0
POForEach.java,"['noItems', '=', '0', ';']",0
POForEach.java,"['resultTypes', '=', 'null', ';']",0
POForEach.java,"['if', '(', 'inputPlans', '!', '=', 'null', ')', '{']",0
POForEach.java,"['for', '(', 'PhysicalPlan', 'pp', ':', 'inputPlans', ')', '{']",0
POForEach.java,"['ResetFinder', 'lf', '=', 'new', 'ResetFinder', '(', 'pp', ',', 'opsToBeReset', ')', ';']",0
POForEach.java,"['lf', '.', 'visit', '(', ')', ';']",0
POForEach.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",0
POForEach.java,"['String', 'errMsg', '=', '""', 'Internal', 'Error', ':', 'Unexpected', 'error', 'looking', 'for', 'nested', 'operators', 'which', 'need', 'to', 'be', 'reset', 'in', 'FOREACH', '""', ';']",0
POForEach.java,"['throw', 'new', 'RuntimeException', '(', 'errMsg', ',', 've', ')', ';']",0
POForEach.java,"['public', 'List', '<', 'PhysicalPlan', '>', 'getInputPlans', '(', ')', '{']",0
POForEach.java,"['return', 'inputPlans', ';']",0
POForEach.java,"['public', 'void', 'setInputPlans', '(', 'List', '<', 'PhysicalPlan', '>', 'plans', ')', '{']",0
POForEach.java,"['inputPlans', '=', 'plans', ';']",0
POForEach.java,"['planLeafOps', '=', 'null', ';']",0
POForEach.java,"['getLeaves', '(', ')', ';']",0
POForEach.java,"['public', 'void', 'addInputPlan', '(', 'PhysicalPlan', 'plan', ',', 'boolean', 'flatten', ')', '{']",0
POForEach.java,"['inputPlans', '.', 'add', '(', 'plan', ')', ';']",0
POForEach.java,"['/', '/', 'add', 'to', 'planLeafOps']",0
POForEach.java,"['/', '/', 'copy', 'existing', 'leaves']",0
POForEach.java,"['PhysicalOperator', '[', ']', 'newPlanLeafOps', '=', 'new', 'PhysicalOperator', '[', 'planLeafOps', '.', 'length', '+', '1', ']', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'planLeafOps', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
POForEach.java,"['newPlanLeafOps', '[', 'i', ']', '=', 'planLeafOps', '[', 'i', ']', ';']",0
POForEach.java,"['/', '/', 'add', 'to', 'the', 'end']",0
POForEach.java,"['newPlanLeafOps', '[', 'planLeafOps', '.', 'length', ']', '=', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
POForEach.java,"['planLeafOps', '=', 'newPlanLeafOps', ';']",0
POForEach.java,"['/', '/', 'add', 'to', 'isToBeFlattenedArray']",0
POForEach.java,"['/', '/', 'copy', 'existing', 'values']",0
POForEach.java,"['boolean', '[', ']', 'newIsToBeFlattenedArray', '=', 'new', 'boolean', '[', 'isToBeFlattenedArray', '.', 'length', '+', '1', ']', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isToBeFlattenedArray', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
POForEach.java,"['newIsToBeFlattenedArray', '[', 'i', ']', '=', 'isToBeFlattenedArray', '[', 'i', ']', ';']",0
POForEach.java,"['/', '/', 'add', 'to', 'end']",0
POForEach.java,"['newIsToBeFlattenedArray', '[', 'isToBeFlattenedArray', '.', 'length', ']', '=', 'flatten', ';']",0
POForEach.java,"['isToBeFlattenedArray', '=', 'newIsToBeFlattenedArray', ';']",0
POForEach.java,"['/', '/', 'we', 'just', 'added', 'a', 'leaf', '-', 'reinitialize']",0
POForEach.java,"['reInitialize', '(', ')', ';']",0
POForEach.java,"['public', 'void', 'setToBeFlattened', '(', 'List', '<', 'Boolean', '>', 'flattens', ')', '{']",0
POForEach.java,"['setUpFlattens', '(', 'flattens', ')', ';']",0
POForEach.java,"['public', 'List', '<', 'Boolean', '>', 'getToBeFlattened', '(', ')', '{']",0
POForEach.java,"['List', '<', 'Boolean', '>', 'result', '=', 'null', ';']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '!', '=', 'null', ')', '{']",0
POForEach.java,"['result', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
POForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isToBeFlattenedArray', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
POForEach.java,"['result', '.', 'add', '(', 'isToBeFlattenedArray', '[', 'i', ']', ')', ';']",0
POForEach.java,"['return', 'result', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['public', 'POForEach', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
POForEach.java,"['List', '<', 'PhysicalPlan', '>', 'plans', '=', 'new']",0
POForEach.java,"['ArrayList', '<', 'PhysicalPlan', '>', '(', 'inputPlans', '.', 'size', '(', ')', ')', ';']",0
POForEach.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'inputPlans', ')', '{']",0
POForEach.java,"['plans', '.', 'add', '(', 'plan', '.', 'clone', '(', ')', ')', ';']",0
POForEach.java,"['List', '<', 'Boolean', '>', 'flattens', '=', 'null', ';']",0
POForEach.java,"['if', '(', 'isToBeFlattenedArray', '!', '=', 'null', ')', '{']",0
POForEach.java,"['flattens', '=', 'new']",0
POForEach.java,"['ArrayList', '<', 'Boolean', '>', '(', 'isToBeFlattenedArray', '.', 'length', ')', ';']",0
POForEach.java,"['for', '(', 'boolean', 'b', ':', 'isToBeFlattenedArray', ')', '{']",0
POForEach.java,"['flattens', '.', 'add', '(', 'b', ')', ';']",0
POForEach.java,"['List', '<', 'PhysicalOperator', '>', 'ops', '=', 'new', 'ArrayList', '<', 'PhysicalOperator', '>', '(', 'opsToBeReset', '.', 'size', '(', ')', ')', ';']",0
POForEach.java,"['for', '(', 'PhysicalOperator', 'op', ':', 'opsToBeReset', ')', '{']",0
POForEach.java,"['ops', '.', 'add', '(', 'op', ')', ';']",0
POForEach.java,"['POForEach', 'clone', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'mKey', '.', 'scope', ',']",0
POForEach.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'mKey', '.', 'scope', ')', ')', ',']",0
POForEach.java,"['requestedParallelism', ',', 'plans', ',', 'flattens', ')', ';']",0
POForEach.java,"['clone', '.', 'setOpsToBeReset', '(', 'ops', ')', ';']",0
POForEach.java,"['clone', '.', 'setResultType', '(', 'getResultType', '(', ')', ')', ';']",0
POForEach.java,"['return', 'clone', ';']",0
POForEach.java,"['public', 'boolean', 'inProcessing', '(', ')']",0
POForEach.java,"['return', 'processingPlan', ';']",0
POForEach.java,"['protected', 'void', 'setUpFlattens', '(', 'List', '<', 'Boolean', '>', 'isToBeFlattened', ')', '{']",0
POForEach.java,"['if', '(', 'isToBeFlattened', '=', '=', 'null', ')', '{']",0
POForEach.java,"['isToBeFlattenedArray', '=', 'null', ';']",0
POForEach.java,"['}', 'else', '{']",0
POForEach.java,"['isToBeFlattenedArray', '=', 'new', 'boolean', '[', 'isToBeFlattened', '.', 'size', '(', ')', ']', ';']",0
POForEach.java,"['int', 'i', '=', '0', ';']",0
POForEach.java,"['for', '(', 'Iterator', '<', 'Boolean', '>', 'it', '=', 'isToBeFlattened', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
POForEach.java,"['isToBeFlattenedArray', '[', 'i', '+', '+', ']', '=', 'it', '.', 'next', '(', ')', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['private', 'class', 'ResetFinder', 'extends', 'PhyPlanVisitor', '{']",0
POForEach.java,"['ResetFinder', '(', 'PhysicalPlan', 'plan', ',', 'List', '<', 'PhysicalOperator', '>', 'toBeReset', ')', '{']",0
POForEach.java,"['super', '(', 'plan', ',']",0
POForEach.java,"['new', 'DependencyOrderWalker', '<', 'PhysicalOperator', ',', 'PhysicalPlan', '>', '(', 'plan', ')', ')', ';']",0
POForEach.java,"['public', 'void', 'visitDistinct', '(', 'PODistinct', 'd', ')', 'throws', 'VisitorException', '{']",0
POForEach.java,"['/', '/', 'FIXME', ':', 'add', 'only', 'if', 'limit', 'is', 'present']",0
POForEach.java,"['opsToBeReset', '.', 'add', '(', 'd', ')', ';']",0
POForEach.java,"['public', 'void', 'visitLimit', '(', 'POLimit', 'limit', ')', 'throws', 'VisitorException', '{']",0
POForEach.java,"['opsToBeReset', '.', 'add', '(', 'limit', ')', ';']",0
POForEach.java,"['public', 'void', 'visitSort', '(', 'POSort', 'sort', ')', 'throws', 'VisitorException', '{']",0
POForEach.java,"['/', '/', 'FIXME', ':', 'add', 'only', 'if', 'limit', 'is', 'present']",0
POForEach.java,"['opsToBeReset', '.', 'add', '(', 'sort', ')', ';']",0
POForEach.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
POForEach.java,"['public', 'void', 'visitProject', '(', 'POProject', 'proj', ')', 'throws', 'VisitorException', '{']",0
POForEach.java,"['if', '(', 'proj', 'instanceof', 'PORelationToExprProject', ')', '{']",0
POForEach.java,"['opsToBeReset', '.', 'add', '(', 'proj', ')', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['public', 'List', '<', 'PhysicalOperator', '>', 'getOpsToBeReset', '(', ')', '{']",0
POForEach.java,"['return', 'opsToBeReset', ';']",0
POForEach.java,"['/', '*', '*']",0
POForEach.java,"['public', 'void', 'setOpsToBeReset', '(', 'List', '<', 'PhysicalOperator', '>', 'opsToBeReset', ')', '{']",0
POForEach.java,"['this', '.', 'opsToBeReset', '=', 'opsToBeReset', ';']",0
DefaultAbstractBag.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'BufferedOutputStream', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'DataOutputStream', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'DataInput', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'DataOutput', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
DefaultAbstractBag.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PigLogger', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Spillable', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
DefaultAbstractBag.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'abstract', 'class', 'DefaultAbstractBag', 'implements', 'DataBag', '{']",0
DefaultAbstractBag.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'DataBag', '.', 'class', ')', ';']",0
DefaultAbstractBag.java,"['private', 'static', 'PigLogger', 'pigLogger', '=', 'PhysicalOperator', '.', 'getPigLogger', '(', ')', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Container', 'that', 'holds', 'the', 'tuples', '.', 'Actual', 'object', 'instantiated', 'by']",0
DefaultAbstractBag.java,"['/', '/', 'subclasses', '.']",0
DefaultAbstractBag.java,"['protected', 'Collection', '<', 'Tuple', '>', 'mContents', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Spill', 'files', 'we', ""'"", 've', 'created', '.', 'These', 'need', 'to', 'be', 'removed', 'in', 'finalize', '.']",0
DefaultAbstractBag.java,"['protected', 'ArrayList', '<', 'File', '>', 'mSpillFiles', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Total', 'size', ',', 'including', 'tuples', 'on', 'disk', '.', 'Stored', 'here', 'so', 'we', 'don', ""'"", 't', 'have']",0
DefaultAbstractBag.java,"['/', '/', 'to', 'run', 'through', 'the', 'disk', 'when', 'people', 'ask', '.']",0
DefaultAbstractBag.java,"['protected', 'long', 'mSize', '=', '0', ';']",0
DefaultAbstractBag.java,"['protected', 'boolean', 'mMemSizeChanged', '=', 'false', ';']",0
DefaultAbstractBag.java,"['protected', 'long', 'mMemSize', '=', '0', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'long', 'size', '(', ')', '{']",0
DefaultAbstractBag.java,"['return', 'mSize', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'add', '(', 'Tuple', 't', ')', '{']",0
DefaultAbstractBag.java,"['synchronized', '(', 'mContents', ')', '{']",0
DefaultAbstractBag.java,"['mMemSizeChanged', '=', 'true', ';']",0
DefaultAbstractBag.java,"['mSize', '+', '+', ';']",0
DefaultAbstractBag.java,"['mContents', '.', 'add', '(', 't', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'addAll', '(', 'DataBag', 'b', ')', '{']",0
DefaultAbstractBag.java,"['synchronized', '(', 'mContents', ')', '{']",0
DefaultAbstractBag.java,"['mMemSizeChanged', '=', 'true', ';']",0
DefaultAbstractBag.java,"['mSize', '+', '=', 'b', '.', 'size', '(', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'b', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'mContents', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'addAll', '(', 'Collection', '<', 'Tuple', '>', 'c', ')', '{']",0
DefaultAbstractBag.java,"['synchronized', '(', 'mContents', ')', '{']",0
DefaultAbstractBag.java,"['mMemSizeChanged', '=', 'true', ';']",0
DefaultAbstractBag.java,"['mSize', '+', '=', 'c', '.', 'size', '(', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'c', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'mContents', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'long', 'getMemorySize', '(', ')', '{']",0
DefaultAbstractBag.java,"['if', '(', '!', 'mMemSizeChanged', ')', 'return', 'mMemSize', ';']",0
DefaultAbstractBag.java,"['long', 'used', '=', '0', ';']",0
DefaultAbstractBag.java,"['/', '/', 'I', 'can', ""'"", 't', 'afford', 'to', 'talk', 'through', 'all', 'the', 'tuples', 'every', 'time', 'the']",0
DefaultAbstractBag.java,"['/', '/', 'memory', 'manager', 'wants', 'to', 'know', 'if', 'it', ""'"", 's', 'time', 'to', 'dump', '.', 'Just', 'sample']",0
DefaultAbstractBag.java,"['/', '/', 'the', 'first', '100', 'and', 'see', 'what', 'we', 'get', '.', 'This', 'may', 'not', 'be', '100', '%']",0
DefaultAbstractBag.java,"['/', '/', 'accurate', ',', 'but', 'it', ""'"", 's', 'just', 'an', 'estimate', 'anyway', '.']",0
DefaultAbstractBag.java,"['int', 'j', ';']",0
DefaultAbstractBag.java,"['int', 'numInMem', '=', '0', ';']",0
DefaultAbstractBag.java,"['synchronized', '(', 'mContents', ')', '{']",0
DefaultAbstractBag.java,"['numInMem', '=', 'mContents', '.', 'size', '(', ')', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Measure', 'only', 'what', ""'"", 's', 'in', 'memory', ',', 'not', 'what', ""'"", 's', 'on', 'disk', '.']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'mContents', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['for', '(', 'j', '=', '0', ';', 'i', '.', 'hasNext', '(', ')', '&', '&', 'j', '<', '100', ';', 'j', '+', '+', ')', '{']",0
DefaultAbstractBag.java,"['used', '+', '=', 'i', '.', 'next', '(', ')', '.', 'getMemorySize', '(', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'numInMem', '>', '100', ')', '{']",0
DefaultAbstractBag.java,"['/', '/', 'Estimate', 'the', 'per', 'tuple', 'size', '.', 'Do', 'it', 'in', 'integer', 'arithmetic']",0
DefaultAbstractBag.java,"['/', '/', '(', 'even', 'though', 'it', 'will', 'be', 'slightly', 'less', 'accurate', ')', 'for', 'speed', '.']",0
DefaultAbstractBag.java,"['used', '/', '=', 'j', ';']",0
DefaultAbstractBag.java,"['used', '*', '=', 'numInMem', ';']",0
DefaultAbstractBag.java,"['mMemSize', '=', 'used', ';']",0
DefaultAbstractBag.java,"['mMemSizeChanged', '=', 'false', ';']",0
DefaultAbstractBag.java,"['return', 'used', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'clear', '(', ')', '{']",0
DefaultAbstractBag.java,"['synchronized', '(', 'mContents', ')', '{']",0
DefaultAbstractBag.java,"['mContents', '.', 'clear', '(', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'mSpillFiles', '!', '=', 'null', ')', '{']",0
DefaultAbstractBag.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mSpillFiles', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
DefaultAbstractBag.java,"['mSpillFiles', '.', 'get', '(', 'i', ')', '.', 'delete', '(', ')', ';']",0
DefaultAbstractBag.java,"['mSpillFiles', '.', 'clear', '(', ')', ';']",0
DefaultAbstractBag.java,"['mSize', '=', '0', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'int', 'compareTo', '(', 'Object', 'other', ')', '{']",0
DefaultAbstractBag.java,"['if', '(', 'this', '=', '=', 'other', ')']",0
DefaultAbstractBag.java,"['return', '0', ';']",0
DefaultAbstractBag.java,"['if', '(', 'other', 'instanceof', 'DataBag', ')', '{']",0
DefaultAbstractBag.java,"['DataBag', 'bOther', '=', '(', 'DataBag', ')', 'other', ';']",0
DefaultAbstractBag.java,"['if', '(', 'this', '.', 'size', '(', ')', '!', '=', 'bOther', '.', 'size', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['if', '(', 'this', '.', 'size', '(', ')', '>', 'bOther', '.', 'size', '(', ')', ')', 'return', '1', ';']",0
DefaultAbstractBag.java,"['else', 'return', '-', '1', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Ugh', ',', 'this', 'is', 'bogus', '.', 'But', 'I', 'have', 'to', 'know', 'if', 'two', 'bags', 'have', 'the']",0
DefaultAbstractBag.java,"['/', '/', 'same', 'tuples', ',', 'regardless', 'of', 'order', '.', 'Hopefully', 'most', 'of', 'the']",0
DefaultAbstractBag.java,"['/', '/', 'time', 'the', 'size', 'check', 'above', 'will', 'prevent', 'this', '.']",0
DefaultAbstractBag.java,"['/', '/', 'If', 'either', 'bag', 'isn', ""'"", 't', 'already', 'sorted', ',', 'create', 'a', 'sorted', 'bag', 'out']",0
DefaultAbstractBag.java,"['/', '/', 'of', 'it', 'so', 'I', 'can', 'guarantee', 'order', '.']",0
DefaultAbstractBag.java,"['DataBag', 'thisClone', ';']",0
DefaultAbstractBag.java,"['DataBag', 'otherClone', ';']",0
DefaultAbstractBag.java,"['if', '(', 'this', 'instanceof', 'SortedDataBag', '|', '|']",0
DefaultAbstractBag.java,"['this', 'instanceof', 'DistinctDataBag', ')', '{']",1
DefaultAbstractBag.java,"['thisClone', '=', 'this', ';']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['thisClone', '=', 'new', 'SortedDataBag', '(', 'null', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'thisClone', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'other', 'instanceof', 'SortedDataBag', '|', '|']",0
DefaultAbstractBag.java,"['other', 'instanceof', 'DistinctDataBag', ')', '{']",0
DefaultAbstractBag.java,"['otherClone', '=', 'bOther', ';']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['otherClone', '=', 'new', 'SortedDataBag', '(', 'null', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'bOther', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'otherClone', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'thisIt', '=', 'thisClone', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'otherIt', '=', 'otherClone', '.', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'thisIt', '.', 'hasNext', '(', ')', '&', '&', 'otherIt', '.', 'hasNext', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['Tuple', 'thisT', '=', 'thisIt', '.', 'next', '(', ')', ';']",0
DefaultAbstractBag.java,"['Tuple', 'otherT', '=', 'otherIt', '.', 'next', '(', ')', ';']",0
DefaultAbstractBag.java,"['int', 'c', '=', 'thisT', '.', 'compareTo', '(', 'otherT', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'c', '!', '=', '0', ')', 'return', 'c', ';']",0
DefaultAbstractBag.java,"['return', '0', ';', '/', '/', 'if', 'we', 'got', 'this', 'far', ',', 'they', 'must', 'be', 'equal']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['return', 'DataType', '.', 'compare', '(', 'this', ',', 'other', ')', ';']",0
DefaultAbstractBag.java,"['public', 'boolean', 'equals', '(', 'Object', 'other', ')', '{']",0
DefaultAbstractBag.java,"['return', 'compareTo', '(', 'other', ')', '=', '=', '0', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'write', '(', 'DataOutput', 'out', ')', 'throws', 'IOException', '{']",0
DefaultAbstractBag.java,"['/', '/', 'We', 'don', ""'"", 't', 'care', 'whether', 'this', 'bag', 'was', 'sorted', 'or', 'distinct', 'because']",0
DefaultAbstractBag.java,"['/', '/', 'using', 'the', 'iterator', 'to', 'write', 'it', 'will', 'guarantee', 'those', 'things', 'come']",0
DefaultAbstractBag.java,"['/', '/', 'correctly', '.', 'And', 'on', 'the', 'other', 'end', 'there', ""'"", 'll', 'be', 'no', 'reason', 'to', 'waste']",0
DefaultAbstractBag.java,"['/', '/', 'time', 're', '-', 'sorting', 'or', 're', '-', 'applying', 'distinct', '.']",0
DefaultAbstractBag.java,"['out', '.', 'writeLong', '(', 'size', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['Tuple', 'item', '=', 'it', '.', 'next', '(', ')', ';']",0
DefaultAbstractBag.java,"['item', '.', 'write', '(', 'out', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'readFields', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DefaultAbstractBag.java,"['long', 'size', '=', 'in', '.', 'readLong', '(', ')', ';']",0
DefaultAbstractBag.java,"['for', '(', 'long', 'i', '=', '0', ';', 'i', '<', 'size', ';', 'i', '+', '+', ')', '{']",0
DefaultAbstractBag.java,"['Object', 'o', '=', 'DataReaderWriter', '.', 'readDatum', '(', 'in', ')', ';']",0
DefaultAbstractBag.java,"['add', '(', '(', 'Tuple', ')', 'o', ')', ';']",0
DefaultAbstractBag.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
DefaultAbstractBag.java,"['throw', 'ee', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'void', 'markStale', '(', 'boolean', 'stale', ')']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['public', 'String', 'toString', '(', ')', '{']",0
DefaultAbstractBag.java,"['StringBuffer', 'sb', '=', 'new', 'StringBuffer', '(', ')', ';']",0
DefaultAbstractBag.java,"['sb', '.', 'append', '(', ""'"", '{', ""'"", ')', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['Tuple', 't', '=', 'it', '.', 'next', '(', ')', ';']",0
DefaultAbstractBag.java,"['String', 's', '=', 't', '.', 'toString', '(', ')', ';']",0
DefaultAbstractBag.java,"['sb', '.', 'append', '(', 's', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'it', '.', 'hasNext', '(', ')', ')', 'sb', '.', 'append', '(', '""', ',', '""', ')', ';']",0
DefaultAbstractBag.java,"['sb', '.', 'append', '(', ""'"", '}', ""'"", ')', ';']",0
DefaultAbstractBag.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
DefaultAbstractBag.java,"['public', 'int', 'hashCode', '(', ')', '{']",0
DefaultAbstractBag.java,"['int', 'hash', '=', '1', ';']",0
DefaultAbstractBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'iterator', '(', ')', ';']",0
DefaultAbstractBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['/', '/', 'Use', '37', 'because', 'we', 'want', 'a', 'prime', ',', 'and', 'tuple', 'uses', '31', '.']",0
DefaultAbstractBag.java,"['hash', '=', '37', '*', 'hash', '+', 'i', '.', 'next', '(', ')', '.', 'hashCode', '(', ')', ';']",0
DefaultAbstractBag.java,"['return', 'hash', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['protected', 'void', 'finalize', '(', ')', '{']",0
DefaultAbstractBag.java,"['if', '(', 'mSpillFiles', '!', '=', 'null', ')', '{']",0
DefaultAbstractBag.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mSpillFiles', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
DefaultAbstractBag.java,"['mSpillFiles', '.', 'get', '(', 'i', ')', '.', 'delete', '(', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['protected', 'DataOutputStream', 'getSpillFile', '(', ')', 'throws', 'IOException', '{']",0
DefaultAbstractBag.java,"['if', '(', 'mSpillFiles', '=', '=', 'null', ')', '{']",0
DefaultAbstractBag.java,"['/', '/', 'We', 'want', 'to', 'keep', 'the', 'list', 'as', 'small', 'as', 'possible', '.']",0
DefaultAbstractBag.java,"['mSpillFiles', '=', 'new', 'ArrayList', '<', 'File', '>', '(', '1', ')', ';']",0
DefaultAbstractBag.java,"['String', 'tmpDirName', '=', 'System', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'java', '.', 'io', '.', 'tmpdir', '""', ')', ';']",0
DefaultAbstractBag.java,"['File', 'tmpDir', '=', 'new', 'File', '(', 'tmpDirName', ')', ';']",0
DefaultAbstractBag.java,"['/', '/', 'if', 'the', 'directory', 'does', 'not', 'exist', ',', 'create', 'it', '.']",0
DefaultAbstractBag.java,"['if', '(', '!', 'tmpDir', '.', 'exists', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['log', '.', 'info', '(', '""', 'Temporary', 'directory', 'doesn', ""'"", 't', 'exists', '.', 'Trying', 'to', 'create', ':', '""', '+', 'tmpDir', '.', 'getAbsolutePath', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['/', '/', 'Create', 'the', 'directory', 'and', 'see', 'if', 'it', 'was', 'successful']",0
DefaultAbstractBag.java,"['if', '(', 'tmpDir', '.', 'mkdir', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['log', '.', 'info', '(', '""', 'Successfully', 'created', 'temporary', 'directory', ':', '""', '+', 'tmpDir', '.', 'getAbsolutePath', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['/', '/', 'If', 'execution', 'reaches', 'here', ',', 'it', 'means', 'that', 'we', 'needed', 'to', 'create', 'the', 'directory', 'but']",0
DefaultAbstractBag.java,"['/', '/', 'were', 'not', 'successful', 'in', 'doing', 'so', '.']",0
DefaultAbstractBag.java,"['/', '/', 'If', 'this', 'directory', 'is', 'created', 'recently', 'then', 'we', 'can', 'simply']",0
DefaultAbstractBag.java,"['/', '/', 'skip', 'creation', '.', 'This', 'is', 'to', 'address', 'a', 'rare', 'issue', 'occuring', 'in', 'a', 'cluster', 'despite', 'the']",0
DefaultAbstractBag.java,"['/', '/', 'the', 'fact', 'that', 'spill', '(', ')', 'makes', 'call', 'to', 'getSpillFile', '(', ')', 'in', 'a', 'synchronized']",0
DefaultAbstractBag.java,"['/', '/', 'block', '.']",0
DefaultAbstractBag.java,"['if', '(', 'tmpDir', '.', 'exists', '(', ')', ')', '{']",0
DefaultAbstractBag.java,"['log', '.', 'info', '(', '""', 'Temporary', 'directory', 'already', 'exists', ':', '""', '+', 'tmpDir', '.', 'getAbsolutePath', '(', ')', ')', ';']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['int', 'errCode', '=', '2111', ';']",0
DefaultAbstractBag.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'create', 'temporary', 'directory', ':', '""', '+', 'tmpDir', '.', 'getAbsolutePath', '(', ')', ';']",0
DefaultAbstractBag.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
DefaultAbstractBag.java,"['File', 'f', '=', 'File', '.', 'createTempFile', '(', '""', 'pigbag', '""', ',', 'null', ')', ';']",0
DefaultAbstractBag.java,"['f', '.', 'deleteOnExit', '(', ')', ';']",0
DefaultAbstractBag.java,"['mSpillFiles', '.', 'add', '(', 'f', ')', ';']",0
DefaultAbstractBag.java,"['return', 'new', 'DataOutputStream', '(', 'new', 'BufferedOutputStream', '(']",0
DefaultAbstractBag.java,"['new', 'FileOutputStream', '(', 'f', ')', ')', ')', ';']",0
DefaultAbstractBag.java,"['/', '*', '*']",0
DefaultAbstractBag.java,"['protected', 'void', 'reportProgress', '(', ')', '{']",0
DefaultAbstractBag.java,"['if', '(', 'PhysicalOperator', '.', 'reporter', '!', '=', 'null', ')', '{']",0
DefaultAbstractBag.java,"['PhysicalOperator', '.', 'reporter', '.', 'progress', '(', ')', ';']",0
DefaultAbstractBag.java,"['protected', 'void', 'warn', '(', 'String', 'msg', ',', 'Enum', 'warningEnum', ',', 'Exception', 'e', ')', '{']",0
DefaultAbstractBag.java,"['pigLogger', '=', 'PhysicalOperator', '.', 'getPigLogger', '(', ')', ';']",0
DefaultAbstractBag.java,"['if', '(', 'pigLogger', '!', '=', 'null', ')', '{']",0
DefaultAbstractBag.java,"['pigLogger', '.', 'warn', '(', 'this', ',', 'msg', ',', 'warningEnum', ')', ';']",0
DefaultAbstractBag.java,"['}', 'else', '{']",0
DefaultAbstractBag.java,"['log', '.', 'warn', '(', 'msg', ',', 'e', ')', ';']",0
DefaultAbstractBag.java,"['public', 'static', 'abstract', 'class', 'BagDelimiterTuple', 'extends', 'DefaultTuple', '{', '}']",0
DefaultAbstractBag.java,"['public', 'static', 'class', 'StartBag', 'extends', 'BagDelimiterTuple', '{', '}']",0
DefaultAbstractBag.java,"['public', 'static', 'class', 'EndBag', 'extends', 'BagDelimiterTuple', '{', '}']",0
DefaultAbstractBag.java,"['public', 'static', 'final', 'Tuple', 'startBag', '=', 'new', 'StartBag', '(', ')', ';']",0
DefaultAbstractBag.java,"['public', 'static', 'final', 'Tuple', 'endBag', '=', 'new', 'EndBag', '(', ')', ';']",0
DefaultAbstractBag.java,"['protected', 'static', 'final', 'int', 'MAX_SPILL_FILES', '=', '100', ';']",0
WeightedRangePartitioner.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'partitioners', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'Arrays', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
WeightedRangePartitioner.java,"['import', 'java', '.', 'util', '.', 'Map', '.', 'Entry', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'RawComparator', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'Writable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Partitioner', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'HDataType', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'FindQuantiles', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableBytesWritable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableDoubleWritable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableFloatWritable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableIntWritable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableLongWritable', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableText', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableTuple', ';']",0
WeightedRangePartitioner.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'PigNullableWritable', ';']",0
WeightedRangePartitioner.java,"['public', 'class', 'WeightedRangePartitioner', 'implements', 'Partitioner', '<', 'PigNullableWritable', ',', 'Writable', '>', '{']",0
WeightedRangePartitioner.java,"['PigNullableWritable', '[', ']', 'quantiles', ';']",0
WeightedRangePartitioner.java,"['RawComparator', '<', 'PigNullableWritable', '>', 'comparator', ';']",0
WeightedRangePartitioner.java,"['Integer', 'numQuantiles', ';']",0
WeightedRangePartitioner.java,"['DataBag', 'samples', ';']",0
WeightedRangePartitioner.java,"['public', 'static', 'Map', '<', 'PigNullableWritable', ',', 'DiscreteProbabilitySampleGenerator', '>', 'weightedParts', '=', 'new', 'HashMap', '<', 'PigNullableWritable', ',', 'DiscreteProbabilitySampleGenerator', '>', '(', ')', ';']",0
WeightedRangePartitioner.java,"['JobConf', 'job', ';']",0
WeightedRangePartitioner.java,"['public', 'int', 'getPartition', '(', 'PigNullableWritable', 'key', ',', 'Writable', 'value', ',']",0
WeightedRangePartitioner.java,"['int', 'numPartitions', ')', '{']",0
WeightedRangePartitioner.java,"['if', '(', '!', 'weightedParts', '.', 'containsKey', '(', 'key', ')', ')', '{']",0
WeightedRangePartitioner.java,"['int', 'index', '=', 'Arrays', '.', 'binarySearch', '(', 'quantiles', ',', 'key', ',', 'comparator', ')', ';']",0
WeightedRangePartitioner.java,"['if', '(', 'index', '<', '0', ')']",0
WeightedRangePartitioner.java,"['index', '=', '-', 'index', '-', '1', ';']",0
WeightedRangePartitioner.java,"['index', '=', 'index', '+', '1', ';']",0
WeightedRangePartitioner.java,"['return', 'Math', '.', 'min', '(', 'index', ',', 'numPartitions', '-', '1', ')', ';']",0
WeightedRangePartitioner.java,"['DiscreteProbabilitySampleGenerator', 'gen', '=', 'weightedParts', '.', 'get', '(', 'key', ')', ';']",0
WeightedRangePartitioner.java,"['return', 'gen', '.', 'getNext', '(', ')', ';']",0
WeightedRangePartitioner.java,"['@', 'SuppressWarnings', '(', '""', 'unchecked', '""', ')']",0
WeightedRangePartitioner.java,"['public', 'void', 'configure', '(', 'JobConf', 'job', ')', '{']",0
WeightedRangePartitioner.java,"['this', '.', 'job', '=', 'job', ';']",0
WeightedRangePartitioner.java,"['String', 'quantilesFile', '=', 'job', '.', 'get', '(', '""', 'pig', '.', 'quantilesFile', '""', ',', '""', '""', ')', ';']",0
WeightedRangePartitioner.java,"['comparator', '=', 'job', '.', 'getOutputKeyComparator', '(', ')', ';']",0
WeightedRangePartitioner.java,"['if', '(', 'quantilesFile', '.', 'length', '(', ')', '=', '=', '0', ')']",0
WeightedRangePartitioner.java,"['throw', 'new', 'RuntimeException', '(', 'this', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', '+', '""', 'used', 'but', 'no', 'quantiles', 'found', '""', ')', ';']",0
WeightedRangePartitioner.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'openDFSFile', '(', 'quantilesFile', ',', 'ConfigurationUtil', '.', 'toProperties', '(', 'job', ')', ')', ';']",0
WeightedRangePartitioner.java,"['BinStorage', 'loader', '=', 'new', 'BinStorage', '(', ')', ';']",0
WeightedRangePartitioner.java,"['DataBag', 'quantilesList', ';']",0
WeightedRangePartitioner.java,"['loader', '.', 'bindTo', '(', 'quantilesFile', ',', 'new', 'BufferedPositionedInputStream', '(', 'is', ')', ',', '0', ',', 'Long', '.', 'MAX_VALUE', ')', ';']",0
WeightedRangePartitioner.java,"['Tuple', 't', '=', 'loader', '.', 'getNext', '(', ')', ';']",0
WeightedRangePartitioner.java,"['if', '(', 't', '=', '=', 'null', ')', 'throw', 'new', 'RuntimeException', '(', '""', 'Empty', 'samples', 'file', '""', ')', ';']",0
WeightedRangePartitioner.java,"['/', '/', 'the', 'Quantiles', 'file', 'has', 'a', 'tuple', 'as', 'under', ':']",0
WeightedRangePartitioner.java,"['/', '/', '(', 'numQuantiles', ',', 'bag', 'of', 'samples', ')']",0
WeightedRangePartitioner.java,"['/', '/', 'numQuantiles', 'here', 'is', 'the', 'reduce', 'parallelism']",0
WeightedRangePartitioner.java,"['Map', '<', 'String', ',', 'Object', '>', 'quantileMap', '=', '(', 'Map', '<', 'String', ',', 'Object', '>', ')', 't', '.', 'get', '(', '0', ')', ';']",0
WeightedRangePartitioner.java,"['quantilesList', '=', '(', 'DataBag', ')', 'quantileMap', '.', 'get', '(', 'FindQuantiles', '.', 'QUANTILES_LIST', ')', ';']",0
WeightedRangePartitioner.java,"['Map', '<', 'Tuple', ',', 'Tuple', '>', 'weightedPartsData', '=', '(', 'Map', '<', 'Tuple', ',', 'Tuple', '>', ')', 'quantileMap', '.', 'get', '(', 'FindQuantiles', '.', 'WEIGHTED_PARTS', ')', ';']",0
WeightedRangePartitioner.java,"['convertToArray', '(', 'quantilesList', ')', ';']",0
WeightedRangePartitioner.java,"['for', '(', 'Entry', '<', 'Tuple', ',', 'Tuple', '>', 'ent', ':', 'weightedPartsData', '.', 'entrySet', '(', ')', ')', '{']",0
WeightedRangePartitioner.java,"['Tuple', 'key', '=', 'ent', '.', 'getKey', '(', ')', ';', '/', '/', 'sample', 'item', 'which', 'repeats']",0
WeightedRangePartitioner.java,"['float', '[', ']', 'probVec', '=', 'getProbVec', '(', 'ent', '.', 'getValue', '(', ')', ')', ';']",0
WeightedRangePartitioner.java,"['weightedParts', '.', 'put', '(', 'getPigNullableWritable', '(', 'key', ')', ',']",0
WeightedRangePartitioner.java,"['new', 'DiscreteProbabilitySampleGenerator', '(', 'probVec', ')', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
WeightedRangePartitioner.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
WeightedRangePartitioner.java,"['/', '*', '*']",0
WeightedRangePartitioner.java,"['private', 'float', '[', ']', 'getProbVec', '(', 'Tuple', 'values', ')', 'throws', 'ExecException', '{']",0
WeightedRangePartitioner.java,"['float', '[', ']', 'probVec', '=', 'new', 'float', '[', 'values', '.', 'size', '(', ')', ']', ';']",0
WeightedRangePartitioner.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'values', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
WeightedRangePartitioner.java,"['probVec', '[', 'i', ']', '=', '(', 'Float', ')', 'values', '.', 'get', '(', 'i', ')', ';']",0
WeightedRangePartitioner.java,"['return', 'probVec', ';']",0
WeightedRangePartitioner.java,"['private', 'PigNullableWritable', 'getPigNullableWritable', '(', 'Tuple', 't', ')', '{']",0
WeightedRangePartitioner.java,"['/', '/', 'user', 'comparators', 'work', 'with', 'tuples', '-', 'so', 'if', 'user', 'comparator']",0
WeightedRangePartitioner.java,"['/', '/', 'is', 'being', 'used', 'OR', 'if', 'there', 'are', 'more', 'than', '1', 'sort', 'cols', ',', 'use']",0
WeightedRangePartitioner.java,"['/', '/', 'NullableTuple']",0
WeightedRangePartitioner.java,"['if', '(', '""', 'true', '""', '.', 'equals', '(', 'job', '.', 'get', '(', '""', 'pig', '.', 'usercomparator', '""', ')', ')', '|', '|', 't', '.', 'size', '(', ')', '>', '1', ')', '{']",0
WeightedRangePartitioner.java,"['return', 'new', 'NullableTuple', '(', 't', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', '{']",0
WeightedRangePartitioner.java,"['Object', 'o', '=', 't', '.', 'get', '(', '0', ')', ';']",0
WeightedRangePartitioner.java,"['String', 'kts', '=', 'job', '.', 'get', '(', '""', 'pig', '.', 'reduce', '.', 'key', '.', 'type', '""', ')', ';']",0
WeightedRangePartitioner.java,"['if', '(', 'kts', '=', '=', 'null', ')', '{']",0
WeightedRangePartitioner.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Didn', ""'"", 't', 'get', 'reduce', 'key', 'type', '""']",0
WeightedRangePartitioner.java,"['+', '""', 'from', 'config', 'file', '.', '""', ')', ';']",0
WeightedRangePartitioner.java,"['return', 'HDataType', '.', 'getWritableComparableTypes', '(', 'o', ',']",0
WeightedRangePartitioner.java,"['Byte', '.', 'valueOf', '(', 'kts', ')', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
WeightedRangePartitioner.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
WeightedRangePartitioner.java,"['private', 'boolean', 'areEqual', '(', 'PigNullableWritable', 'sample', ',', 'PigNullableWritable', 'writable', ')', '{']",0
WeightedRangePartitioner.java,"['return', 'comparator', '.', 'compare', '(', 'sample', ',', 'writable', ')', '=', '=', '0', ';']",0
WeightedRangePartitioner.java,"['private', 'void', 'convertToArray', '(']",0
WeightedRangePartitioner.java,"['DataBag', 'quantilesListAsBag', ')', '{']",0
WeightedRangePartitioner.java,"['ArrayList', '<', 'PigNullableWritable', '>', 'quantilesList', '=', 'getList', '(', 'quantilesListAsBag', ')', ';']",0
WeightedRangePartitioner.java,"['if', '(', '""', 'true', '""', '.', 'equals', '(', 'job', '.', 'get', '(', '""', 'pig', '.', 'usercomparator', '""', ')', ')', '|', '|']",0
WeightedRangePartitioner.java,"['quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableTuple', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableTuple', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableBytesWritable', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableBytesWritable', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableDoubleWritable', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableDoubleWritable', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableFloatWritable', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableFloatWritable', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableIntWritable', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableIntWritable', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableLongWritable', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableLongWritable', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', 'if', '(', 'quantilesList', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', '.', 'equals', '(', 'NullableText', '.', 'class', ')', ')', '{']",0
WeightedRangePartitioner.java,"['quantiles', '=', 'quantilesList', '.', 'toArray', '(', 'new', 'NullableText', '[', '0', ']', ')', ';']",0
WeightedRangePartitioner.java,"['}', 'else', '{']",0
WeightedRangePartitioner.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'class', 'in', '""', '+', 'this', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ')', ';']",0
WeightedRangePartitioner.java,"['/', '*', '*']",0
WeightedRangePartitioner.java,"['private', 'ArrayList', '<', 'PigNullableWritable', '>', 'getList', '(', 'DataBag', 'quantilesListAsBag', ')', '{']",0
WeightedRangePartitioner.java,"['ArrayList', '<', 'PigNullableWritable', '>', 'list', '=', 'new', 'ArrayList', '<', 'PigNullableWritable', '>', '(', ')', ';']",0
WeightedRangePartitioner.java,"['for', '(', 'Tuple', 'tuple', ':', 'quantilesListAsBag', ')', '{']",0
WeightedRangePartitioner.java,"['list', '.', 'add', '(', 'getPigNullableWritable', '(', 'tuple', ')', ')', ';']",0
WeightedRangePartitioner.java,"['return', 'list', ';']",0
PigStats.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', ';']",0
PigStats.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
PigStats.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
PigStats.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PigStats.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
PigStats.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Counters', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'local', '.', 'executionengine', '.', 'physicalLayer', '.', 'counters', '.', 'POCounter', ';']",0
PigStats.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
PigStats.java,"['public', 'class', 'PigStats', '{']",0
PigStats.java,"['MROperPlan', 'mrp', ';']",0
PigStats.java,"['PhysicalPlan', 'php', ';']",0
PigStats.java,"['JobControl', 'jc', ';']",0
PigStats.java,"['JobClient', 'jobClient', ';']",0
PigStats.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'new', 'HashMap', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', '(', ')', ';']",0
PigStats.java,"['/', '/', 'String', 'lastJobID', ';']",0
PigStats.java,"['ArrayList', '<', 'String', '>', 'rootJobIDs', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigStats.java,"['ExecType', 'mode', ';']",0
PigStats.java,"['public', 'void', 'setMROperatorPlan', '(', 'MROperPlan', 'mrp', ')', '{']",0
PigStats.java,"['this', '.', 'mrp', '=', 'mrp', ';']",0
PigStats.java,"['public', 'void', 'setJobControl', '(', 'JobControl', 'jc', ')', '{']",0
PigStats.java,"['this', '.', 'jc', '=', 'jc', ';']",0
PigStats.java,"['public', 'void', 'setJobClient', '(', 'JobClient', 'jobClient', ')', '{']",0
PigStats.java,"['this', '.', 'jobClient', '=', 'jobClient', ';']",0
PigStats.java,"['public', 'String', 'getMRPlan', '(', ')', '{']",0
PigStats.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
PigStats.java,"['mrp', '.', 'dump', '(', 'new', 'PrintStream', '(', 'baos', ')', ')', ';']",0
PigStats.java,"['return', 'baos', '.', 'toString', '(', ')', ';']",0
PigStats.java,"['public', 'void', 'setExecType', '(', 'ExecType', 'mode', ')', '{']",0
PigStats.java,"['this', '.', 'mode', '=', 'mode', ';']",0
PigStats.java,"['public', 'void', 'setPhysicalPlan', '(', 'PhysicalPlan', 'php', ')', '{']",0
PigStats.java,"['this', '.', 'php', '=', 'php', ';']",0
PigStats.java,"['public', 'String', 'getPhysicalPlan', '(', ')', '{']",0
PigStats.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
PigStats.java,"['php', '.', 'explain', '(', 'baos', ')', ';']",0
PigStats.java,"['return', 'baos', '.', 'toString', '(', ')', ';']",0
PigStats.java,"['public', 'Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'accumulateStats', '(', ')', 'throws', 'ExecException', '{']",0
PigStats.java,"['if', '(', 'mode', '=', '=', 'ExecType', '.', 'MAPREDUCE', ')']",0
PigStats.java,"['return', 'accumulateMRStats', '(', ')', ';']",0
PigStats.java,"['else', 'if', '(', 'mode', '=', '=', 'ExecType', '.', 'LOCAL', ')']",0
PigStats.java,"['return', 'accumulateLocalStats', '(', ')', ';']",0
PigStats.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unrecognized', 'mode', '.', 'Either', 'MapReduce', 'or', 'Local', 'mode', 'expected', '.', '""', ')', ';']",0
PigStats.java,"['private', 'Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'accumulateLocalStats', '(', ')', '{']",0
PigStats.java,"['/', '/', 'The', 'counter', 'placed', 'before', 'a', 'store', 'in', 'the', 'local', 'plan', 'should', 'be', 'able', 'to', 'get', 'the', 'number', 'of', 'records']",0
PigStats.java,"['for', '(', 'PhysicalOperator', 'op', ':', 'php', '.', 'getLeaves', '(', ')', ')', '{']",0
PigStats.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
PigStats.java,"['stats', '.', 'put', '(', 'op', '.', 'toString', '(', ')', ',', 'jobStats', ')', ';']",0
PigStats.java,"['POCounter', 'counter', '=', '(', 'POCounter', ')', 'php', '.', 'getPredecessors', '(', 'op', ')', '.', 'get', '(', '0', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_LOCAL_OUTPUT_RECORDS', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'counter', '.', 'getCount', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_LOCAL_BYTES_WRITTEN', '""', ',', '(', 'Long', '.', 'valueOf', '(', '(', 'new', 'File', '(', '(', '(', 'POStore', ')', 'op', ')', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ')', ')', '.', 'length', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['return', 'stats', ';']",0
PigStats.java,"['private', 'Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'accumulateMRStats', '(', ')', 'throws', 'ExecException', '{']",0
PigStats.java,"['for', '(', 'Job', 'job', ':', 'jc', '.', 'getSuccessfulJobs', '(', ')', ')', '{']",0
PigStats.java,"['JobConf', 'jobConf', '=', 'job', '.', 'getJobConf', '(', ')', ';']",0
PigStats.java,"['RunningJob', 'rj', '=', 'null', ';']",0
PigStats.java,"['rj', '=', 'jobClient', '.', 'getJob', '(', 'job', '.', 'getAssignedJobID', '(', ')', ')', ';']",0
PigStats.java,"['}', 'catch', '(', 'IOException', 'e1', ')', '{']",0
PigStats.java,"['String', 'error', '=', '""', 'Unable', 'to', 'get', 'the', 'job', 'statistics', 'from', 'JobClient', '.', '""', ';']",0
PigStats.java,"['throw', 'new', 'ExecException', '(', 'error', ',', 'e1', ')', ';']",0
PigStats.java,"['if', '(', 'rj', '=', '=', 'null', ')']",0
PigStats.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
PigStats.java,"['stats', '.', 'put', '(', 'job', '.', 'getAssignedJobID', '(', ')', '.', 'toString', '(', ')', ',', 'jobStats', ')', ';']",0
PigStats.java,"['PhysicalPlan', 'plan', '=', '(', 'PhysicalPlan', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'jobConf', '.', 'get', '(', '""', 'pig', '.', 'mapPlan', '""', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ',', 'plan', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['plan', '=', '(', 'PhysicalPlan', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'jobConf', '.', 'get', '(', '""', 'pig', '.', 'combinePlan', '""', ')', ')', ';']",0
PigStats.java,"['if', '(', 'plan', '!', '=', 'null', ')', '{']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ',', 'plan', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['plan', '=', '(', 'PhysicalPlan', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'jobConf', '.', 'get', '(', '""', 'pig', '.', 'reducePlan', '""', ')', ')', ';']",0
PigStats.java,"['if', '(', 'plan', '!', '=', 'null', ')', '{']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ',', 'plan', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['}', 'catch', '(', 'IOException', 'e2', ')', '{']",0
PigStats.java,"['String', 'error', '=', '""', 'Error', 'deserializing', 'plans', 'from', 'the', 'JobConf', '.', '""', ';']",0
PigStats.java,"['throw', 'new', 'RuntimeException', '(', 'error', ',', 'e2', ')', ';']",0
PigStats.java,"['Counters', 'counters', '=', 'null', ';']",0
PigStats.java,"['counters', '=', 'rj', '.', 'getCounters', '(', ')', ';']",0
PigStats.java,"['Counters', '.', 'Group', 'taskgroup', '=', 'counters', '.', 'getGroup', '(', '""', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Task', '$', 'Counter', '""', ')', ';']",0
PigStats.java,"['Counters', '.', 'Group', 'hdfsgroup', '=', 'counters', '.', 'getGroup', '(', '""', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Task', '$', 'FileSystemCounter', '""', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'taskgroup', '.', 'getCounterForName', '(', '""', 'MAP_INPUT_RECORDS', '""', ')', '.', 'getCounter', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'taskgroup', '.', 'getCounterForName', '(', '""', 'MAP_OUTPUT_RECORDS', '""', ')', '.', 'getCounter', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'taskgroup', '.', 'getCounterForName', '(', '""', 'REDUCE_INPUT_RECORDS', '""', ')', '.', 'getCounter', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'taskgroup', '.', 'getCounterForName', '(', '""', 'REDUCE_OUTPUT_RECORDS', '""', ')', '.', 'getCounter', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['jobStats', '.', 'put', '(', '""', 'PIG_STATS_BYTES_WRITTEN', '""', ',', '(', 'Long', '.', 'valueOf', '(', 'hdfsgroup', '.', 'getCounterForName', '(', '""', 'HDFS_WRITE', '""', ')', '.', 'getCounter', '(', ')', ')', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigStats.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigStats.java,"['String', 'error', '=', '""', 'Unable', 'to', 'get', 'the', 'counters', '.', '""', ';']",0
PigStats.java,"['throw', 'new', 'ExecException', '(', 'error', ',', 'e', ')', ';']",0
PigStats.java,"['getLastJobIDs', '(', 'jc', '.', 'getSuccessfulJobs', '(', ')', ')', ';']",0
PigStats.java,"['return', 'stats', ';']",0
PigStats.java,"['private', 'void', 'getLastJobIDs', '(', 'List', '<', 'Job', '>', 'jobs', ')', '{']",0
PigStats.java,"['rootJobIDs', '.', 'clear', '(', ')', ';']",0
PigStats.java,"['Set', '<', 'Job', '>', 'temp', '=', 'new', 'HashSet', '<', 'Job', '>', '(', ')', ';']",0
PigStats.java,"['for', '(', 'Job', 'job', ':', 'jobs', ')', '{']",0
PigStats.java,"['if', '(', 'job', '.', 'getDependingJobs', '(', ')', '!', '=', 'null', '&', '&', 'job', '.', 'getDependingJobs', '(', ')', '.', 'size', '(', ')', '>', '0', ')']",0
PigStats.java,"['temp', '.', 'addAll', '(', 'job', '.', 'getDependingJobs', '(', ')', ')', ';']",0
PigStats.java,"['/', '/', 'difference', 'between', 'temp', 'and', 'jobs', 'would', 'be', 'the', 'set', 'of', 'leaves']",0
PigStats.java,"['/', '/', 'we', 'can', 'safely', 'assume', 'there', 'would', 'be', 'only', 'one', 'leaf']",0
PigStats.java,"['for', '(', 'Job', 'job', ':', 'jobs', ')', '{']",0
PigStats.java,"['if', '(', 'temp', '.', 'contains', '(', 'job', ')', ')', 'continue', ';']",0
PigStats.java,"['else', 'rootJobIDs', '.', 'add', '(', 'job', '.', 'getAssignedJobID', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
PigStats.java,"['public', 'List', '<', 'String', '>', 'getRootJobIDs', '(', ')', '{']",0
PigStats.java,"['return', 'rootJobIDs', ';']",0
PigStats.java,"['public', 'Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'getPigStats', '(', ')', '{']",0
PigStats.java,"['return', 'stats', ';']",0
PigStats.java,"['public', 'long', 'getRecordsWritten', '(', ')', '{']",0
PigStats.java,"['if', '(', 'mode', '=', '=', 'ExecType', '.', 'LOCAL', ')']",0
PigStats.java,"['return', 'getRecordsCountLocal', '(', ')', ';']",0
PigStats.java,"['else', 'if', '(', 'mode', '=', '=', 'ExecType', '.', 'MAPREDUCE', ')']",0
PigStats.java,"['return', 'getRecordsCountMR', '(', ')', ';']",0
PigStats.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unrecognized', 'mode', '.', 'Either', 'MapReduce', 'or', 'Local', 'mode', 'expected', '.', '""', ')', ';']",0
PigStats.java,"['private', 'long', 'getRecordsCountLocal', '(', ')', '{']",0
PigStats.java,"['/', '/', 'System', '.', 'out', '.', 'println', '(', 'getPhysicalPlan', '(', ')', ')', ';']",0
PigStats.java,"['/', '/', 'because', 'of', 'the', 'nature', 'of', 'the', 'parser', ',', 'there', 'will', 'always', 'be', 'only', 'one', 'store']",0
PigStats.java,"['for', '(', 'PhysicalOperator', 'op', ':', 'php', '.', 'getLeaves', '(', ')', ')', '{']",0
PigStats.java,"['return', 'Long', '.', 'parseLong', '(', 'stats', '.', 'get', '(', 'op', '.', 'toString', '(', ')', ')', '.', 'get', '(', '""', 'PIG_STATS_LOCAL_OUTPUT_RECORDS', '""', ')', ')', ';']",0
PigStats.java,"['return', '0', ';']",0
PigStats.java,"['/', '*', '*']",0
PigStats.java,"['private', 'long', 'getRecordsCountMR', '(', ')', '{']",0
PigStats.java,"['long', 'records', '=', '0', ';']",0
PigStats.java,"['for', '(', 'String', 'jid', ':', 'rootJobIDs', ')', '{']",0
PigStats.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'stats', '.', 'get', '(', 'jid', ')', ';']",0
PigStats.java,"['if', '(', 'jobStats', '=', '=', 'null', ')', 'continue', ';']",0
PigStats.java,"['String', 'reducePlan', '=', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ';']",0
PigStats.java,"['if', '(', 'reducePlan', '=', '=', 'null', ')', '{']",1
PigStats.java,"['records', '+', '=', 'Long', '.', 'parseLong', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
PigStats.java,"['records', '+', '=', 'Long', '.', 'parseLong', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
PigStats.java,"['return', 'records', ';']",0
PigStats.java,"['public', 'long', 'getBytesWritten', '(', ')', '{']",0
PigStats.java,"['if', '(', 'mode', '=', '=', 'ExecType', '.', 'LOCAL', ')', '{']",0
PigStats.java,"['return', 'getLocalBytesWritten', '(', ')', ';']",0
PigStats.java,"['}', 'else', 'if', '(', 'mode', '=', '=', 'ExecType', '.', 'MAPREDUCE', ')', '{']",0
PigStats.java,"['return', 'getMapReduceBytesWritten', '(', ')', ';']",0
PigStats.java,"['}', 'else', '{']",0
PigStats.java,"['}', 'else', '{']",0
PigStats.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unrecognized', 'mode', '.', 'Either', 'MapReduce', 'or', 'Local', 'mode', 'expected', '.', '""', ')', ';']",0
PigStats.java,"['private', 'long', 'getLocalBytesWritten', '(', ')', '{']",0
PigStats.java,"['for', '(', 'PhysicalOperator', 'op', ':', 'php', '.', 'getLeaves', '(', ')', ')']",0
PigStats.java,"['return', 'Long', '.', 'parseLong', '(', 'stats', '.', 'get', '(', 'op', '.', 'toString', '(', ')', ')', '.', 'get', '(', '""', 'PIG_STATS_LOCAL_BYTES_WRITTEN', '""', ')', ')', ';']",0
PigStats.java,"['return', '0', ';']",0
PigStats.java,"['private', 'long', 'getMapReduceBytesWritten', '(', ')', '{']",0
PigStats.java,"['long', 'bytesWritten', '=', '0', ';']",0
PigStats.java,"['for', '(', 'String', 'jid', ':', 'rootJobIDs', ')', '{']",0
PigStats.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'stats', '.', 'get', '(', 'jid', ')', ';']",0
PigStats.java,"['if', '(', 'jobStats', '=', '=', 'null', ')', 'continue', ';']",0
PigStats.java,"['bytesWritten', '+', '=', 'Long', '.', 'parseLong', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_BYTES_WRITTEN', '""', ')', ')', ';']",0
PigStats.java,"['return', 'bytesWritten', ';']",0
RemoveRedundantOperators.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
RemoveRedundantOperators.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'el', '.', 'RelationalOperator', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanWalker', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DepthFirstWalker', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DependencyOrderWalker', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
RemoveRedundantOperators.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
RemoveRedundantOperators.java,"['public', 'class', 'RemoveRedundantOperators', 'extends']",0
RemoveRedundantOperators.java,"['public', 'RemoveRedundantOperators', '(', 'LogicalPlan', 'plan', ')', '{']",0
RemoveRedundantOperators.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'plan', ')', ')', ';']",0
RemoveRedundantOperators.java,"['/', '*', '*']",0
RemoveRedundantOperators.java,"['/', '*', '*']",0
RemoveRedundantOperators.java,"['protected', 'void', 'visit', '(', 'LOProject', 'project', ')', 'throws', 'VisitorException', '{']",0
RemoveRedundantOperators.java,"['LogicalPlan', 'currentPlan', '=', '(', 'LogicalPlan', ')', 'mCurrentWalker', '.', 'getPlan', '(', ')', ';']",0
RemoveRedundantOperators.java,"['/', '/', 'if', 'the', 'project', 'is', 'a', 'project', '(', '*', ')', 'and', 'if', 'there', 'are', 'predecessors']",0
RemoveRedundantOperators.java,"['/', '/', 'and', 'successors', 'that', 'are']",0
RemoveRedundantOperators.java,"['/', '/', '1', '.', 'both', 'relational', 'operators', 'OR']",0
RemoveRedundantOperators.java,"['/', '/', '2', '.', 'both', 'expression', 'operators']",0
RemoveRedundantOperators.java,"['/', '/', 'then', 'the', 'project', '(', '*', ')', 'can', 'be', 'removed', 'and', 'the', 'input', 'and', 'outputs']",0
RemoveRedundantOperators.java,"['/', '/', 'short', 'circuited', ',', 'i', '.', 'e', '.', 'directly', 'connected']",0
RemoveRedundantOperators.java,"['if', '(', 'project', '.', 'isStar', '(', ')', ')', '{']",0
RemoveRedundantOperators.java,"['List', '<', 'LogicalOperator', '>', 'prSuccessors', '=']",0
RemoveRedundantOperators.java,"['currentPlan', '.', 'getSuccessors', '(', 'project', ')', ';']",0
RemoveRedundantOperators.java,"['List', '<', 'LogicalOperator', '>', 'prPredecessors', '=']",0
RemoveRedundantOperators.java,"['currentPlan', '.', 'getPredecessors', '(', 'project', ')', ';']",0
RemoveRedundantOperators.java,"['if', '(', '(', '(', 'prSuccessors', '!', '=', 'null', ')', '&', '&', '(', 'prSuccessors', '.', 'size', '(', ')', '>', '0', ')', ')']",0
RemoveRedundantOperators.java,"['/', '*', 'prPredecessors', '.', 'size', '(', ')', '=', '=', '1', 'for', 'project', '(', '*', ')', '*', '/']",0
RemoveRedundantOperators.java,"['&', '&', '(', '(', 'prPredecessors', '!', '=', 'null', ')', '&', '&', '(', 'prPredecessors', '.', 'size', '(', ')', '=', '=', '1', ')', ')', ')', '{']",0
RemoveRedundantOperators.java,"['LogicalOperator', 'pred', '=', 'prPredecessors', '.', 'get', '(', '0', ')', ';']",0
RemoveRedundantOperators.java,"['/', '/', 'check', 'if', 'either', 'all', 'pred', 'and', 'succ', 'oper', 'are', 'ExpressionOperator']",0
RemoveRedundantOperators.java,"['/', '/', 'or', 'if', 'all', 'of', 'them', 'are', 'relationalOperators', '(', 'ie', '!', '=', 'ExpressionOperator', ')']",0
RemoveRedundantOperators.java,"['boolean', 'allExpressionOp', '=', 'true', ';']",0
RemoveRedundantOperators.java,"['boolean', 'allRelationalOp', '=', 'true', ';']",0
RemoveRedundantOperators.java,"['if', '(', 'pred', 'instanceof', 'ExpressionOperator', ')']",0
RemoveRedundantOperators.java,"['allRelationalOp', '=', 'false', ';']",0
RemoveRedundantOperators.java,"['allExpressionOp', '=', 'false', ';']",0
RemoveRedundantOperators.java,"['for', '(', 'LogicalOperator', 'op', ':', 'prSuccessors', ')', '{']",0
RemoveRedundantOperators.java,"['if', '(', 'op', 'instanceof', 'ExpressionOperator', ')']",0
RemoveRedundantOperators.java,"['allRelationalOp', '=', 'false', ';']",0
RemoveRedundantOperators.java,"['allExpressionOp', '=', 'false', ';']",0
RemoveRedundantOperators.java,"['if', '(', 'allExpressionOp', '=', '=', 'false', '&', '&', 'allRelationalOp', '=', '=', 'false', ')']",0
RemoveRedundantOperators.java,"['/', '/', 'remove', 'project', 'if', 'either', 'condition', 'is', 'met']",0
RemoveRedundantOperators.java,"['if', '(', 'allExpressionOp', '=', '=', 'true', '|', '|', 'allRelationalOp', '=', '=', 'true', ')', '{']",0
RemoveRedundantOperators.java,"['currentPlan', '.', 'removeAndReconnectMultiSucc', '(', 'project', ')', ';']",0
RemoveRedundantOperators.java,"['patchInputReference', '(', 'pred', ',', 'project', ',', 'prSuccessors', ')', ';']",0
RemoveRedundantOperators.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
RemoveRedundantOperators.java,"['String', 'msg', '=', 'new', 'String', '(', '""', 'Error', 'while', 'removing', 'redundant', 'project', 'in', 'plan', '""', ')', ';']",0
RemoveRedundantOperators.java,"['throw', 'new', 'VisitorException', '(', 'msg', ',', 'pe', ')', ';']",0
RemoveRedundantOperators.java,"['private', 'void', 'patchInputReference', '(', 'LogicalOperator', 'pred', ',', 'LogicalOperator', 'current', ',', 'List', '<', 'LogicalOperator', '>', 'succs', ')', '{']",0
RemoveRedundantOperators.java,"['for', '(', 'LogicalOperator', 'n', ':', 'succs', ')', '{']",0
RemoveRedundantOperators.java,"['/', '/', 'special', 'handling', 'of', 'LOProject', 'because', 'its', 'getExpression', '(', ')', 'does']",0
RemoveRedundantOperators.java,"['/', '/', 'need', 'not', 'be', 'same', 'as', 'getPredecessors', '(', 'LOProject', ')']",0
RemoveRedundantOperators.java,"['if', '(', 'n', 'instanceof', 'LOProject', ')', '{']",0
RemoveRedundantOperators.java,"['LOProject', 'lop', '=', '(', 'LOProject', ')', 'n', ';']",0
RemoveRedundantOperators.java,"['if', '(', 'current', '=', '=', 'lop', '.', 'getExpression', '(', ')', ')', '{']",0
RemoveRedundantOperators.java,"['lop', '.', 'setExpression', '(', '(', 'LogicalOperator', ')', 'pred', ')', ';']",0
LOCogroup.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
LOCogroup.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'SchemaRemover', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LOCogroup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LOCogroup.java,"['public', 'class', 'LOCogroup', 'extends', 'LogicalOperator', '{']",0
LOCogroup.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LOCogroup.java,"['private', 'boolean', '[', ']', 'mIsInner', ';']",0
LOCogroup.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOCogroup', '.', 'class', ')', ';']",0
LOCogroup.java,"['private', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'mGroupByPlans', ';']",0
LOCogroup.java,"['/', '*', '*']",0
LOCogroup.java,"['/', '*', '*']",0
LOCogroup.java,"['public', 'LOCogroup', '(']",0
LOCogroup.java,"['LogicalPlan', 'plan', ',']",1
LOCogroup.java,"['OperatorKey', 'k', ',']",1
LOCogroup.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlans', ',']",0
LOCogroup.java,"['boolean', '[', ']', 'isInner', ')', '{']",0
LOCogroup.java,"['super', '(', 'plan', ',', 'k', ')', ';']",1
LOCogroup.java,"['mGroupByPlans', '=', 'groupByPlans', ';']",0
LOCogroup.java,"['mIsInner', '=', 'isInner', ';']",0
LOCogroup.java,"['public', 'List', '<', 'LogicalOperator', '>', 'getInputs', '(', ')', '{']",1
LOCogroup.java,"['return', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOCogroup.java,"['public', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'getGroupByPlans', '(', ')', '{']",0
LOCogroup.java,"['return', 'mGroupByPlans', ';']",0
LOCogroup.java,"['public', 'void', 'setGroupByPlans', '(', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlans', ')', '{']",0
LOCogroup.java,"['mGroupByPlans', '=', 'groupByPlans', ';']",0
LOCogroup.java,"['public', 'boolean', '[', ']', 'getInner', '(', ')', '{']",0
LOCogroup.java,"['return', 'mIsInner', ';']",0
LOCogroup.java,"['public', 'void', 'setInner', '(', 'boolean', '[', ']', 'inner', ')', '{']",0
LOCogroup.java,"['mIsInner', '=', 'inner', ';']",0
LOCogroup.java,"['public', 'String', 'name', '(', ')', '{']",1
LOCogroup.java,"['return', '""', 'CoGroup', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOCogroup.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",1
LOCogroup.java,"['return', 'true', ';']",1
LOCogroup.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOCogroup.java,"['if', '(', '!', 'mIsSchemaComputed', ')', '{']",0
LOCogroup.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(']",0
LOCogroup.java,"['inputs', '.', 'size', '(', ')', '+', '1', ')', ';']",0
LOCogroup.java,"['/', '/', 'one', 'more', 'to', 'account', 'for', 'the', '""', 'group', '""']",0
LOCogroup.java,"['/', '/', 'the', 'alias', 'of', 'the', 'first', 'field', 'is', 'group', 'and', 'hence', 'the']",0
LOCogroup.java,"['/', '/', 'string', '""', 'group', '""']",0
LOCogroup.java,"['Schema', 'groupBySchema', '=', 'null', ';']",0
LOCogroup.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'groupByFss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
LOCogroup.java,"['Map', '<', 'String', ',', 'Boolean', '>', 'aliasLookup', '=', 'new', 'HashMap', '<', 'String', ',', 'Boolean', '>', '(', ')', ';']",0
LOCogroup.java,"['MultiMap', '<', 'String', ',', 'ExpressionOperator', '>', 'aliasExop', '=', 'new', 'MultiMap', '<', 'String', ',', 'ExpressionOperator', '>', '(', ')', ';']",0
LOCogroup.java,"['MultiMap', '<', 'Integer', ',', 'String', '>', 'positionAlias', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'String', '>', '(', ')', ';']",0
LOCogroup.java,"['MultiMap', '<', 'Integer', ',', 'ExpressionOperator', '>', 'positionOperators', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'ExpressionOperator', '>', '(', ')', ';']",0
LOCogroup.java,"['int', 'position', '=', '0', ';']",0
LOCogroup.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'mGroupByPlans', '.', 'get', '(', 'op', ')', ')', '{']",0
LOCogroup.java,"['for', '(', 'LogicalOperator', 'eOp', ':', 'plan', '.', 'getLeaves', '(', ')', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'fs', '=', '(', '(', 'ExpressionOperator', ')', 'eOp', ')', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['String', 'alias', '=', 'fs', '.', 'alias', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'alias', ')', '{']",0
LOCogroup.java,"['aliasLookup', '.', 'put', '(', 'alias', ',', 'false', ')', ';']",0
LOCogroup.java,"['aliasExop', '.', 'put', '(', 'alias', ',', '(', 'ExpressionOperator', ')', 'eOp', ')', ';']",0
LOCogroup.java,"['positionAlias', '.', 'put', '(', 'position', ',', 'alias', ')', ';']",0
LOCogroup.java,"['/', '/', 'store', 'the', 'operators', 'for', 'each', 'position', 'in', 'the', 'group']",0
LOCogroup.java,"['log', '.', 'warn', '(', '""', 'Field', 'Schema', 'of', 'an', 'expression', 'operator', 'cannot', 'be', 'null', '""', ')', ';']",0
LOCogroup.java,"['positionOperators', '.', 'put', '(', 'position', ',', '(', 'ExpressionOperator', ')', 'eOp', ')', ';']",0
LOCogroup.java,"['+', '+', 'position', ';']",0
LOCogroup.java,"['int', 'arity', '=', 'mGroupByPlans', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', ';']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'arity', ';', '+', '+', 'i', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'groupByFs', ';']",0
LOCogroup.java,"['Collection', '<', 'String', '>', 'cAliases', '=', 'positionAlias', '.', 'get', '(', 'i', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'cAliases', ')', '{']",0
LOCogroup.java,"['Object', '[', ']', 'aliases', '=', 'cAliases', '.', 'toArray', '(', ')', ';']",0
LOCogroup.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'aliases', '.', 'length', ';', '+', '+', 'j', ')', '{']",0
LOCogroup.java,"['String', 'alias', '=', '(', 'String', ')', 'aliases', '[', 'j', ']', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'alias', ')', '{']",0
LOCogroup.java,"['/', '/', 'Collection', '<', 'ExpressionOperator', '>', 'cEops', '=', 'aliasExop', '.', 'get', '(', 'alias', ')', ';']",0
LOCogroup.java,"['Collection', '<', 'ExpressionOperator', '>', 'cEops', '=', 'positionOperators', '.', 'get', '(', 'i', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'cEops', ')', '{']",0
LOCogroup.java,"['ExpressionOperator', 'eOp', '=', '(', 'ExpressionOperator', ')', '(', 'cEops', '.', 'toArray', '(', ')', ')', '[', '0', ']', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'eOp', ')', '{']",0
LOCogroup.java,"['if', '(', '!', 'aliasLookup', '.', 'get', '(', 'alias', ')', ')', '{']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'alias', ',', 'fs', '.', 'schema', ',', 'fs', '.', 'type', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['aliasLookup', '.', 'put', '(', 'alias', ',', 'true', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'alias', ',', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'groupByFs', ',', 'positionOperators', ',', 'i', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['if', '(', '(', 'j', '+', '1', ')', '<', 'aliases', '.', 'length', ')', '{']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['/', '/', 'we', 'have', 'seen', 'this', 'alias', 'before']",0
LOCogroup.java,"['/', '/', 'just', 'add', 'the', 'schema', 'of', 'the', 'expression', 'operator', 'with', 'the', 'null', 'alias']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'eOp', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'eOp', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'fs', '.', 'schema', ',', 'fs', '.', 'type', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['for', '(', 'ExpressionOperator', 'op', ':', 'cEops', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'opFs', '=', 'op', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'opFs', ')', '{']",0
LOCogroup.java,"['groupByFs', '.', 'setParent', '(', 'opFs', '.', 'canonicalName', ',', 'eOp', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '.', 'setParent', '(', 'null', ',', 'eOp', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'groupByFs', ',', 'positionOperators', ',', 'i', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['/', '/', 'should', 'not', 'be', 'here']",0
LOCogroup.java,"['log', '.', 'debug', '(', '""', 'Cannot', 'be', 'here', ':', 'we', 'cannot', 'have', 'a', 'collection', 'of', 'null', 'expression', 'operators', '""', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['/', '/', 'should', 'not', 'be', 'here']",0
LOCogroup.java,"['log', '.', 'debug', '(', '""', 'Cannot', 'be', 'here', ':', 'we', 'should', 'have', 'an', 'expression', 'operator', 'at', 'each', 'position', '""', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['/', '/', 'should', 'not', 'be', 'here']",0
LOCogroup.java,"['log', '.', 'debug', '(', '""', 'Cannot', 'be', 'here', ':', 'we', 'cannot', 'have', 'a', 'collection', 'of', 'null', 'aliases', '""', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['/', '/', 'We', 'do', 'not', 'have', 'any', 'alias', 'for', 'this', 'position', 'in', 'the', 'group', 'by', 'columns']",0
LOCogroup.java,"['/', '/', 'We', 'have', 'positions', '$', '1', ',', '$', '2', ',', 'etc', '.']",0
LOCogroup.java,"['Collection', '<', 'ExpressionOperator', '>', 'cEops', '=', 'positionOperators', '.', 'get', '(', 'i', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'cEops', ')', '{']",0
LOCogroup.java,"['ExpressionOperator', 'eOp', '=', '(', 'ExpressionOperator', ')', '(', 'cEops', '.', 'toArray', '(', ')', ')', '[', '0', ']', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'eOp', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'eOp', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'fs', '.', 'schema', ',', 'fs', '.', 'type', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOCogroup.java,"['groupByFss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'groupByFs', ',', 'positionOperators', ',', 'i', ')', ';']",0
LOCogroup.java,"['groupBySchema', '=', 'new', 'Schema', '(', 'groupByFss', ')', ';']",0
LOCogroup.java,"['if', '(', '1', '=', '=', 'arity', ')', '{']",0
LOCogroup.java,"['byte', 'groupByType', '=', 'getAtomicGroupByType', '(', ')', ';']",0
LOCogroup.java,"['Schema', 'groupSchema', '=', 'groupByFss', '.', 'get', '(', '0', ')', '.', 'schema', ';']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'groupSchema', ',', 'groupByType', ')', ';']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'groupByFs', ',', 'positionOperators', ',', '0', ')', ';']",0
LOCogroup.java,"['fss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['Schema', 'mergedGroupSchema', '=', 'getTupleGroupBySchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'mergedGroupSchema', '.', 'size', '(', ')', '!', '=', 'groupBySchema', '.', 'size', '(', ')', ')', '{']",0
LOCogroup.java,"['int', 'errCode', '=', '2000', ';']",0
LOCogroup.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Mismatch', 'in', 'group', 'by', 'arities', '.', 'Expected', ':', '""', '+', 'mergedGroupSchema', '+', '""', '.', 'Found', ':', '""', '+', 'groupBySchema', ';']",0
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mergedGroupSchema', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'mergedFs', '=', 'mergedGroupSchema', '.', 'getField', '(', 'i', ')', ';']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'groupBySchema', '.', 'getField', '(', 'i', ')', ';']",0
LOCogroup.java,"['mergedFs', '.', 'alias', '=', 'groupFs', '.', 'alias', ';']",0
LOCogroup.java,"['mergedGroupSchema', '.', 'addAlias', '(', 'mergedFs', '.', 'alias', ',', 'mergedFs', ')', ';']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'groupByFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', '""', 'group', '""', ',', 'mergedGroupSchema', ')', ';']",0
LOCogroup.java,"['fss', '.', 'add', '(', 'groupByFs', ')', ';']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'arity', ';', '+', '+', 'i', ')', '{']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'groupByFs', ',', 'positionOperators', ',', 'i', ')', ';']",0
LOCogroup.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LOCogroup.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'op', '.', 'getAlias', '(', ')', ',']",0
LOCogroup.java,"['op', '.', 'getSchema', '(', ')', ',', 'DataType', '.', 'BAG', ')', ';']",0
LOCogroup.java,"['fss', '.', 'add', '(', 'bagFs', ')', ';']",0
LOCogroup.java,"['setFieldSchemaParent', '(', 'bagFs', ',', 'op', ')', ';']",0
LOCogroup.java,"['}', 'catch', '(', 'FrontendException', 'ioe', ')', '{']",1
LOCogroup.java,"['mIsSchemaComputed', '=', 'false', ';']",0
LOCogroup.java,"['mIsSchemaComputed', '=', 'false', ';']",0
LOCogroup.java,"['mSchema', '=', 'null', ';']",0
LOCogroup.java,"['mSchema', '=', 'null', ';']",0
LOCogroup.java,"['throw', 'ioe', ';']",1
LOCogroup.java,"['mIsSchemaComputed', '=', 'true', ';']",1
LOCogroup.java,"['mSchema', '=', 'new', 'Schema', '(', 'fss', ')', ';']",1
LOCogroup.java,"['mType', '=', 'DataType', '.', 'BAG', ';', '/', '/', 'mType', 'is', 'from', 'the', 'super', 'class']",1
LOCogroup.java,"['return', 'mSchema', ';']",1
LOCogroup.java,"['public', 'boolean', 'isTupleGroupCol', '(', ')', '{']",0
LOCogroup.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOCogroup.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOCogroup.java,"['if', '(', 'inputs', '=', '=', 'null', '|', '|', 'inputs', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOCogroup.java,"['throw', 'new', 'AssertionError', '(', '""', 'COGroup', '.', 'isTupleGroupCol', '(', ')', 'can', 'be', 'called', '""']",0
LOCogroup.java,"['+', '""', 'after', 'it', 'has', 'an', 'input', 'only', '""', ')', ';']",1
LOCogroup.java,"['return', 'mGroupByPlans', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', '>', '1', ';']",0
LOCogroup.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",1
LOCogroup.java,"['v', '.', 'visit', '(', 'this', ')', ';']",1
LOCogroup.java,"['/', '*', '*', '*']",0
LOCogroup.java,"['public', 'void', 'switchGroupByPlanOp', '(', 'LogicalOperator', 'oldOp', ',']",0
LOCogroup.java,"['LogicalOperator', 'newOp', ')', '{']",1
LOCogroup.java,"['Collection', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'mGroupByPlans', '.', 'removeKey', '(', 'oldOp', ')', ';']",0
LOCogroup.java,"['mGroupByPlans', '.', 'put', '(', 'newOp', ',', 'innerPlans', ')', ';']",0
LOCogroup.java,"['public', 'void', 'unsetSchema', '(', ')', 'throws', 'VisitorException', '{']",1
LOCogroup.java,"['for', '(', 'LogicalOperator', 'input', ':', 'getInputs', '(', ')', ')', '{']",1
LOCogroup.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'mGroupByPlans', '.', 'get', '(', 'input', ')', ')', '{']",0
LOCogroup.java,"['SchemaRemover', 'sr', '=', 'new', 'SchemaRemover', '(', 'plan', ')', ';']",1
LOCogroup.java,"['sr', '.', 'visit', '(', ')', ';']",1
LOCogroup.java,"['super', '.', 'unsetSchema', '(', ')', ';']",1
LOCogroup.java,"['/', '*', '*']",0
LOCogroup.java,"['public', 'byte', 'getAtomicGroupByType', '(', ')', 'throws', 'FrontendException', '{']",0
LOCogroup.java,"['if', '(', 'isTupleGroupCol', '(', ')', ')', '{']",0
LOCogroup.java,"['int', 'errCode', '=', '1010', ';']",1
LOCogroup.java,"['String', 'msg', '=', '""', 'getAtomicGroupByType', 'is', 'used', 'only', 'when', '""']",1
LOCogroup.java,"['+', '""', 'dealing', 'with', 'atomic', 'group', 'col', '""', ';']",0
LOCogroup.java,"['byte', 'groupType', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
LOCogroup.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
LOCogroup.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
LOCogroup.java,"['if', '(', 'innerPlans', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",1
LOCogroup.java,"['int', 'errCode', '=', '1012', ';']",1
LOCogroup.java,"['String', 'msg', '=', '""', 'Each', 'COGroup', 'input', 'has', 'to', 'have', '""']",0
LOCogroup.java,"['+', '""', 'the', 'same', 'number', 'of', 'inner', 'plans', '""', ';']",1
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', '0', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",1
LOCogroup.java,"['groupType', '=', 'DataType', '.', 'mergeType', '(', 'groupType', ',', 'innerType', ')', ';']",0
LOCogroup.java,"['return', 'groupType', ';']",0
LOCogroup.java,"['This', 'implementation', 'is', 'based', 'on', 'the', 'assumption', 'that', 'all', 'the']",0
LOCogroup.java,"['inputs', 'have', 'the', 'same', 'group', 'col', 'tuple', 'arity', '.']",0
LOCogroup.java,"['TODO', ':', 'This', 'doesn', ""'"", 't', 'work', 'with', 'group', 'by', 'complex', 'type']",0
LOCogroup.java,"['public', 'Schema', 'getTupleGroupBySchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOCogroup.java,"['if', '(', '!', 'isTupleGroupCol', '(', ')', ')', '{']",0
LOCogroup.java,"['int', 'errCode', '=', '1011', ';']",1
LOCogroup.java,"['String', 'msg', '=', '""', 'getTupleGroupBySchema', 'is', 'used', 'only', 'when', '""']",1
LOCogroup.java,"['+', '""', 'dealing', 'with', 'tuple', 'group', 'col', '""', ';']",0
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['/', '/', 'this', 'fsList', 'represents', 'all', 'the', 'columns', 'in', 'group', 'tuple']",0
LOCogroup.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fsList', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",1
LOCogroup.java,"['int', 'outputSchemaSize', '=', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'getInputs', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', ';']",0
LOCogroup.java,"['/', '/', 'by', 'default', ',', 'they', 'are', 'all', 'bytearray']",1
LOCogroup.java,"['/', '/', 'for', 'type', 'checking', ',', 'we', 'don', ""'"", 't', 'care', 'about', 'aliases']",1
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'outputSchemaSize', ';', 'i', '+', '+', ')', '{']",1
LOCogroup.java,"['fsList', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",1
LOCogroup.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
LOCogroup.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
LOCogroup.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
LOCogroup.java,"['LogicalOperator', 'input', '=', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
LOCogroup.java,"['LogicalOperator', 'input', '=', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
LOCogroup.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
LOCogroup.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
LOCogroup.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
LOCogroup.java,"['boolean', 'seenProjectStar', '=', 'false', ';']",1
LOCogroup.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",1
LOCogroup.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', 'j', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",1
LOCogroup.java,"['ExpressionOperator', 'eOp', '=', '(', 'ExpressionOperator', ')', 'innerPlans', '.', 'get', '(', 'j', ')', '.', 'getSingleLeafPlanOutputOp', '(', ')', ';']",1
LOCogroup.java,"['if', '(', 'eOp', 'instanceof', 'LOProject', ')', '{']",1
LOCogroup.java,"['if', '(', '(', '(', 'LOProject', ')', 'eOp', ')', '.', 'isStar', '(', ')', ')', '{']",1
LOCogroup.java,"['seenProjectStar', '=', 'true', ';']",1
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'groupFs', '=', 'fsList', '.', 'get', '(', 'j', ')', ';']",0
LOCogroup.java,"['groupFs', '.', 'type', '=', 'DataType', '.', 'mergeType', '(', 'groupFs', '.', 'type', ',', 'innerType', ')', ';']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'eOp', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",0
LOCogroup.java,"['groupFs', '.', 'setParent', '(', 'eOp', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'eOp', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupFs', '.', 'setParent', '(', 'null', ',', 'eOp', ')', ';']",0
LOCogroup.java,"['if', '(', 'seenProjectStar', ')', '{']",0
LOCogroup.java,"['int', 'errCode', '=', '1013', ';']",1
LOCogroup.java,"['String', 'msg', '=', '""', 'Grouping', 'attributes', 'can', 'either', 'be', 'star', '(', '*', ')', 'or', 'a', 'list', 'of', 'expressions', ',', 'but', 'not', 'both', '.', '""', ';']",0
LOCogroup.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOCogroup.java,"['return', 'new', 'Schema', '(', 'fsList', ')', ';']",1
LOCogroup.java,"['private', 'void', 'setFieldSchemaParent', '(', 'Schema', '.', 'FieldSchema', 'fs', ',', 'MultiMap', '<', 'Integer', ',', 'ExpressionOperator', '>', 'positionOperators', ',', 'int', 'position', ')', 'throws', 'FrontendException', '{']",0
LOCogroup.java,"['for', '(', 'ExpressionOperator', 'op', ':', 'positionOperators', '.', 'get', '(', 'position', ')', ')', '{']",0
LOCogroup.java,"['Schema', '.', 'FieldSchema', 'opFs', '=', 'op', '.', 'getFieldSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'opFs', ')', '{']",0
LOCogroup.java,"['fs', '.', 'setParent', '(', 'opFs', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['fs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOCogroup.java,"['private', 'void', 'setFieldSchemaParent', '(', 'Schema', '.', 'FieldSchema', 'fs', ',', 'LogicalOperator', 'op', ')', 'throws', 'FrontendException', '{']",0
LOCogroup.java,"['Schema', 's', '=', 'op', '.', 'getSchema', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 's', ')', '{']",1
LOCogroup.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'inputFs', ':', 's', '.', 'getFields', '(', ')', ')', '{']",0
LOCogroup.java,"['if', '(', 'null', '!', '=', 'inputFs', ')', '{']",0
LOCogroup.java,"['fs', '.', 'setParent', '(', 'inputFs', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['fs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['fs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOCogroup.java,"['/', '*', '*']",0
LOCogroup.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOCogroup.java,"['/', '/', 'first', 'start', 'with', 'LogicalOperator', 'clone']",0
LOCogroup.java,"['LOCogroup', 'cogroupClone', '=', '(', 'LOCogroup', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOCogroup.java,"['/', '/', 'create', 'deep', 'copy', 'of', 'other', 'cogroup', 'specific', 'members']",0
LOCogroup.java,"['cogroupClone', '.', 'mIsInner', '=', 'new', 'boolean', '[', 'mIsInner', '.', 'length', ']', ';']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mIsInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
LOCogroup.java,"['cogroupClone', '.', 'mIsInner', '[', 'i', ']', '=', 'mIsInner', '[', 'i', ']', ';']",0
LOCogroup.java,"['cogroupClone', '.', 'mGroupByPlans', '=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
LOCogroup.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'mGroupByPlans', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
LOCogroup.java,"['LogicalOperator', 'relOp', '=', 'it', '.', 'next', '(', ')', ';']",0
LOCogroup.java,"['Collection', '<', 'LogicalPlan', '>', 'values', '=', 'mGroupByPlans', '.', 'get', '(', 'relOp', ')', ';']",0
LOCogroup.java,"['for', '(', 'Iterator', '<', 'LogicalPlan', '>', 'planIterator', '=', 'values', '.', 'iterator', '(', ')', ';', 'planIterator', '.', 'hasNext', '(', ')', ';', ')', '{']",0
LOCogroup.java,"['LogicalPlanCloneHelper', 'lpCloneHelper', '=', 'new', 'LogicalPlanCloneHelper', '(', 'planIterator', '.', 'next', '(', ')', ')', ';']",0
LOCogroup.java,"['cogroupClone', '.', 'mGroupByPlans', '.', 'put', '(', 'relOp', ',', 'lpCloneHelper', '.', 'getClonedPlan', '(', ')', ')', ';']",0
LOCogroup.java,"['return', 'cogroupClone', ';']",0
LOCogroup.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LOCogroup.java,"['Schema', 'outputSchema', ';']",1
LOCogroup.java,"['outputSchema', '=', 'getSchema', '(', ')', ';']",1
LOCogroup.java,"['if', '(', 'outputSchema', '=', '=', 'null', ')', '{']",1
LOCogroup.java,"['return', 'null', ';']",0
LOCogroup.java,"['return', 'null', ';']",0
LOCogroup.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', '(', 'ArrayList', '<', 'LogicalOperator', '>', ')', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOCogroup.java,"['return', 'null', ';']",0
LOCogroup.java,"['/', '/', 'the', 'column', 'with', 'the', 'alias', ""'"", 'group', ""'"", 'can', 'be', 'mapped', 'in', 'several', 'ways']",0
LOCogroup.java,"['/', '/', '1', '.', 'group', 'A', 'by', '$', '0', ';']",0
LOCogroup.java,"['/', '/', 'Here', 'the', 'mapping', 'is', '0', '-', '>', '(', '0', ',', '0', ')']",0
LOCogroup.java,"['/', '/', '2', '.', 'group', 'A', 'by', '(', '$', '0', ',', '$', '1', ')', ';']",0
LOCogroup.java,"['/', '/', 'Here', 'there', 'is', 'no', 'direct', 'mapping', 'and', ""'"", 'group', ""'"", 'is', 'an', 'added', 'column']",0
LOCogroup.java,"['/', '/', '3', '.', 'cogroup', 'A', 'by', '$', '0', ',', 'B', 'by', '$', '0', ';']",0
LOCogroup.java,"['/', '/', 'Here', 'the', 'mapping', 'is', '0', '-', '>', '(', '(', '0', ',', '0', ')', ',', '(', '1', ',', '0', ')', ')']",0
LOCogroup.java,"['/', '/', '4', '.', 'cogroup', 'A', 'by', '(', '$', '0', ',', '$', '1', ')', ',', 'B', 'by', '(', '$', '0', ',', '$', '1', ')', ';']",0
LOCogroup.java,"['/', '/', 'Here', 'there', 'is', 'no', 'direct', 'mapping', 'and', ""'"", 'group', ""'"", 'is', 'an', 'added', 'column']",0
LOCogroup.java,"['/', '/', 'For', 'anything', 'other', 'than', 'a', 'simple', 'project', ""'"", 'group', ""'"", 'is', 'an', 'added', 'column']",0
LOCogroup.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlans', '=', 'getGroupByPlans', '(', ')', ';']",0
LOCogroup.java,"['boolean', 'groupByAdded', '=', 'false', ';']",0
LOCogroup.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOCogroup.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'removedFields', '=', 'new', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",0
LOCogroup.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', '(', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ')', '&', '&', '(', '!', 'groupByAdded', ')', ';', '+', '+', 'inputNum', ')', '{']",0
LOCogroup.java,"['LogicalOperator', 'predecessor', '=', 'predecessors', '.', 'get', '(', 'inputNum', ')', ';']",1
LOCogroup.java,"['List', '<', 'LogicalPlan', '>', 'predecessorPlans', '=', '(', 'ArrayList', '<', 'LogicalPlan', '>', ')', 'groupByPlans', '.', 'get', '(', 'predecessor', ')', ';']",0
LOCogroup.java,"['int', 'inputColumn', '=', '-', '1', ';']",0
LOCogroup.java,"['for', '(', 'LogicalPlan', 'predecessorPlan', ':', 'predecessorPlans', ')', '{']",0
LOCogroup.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'predecessorPlan', '.', 'getLeaves', '(', ')', ';']",0
LOCogroup.java,"['if', '(', 'leaves', '=', '=', 'null', '|', '|', 'leaves', '.', 'size', '(', ')', '>', '1', ')', '{']",0
LOCogroup.java,"['groupByAdded', '=', 'true', ';']",0
LOCogroup.java,"['if', '(', 'leaves', '.', 'get', '(', '0', ')', 'instanceof', 'LOProject', ')', '{']",1
LOCogroup.java,"['/', '/', 'find', 'out', 'if', 'this', 'project', 'is', 'a', 'chain', 'of', 'projects']",0
LOCogroup.java,"['if', '(', 'LogicalPlan', '.', 'chainOfProjects', '(', 'predecessorPlan', ')', ')', '{']",1
LOCogroup.java,"['LOProject', 'rootProject', '=', '(', 'LOProject', ')', 'predecessorPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",1
LOCogroup.java,"['inputColumn', '=', 'rootProject', '.', 'getCol', '(', ')', ';']",1
LOCogroup.java,"['mapFields', '.', 'put', '(', '0', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['groupByAdded', '=', 'true', ';']",0
LOCogroup.java,"['Schema', 'inputSchema', ';']",0
LOCogroup.java,"['inputSchema', '=', 'predecessor', '.', 'getSchema', '(', ')', ';']",1
LOCogroup.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOCogroup.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOCogroup.java,"['return', 'null', ';']",0
LOCogroup.java,"['if', '(', 'inputSchema', '!', '=', 'null', ')', '{']",1
LOCogroup.java,"['for', '(', 'int', 'column', '=', '0', ';', 'column', '<', 'inputSchema', '.', 'size', '(', ')', ';', '+', '+', 'column', ')', '{']",0
LOCogroup.java,"['if', '(', '!', 'groupByAdded', '&', '&', 'inputColumn', '!', '=', 'column', ')', '{']",0
LOCogroup.java,"['removedFields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'column', ')', ')', ';']",0
LOCogroup.java,"['List', '<', 'Integer', '>', 'addedFields', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",1
LOCogroup.java,"['if', '(', 'groupByAdded', ')', '{']",0
LOCogroup.java,"['addedFields', '.', 'add', '(', '0', ')', ';', '/', '/', 'for', 'the', 'column', ""'"", 'group', ""'""]",0
LOCogroup.java,"['mapFields', '=', 'null', ';', '/', '/', 'since', ""'"", 'group', ""'"", 'is', 'an', 'added', 'column', 'there', 'is', 'no', 'mapping']",0
LOCogroup.java,"['/', '/', 'the', 'columns', '1', 'through', 'n', '-', '1', 'are', 'generated', 'by', 'cogroup']",0
LOCogroup.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'groupByPlans', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOCogroup.java,"['addedFields', '.', 'add', '(', 'i', '+', '1', ')', ';']",0
LOCogroup.java,"['if', '(', 'removedFields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
LOCogroup.java,"['removedFields', '=', 'null', ';']",0
LOCogroup.java,"['return', 'new', 'ProjectionMap', '(', 'mapFields', ',', 'removedFields', ',', 'addedFields', ')', ';']",1
LOCogroup.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LOCogroup.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOCogroup.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOCogroup.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOCogroup.java,"['return', 'null', ';']",0
LOCogroup.java,"['List', '<', 'RequiredFields', '>', 'requiredFields', '=', 'new', 'ArrayList', '<', 'RequiredFields', '>', '(', ')', ';']",1
LOCogroup.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ';', '+', '+', 'inputNum', ')', '{']",1
LOCogroup.java,"['Set', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'new', 'HashSet', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOCogroup.java,"['Set', '<', 'LOProject', '>', 'projectSet', '=', 'new', 'HashSet', '<', 'LOProject', '>', '(', ')', ';']",1
LOCogroup.java,"['boolean', 'groupByStar', '=', 'false', ';']",1
LOCogroup.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'predecessors', '.', 'get', '(', 'inputNum', ')', ')', ')', '{']",0
LOCogroup.java,"['TopLevelProjectFinder', 'projectFinder', '=', 'new', 'TopLevelProjectFinder', '(', 'plan', ')', ';']",1
LOCogroup.java,"['projectFinder', '.', 'visit', '(', ')', ';']",1
LOCogroup.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",1
LOCogroup.java,"['requiredFields', '.', 'clear', '(', ')', ';']",1
LOCogroup.java,"['requiredFields', '.', 'add', '(', 'null', ')', ';']",1
LOCogroup.java,"['return', 'requiredFields', ';']",1
LOCogroup.java,"['projectSet', '.', 'addAll', '(', 'projectFinder', '.', 'getProjectSet', '(', ')', ')', ';']",1
LOCogroup.java,"['if', '(', 'projectFinder', '.', 'getProjectStarSet', '(', ')', '!', '=', 'null', ')', '{']",1
LOCogroup.java,"['groupByStar', '=', 'true', ';']",1
LOCogroup.java,"['if', '(', 'groupByStar', ')', '{']",1
LOCogroup.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'true', ')', ')', ';']",1
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['for', '(', 'LOProject', 'project', ':', 'projectSet', ')', '{']",1
LOCogroup.java,"['for', '(', 'int', 'inputColumn', ':', 'project', '.', 'getProjection', '(', ')', ')', '{']",1
LOCogroup.java,"['fields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOCogroup.java,"['if', '(', 'fields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOCogroup.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'false', ',', 'true', ')', ')', ';']",1
LOCogroup.java,"['}', 'else', '{']",0
LOCogroup.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'new', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', 'fields', ')', ')', ')', ';']",1
LOCogroup.java,"['return', '(', 'requiredFields', '.', 'size', '(', ')', '=', '=', '0', '?', 'null', ':', 'requiredFields', ')', ';']",1
TestRequiredFields.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestRequiredFields.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestRequiredFields.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestRequiredFields.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
TestRequiredFields.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'LogicalPlanTester', ';']",0
TestRequiredFields.java,"['public', 'class', 'TestRequiredFields', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestRequiredFields.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestRequiredFields.java,"['LogicalPlanTester', 'planTester', '=', 'new', 'LogicalPlanTester', '(', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestRequiredFields.java,"['planTester', '.', 'reset', '(', ')', ';']",0
TestRequiredFields.java,"['private', 'static', 'final', 'String', 'simpleEchoStreamingCommand', ';']",0
TestRequiredFields.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')']",0
TestRequiredFields.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '\\', '\\', '""', '$', '_', '\\', '\\', '\\', '""', ""'"", '""', ';']",0
TestRequiredFields.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '""', '$', '_', '\\', '""', ""'"", '""', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeach1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', '$', '2', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadRequiredFields', '=', 'load', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeach2', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", ':', ""'"", ')', ')', 'generate', '$', '1', ',', ""'"", 'aoeuaoeu', ""'"", ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadRequiredFields', '=', 'load', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryCogroup1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '1', ')', 'generate', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryGroupAll', '(', ')', 'throws', 'Exception', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', '$', '1', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryGroup2', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'group', ',', ""'"", '1', ""'"", ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '0', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryCogroup2', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '1', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '(', '$', '1', ')', ')', 'generate', '$', '1', '.', '$', '1', ',', '$', '2', '.', '$', '1', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryGroup3', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '6', ',', '$', '7', ')', ')', 'generate', 'flatten', '(', 'group', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '6', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '7', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '0', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFilterNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'filter', 'required', 'fields']",0
TestRequiredFields.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'filterRequiredFields', '=', 'filter', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'filterRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'filterRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQuerySplitNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', '$', '0', '=', '=', ""'"", '3', ""'"", ',', 'c', 'if', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOSplit', 'split', '=', '(', 'LOSplit', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitRequiredFields', '=', 'split', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'split', 'outputs', ""'"", 'required', 'fields']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitb', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitbRequiredFields', '=', 'splitb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitc', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitcRequiredFields', '=', 'splitc', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitcRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitcRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryOrderByNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryLimitNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'limit', 'b', '10', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'limit', 'required', 'fields']",0
TestRequiredFields.java,"['LOLimit', 'limit', '=', '(', 'LOLimit', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'limitRequiredFields', '=', 'limit', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'limitRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'limitRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryDistinctNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'distinct', 'required', 'fields']",0
TestRequiredFields.java,"['LODistinct', 'distinct', '=', '(', 'LODistinct', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'distinctRequiredFields', '=', 'distinct', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'distinctRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'distinctRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryStreamingNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'streaming', 'required', 'fields']",0
TestRequiredFields.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'streamRequiredFields', '=', 'stream', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'streamRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'streamRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryStreamingNoSchema1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'streaming', 'required', 'fields']",0
TestRequiredFields.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'streamRequiredFields', '=', 'stream', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'streamRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'streamRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeach3', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '=', '=', ""'"", '3', ""'"", '?', '$', '2', ':', '$', '3', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ',', '<', '0', ',', '3', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '2', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '2', ')', '.', 'second', '=', '=', '3', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeach4', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ')', 'generate', 'A', ',', 'flatten', '(', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testForeach5', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestRequiredFields.java,"['""', 'B', '=', 'order', 'B', 'by', '$', '0', ';', '""', '+']",0
TestRequiredFields.java,"['""', 'generate', 'FLATTEN', '(', 'A', ')', ',', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ';', '""', '+']",0
TestRequiredFields.java,"['""', '}', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryCrossNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cross', 'required', 'fields']",0
TestRequiredFields.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'crossRequiredFields', '=', 'cross', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'crossRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryUnionNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'union', 'required', 'fields']",0
TestRequiredFields.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'unionRequiredFields', '=', 'union', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'unionRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFRJoinNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'frjoin', 'required', 'fields']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'frjoinRequiredFields', '=', 'frjoin', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'frjoinRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryJoinNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFilterWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'filter', 'required', 'fields']",0
TestRequiredFields.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'filterRequiredFields', '=', 'filter', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'filterRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'filterRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQuerySplitWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'url', '=', '=', ""'"", '3', ""'"", ',', 'c', 'if', 'hitCount', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOSplit', 'split', '=', '(', 'LOSplit', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitRequiredFields', '=', 'split', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'split', 'outputs', ""'"", 'required', 'fields']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitb', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitbRequiredFields', '=', 'splitb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitc', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitcRequiredFields', '=', 'splitc', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitcRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitcRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryOrderByWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryLimitWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'limit', 'b', '10', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'limit', 'required', 'fields']",0
TestRequiredFields.java,"['LOLimit', 'limit', '=', '(', 'LOLimit', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'limitRequiredFields', '=', 'limit', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'limitRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'limitRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryDistinctWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'distinct', 'required', 'fields']",0
TestRequiredFields.java,"['LODistinct', 'distinct', '=', '(', 'LODistinct', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'distinctRequiredFields', '=', 'distinct', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'distinctRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'distinctRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryStreamingWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'x', ',', 'y', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'streaming', 'required', 'fields']",0
TestRequiredFields.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'streamRequiredFields', '=', 'stream', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'streamRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'streamRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryStreamingWithSchema1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'x', ',', 'y', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'streaming', 'required', 'fields']",0
TestRequiredFields.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'streamRequiredFields', '=', 'stream', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'streamRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'streamRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryImplicitJoinWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'url', ',', 'b', 'by', 'url', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '0', '>', ',', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '2', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '2', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryCrossWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cross', 'required', 'fields']",0
TestRequiredFields.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'crossRequiredFields', '=', 'cross', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'crossRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryUnionWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'union', 'required', 'fields']",0
TestRequiredFields.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'unionRequiredFields', '=', 'union', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'unionRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFRJoinWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'frjoin', 'required', 'fields']",0
TestRequiredFields.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'frjoinRequiredFields', '=', 'frjoin', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'frjoinRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryJoinWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '$', '0', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryCrossWithMixedSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cross', 'required', 'fields']",0
TestRequiredFields.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'crossRequiredFields', '=', 'cross', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'crossRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'crossRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryUnionWithMixedSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'union', 'required', 'fields']",0
TestRequiredFields.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'unionRequiredFields', '=', 'union', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'unionRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'unionRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFRJoinWithMixedSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'frjoin', 'required', 'fields']",0
TestRequiredFields.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'frjoinRequiredFields', '=', 'frjoin', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'frjoinRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryJoinWithMixedSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFilterWithStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'COUNT', '(', '*', ')', '=', '=', '3', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'filter', 'required', 'fields']",0
TestRequiredFields.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'filterRequiredFields', '=', 'filter', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'filterRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'filterRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryOrderByStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '*', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryGroupByStarNoSchema', '(', ')', 'throws', 'Exception', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '*', ')', 'generate', '$', '1', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFRJoinOnStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '*', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '*', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'frjoin', 'required', 'fields']",0
TestRequiredFields.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'frjoinRequiredFields', '=', 'frjoin', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'frjoinRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryJoinOnStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '*', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '*', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFilterStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'COUNT', '(', '*', ')', '=', '=', '3', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'filter', 'required', 'fields']",0
TestRequiredFields.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'filterRequiredFields', '=', 'filter', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'filterRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'filterRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQuerySplitWithStarSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'url', '=', '=', ""'"", '3', ""'"", ',', 'c', 'if', 'COUNT', '(', '*', ')', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOSplit', 'split', '=', '(', 'LOSplit', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitRequiredFields', '=', 'split', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'split', 'outputs', ""'"", 'required', 'fields']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitb', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitbRequiredFields', '=', 'splitb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['LOSplitOutput', 'splitc', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'splitcRequiredFields', '=', 'splitc', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'splitcRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'splitcRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryOrderByStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '*', ';', '""', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'order', 'by', 'required', 'fields']",0
TestRequiredFields.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'sortRequiredFields', '=', 'sort', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'sortRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'sortRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryGroupByStarWithSchema', '(', ')', 'throws', 'Exception', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'by', '*', ')', 'generate', '$', '1', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryFRJoinOnStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '*', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '*', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'frjoin', 'required', 'fields']",0
TestRequiredFields.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'frjoinRequiredFields', '=', 'frjoin', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'frjoinRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'frjoinRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryJoinOnStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '*', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '*', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadbRequiredFields', '=', 'loadb', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadbRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'loadbRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'cogroup', 'required', 'fields']",0
TestRequiredFields.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'cogroupRequiredFields', '=', 'cogroup', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'cogroupRequiredFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'cogroupRequiredFields', '.', 'get', '(', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '*', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '3', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateCountStarNoSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', 'COUNT', '(', '*', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '3', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarNoSchema1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '*', ',', 'COUNT', '(', '*', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '3', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarNoSchema2', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '*', ',', '$', '0', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '3', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'generate', '*', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '1', '>', ',', '<', '0', ',', '3', '>', ',', '<', '0', ',', '2', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateCountStarWithSchema', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'generate', 'COUNT', '(', '*', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'the', 'foreach', 'required', 'fields']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarWithSchema1', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'generate', '*', ',', 'COUNT', '(', '*', ')', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'the', 'foreach', 'required', 'fields']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['public', 'void', 'testQueryForeachGenerateStarWithSchema2', '(', ')', '{']",0
TestRequiredFields.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'generate', '*', ',', 'url', ';', '""', ';']",0
TestRequiredFields.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'load', ""'"", 's', 'required', 'fields', 'is', 'null']",0
TestRequiredFields.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'loadaRequiredFields', '=', 'loada', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'loadaRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['RequiredFields', 'requiredField', '=', 'loadaRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'true', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'getFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestRequiredFields.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'required', 'fields', 'contain', '[', '<', '0', ',', '0', '>', ',', '<', '0', ',', '1', '>', ']']",0
TestRequiredFields.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'RequiredFields', '>', 'foreachRequiredFields', '=', 'foreach', '.', 'getRequiredFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'foreachRequiredFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestRequiredFields.java,"['requiredField', '=', 'foreachRequiredFields', '.', 'get', '(', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needNoFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'requiredField', '.', 'needAllFields', '(', ')', '=', '=', 'false', ')', ';']",0
TestRequiredFields.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'requiredField', '.', 'getFields', '(', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestRequiredFields.java,"['assertTrue', '(', 'fields', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
POSort.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', ';']",0
POSort.java,"['import', 'java', '.', 'io', '.', 'Serializable', ';']",0
POSort.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
POSort.java,"['import', 'java', '.', 'util', '.', 'Comparator', ';']",0
POSort.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
POSort.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhyPlanVisitor', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'ExpressionOperator', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POUserComparisonFunc', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POUserFunc', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
POSort.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
POSort.java,"['/', '*', '*']",0
POSort.java,"['public', 'class', 'POSort', 'extends', 'PhysicalOperator', '{']",0
POSort.java,"['/', '*', '*']",0
POSort.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
POSort.java,"['/', '/', 'private', 'List', '<', 'Integer', '>', 'mSortCols', ';']",0
POSort.java,"['private', 'List', '<', 'PhysicalPlan', '>', 'sortPlans', ';']",0
POSort.java,"['private', 'List', '<', 'Byte', '>', 'ExprOutputTypes', ';']",0
POSort.java,"['private', 'List', '<', 'Boolean', '>', 'mAscCols', ';']",0
POSort.java,"['private', 'POUserComparisonFunc', 'mSortFunc', ';']",0
POSort.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
POSort.java,"['private', 'Comparator', '<', 'Tuple', '>', 'mComparator', ';']",0
POSort.java,"['private', 'boolean', 'inputsAccumulated', '=', 'false', ';']",0
POSort.java,"['private', 'long', 'limit', ';']",0
POSort.java,"['public', 'boolean', 'isUDFComparatorUsed', '=', 'false', ';']",0
POSort.java,"['private', 'DataBag', 'sortedBag', ';']",0
POSort.java,"['transient', 'Iterator', '<', 'Tuple', '>', 'it', ';']",0
POSort.java,"['public', 'POSort', '(']",0
POSort.java,"['OperatorKey', 'k', ',']",0
POSort.java,"['int', 'rp', ',']",0
POSort.java,"['List', 'inp', ',']",0
POSort.java,"['List', '<', 'PhysicalPlan', '>', 'sortPlans', ',']",0
POSort.java,"['List', '<', 'Boolean', '>', 'mAscCols', ',']",0
POSort.java,"['POUserComparisonFunc', 'mSortFunc', ')', '{']",0
POSort.java,"['super', '(', 'k', ',', 'rp', ',', 'inp', ')', ';']",0
POSort.java,"['/', '/', 'this', '.', 'mSortCols', '=', 'mSortCols', ';']",0
POSort.java,"['this', '.', 'sortPlans', '=', 'sortPlans', ';']",0
POSort.java,"['this', '.', 'mAscCols', '=', 'mAscCols', ';']",0
POSort.java,"['this', '.', 'limit', '=', '-', '1', ';']",0
POSort.java,"['this', '.', 'mSortFunc', '=', 'mSortFunc', ';']",0
POSort.java,"['if', '(', 'mSortFunc', '=', '=', 'null', ')', '{']",0
POSort.java,"['mComparator', '=', 'new', 'SortComparator', '(', ')', ';']",0
POSort.java,"['/', '*', 'sortedBag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newSortedBag', '(']",0
POSort.java,"['new', 'SortComparator', '(', ')', ')', ';', '*', '/']",0
POSort.java,"['ExprOutputTypes', '=', 'new', 'ArrayList', '<', 'Byte', '>', '(', 'sortPlans', '.', 'size', '(', ')', ')', ';']",0
POSort.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'sortPlans', ')', '{']",0
POSort.java,"['ExprOutputTypes', '.', 'add', '(', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getResultType', '(', ')', ')', ';']",0
POSort.java,"['}', 'else', '{']",0
POSort.java,"['/', '*', 'sortedBag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newSortedBag', '(']",0
POSort.java,"['new', 'UDFSortComparator', '(', ')', ')', ';', '*', '/']",0
POSort.java,"['mComparator', '=', 'new', 'UDFSortComparator', '(', ')', ';']",0
POSort.java,"['isUDFComparatorUsed', '=', 'true', ';']",0
POSort.java,"['public', 'POSort', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'List', 'inp', ')', '{']",0
POSort.java,"['super', '(', 'k', ',', 'rp', ',', 'inp', ')', ';']",0
POSort.java,"['public', 'POSort', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
POSort.java,"['super', '(', 'k', ',', 'rp', ')', ';']",0
POSort.java,"['public', 'POSort', '(', 'OperatorKey', 'k', ',', 'List', 'inp', ')', '{']",0
POSort.java,"['super', '(', 'k', ',', 'inp', ')', ';']",0
POSort.java,"['public', 'POSort', '(', 'OperatorKey', 'k', ')', '{']",0
POSort.java,"['super', '(', 'k', ')', ';']",0
POSort.java,"['public', 'class', 'SortComparator', 'implements', 'Comparator', '<', 'Tuple', '>', ',', 'Serializable', '{']",0
POSort.java,"['/', '*', '*']",0
POSort.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
POSort.java,"['public', 'int', 'compare', '(', 'Tuple', 'o1', ',', 'Tuple', 'o2', ')', '{']",0
POSort.java,"['int', 'count', '=', '0', ';']",0
POSort.java,"['int', 'ret', '=', '0', ';']",0
POSort.java,"['if', '(', 'sortPlans', '=', '=', 'null', '|', '|', 'sortPlans', '.', 'size', '(', ')', '=', '=', '0', ')']",0
POSort.java,"['return', '0', ';']",0
POSort.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'sortPlans', ')', '{']",0
POSort.java,"['plan', '.', 'attachInput', '(', 'o1', ')', ';']",0
POSort.java,"['Result', 'res1', '=', 'getResult', '(', 'plan', ',', 'ExprOutputTypes', '.', 'get', '(', 'count', ')', ')', ';']",0
POSort.java,"['plan', '.', 'attachInput', '(', 'o2', ')', ';']",0
POSort.java,"['Result', 'res2', '=', 'getResult', '(', 'plan', ',', 'ExprOutputTypes', '.', 'get', '(', 'count', ')', ')', ';']",0
POSort.java,"['if', '(', 'res1', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_OK', '|', '|', 'res2', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_OK', ')', '{']",0
POSort.java,"['log', '.', 'error', '(', '""', 'Error', 'processing', 'the', 'input', 'in', 'the', 'expression', 'plan', ':', '""', '+', 'plan', '.', 'toString', '(', ')', ')', ';']",0
POSort.java,"['}', 'else', '{']",0
POSort.java,"['if', '(', 'mAscCols', '.', 'get', '(', 'count', '+', '+', ')', ')', '{']",0
POSort.java,"['ret', '=', 'DataType', '.', 'compare', '(', 'res1', '.', 'result', ',', 'res2', '.', 'result', ')', ';']",0
POSort.java,"['/', '/', 'If', 'they', 'are', 'not', 'equal', ',', 'return']",0
POSort.java,"['/', '/', 'Otherwise', ',', 'keep', 'comparing', 'the', 'next', 'one']",0
POSort.java,"['if', '(', 'ret', '!', '=', '0', ')', '{']",0
POSort.java,"['return', 'ret', ';']",0
POSort.java,"['ret', '=', 'DataType', '.', 'compare', '(', 'res2', '.', 'result', ',', 'res1', '.', 'result', ')', ';']",0
POSort.java,"['if', '(', 'ret', '!', '=', '0', ')', '{']",0
POSort.java,"['return', 'ret', ';']",0
POSort.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
POSort.java,"['log', '.', 'error', '(', '""', 'Invalid', 'result', 'while', 'executing', 'the', 'expression', 'plan', ':', '""', '+', 'plan', '.', 'toString', '(', ')', '+', '""', '\\', 'n', '""', '+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
POSort.java,"['return', 'ret', ';']",0
POSort.java,"['private', 'Result', 'getResult', '(', 'PhysicalPlan', 'plan', ',', 'byte', 'resultType', ')', 'throws', 'ExecException', '{']",0
POSort.java,"['ExpressionOperator', 'Op', '=', '(', 'ExpressionOperator', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
POSort.java,"['Result', 'res', '=', 'null', ';']",0
POSort.java,"['switch', '(', 'resultType', ')', '{']",0
POSort.java,"['case', 'DataType', '.', 'BYTEARRAY', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyDBA', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyString', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyDouble', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyFloat', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyInt', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'LONG', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyLong', ')', ';']",0
POSort.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
POSort.java,"['res', '=', 'Op', '.', 'getNext', '(', 'dummyTuple', ')', ';']",0
POSort.java,"['default', ':', '{']",0
POSort.java,"['int', 'errCode', '=', '2082', ';']",0
POSort.java,"['String', 'msg', '=', '""', 'Did', 'not', 'expect', 'result', 'of', 'type', ':', '""', '+']",0
POSort.java,"['DataType', '.', 'findTypeName', '(', 'resultType', ')', ';']",0
POSort.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
POSort.java,"['return', 'res', ';']",0
POSort.java,"['public', 'class', 'UDFSortComparator', 'implements', 'Comparator', '<', 'Tuple', '>', ',', 'Serializable', '{']",0
POSort.java,"['/', '*', '*']",0
POSort.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
POSort.java,"['public', 'int', 'compare', '(', 'Tuple', 't1', ',', 'Tuple', 't2', ')', '{']",0
POSort.java,"['mSortFunc', '.', 'attachInput', '(', 't1', ',', 't2', ')', ';']",0
POSort.java,"['Integer', 'i', '=', 'null', ';']",0
POSort.java,"['Result', 'res', '=', 'null', ';']",0
POSort.java,"['res', '=', 'mSortFunc', '.', 'getNext', '(', 'i', ')', ';']",0
POSort.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
POSort.java,"['log', '.', 'error', '(', '""', 'Input', 'not', 'ready', '.', 'Error', 'on', 'reading', 'from', 'input', '.', '""']",0
POSort.java,"['+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
POSort.java,"['if', '(', 'res', '!', '=', 'null', ')']",0
POSort.java,"['return', '(', 'Integer', ')', 'res', '.', 'result', ';']",0
POSort.java,"['return', '0', ';']",0
POSort.java,"['public', 'String', 'name', '(', ')', '{']",0
POSort.java,"['return', '""', 'POSort', '""', '+', '""', '[', '""', '+', 'DataType', '.', 'findTypeName', '(', 'resultType', ')', '+', '""', ']', '""', '+', '""', '(', '""', '+', '(', 'mSortFunc', '!', '=', 'null', '?', 'mSortFunc', '.', 'getFuncSpec', '(', ')', ':', '""', '""', ')', '+', '""', ')', '""', '+', '""', '-', '""', '+', 'mKey', '.', 'toString', '(', ')', ';']",0
POSort.java,"['public', 'boolean', 'isBlocking', '(', ')', '{']",0
POSort.java,"['return', 'true', ';']",0
POSort.java,"['public', 'Result', 'getNext', '(', 'Tuple', 't', ')', 'throws', 'ExecException', '{']",0
POSort.java,"['Result', 'res', '=', 'new', 'Result', '(', ')', ';']",0
POSort.java,"['if', '(', '!', 'inputsAccumulated', ')', '{']",0
POSort.java,"['res', '=', 'processInput', '(', ')', ';']",0
POSort.java,"['sortedBag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newSortedBag', '(', 'mComparator', ')', ';']",0
POSort.java,"['while', '(', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_EOP', ')', '{']",0
POSort.java,"['if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_ERR', ')', '{']",0
POSort.java,"['log', '.', 'error', '(', '""', 'Error', 'in', 'reading', 'from', 'the', 'inputs', '""', ')', ';']",0
POSort.java,"['return', 'res', ';']",0
POSort.java,"['/', '/', 'continue', ';']",0
POSort.java,"['}', 'else', 'if', '(', 'res', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_NULL', ')', '{']",0
POSort.java,"['/', '/', 'ignore', 'the', 'null', ',', 'read', 'the', 'next', 'tuple', '.']",0
POSort.java,"['res', '=', 'processInput', '(', ')', ';']",0
POSort.java,"['sortedBag', '.', 'add', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
POSort.java,"['res', '=', 'processInput', '(', ')', ';']",0
POSort.java,"['inputsAccumulated', '=', 'true', ';']",0
POSort.java,"['if', '(', 'it', '=', '=', 'null', ')', '{']",0
POSort.java,"['it', '=', 'sortedBag', '.', 'iterator', '(', ')', ';']",0
POSort.java,"['if', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
POSort.java,"['res', '.', 'result', '=', 'it', '.', 'next', '(', ')', ';']",0
POSort.java,"['if', '(', 'lineageTracer', '!', '=', 'null', ')', '{']",0
POSort.java,"['lineageTracer', '.', 'insert', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
POSort.java,"['lineageTracer', '.', 'union', '(', '(', 'Tuple', ')', 'res', '.', 'result', ',', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
POSort.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POSort.java,"['}', 'else', '{']",0
POSort.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_EOP', ';']",0
POSort.java,"['reset', '(', ')', ';']",0
POSort.java,"['return', 'res', ';']",0
POSort.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
POSort.java,"['return', 'false', ';']",0
POSort.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
POSort.java,"['return', 'false', ';']",0
POSort.java,"['public', 'void', 'visit', '(', 'PhyPlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
POSort.java,"['v', '.', 'visitSort', '(', 'this', ')', ';']",0
POSort.java,"['public', 'void', 'reset', '(', ')', '{']",0
POSort.java,"['inputsAccumulated', '=', 'false', ';']",0
POSort.java,"['sortedBag', '=', 'null', ';']",0
POSort.java,"['it', '=', 'null', ';']",0
POSort.java,"['public', 'List', '<', 'PhysicalPlan', '>', 'getSortPlans', '(', ')', '{']",0
POSort.java,"['return', 'sortPlans', ';']",0
POSort.java,"['public', 'void', 'setSortPlans', '(', 'List', '<', 'PhysicalPlan', '>', 'sortPlans', ')', '{']",0
POSort.java,"['this', '.', 'sortPlans', '=', 'sortPlans', ';']",0
POSort.java,"['public', 'POUserComparisonFunc', 'getMSortFunc', '(', ')', '{']",0
POSort.java,"['return', 'mSortFunc', ';']",0
POSort.java,"['public', 'void', 'setMSortFunc', '(', 'POUserComparisonFunc', 'sortFunc', ')', '{']",0
POSort.java,"['mSortFunc', '=', 'sortFunc', ';']",0
POSort.java,"['public', 'List', '<', 'Boolean', '>', 'getMAscCols', '(', ')', '{']",0
POSort.java,"['return', 'mAscCols', ';']",0
POSort.java,"['public', 'void', 'setLimit', '(', 'long', 'l', ')']",0
POSort.java,"['limit', '=', 'l', ';']",0
POSort.java,"['public', 'long', 'getLimit', '(', ')']",0
POSort.java,"['return', 'limit', ';']",0
POSort.java,"['public', 'boolean', 'isLimited', '(', ')']",0
POSort.java,"['return', '(', 'limit', '!', '=', '-', '1', ')', ';']",0
POSort.java,"['public', 'POSort', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
POSort.java,"['List', '<', 'PhysicalPlan', '>', 'clonePlans', '=', 'new']",0
POSort.java,"['ArrayList', '<', 'PhysicalPlan', '>', '(', 'sortPlans', '.', 'size', '(', ')', ')', ';']",0
POSort.java,"['for', '(', 'PhysicalPlan', 'plan', ':', 'sortPlans', ')', '{']",0
POSort.java,"['clonePlans', '.', 'add', '(', 'plan', '.', 'clone', '(', ')', ')', ';']",0
POSort.java,"['List', '<', 'Boolean', '>', 'cloneAsc', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', 'mAscCols', '.', 'size', '(', ')', ')', ';']",0
POSort.java,"['for', '(', 'Boolean', 'b', ':', 'mAscCols', ')', '{']",0
POSort.java,"['cloneAsc', '.', 'add', '(', 'b', ')', ';']",0
POSort.java,"['POUserComparisonFunc', 'cloneFunc', '=', 'null', ';']",0
POSort.java,"['if', '(', 'mSortFunc', '!', '=', 'null', ')', '{']",0
POSort.java,"['cloneFunc', '=', 'mSortFunc', '.', 'clone', '(', ')', ';']",0
POSort.java,"['/', '/', 'Don', ""'"", 't', 'set', 'inputs', 'as', 'PhysicalPlan', '.', 'clone', 'will', 'take', 'care', 'of', 'that']",0
POSort.java,"['return', 'new', 'POSort', '(', 'new', 'OperatorKey', '(', 'mKey', '.', 'scope', ',']",0
POSort.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'mKey', '.', 'scope', ')', ')', ',']",0
POSort.java,"['requestedParallelism', ',', 'null', ',', 'clonePlans', ',', 'cloneAsc', ',', 'cloneFunc', ')', ';']",0
LOFRJoin.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'Hashtable', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LOFRJoin.java,"['import', 'java', '.', 'util', '.', 'Map', '.', 'Entry', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'SchemaRemover', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', '.', 'FieldSchema', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LOFRJoin.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LOFRJoin.java,"['public', 'class', 'LOFRJoin', 'extends', 'LogicalOperator', '{']",0
LOFRJoin.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LOFRJoin.java,"['/', '/', 'private', 'boolean', '[', ']', 'mIsInner', ';']",0
LOFRJoin.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOFRJoin', '.', 'class', ')', ';']",1
LOFRJoin.java,"['private', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'mJoinColPlans', ';']",1
LOFRJoin.java,"['private', 'LogicalOperator', 'fragOp', ';']",1
LOFRJoin.java,"['public', 'LOFRJoin', '(']",1
LOFRJoin.java,"['LogicalPlan', 'plan', ',']",1
LOFRJoin.java,"['OperatorKey', 'k', ',']",1
LOFRJoin.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'joinColPlans', ',']",1
LOFRJoin.java,"['boolean', '[', ']', 'isInner', ',', 'LogicalOperator', 'fragOp', ')', '{']",1
LOFRJoin.java,"['super', '(', 'plan', ',', 'k', ')', ';']",1
LOFRJoin.java,"['mJoinColPlans', '=', 'joinColPlans', ';']",1
LOFRJoin.java,"['/', '/', 'mIsInner', '=', 'isInner', ';']",0
LOFRJoin.java,"['/', '*', '*']",0
LOFRJoin.java,"['/', '*', '*']",0
LOFRJoin.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOFRJoin.java,"['mType', '=', 'DataType', '.', 'BAG', ';', '/', '/', 'mType', 'is', 'from', 'the', 'super', 'class']",1
LOFRJoin.java,"['Hashtable', '<', 'String', ',', 'Integer', '>', 'nonDuplicates', '=', 'new', 'Hashtable', '<', 'String', ',', 'Integer', '>', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', '!', 'mIsSchemaComputed', ')', '{']",1
LOFRJoin.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",1
LOFRJoin.java,"['int', 'i', '=', '-', '1', ';']",1
LOFRJoin.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",1
LOFRJoin.java,"['Schema', 'cSchema', '=', 'op', '.', 'getSchema', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', 'cSchema', '!', '=', 'null', ')', '{']",1
LOFRJoin.java,"['for', '(', 'FieldSchema', 'schema', ':', 'cSchema', '.', 'getFields', '(', ')', ')', '{']",1
LOFRJoin.java,"['+', '+', 'i', ';']",1
LOFRJoin.java,"['if', '(', 'nonDuplicates', '.', 'containsKey', '(', 'schema', '.', 'alias', ')', ')']",1
LOFRJoin.java,"['if', '(', 'nonDuplicates', '.', 'get', '(', 'schema', '.', 'alias', ')', '!', '=', '-', '1', ')', '{']",1
LOFRJoin.java,"['nonDuplicates', '.', 'remove', '(', 'schema', '.', 'alias', ')', ';']",1
LOFRJoin.java,"['nonDuplicates', '.', 'put', '(', 'schema', '.', 'alias', ',', '-', '1', ')', ';']",1
LOFRJoin.java,"['nonDuplicates', '.', 'put', '(', 'schema', '.', 'alias', ',', 'i', ')', ';']",1
LOFRJoin.java,"['FieldSchema', 'newFS', '=', 'new', 'FieldSchema', '(', 'op', '.', 'getAlias', '(', ')', '+', '""', ':', ':', '""', '+', 'schema', '.', 'alias', ',', 'schema', '.', 'schema', ',', 'schema', '.', 'type', ')', ';']",1
LOFRJoin.java,"['newFS', '.', 'setParent', '(', 'schema', '.', 'canonicalName', ',', 'op', ')', ';']",1
LOFRJoin.java,"['fss', '.', 'add', '(', 'newFS', ')', ';']",1
LOFRJoin.java,"['fss', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",1
LOFRJoin.java,"['}', 'catch', '(', 'FrontendException', 'ioe', ')', '{']",1
LOFRJoin.java,"['mIsSchemaComputed', '=', 'false', ';']",1
LOFRJoin.java,"['mSchema', '=', 'null', ';']",1
LOFRJoin.java,"['throw', 'ioe', ';']",1
LOFRJoin.java,"['mIsSchemaComputed', '=', 'true', ';']",1
LOFRJoin.java,"['for', '(', 'Entry', '<', 'String', ',', 'Integer', '>', 'ent', ':', 'nonDuplicates', '.', 'entrySet', '(', ')', ')', '{']",1
LOFRJoin.java,"['int', 'ind', '=', 'ent', '.', 'getValue', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', 'ind', '=', '=', '-', '1', ')', 'continue', ';']",1
LOFRJoin.java,"['FieldSchema', 'prevSch', '=', 'fss', '.', 'get', '(', 'ind', ')', ';']",1
LOFRJoin.java,"['fss', '.', 'set', '(', 'ind', ',', 'new', 'FieldSchema', '(', 'ent', '.', 'getKey', '(', ')', ',', 'prevSch', '.', 'schema', ',', 'prevSch', '.', 'type', ')', ')', ';']",1
LOFRJoin.java,"['mSchema', '=', 'new', 'Schema', '(', 'fss', ')', ';']",1
LOFRJoin.java,"['return', 'mSchema', ';']",1
LOFRJoin.java,"['public', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'getJoinColPlans', '(', ')', '{']",1
LOFRJoin.java,"['return', 'mJoinColPlans', ';']",1
LOFRJoin.java,"['public', 'void', 'switchJoinColPlanOp', '(', 'LogicalOperator', 'oldOp', ',']",1
LOFRJoin.java,"['LogicalOperator', 'newOp', ')', '{']",1
LOFRJoin.java,"['Collection', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'mJoinColPlans', '.', 'removeKey', '(', 'oldOp', ')', ';']",1
LOFRJoin.java,"['mJoinColPlans', '.', 'put', '(', 'newOp', ',', 'innerPlans', ')', ';']",1
LOFRJoin.java,"['if', '(', 'fragOp', '.', 'getOperatorKey', '(', ')', '.', 'equals', '(', 'oldOp', '.', 'getOperatorKey', '(', ')', ')', ')']",1
LOFRJoin.java,"['fragOp', '=', 'newOp', ';']",1
LOFRJoin.java,"['public', 'void', 'unsetSchema', '(', ')', 'throws', 'VisitorException', '{']",1
LOFRJoin.java,"['for', '(', 'LogicalOperator', 'input', ':', 'getInputs', '(', ')', ')', '{']",1
LOFRJoin.java,"['Collection', '<', 'LogicalPlan', '>', 'grpPlans', '=', 'mJoinColPlans', '.', 'get', '(', 'input', ')', ';']",1
LOFRJoin.java,"['if', '(', 'grpPlans', '!', '=', 'null', ')']",1
LOFRJoin.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'grpPlans', ')', '{']",1
LOFRJoin.java,"['SchemaRemover', 'sr', '=', 'new', 'SchemaRemover', '(', 'plan', ')', ';']",1
LOFRJoin.java,"['sr', '.', 'visit', '(', ')', ';']",1
LOFRJoin.java,"['super', '.', 'unsetSchema', '(', ')', ';']",1
LOFRJoin.java,"['public', 'List', '<', 'LogicalOperator', '>', 'getInputs', '(', ')', '{']",1
LOFRJoin.java,"['return', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOFRJoin.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",1
LOFRJoin.java,"['v', '.', 'visit', '(', 'this', ')', ';']",1
LOFRJoin.java,"['public', 'String', 'name', '(', ')', '{']",1
LOFRJoin.java,"['return', '""', 'FRJoin', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",1
LOFRJoin.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",1
LOFRJoin.java,"['return', 'true', ';']",1
LOFRJoin.java,"['public', 'LogicalOperator', 'getFragOp', '(', ')', '{']",1
LOFRJoin.java,"['return', 'fragOp', ';']",1
LOFRJoin.java,"['public', 'void', 'setFragOp', '(', 'LogicalOperator', 'fragOp', ')', '{']",1
LOFRJoin.java,"['this', '.', 'fragOp', '=', 'fragOp', ';']",0
LOFRJoin.java,"['this', '.', 'fragOp', '=', 'fragOp', ';']",0
LOFRJoin.java,"['public', 'boolean', 'isTupleJoinCol', '(', ')', '{']",1
LOFRJoin.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOFRJoin.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOFRJoin.java,"['if', '(', 'inputs', '=', '=', 'null', '|', '|', 'inputs', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOFRJoin.java,"['throw', 'new', 'AssertionError', '(', '""', 'join', '.', 'isTuplejoinCol', '(', ')', 'can', 'be', 'called', '""']",1
LOFRJoin.java,"['+', '""', 'after', 'it', 'has', 'an', 'input', 'only', '""', ')', ';']",1
LOFRJoin.java,"['/', '/', 'NOTE', ':', 'we', 'depend', 'on', 'the', 'number', 'of', 'inner', 'plans', 'to', 'determine']",1
LOFRJoin.java,"['/', '/', 'if', 'the', 'join', 'col', 'is', 'a', 'tuple', '.', 'This', 'could', 'be', 'an', 'issue', 'when', 'there']",1
LOFRJoin.java,"['/', '/', 'is', 'only', 'one', 'inner', 'plan', 'with', 'Project', '(', '*', ')', '.', 'For', 'that', 'case', 'if', 'the']",1
LOFRJoin.java,"['/', '/', 'corresponding', 'input', 'to', 'the', 'Project', 'had', 'a', 'schema', 'then', 'the', 'front', 'end']",1
LOFRJoin.java,"['/', '/', 'would', 'translate', 'the', 'single', 'Project', '(', '*', ')', '(', 'through', 'ProjectStarTranslator', ')']",1
LOFRJoin.java,"['/', '/', 'to', 'many', 'individual', 'Projects', '.', 'So', 'the', 'number', 'of', 'inner', 'plans', 'would', 'then']",1
LOFRJoin.java,"['/', '/', 'be', '>', '1', 'BEFORE', 'reaching', 'here', '.', 'For', 'the', 'Project', '(', '*', ')', 'case', 'when', 'the', 'corresponding']",1
LOFRJoin.java,"['/', '/', 'input', 'for', 'the', 'Project', 'has', 'no', 'schema', ',', 'treating', 'it', 'as', 'an', 'atomic', 'col', 'join']",1
LOFRJoin.java,"['/', '/', 'does', 'not', 'cause', 'any', 'problems', 'since', 'no', 'casts', 'need', 'to', 'be', 'inserted', 'in', 'that', 'case']",1
LOFRJoin.java,"['/', '/', 'anyway', '.']",1
LOFRJoin.java,"['return', 'mJoinColPlans', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', '>', '1', ';']",1
LOFRJoin.java,"['public', 'byte', 'getAtomicJoinColType', '(', ')', 'throws', 'FrontendException', '{']",1
LOFRJoin.java,"['if', '(', 'isTupleJoinCol', '(', ')', ')', '{']",1
LOFRJoin.java,"['int', 'errCode', '=', '1010', ';']",1
LOFRJoin.java,"['String', 'msg', '=', '""', 'getAtomicGroupByType', 'is', 'used', 'only', 'when', '""']",1
LOFRJoin.java,"['+', '""', 'dealing', 'with', 'atomic', 'join', 'col', '""', ';']",1
LOFRJoin.java,"['byte', 'joinColType', '=', 'DataType', '.', 'BYTEARRAY', ';']",1
LOFRJoin.java,"['if', '(', 'innerPlans', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",1
LOFRJoin.java,"['int', 'errCode', '=', '1012', ';']",1
LOFRJoin.java,"['String', 'msg', '=', '""', 'Each', 'join', 'input', 'has', 'to', 'have', '""']",1
LOFRJoin.java,"['+', '""', 'the', 'same', 'number', 'of', 'inner', 'plans', '""', ';']",1
LOFRJoin.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOFRJoin.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOFRJoin.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', '0', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",1
LOFRJoin.java,"['joinColType', '=', 'DataType', '.', 'mergeType', '(', 'joinColType', ',', 'innerType', ')', ';']",1
LOFRJoin.java,"['return', 'joinColType', ';']",1
LOFRJoin.java,"['public', 'Schema', 'getTupleJoinColSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOFRJoin.java,"['if', '(', '!', 'isTupleJoinCol', '(', ')', ')', '{']",1
LOFRJoin.java,"['int', 'errCode', '=', '1011', ';']",1
LOFRJoin.java,"['String', 'msg', '=', '""', 'getTupleGroupBySchema', 'is', 'used', 'only', 'when', '""']",1
LOFRJoin.java,"['+', '""', 'dealing', 'with', 'tuple', 'join', 'col', '""', ';']",1
LOFRJoin.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOFRJoin.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOFRJoin.java,"['/', '/', 'this', 'fsList', 'represents', 'all', 'the', 'columns', 'in', 'join', 'tuple']",1
LOFRJoin.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fsList', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",1
LOFRJoin.java,"['int', 'outputSchemaSize', '=', 'getJoinColPlans', '(', ')', '.', 'get', '(', 'getInputs', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', ';']",1
LOFRJoin.java,"['/', '/', 'by', 'default', ',', 'they', 'are', 'all', 'bytearray']",1
LOFRJoin.java,"['/', '/', 'for', 'type', 'checking', ',', 'we', 'don', ""'"", 't', 'care', 'about', 'aliases']",1
LOFRJoin.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'outputSchemaSize', ';', 'i', '+', '+', ')', '{']",1
LOFRJoin.java,"['fsList', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",1
LOFRJoin.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
LOFRJoin.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
LOFRJoin.java,"['/', '/', 'our', 'join', 'column', 'should', 'be']",0
LOFRJoin.java,"['/', '/', 'our', 'join', 'column', 'should', 'be']",0
LOFRJoin.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
LOFRJoin.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
LOFRJoin.java,"['LogicalOperator', 'input', '=', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
LOFRJoin.java,"['LogicalOperator', 'input', '=', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
LOFRJoin.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
LOFRJoin.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
LOFRJoin.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'getJoinColPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
LOFRJoin.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'getJoinColPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
LOFRJoin.java,"['boolean', 'seenProjectStar', '=', 'false', ';']",1
LOFRJoin.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",1
LOFRJoin.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', 'j', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",1
LOFRJoin.java,"['ExpressionOperator', 'eOp', '=', '(', 'ExpressionOperator', ')', 'innerPlans', '.', 'get', '(', 'j', ')', '.', 'getSingleLeafPlanOutputOp', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', 'eOp', 'instanceof', 'LOProject', ')', '{']",1
LOFRJoin.java,"['if', '(', '(', '(', 'LOProject', ')', 'eOp', ')', '.', 'isStar', '(', ')', ')', '{']",1
LOFRJoin.java,"['seenProjectStar', '=', 'true', ';']",1
LOFRJoin.java,"['Schema', '.', 'FieldSchema', 'joinFs', '=', 'fsList', '.', 'get', '(', 'j', ')', ';']",1
LOFRJoin.java,"['joinFs', '.', 'type', '=', 'DataType', '.', 'mergeType', '(', 'joinFs', '.', 'type', ',', 'innerType', ')', ';']",1
LOFRJoin.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'eOp', '.', 'getFieldSchema', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', 'null', '!', '=', 'fs', ')', '{']",1
LOFRJoin.java,"['joinFs', '.', 'setParent', '(', 'eOp', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'eOp', ')', ';']",1
LOFRJoin.java,"['joinFs', '.', 'setParent', '(', 'null', ',', 'eOp', ')', ';']",1
LOFRJoin.java,"['if', '(', 'seenProjectStar', '&', '&', 'innerPlans', '.', 'size', '(', ')', '>', '1', ')', '{']",1
LOFRJoin.java,"['int', 'errCode', '=', '1013', ';']",1
LOFRJoin.java,"['String', 'msg', '=', '""', 'Join', 'attributes', 'can', 'either', 'be', 'star', '(', '*', ')', 'or', 'a', 'list', 'of', 'expressions', ',', 'but', 'not', 'both', '.', '""', ';']",1
LOFRJoin.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOFRJoin.java,"['return', 'new', 'Schema', '(', 'fsList', ')', ';']",1
LOFRJoin.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LOFRJoin.java,"['Schema', 'outputSchema', ';']",1
LOFRJoin.java,"['outputSchema', '=', 'getSchema', '(', ')', ';']",1
LOFRJoin.java,"['if', '(', 'outputSchema', '=', '=', 'null', ')', '{']",1
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', '(', 'ArrayList', '<', 'LogicalOperator', '>', ')', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOFRJoin.java,"['List', '<', 'Integer', '>', 'addedFields', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",1
LOFRJoin.java,"['boolean', '[', ']', 'unknownSchema', '=', 'new', 'boolean', '[', 'predecessors', '.', 'size', '(', ')', ']', ';']",1
LOFRJoin.java,"['boolean', 'anyUnknownInputSchema', '=', 'false', ';']",1
LOFRJoin.java,"['int', 'outputColumnNum', '=', '0', ';']",1
LOFRJoin.java,"['LogicalOperator', 'predecessor', '=', 'predecessors', '.', 'get', '(', 'inputNum', ')', ';']",1
LOFRJoin.java,"['Schema', 'inputSchema', '=', 'null', ';']",1
LOFRJoin.java,"['inputSchema', '=', 'predecessor', '.', 'getSchema', '(', ')', ';']",1
LOFRJoin.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOFRJoin.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['if', '(', 'inputSchema', '=', '=', 'null', ')', '{']",1
LOFRJoin.java,"['unknownSchema', '[', 'inputNum', ']', '=', 'true', ';']",1
LOFRJoin.java,"['outputColumnNum', '+', '+', ';']",1
LOFRJoin.java,"['addedFields', '.', 'add', '(', 'inputNum', ')', ';']",1
LOFRJoin.java,"['anyUnknownInputSchema', '=', 'true', ';']",1
LOFRJoin.java,"['}', 'else', '{']",0
LOFRJoin.java,"['}', 'else', '{']",0
LOFRJoin.java,"['unknownSchema', '[', 'inputNum', ']', '=', 'false', ';']",1
LOFRJoin.java,"['for', '(', 'int', 'inputColumn', '=', '0', ';', 'inputColumn', '<', 'inputSchema', '.', 'size', '(', ')', ';', '+', '+', 'inputColumn', ')', '{']",1
LOFRJoin.java,"['mapFields', '.', 'put', '(', 'outputColumnNum', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOFRJoin.java,"['/', '/', 'TODO']",1
LOFRJoin.java,"['if', '(', 'anyUnknownInputSchema', ')', '{']",1
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['if', '(', 'addedFields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOFRJoin.java,"['addedFields', '=', 'null', ';']",1
LOFRJoin.java,"['return', 'new', 'ProjectionMap', '(', 'mapFields', ',', 'null', ',', 'addedFields', ')', ';']",1
LOFRJoin.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LOFRJoin.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOFRJoin.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOFRJoin.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOFRJoin.java,"['return', 'null', ';']",0
LOFRJoin.java,"['List', '<', 'RequiredFields', '>', 'requiredFields', '=', 'new', 'ArrayList', '<', 'RequiredFields', '>', '(', ')', ';']",1
LOFRJoin.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ';', '+', '+', 'inputNum', ')', '{']",0
LOFRJoin.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ';', '+', '+', 'inputNum', ')', '{']",0
LOFRJoin.java,"['Set', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'new', 'HashSet', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOFRJoin.java,"['Set', '<', 'LOProject', '>', 'projectSet', '=', 'new', 'HashSet', '<', 'LOProject', '>', '(', ')', ';']",1
LOFRJoin.java,"['boolean', 'groupByStar', '=', 'false', ';']",1
LOFRJoin.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'this', '.', 'getJoinColPlans', '(', ')', '.', 'get', '(', 'predecessors', '.', 'get', '(', 'inputNum', ')', ')', ')', '{']",1
LOFRJoin.java,"['TopLevelProjectFinder', 'projectFinder', '=', 'new', 'TopLevelProjectFinder', '(', 'plan', ')', ';']",1
LOFRJoin.java,"['projectFinder', '.', 'visit', '(', ')', ';']",1
LOFRJoin.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",1
LOFRJoin.java,"['requiredFields', '.', 'clear', '(', ')', ';']",1
LOFRJoin.java,"['requiredFields', '.', 'add', '(', 'null', ')', ';']",1
LOFRJoin.java,"['return', 'requiredFields', ';']",1
LOFRJoin.java,"['projectSet', '.', 'addAll', '(', 'projectFinder', '.', 'getProjectSet', '(', ')', ')', ';']",1
LOFRJoin.java,"['if', '(', 'projectFinder', '.', 'getProjectStarSet', '(', ')', '!', '=', 'null', ')', '{']",1
LOFRJoin.java,"['groupByStar', '=', 'true', ';']",1
LOFRJoin.java,"['if', '(', 'groupByStar', ')', '{']",1
LOFRJoin.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'true', ')', ')', ';']",1
LOFRJoin.java,"['}', 'else', '{']",0
LOFRJoin.java,"['for', '(', 'LOProject', 'project', ':', 'projectSet', ')', '{']",1
LOFRJoin.java,"['for', '(', 'int', 'inputColumn', ':', 'project', '.', 'getProjection', '(', ')', ')', '{']",1
LOFRJoin.java,"['fields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOFRJoin.java,"['if', '(', 'fields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOFRJoin.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'false', ',', 'true', ')', ')', ';']",1
LOFRJoin.java,"['}', 'else', '{']",0
LOFRJoin.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'new', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', 'fields', ')', ')', ')', ';']",1
LOFRJoin.java,"['return', '(', 'requiredFields', '.', 'size', '(', ')', '=', '=', '0', '?', 'null', ':', 'requiredFields', ')', ';']",1
ProjectionMap.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', ';']",0
ProjectionMap.java,"['import', 'java', '.', 'lang', '.', 'StringBuilder', ';']",0
ProjectionMap.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
ProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
ProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
ProjectionMap.java,"['public', 'class', 'ProjectionMap', '{']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['private', 'boolean', 'mChanges', '=', 'true', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['private', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mMappedFields', ';']",1
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['private', 'List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mRemovedFields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['private', 'List', '<', 'Integer', '>', 'mAddedFields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'ProjectionMap', '(', 'boolean', 'changes', ')', '{']",0
ProjectionMap.java,"['this', '(', 'null', ',', 'null', ',', 'null', ',', 'changes', ')', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'ProjectionMap', '(', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', ',']",1
ProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'removedFields', ',']",0
ProjectionMap.java,"['List', '<', 'Integer', '>', 'addedFields', ')', '{']",0
ProjectionMap.java,"['this', '(', 'mapFields', ',', 'removedFields', ',', 'addedFields', ',', 'true', ')', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['private', 'ProjectionMap', '(', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', ',']",1
ProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'removedFields', ',']",0
ProjectionMap.java,"['List', '<', 'Integer', '>', 'addedFields', ',', 'boolean', 'changes', ')', '{']",0
ProjectionMap.java,"['mMappedFields', '=', 'mapFields', ';']",0
ProjectionMap.java,"['mAddedFields', '=', 'addedFields', ';']",0
ProjectionMap.java,"['mRemovedFields', '=', 'removedFields', ';']",0
ProjectionMap.java,"['mChanges', '=', 'changes', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'getMappedFields', '(', ')', '{']",1
ProjectionMap.java,"['return', 'mMappedFields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'void', 'setMappedFields', '(', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', ')', '{']",1
ProjectionMap.java,"['mMappedFields', '=', 'fields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'getRemovedFields', '(', ')', '{']",0
ProjectionMap.java,"['return', 'mRemovedFields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'void', 'setRemovedFields', '(', 'List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', ')', '{']",0
ProjectionMap.java,"['mRemovedFields', '=', 'fields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'List', '<', 'Integer', '>', 'getAddedFields', '(', ')', '{']",0
ProjectionMap.java,"['return', 'mAddedFields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'void', 'setAddedFields', '(', 'List', '<', 'Integer', '>', 'fields', ')', '{']",0
ProjectionMap.java,"['mAddedFields', '=', 'fields', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'boolean', 'changes', '(', ')', '{']",0
ProjectionMap.java,"['return', 'getChanges', '(', ')', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'boolean', 'getChanges', '(', ')', '{']",0
ProjectionMap.java,"['return', 'mChanges', ';']",0
ProjectionMap.java,"['/', '*', '*']",0
ProjectionMap.java,"['public', 'void', 'setChanges', '(', 'boolean', 'changes', ')', '{']",0
ProjectionMap.java,"['mChanges', '=', 'changes', ';']",0
ProjectionMap.java,"['public', 'String', 'toString', '(', ')', '{']",0
ProjectionMap.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
ProjectionMap.java,"['sb', '.', 'append', '(', '""', 'changes', ':', '""', '+', 'mChanges', ')', ';']",0
ProjectionMap.java,"['sb', '.', 'append', '(', '""', 'mapped', 'fields', ':', '""', '+', 'mMappedFields', ')', ';']",0
ProjectionMap.java,"['sb', '.', 'append', '(', '""', 'added', 'fields', ':', '""', '+', 'mAddedFields', ')', ';']",0
ProjectionMap.java,"['sb', '.', 'append', '(', '""', 'removed', 'fields', ':', '""', '+', 'mRemovedFields', ')', ';']",0
ProjectionMap.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanDumper.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', ';']",0
PlanDumper.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PlanDumper.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
PlanDumper.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
PlanDumper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['public', 'class', 'PlanDumper', '<', 'E', 'extends', 'Operator', ',']",0
PlanDumper.java,"['P', 'extends', 'OperatorPlan', '<', 'E', '>', ',']",0
PlanDumper.java,"['S', 'extends', 'OperatorPlan', '<', '?', 'extends', 'Operator', '>', '>', '{']",0
PlanDumper.java,"['protected', 'PrintStream', 'ps', ';']",0
PlanDumper.java,"['protected', 'P', 'plan', ';']",0
PlanDumper.java,"['protected', 'boolean', 'isVerbose', '=', 'true', ';']",0
PlanDumper.java,"['public', 'PlanDumper', '(', 'P', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
PlanDumper.java,"['this', '.', 'plan', '=', 'plan', ';']",0
PlanDumper.java,"['this', '.', 'ps', '=', 'ps', ';']",0
PlanDumper.java,"['public', 'void', 'setVerbose', '(', 'boolean', 'verbose', ')', '{']",0
PlanDumper.java,"['this', '.', 'isVerbose', '=', 'verbose', ';']",0
PlanDumper.java,"['public', 'boolean', 'isVerbose', '(', ')', '{']",0
PlanDumper.java,"['return', 'isVerbose', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['public', 'void', 'dump', '(', ')', '{']",0
PlanDumper.java,"['for', '(', 'E', 'op', ':', 'plan', ')', '{']",0
PlanDumper.java,"['MultiMap', '<', 'E', ',', 'S', '>', 'map', '=', 'getMultiInputNestedPlans', '(', 'op', ')', ';']",0
PlanDumper.java,"['if', '(', 'isVerbose', '&', '&', '!', 'map', '.', 'isEmpty', '(', ')', ')', '{']",0
PlanDumper.java,"['dumpMultiInputNestedOperator', '(', 'op', ',', 'map', ')', ';']",0
PlanDumper.java,"['Collection', '<', 'S', '>', 'plans', '=', 'getMultiOutputNestedPlans', '(', 'op', ')', ';']",0
PlanDumper.java,"['if', '(', 'plans', '.', 'size', '(', ')', '>', '0', ')', '{']",0
PlanDumper.java,"['dumpMultiOutputNestedOperator', '(', 'op', ',', 'plans', ')', ';']",0
PlanDumper.java,"['plans', '=', 'getNestedPlans', '(', 'op', ')', ';']",0
PlanDumper.java,"['if', '(', 'isVerbose', '&', '&', 'plans', '.', 'size', '(', ')', '>', '0', ')', '{']",0
PlanDumper.java,"['dumpNestedOperator', '(', 'op', ',', 'plans', ')', ';']",0
PlanDumper.java,"['dumpOperator', '(', 'op', ')', ';']",0
PlanDumper.java,"['for', '(', 'E', 'op', ':', 'plan', ')', '{']",0
PlanDumper.java,"['Collection', '<', 'E', '>', 'successors', '=', 'plan', '.', 'getSuccessors', '(', 'op', ')', ';']",0
PlanDumper.java,"['if', '(', 'successors', '!', '=', 'null', ')', '{']",0
PlanDumper.java,"['for', '(', 'E', 'suc', ':', 'successors', ')', '{']",0
PlanDumper.java,"['dumpEdge', '(', 'op', ',', 'suc', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'PlanDumper', 'makeDumper', '(', 'S', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
PlanDumper.java,"['return', 'new', 'PlanDumper', '(', 'plan', ',', 'ps', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'dumpOperator', '(', 'E', 'op', ')', '{']",0
PlanDumper.java,"['ps', '.', 'println', '(', 'op', '.', 'name', '(', ')', '.', 'replace', '(', '""', '""', ',', '""', '_', '""', ')', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'dumpMultiInputNestedOperator', '(', 'E', 'op', ',', 'MultiMap', '<', 'E', ',', 'S', '>', 'plans', ')', '{']",0
PlanDumper.java,"['dumpOperator', '(', 'op', ')', ';']",0
PlanDumper.java,"['for', '(', 'E', 'aop', ':', 'plans', '.', 'keySet', '(', ')', ')', '{']",0
PlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', '.', 'get', '(', 'aop', ')', ')', '{']",0
PlanDumper.java,"['PlanDumper', 'dumper', '=', 'makeDumper', '(', 'plan', ',', 'ps', ')', ';']",0
PlanDumper.java,"['dumper', '.', 'dump', '(', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'dumpMultiOutputNestedOperator', '(', 'E', 'op', ',', 'Collection', '<', 'S', '>', 'plans', ')', '{']",0
PlanDumper.java,"['dumpOperator', '(', 'op', ')', ';']",0
PlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', ')', '{']",0
PlanDumper.java,"['PlanDumper', 'dumper', '=', 'makeDumper', '(', 'plan', ',', 'ps', ')', ';']",0
PlanDumper.java,"['dumper', '.', 'dump', '(', ')', ';']",0
PlanDumper.java,"['for', '(', 'Operator', 'p', ':', 'plan', '.', 'getRoots', '(', ')', ')', '{']",0
PlanDumper.java,"['dumpEdge', '(', 'op', ',', 'p', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'dumpNestedOperator', '(', 'E', 'op', ',', 'Collection', '<', 'S', '>', 'plans', ')', '{']",0
PlanDumper.java,"['dumpOperator', '(', 'op', ')', ';']",0
PlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', ')', '{']",0
PlanDumper.java,"['PlanDumper', 'dumper', '=', 'makeDumper', '(', 'plan', ',', 'ps', ')', ';']",0
PlanDumper.java,"['dumper', '.', 'dump', '(', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'dumpEdge', '(', 'Operator', 'op', ',', 'Operator', 'suc', ')', '{']",0
PlanDumper.java,"['ps', '.', 'println', '(', 'op', '.', 'name', '(', ')', '+', '""', '-', '>', '""', '+', 'suc', '.', 'name', '(', ')', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'MultiMap', '<', 'E', ',', 'S', '>', 'getMultiInputNestedPlans', '(', 'E', 'op', ')', '{']",0
PlanDumper.java,"['return', 'new', 'MultiMap', '<', 'E', ',', 'S', '>', '(', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'Collection', '<', 'S', '>', 'getMultiOutputNestedPlans', '(', 'E', 'op', ')', '{']",0
PlanDumper.java,"['return', 'new', 'LinkedList', '<', 'S', '>', '(', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'Collection', '<', 'S', '>', 'getNestedPlans', '(', 'E', 'op', ')', '{']",0
PlanDumper.java,"['return', 'new', 'LinkedList', '<', 'S', '>', '(', ')', ';']",0
PlanDumper.java,"['/', '*', '*']",0
PlanDumper.java,"['protected', 'void', 'join', '(', 'String', 'sep', ',', 'String', '[', ']', 'strings', ')', '{']",0
PlanDumper.java,"['if', '(', 'strings', '=', '=', 'null', ')', '{']",0
PlanDumper.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'strings', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
PlanDumper.java,"['if', '(', 'i', '!', '=', '0', ')', '{']",0
PlanDumper.java,"['ps', '.', 'print', '(', 'sep', ')', ';']",0
PlanDumper.java,"['ps', '.', 'print', '(', 'strings', '[', 'i', ']', ')', ';']",0
Util.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
Util.java,"['import', 'static', 'java', '.', 'util', '.', 'regex', '.', 'Matcher', '.', 'quoteReplacement', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
Util.java,"['import', 'java', '.', 'io', '.', 'PrintWriter', ';']",0
Util.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
Util.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
Util.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
Util.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
Util.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
Util.java,"['import', 'junit', '.', 'framework', '.', 'Assert', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FSDataOutputStream', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileSystem', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'Path', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MRCompiler', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'LogToPhyTranslationVisitor', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'QueryParser', ';']",0
Util.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
Util.java,"['public', 'class', 'Util', '{']",0
Util.java,"['private', 'static', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
Util.java,"['private', 'static', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
Util.java,"['/', '/', 'Helper', 'Functions']",0
Util.java,"['/', '/', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=']",0
Util.java,"['static', 'public', 'Tuple', 'loadFlatTuple', '(', 'Tuple', 't', ',', 'int', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['t', '.', 'set', '(', 'i', ',', 'new', 'Integer', '(', 'input', '[', 'i', ']', ')', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadTuple', '(', 'Tuple', 't', ',', 'String', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['t', '.', 'set', '(', 'i', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadTuple', '(', 'Tuple', 't', ',', 'DataByteArray', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['t', '.', 'set', '(', 'i', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadNestTuple', '(', 'Tuple', 't', ',', 'int', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['DataBag', 'bag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['Tuple', 'f', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', '1', ')', ';']",0
Util.java,"['f', '.', 'set', '(', '0', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['bag', '.', 'add', '(', 'f', ')', ';']",0
Util.java,"['t', '.', 'set', '(', '0', ',', 'bag', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadNestTuple', '(', 'Tuple', 't', ',', 'long', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['DataBag', 'bag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['Tuple', 'f', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', '1', ')', ';']",0
Util.java,"['f', '.', 'set', '(', '0', ',', 'new', 'Long', '(', 'input', '[', 'i', ']', ')', ')', ';']",0
Util.java,"['bag', '.', 'add', '(', 'f', ')', ';']",0
Util.java,"['t', '.', 'set', '(', '0', ',', 'bag', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['/', '/', 'this', 'one', 'should', 'handle', 'String', ',', 'DataByteArray', ',', 'Long', ',', 'Integer', 'etc', '.', '.']",0
Util.java,"['static', 'public', '<', 'T', '>', 'Tuple', 'loadNestTuple', '(', 'Tuple', 't', ',', 'T', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['DataBag', 'bag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['Tuple', 'f', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', '1', ')', ';']",0
Util.java,"['f', '.', 'set', '(', '0', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['bag', '.', 'add', '(', 'f', ')', ';']",0
Util.java,"['t', '.', 'set', '(', '0', ',', 'bag', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', '<', 'T', '>', 'void', 'addToTuple', '(', 'Tuple', 't', ',', 'T', '[', ']', 'b', ')']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'b', '.', 'length', ';', 'i', '+', '+', ')']",0
Util.java,"['t', '.', 'append', '(', 'b', '[', 'i', ']', ')', ';']",0
Util.java,"['static', 'public', '<', 'T', '>', 'Tuple', 'createTuple', '(', 'T', '[', ']', 's', ')']",0
Util.java,"['Tuple', 't', '=', 'mTupleFactory', '.', 'newTuple', '(', ')', ';']",0
Util.java,"['addToTuple', '(', 't', ',', 's', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'DataBag', 'createBag', '(', 'Tuple', '[', ']', 't', ')']",0
Util.java,"['DataBag', 'b', '=', 'mBagFactory', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 't', '.', 'length', ';', 'i', '+', '+', ')', 'b', '.', 'add', '(', 't', '[', 'i', ']', ')', ';']",0
Util.java,"['return', 'b', ';']",0
Util.java,"['static', 'public', '<', 'T', '>', 'DataBag', 'createBagOfOneColumn', '(', 'T', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['DataBag', 'result', '=', 'mBagFactory', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['Tuple', 't', '=', 'mTupleFactory', '.', 'newTuple', '(', '1', ')', ';']",0
Util.java,"['t', '.', 'set', '(', '0', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['result', '.', 'add', '(', 't', ')', ';']",0
Util.java,"['return', 'result', ';']",0
Util.java,"['static', 'public', 'Map', '<', 'Object', ',', 'Object', '>', 'createMap', '(', 'String', '[', ']', 'contents', ')']",0
Util.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', 'new', 'HashMap', '<', 'Object', ',', 'Object', '>', '(', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'contents', '.', 'length', ';', ')', '{']",0
Util.java,"['m', '.', 'put', '(', 'contents', '[', 'i', ']', ',', 'contents', '[', 'i', '+', '1', ']', ')', ';']",0
Util.java,"['i', '+', '=', '2', ';']",0
Util.java,"['return', 'm', ';']",0
Util.java,"['static', 'public', '<', 'T', '>', 'DataByteArray', '[', ']', 'toDataByteArrays', '(', 'T', '[', ']', 'input', ')', '{']",0
Util.java,"['DataByteArray', '[', ']', 'dbas', '=', 'new', 'DataByteArray', '[', 'input', '.', 'length', ']', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['dbas', '[', 'i', ']', '=', '(', 'input', '[', 'i', ']', '=', '=', 'null', ')', '?', 'null', ':', 'new', 'DataByteArray', '(', 'input', '[', 'i', ']', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ')', ';']",0
Util.java,"['return', 'dbas', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadNestTuple', '(', 'Tuple', 't', ',', 'int', '[', ']', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['DataBag', 'bag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['Tuple', 'f', '=', 'loadFlatTuple', '(', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', 'input', '[', 'i', ']', '.', 'length', ')', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['bag', '.', 'add', '(', 'f', ')', ';']",0
Util.java,"['t', '.', 'set', '(', 'i', ',', 'bag', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['static', 'public', 'Tuple', 'loadTuple', '(', 'Tuple', 't', ',', 'String', '[', ']', '[', ']', 'input', ')', 'throws', 'ExecException', '{']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'input', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['DataBag', 'bag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
Util.java,"['Tuple', 'f', '=', 'loadTuple', '(', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', 'input', '[', 'i', ']', '.', 'length', ')', ',', 'input', '[', 'i', ']', ')', ';']",0
Util.java,"['bag', '.', 'add', '(', 'f', ')', ';']",0
Util.java,"['t', '.', 'set', '(', 'i', ',', 'bag', ')', ';']",0
Util.java,"['return', 't', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'File', 'createInputFile', '(', 'String', 'tmpFilenamePrefix', ',']",0
Util.java,"['String', 'tmpFilenameSuffix', ',']",0
Util.java,"['String', '[', ']', 'inputData', ')']",0
Util.java,"['throws', 'IOException', '{']",0
Util.java,"['File', 'f', '=', 'File', '.', 'createTempFile', '(', 'tmpFilenamePrefix', ',', 'tmpFilenameSuffix', ')', ';']",0
Util.java,"['f', '.', 'deleteOnExit', '(', ')', ';']",0
Util.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'new', 'OutputStreamWriter', '(', 'new', 'FileOutputStream', '(', 'f', ')', ',', '""', 'UTF', '-', '8', '""', ')', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputData', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['pw', '.', 'println', '(', 'inputData', '[', 'i', ']', ')', ';']",0
Util.java,"['pw', '.', 'close', '(', ')', ';']",0
Util.java,"['return', 'f', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'void', 'createInputFile', '(', 'MiniCluster', 'miniCluster', ',', 'String', 'fileName', ',']",0
Util.java,"['String', '[', ']', 'inputData', ')']",0
Util.java,"['throws', 'IOException', '{']",0
Util.java,"['FileSystem', 'fs', '=', 'miniCluster', '.', 'getFileSystem', '(', ')', ';']",0
Util.java,"['if', '(', 'fs', '.', 'exists', '(', 'new', 'Path', '(', 'fileName', ')', ')', ')', '{']",0
Util.java,"['throw', 'new', 'IOException', '(', '""', 'File', '""', '+', 'fileName', '+', '""', 'already', 'exists', 'on', 'the', 'minicluster', '""', ')', ';']",0
Util.java,"['FSDataOutputStream', 'stream', '=', 'fs', '.', 'create', '(', 'new', 'Path', '(', 'fileName', ')', ')', ';']",0
Util.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'new', 'OutputStreamWriter', '(', 'stream', ',', '""', 'UTF', '-', '8', '""', ')', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputData', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['pw', '.', 'println', '(', 'inputData', '[', 'i', ']', ')', ';']",0
Util.java,"['pw', '.', 'close', '(', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'OutputStream', 'createInputFile', '(', 'MiniCluster', 'cluster', ',']",0
Util.java,"['String', 'fileName', ')', 'throws', 'IOException', '{']",0
Util.java,"['FileSystem', 'fs', '=', 'cluster', '.', 'getFileSystem', '(', ')', ';']",0
Util.java,"['if', '(', 'fs', '.', 'exists', '(', 'new', 'Path', '(', 'fileName', ')', ')', ')', '{']",0
Util.java,"['throw', 'new', 'IOException', '(', '""', 'File', '""', '+', 'fileName']",0
Util.java,"['+', '""', 'already', 'exists', 'on', 'the', 'minicluster', '""', ')', ';']",0
Util.java,"['return', 'fs', '.', 'create', '(', 'new', 'Path', '(', 'fileName', ')', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'void', 'deleteFile', '(', 'MiniCluster', 'miniCluster', ',', 'String', 'fileName', ')']",0
Util.java,"['throws', 'IOException', '{']",0
Util.java,"['FileSystem', 'fs', '=', 'miniCluster', '.', 'getFileSystem', '(', ')', ';']",0
Util.java,"['fs', '.', 'delete', '(', 'new', 'Path', '(', 'fileName', ')', ',', 'true', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'void', 'checkQueryOutputs', '(', 'Iterator', '<', 'Tuple', '>', 'actualResults', ',']",0
Util.java,"['Tuple', '[', ']', 'expectedResults', ')', '{']",0
Util.java,"['for', '(', 'Tuple', 'expected', ':', 'expectedResults', ')', '{']",0
Util.java,"['Tuple', 'actual', '=', 'actualResults', '.', 'next', '(', ')', ';']",0
Util.java,"['Assert', '.', 'assertEquals', '(', 'expected', ',', 'actual', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['static', 'public', 'void', 'copyFromLocalToCluster', '(', 'MiniCluster', 'cluster', ',', 'String', 'localFileName', ',', 'String', 'fileNameOnCluster', ')', 'throws', 'IOException', '{']",0
Util.java,"['BufferedReader', 'reader', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'localFileName', ')', ')', ';']",0
Util.java,"['String', 'line', '=', 'null', ';']",0
Util.java,"['List', '<', 'String', '>', 'contents', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Util.java,"['while', '(', '(', 'line', '=', 'reader', '.', 'readLine', '(', ')', ')', '!', '=', 'null', ')', '{']",0
Util.java,"['contents', '.', 'add', '(', 'line', ')', ';']",0
Util.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', 'fileNameOnCluster', ',', 'contents', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ')', ';']",0
Util.java,"['static', 'public', 'void', 'printQueryOutput', '(', 'Iterator', '<', 'Tuple', '>', 'actualResults', ',']",0
Util.java,"['Tuple', '[', ']', 'expectedResults', ')', '{']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Expected', ':', '""', ')', ';']",0
Util.java,"['for', '(', 'Tuple', 'expected', ':', 'expectedResults', ')', '{']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', 'expected', '.', 'toString', '(', ')', ')', ';']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '-', '-', 'End', '-', '-', '-', '-', '""', ')', ';']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Actual', ':', '""', ')', ';']",0
Util.java,"['while', '(', 'actualResults', '.', 'hasNext', '(', ')', ')', '{']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', 'actualResults', '.', 'next', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
Util.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '-', '-', 'End', '-', '-', '-', '-', '""', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['public', 'static', 'String', 'encodeEscape', '(', 'String', 'str', ')', '{']",0
Util.java,"['String', 'regex', '=', '""', '\\', '\\', '\\', '\\', '""', ';']",0
Util.java,"['String', 'replacement', '=', 'quoteReplacement', '(', '""', '\\', '\\', '\\', '\\', '""', ')', ';']",0
Util.java,"['return', 'str', '.', 'replaceAll', '(', 'regex', ',', 'replacement', ')', ';']",0
Util.java,"['/', '*', '*']",0
Util.java,"['public', 'static', 'String', 'generateURI', '(', 'String', 'path', ')']",0
Util.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')']",0
Util.java,"['return', '""', 'file', ':', '/', '""', '+', 'encodeEscape', '(', 'path', ')', ';']",0
Util.java,"['return', '""', 'file', ':', '""', '+', 'path', ';']",0
Util.java,"['public', 'static', 'Schema', 'getSchemaFromString', '(', 'String', 'schemaString', ')', 'throws', 'ParseException', '{']",0
Util.java,"['return', 'Util', '.', 'getSchemaFromString', '(', 'schemaString', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
Util.java,"['static', 'Schema', 'getSchemaFromString', '(', 'String', 'schemaString', ',', 'byte', 'defaultType', ')', 'throws', 'ParseException', '{']",0
Util.java,"['ByteArrayInputStream', 'stream', '=', 'new', 'ByteArrayInputStream', '(', 'schemaString', '.', 'getBytes', '(', ')', ')', ';']",0
Util.java,"['QueryParser', 'queryParser', '=', 'new', 'QueryParser', '(', 'stream', ')', ';']",0
Util.java,"['Schema', 'schema', '=', 'queryParser', '.', 'TupleSchema', '(', ')', ';']",0
Util.java,"['Schema', '.', 'setSchemaDefaultType', '(', 'schema', ',', 'defaultType', ')', ';']",0
Util.java,"['return', 'schema', ';']",0
Util.java,"['static', 'Object', 'getPigConstant', '(', 'String', 'pigConstantAsString', ')', 'throws', 'ParseException', '{']",0
Util.java,"['ByteArrayInputStream', 'stream', '=', 'new', 'ByteArrayInputStream', '(', 'pigConstantAsString', '.', 'getBytes', '(', ')', ')', ';']",0
Util.java,"['QueryParser', 'queryParser', '=', 'new', 'QueryParser', '(', 'stream', ')', ';']",0
Util.java,"['return', 'queryParser', '.', 'Datum', '(', ')', ';']",0
Util.java,"['public', 'static', 'File', 'createFile', '(', 'String', '[', ']', 'data', ')', 'throws', 'Exception', '{']",0
Util.java,"['File', 'f', '=', 'File', '.', 'createTempFile', '(', '""', 'tmp', '""', ',', '""', '""', ')', ';']",0
Util.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'f', ')', ';']",0
Util.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'data', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Util.java,"['pw', '.', 'println', '(', 'data', '[', 'i', ']', ')', ';']",0
Util.java,"['pw', '.', 'close', '(', ')', ';']",0
Util.java,"['return', 'f', ';']",0
Util.java,"['public', 'static', 'PhysicalPlan', 'buildPhysicalPlan', '(', 'LogicalPlan', 'lp', ',', 'PigContext', 'pc', ')', 'throws', 'Exception', '{']",0
Util.java,"['LogToPhyTranslationVisitor', 'visitor', '=', 'new', 'LogToPhyTranslationVisitor', '(', 'lp', ')', ';']",0
Util.java,"['visitor', '.', 'setPigContext', '(', 'pc', ')', ';']",0
Util.java,"['visitor', '.', 'visit', '(', ')', ';']",0
Util.java,"['return', 'visitor', '.', 'getPhysicalPlan', '(', ')', ';']",0
Util.java,"['public', 'static', 'MROperPlan', 'buildMRPlan', '(', 'PhysicalPlan', 'pp', ',', 'PigContext', 'pc', ')', 'throws', 'Exception', '{']",0
Util.java,"['MRCompiler', 'comp', '=', 'new', 'MRCompiler', '(', 'pp', ',', 'pc', ')', ';']",0
Util.java,"['comp', '.', 'compile', '(', ')', ';']",0
Util.java,"['return', 'comp', '.', 'getMRPlan', '(', ')', ';']",0
Util.java,"['public', 'static', 'void', 'registerMultiLineQuery', '(', 'PigServer', 'pigServer', ',', 'String', 'query', ')', 'throws', 'IOException', '{']",0
Util.java,"['File', 'f', '=', 'File', '.', 'createTempFile', '(', '""', 'tmp', '""', ',', '""', '""', ')', ';']",0
Util.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'f', ')', ';']",0
Util.java,"['pw', '.', 'println', '(', 'query', ')', ';']",0
Util.java,"['pw', '.', 'close', '(', ')', ';']",0
Util.java,"['pigServer', '.', 'registerScript', '(', 'f', '.', 'getCanonicalPath', '(', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'pen', '.', 'util', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStream', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'ImplicitSplitInserter', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'OpLimitOptimizer', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'StreamOptimizer', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'TypeCastInserter', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'PlanOptimizer', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'Rule', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'RuleOperator', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'RulePlan', ';']",0
FunctionalLogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'This', 'optimiser', 'puts', 'in', 'the', 'bare', 'minimum', 'modifications', 'needed', 'to', 'make', 'sure', 'the', 'plan', 'is', 'functional']",0
FunctionalLogicalOptimizer.java,"['public', 'class', 'FunctionalLogicalOptimizer', 'extends']",0
FunctionalLogicalOptimizer.java,"['PlanOptimizer', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '{']",0
FunctionalLogicalOptimizer.java,"['private', 'static', 'final', 'String', 'SCOPE', '=', '""', 'RULE', '""', ';']",0
FunctionalLogicalOptimizer.java,"['private', 'static', 'NodeIdGenerator', 'nodeIdGen', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
FunctionalLogicalOptimizer.java,"['public', 'FunctionalLogicalOptimizer', '(', 'LogicalPlan', 'plan', ')', '{']",0
FunctionalLogicalOptimizer.java,"['super', '(', 'plan', ')', ';']",1
FunctionalLogicalOptimizer.java,"['RulePlan', 'rulePlan', ';']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'List', 'of', 'rules', 'for', 'the', 'logical', 'optimizer']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'This', 'one', 'has', 'to', 'be', 'first', ',', 'as', 'the', 'type', 'cast', 'inserter', 'expects', 'the']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'load', 'to', 'only', 'have', 'one', 'output', '.']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'Find', 'any', 'places', 'in', 'the', 'plan', 'that', 'have', 'an', 'implicit', 'split', 'and', 'make']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'it', 'explicit', '.', 'Since', 'the', 'RuleMatcher', 'doesn', ""'"", 't', 'handle', 'trees', 'properly', ',']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'we', 'cheat', 'and', 'say', 'that', 'we', 'match', 'any', 'node', '.', 'Then', 'we', ""'"", 'll', 'do', 'the', 'actual']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'test', 'in', 'the', 'transformers', 'check', 'method', '.']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
FunctionalLogicalOptimizer.java,"['RuleOperator', 'anyLogicalOperator', '=', 'new', 'RuleOperator', '(', 'LogicalOperator', '.', 'class', ',', 'RuleOperator', '.', 'NodeType', '.', 'ANY_NODE', ',']",0
FunctionalLogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'anyLogicalOperator', ')', ';']",0
FunctionalLogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',']",0
FunctionalLogicalOptimizer.java,"['new', 'ImplicitSplitInserter', '(', 'plan', ')', ',', '""', 'ImplicitSplitInserter', '""', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'Add', 'type', 'casting', 'to', 'plans', 'where', 'the', 'schema', 'has', 'been', 'declared', '(', 'by']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'user', ',', 'data', ',', 'or', 'data', 'catalog', ')', '.']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
FunctionalLogicalOptimizer.java,"['RuleOperator', 'loLoad', '=', 'new', 'RuleOperator', '(', 'LOLoad', '.', 'class', ',']",0
FunctionalLogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'loLoad', ')', ';']",0
FunctionalLogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',']",0
FunctionalLogicalOptimizer.java,"['new', 'TypeCastInserter', '(', 'plan', ',', 'LOLoad', '.', 'class', '.', 'getName', '(', ')', ')', ',', '""', 'LoadTypeCastInserter', '""', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'Add', 'type', 'casting', 'to', 'plans', 'where', 'the', 'schema', 'has', 'been', 'declared', 'by']",0
FunctionalLogicalOptimizer.java,"['/', '/', 'user', 'in', 'a', 'statement', 'with', 'stream', 'operator', '.']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
FunctionalLogicalOptimizer.java,"['RuleOperator', 'loStream', '=', 'new', 'RuleOperator', '(', 'LOStream', '.', 'class', ',']",0
FunctionalLogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
FunctionalLogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'loStream', ')', ';']",0
FunctionalLogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',', 'new', 'TypeCastInserter', '(', 'plan', ',']",0
FunctionalLogicalOptimizer.java,"['LOStream', '.', 'class', '.', 'getName', '(', ')', ')', ',', '""', 'StreamTypeCastInserter', '""', ')', ')', ';']",0
LOLesserThanEqual.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOLesserThanEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOLesserThanEqual.java,"['public', 'class', 'LOLesserThanEqual', 'extends', 'BinaryExpressionOperator', '{']",0
LOLesserThanEqual.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOLesserThanEqual.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOLesserThanEqual', '.', 'class', ')', ';']",0
LOLesserThanEqual.java,"['/', '*', '*']",1
LOLesserThanEqual.java,"['public', 'LOLesserThanEqual', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOLesserThanEqual.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOLesserThanEqual.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOLesserThanEqual.java,"['return', 'mSchema', ';']",0
LOLesserThanEqual.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOLesserThanEqual.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOLesserThanEqual.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOLesserThanEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOLesserThanEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOLesserThanEqual.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOLesserThanEqual.java,"['return', 'mFieldSchema', ';']",0
LOLesserThanEqual.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOLesserThanEqual.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOLesserThanEqual.java,"['public', 'String', 'name', '(', ')', '{']",0
LOLesserThanEqual.java,"['return', '""', 'LesserThanEqual', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
DotPlanDumper.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', ';']",0
DotPlanDumper.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
DotPlanDumper.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
DotPlanDumper.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DotPlanDumper.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
DotPlanDumper.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
DotPlanDumper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
DotPlanDumper.java,"['/', '*', '*']",0
DotPlanDumper.java,"['public', 'class', 'DotPlanDumper', '<', 'E', 'extends', 'Operator', ',', 'P', 'extends', 'OperatorPlan', '<', 'E', '>', ',']",0
DotPlanDumper.java,"['N', 'extends', 'Operator', ',', 'S', 'extends', 'OperatorPlan', '<', 'N', '>', '>']",0
DotPlanDumper.java,"['extends', 'PlanDumper', '<', 'E', ',', 'P', ',', 'S', '>', '{']",0
DotPlanDumper.java,"['protected', 'Set', '<', 'Operator', '>', 'mSubgraphs', ';']",0
DotPlanDumper.java,"['protected', 'Set', '<', 'Operator', '>', 'mMultiInputSubgraphs', ';']",0
DotPlanDumper.java,"['protected', 'Set', '<', 'Operator', '>', 'mMultiOutputSubgraphs', ';']",0
DotPlanDumper.java,"['private', 'boolean', 'isSubGraph', '=', 'false', ';']",0
DotPlanDumper.java,"['public', 'DotPlanDumper', '(', 'P', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotPlanDumper.java,"['this', '(', 'plan', ',', 'ps', ',', 'false', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',']",0
DotPlanDumper.java,"['new', 'HashSet', '<', 'Operator', '>', '(', ')', ')', ';']",0
DotPlanDumper.java,"['protected', 'DotPlanDumper', '(', 'P', 'plan', ',', 'PrintStream', 'ps', ',', 'boolean', 'isSubGraph', ',']",0
DotPlanDumper.java,"['Set', '<', 'Operator', '>', 'mSubgraphs', ',']",0
DotPlanDumper.java,"['Set', '<', 'Operator', '>', 'mMultiInputSubgraphs', ',']",0
DotPlanDumper.java,"['Set', '<', 'Operator', '>', 'mMultiOutputSubgraphs', ')', '{']",0
DotPlanDumper.java,"['super', '(', 'plan', ',', 'ps', ')', ';']",0
DotPlanDumper.java,"['this', '.', 'isSubGraph', '=', 'isSubGraph', ';']",0
DotPlanDumper.java,"['this', '.', 'mSubgraphs', '=', 'mSubgraphs', ';']",0
DotPlanDumper.java,"['this', '.', 'mMultiInputSubgraphs', '=', 'mMultiInputSubgraphs', ';']",0
DotPlanDumper.java,"['this', '.', 'mMultiOutputSubgraphs', '=', 'mMultiOutputSubgraphs', ';']",0
DotPlanDumper.java,"['public', 'void', 'dump', '(', ')', '{']",0
DotPlanDumper.java,"['if', '(', '!', 'isSubGraph', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'digraph', 'plan', '{', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'compound', '=', 'true', ';', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'node', '[', 'shape', '=', 'rect', ']', ';', '""', ')', ';']",0
DotPlanDumper.java,"['super', '.', 'dump', '(', ')', ';']",0
DotPlanDumper.java,"['if', '(', '!', 'isSubGraph', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '}', '""', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpMultiInputNestedOperator', '(', 'E', 'op', ',', 'MultiMap', '<', 'E', ',', 'S', '>', 'plans', ')', '{']",0
DotPlanDumper.java,"['dumpInvisibleOutput', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', 'subgraph', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getClusterID', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '{', '""', ')', ';']",0
DotPlanDumper.java,"['join', '(', '""', ';', '""', ',', 'getAttributes', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'labelloc', '=', 'b', ';', '""', ')', ';']",0
DotPlanDumper.java,"['mMultiInputSubgraphs', '.', 'add', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'E', 'o', ':', 'plans', '.', 'keySet', '(', ')', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', 'subgraph', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getClusterID', '(', 'op', ',', 'o', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '{', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'label', '=', '\\', '""', '\\', '""', ';', '""', ')', ';']",0
DotPlanDumper.java,"['dumpInvisibleInput', '(', 'op', ',', 'o', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', '.', 'get', '(', 'o', ')', ')', '{']",0
DotPlanDumper.java,"['PlanDumper', 'dumper', '=', 'makeDumper', '(', 'plan', ',', 'ps', ')', ';']",0
DotPlanDumper.java,"['dumper', '.', 'dump', '(', ')', ';']",0
DotPlanDumper.java,"['connectInvisibleInput', '(', 'op', ',', 'o', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '}', ';', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '}', ';', '""', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'E', 'o', ':', 'plans', '.', 'keySet', '(', ')', ')', '{']",0
DotPlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', '.', 'get', '(', 'o', ')', ')', '{']",0
DotPlanDumper.java,"['connectInvisibleOutput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpMultiOutputNestedOperator', '(', 'E', 'op', ',', 'Collection', '<', 'S', '>', 'plans', ')', '{']",0
DotPlanDumper.java,"['super', '.', 'dumpMultiOutputNestedOperator', '(', 'op', ',', 'plans', ')', ';']",0
DotPlanDumper.java,"['mMultiOutputSubgraphs', '.', 'add', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['dumpInvisibleOutput', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', ')', '{']",0
DotPlanDumper.java,"['connectInvisibleOutput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpNestedOperator', '(', 'E', 'op', ',', 'Collection', '<', 'S', '>', 'plans', ')', '{']",0
DotPlanDumper.java,"['dumpInvisibleOperators', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', 'subgraph', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getClusterID', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '{', '""', ')', ';']",0
DotPlanDumper.java,"['join', '(', '""', ';', '""', ',', 'getAttributes', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', 'labelloc', '=', 'b', ';', '""', ')', ';']",0
DotPlanDumper.java,"['mSubgraphs', '.', 'add', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', ')', '{']",0
DotPlanDumper.java,"['PlanDumper', 'dumper', '=', 'makeDumper', '(', 'plan', ',', 'ps', ')', ';']",0
DotPlanDumper.java,"['dumper', '.', 'dump', '(', ')', ';']",0
DotPlanDumper.java,"['connectInvisibleInput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '}', ';', '""', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'S', 'plan', ':', 'plans', ')', '{']",0
DotPlanDumper.java,"['connectInvisibleOutput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpOperator', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getID', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '[', '""', ')', ';']",0
DotPlanDumper.java,"['join', '(', '""', ',', '""', ',', 'getAttributes', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', ']', ';', '""', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpEdge', '(', 'Operator', 'op', ',', 'Operator', 'suc', ')', '{']",0
DotPlanDumper.java,"['String', 'in', '=', 'getID', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['String', 'out', '=', 'getID', '(', 'suc', ')', ';']",0
DotPlanDumper.java,"['String', 'attributes', '=', '""', '""', ';']",0
DotPlanDumper.java,"['if', '(', 'mMultiInputSubgraphs', '.', 'contains', '(', 'op', ')']",0
DotPlanDumper.java,"['|', '|', 'mSubgraphs', '.', 'contains', '(', 'op', ')']",0
DotPlanDumper.java,"['|', '|', 'mMultiOutputSubgraphs', '.', 'contains', '(', 'op', ')', ')', '{']",0
DotPlanDumper.java,"['in', '=', 'getSubgraphID', '(', 'op', ',', 'false', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'in', ')', ';']",0
DotPlanDumper.java,"['if', '(', 'mMultiInputSubgraphs', '.', 'contains', '(', 'suc', ')', ')', '{']",0
DotPlanDumper.java,"['out', '=', 'getSubgraphID', '(', 'suc', ',', 'op', ',', 'true', ')', ';']",0
DotPlanDumper.java,"['attributes', '=', '""', '[', 'lhead', '=', '""', '+', 'getClusterID', '(', 'suc', ',', 'op', ')', '+', '""', ']', '""', ';']",0
DotPlanDumper.java,"['if', '(', 'mSubgraphs', '.', 'contains', '(', 'suc', ')', ')', '{']",0
DotPlanDumper.java,"['out', '=', 'getSubgraphID', '(', 'suc', ',', 'true', ')', ';']",0
DotPlanDumper.java,"['attributes', '=', '""', '[', 'lhead', '=', '""', '+', 'getClusterID', '(', 'suc', ')', '+', '""', ']', '""', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '-', '>', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'out', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', 'attributes', ')', ';']",0
DotPlanDumper.java,"['protected', 'PlanDumper', 'makeDumper', '(', 'S', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotPlanDumper.java,"['return', 'new', 'DotPlanDumper', '(', 'plan', ',', 'ps', ',', 'true', ',']",0
DotPlanDumper.java,"['mSubgraphs', ',', 'mMultiInputSubgraphs', ',']",0
DotPlanDumper.java,"['mMultiOutputSubgraphs', ')', ';']",0
DotPlanDumper.java,"['/', '*', '*']",0
DotPlanDumper.java,"['protected', 'String', 'getName', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['return', 'op', '.', 'name', '(', ')', ';']",0
DotPlanDumper.java,"['/', '*', '*']",0
DotPlanDumper.java,"['protected', 'String', '[', ']', 'getAttributes', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['String', '[', ']', 'attributes', '=', 'new', 'String', '[', '1', ']', ';']",0
DotPlanDumper.java,"['attributes', '[', '0', ']', '=', '""', 'label', '=', '\\', '""', '""', '+', 'getName', '(', 'op', ')', '+', '""', '\\', '""', '""', ';']",0
DotPlanDumper.java,"['return', 'attributes', ';']",0
DotPlanDumper.java,"['private', 'void', 'connectInvisibleInput', '(', 'E', 'op1', ',', 'E', 'op2', ',', 'S', 'plan', ')', '{']",0
DotPlanDumper.java,"['String', 'in', '=', 'getSubgraphID', '(', 'op1', ',', 'op2', ',', 'true', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'N', 'l', ':', 'plan', '.', 'getRoots', '(', ')', ')', '{']",0
DotPlanDumper.java,"['dumpInvisibleEdge', '(', 'in', ',', 'getID', '(', 'l', ')', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'connectInvisibleInput', '(', 'E', 'op', ',', 'S', 'plan', ')', '{']",0
DotPlanDumper.java,"['String', 'in', '=', 'getSubgraphID', '(', 'op', ',', 'true', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'N', 'l', ':', 'plan', '.', 'getRoots', '(', ')', ')', '{']",0
DotPlanDumper.java,"['String', 'out', ';']",0
DotPlanDumper.java,"['if', '(', 'mSubgraphs', '.', 'contains', '(', 'l', ')', '|', '|', 'mMultiInputSubgraphs', '.', 'contains', '(', 'l', ')', ')', '{']",1
DotPlanDumper.java,"['out', '=', 'getSubgraphID', '(', 'l', ',', 'true', ')', ';']",0
DotPlanDumper.java,"['}', 'else', '{']",0
DotPlanDumper.java,"['out', '=', 'getID', '(', 'l', ')', ';']",0
DotPlanDumper.java,"['dumpInvisibleEdge', '(', 'in', ',', 'out', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'connectInvisibleOutput', '(', 'E', 'op', ',']",0
DotPlanDumper.java,"['OperatorPlan', '<', '?', 'extends', 'Operator', '>', 'plan', ')', '{']",0
DotPlanDumper.java,"['String', 'out', '=', 'getSubgraphID', '(', 'op', ',', 'false', ')', ';']",0
DotPlanDumper.java,"['for', '(', 'Operator', 'l', ':', 'plan', '.', 'getLeaves', '(', ')', ')', '{']",0
DotPlanDumper.java,"['String', 'in', ';']",0
DotPlanDumper.java,"['if', '(', 'mSubgraphs', '.', 'contains', '(', 'l', ')']",0
DotPlanDumper.java,"['|', '|', 'mMultiInputSubgraphs', '.', 'contains', '(', 'l', ')']",0
DotPlanDumper.java,"['|', '|', 'mMultiOutputSubgraphs', '.', 'contains', '(', 'l', ')', ')', '{']",0
DotPlanDumper.java,"['in', '=', 'getSubgraphID', '(', 'l', ',', 'false', ')', ';']",0
DotPlanDumper.java,"['}', 'else', '{']",0
DotPlanDumper.java,"['in', '=', 'getID', '(', 'l', ')', ';']",0
DotPlanDumper.java,"['dumpInvisibleEdge', '(', 'in', ',', 'out', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'connectInvisible', '(', 'E', 'op', ',', 'S', 'plan', ')', '{']",0
DotPlanDumper.java,"['connectInvisibleInput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['connectInvisibleOutput', '(', 'op', ',', 'plan', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'dumpInvisibleInput', '(', 'E', 'op1', ',', 'E', 'op2', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getSubgraphID', '(', 'op1', ',', 'op2', ',', 'true', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getInvisibleAttributes', '(', 'op1', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', ';', '""', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'dumpInvisibleInput', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getSubgraphID', '(', 'op', ',', 'true', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getInvisibleAttributes', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', ';', '""', ')', ';']",0
DotPlanDumper.java,"['private', 'void', 'dumpInvisibleOutput', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getSubgraphID', '(', 'op', ',', 'false', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'getInvisibleAttributes', '(', 'op', ')', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', ';', '""', ')', ';']",0
DotPlanDumper.java,"['protected', 'void', 'dumpInvisibleOperators', '(', 'E', 'op', ')', '{']",0
DotPlanDumper.java,"['dumpInvisibleInput', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['dumpInvisibleOutput', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['private', 'String', 'getClusterID', '(', 'Operator', 'op1', ',', 'Operator', 'op2', ')', '{']",0
DotPlanDumper.java,"['return', 'getClusterID', '(', 'op1', ')', '+', '""', '_', '""', '+', 'getID', '(', 'op2', ')', ';']",0
DotPlanDumper.java,"['private', 'String', 'getClusterID', '(', 'Operator', 'op', ')', '{']",0
DotPlanDumper.java,"['return', '""', 'cluster_', '""', '+', 'getID', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['private', 'String', 'getSubgraphID', '(', 'Operator', 'op1', ',', 'Operator', 'op2', ',', 'boolean', 'in', ')', '{']",0
DotPlanDumper.java,"['String', 'id', '=', '""', 's', '""', '+', 'getID', '(', 'op1', ')', '+', '""', '_', '""', '+', 'getID', '(', 'op2', ')', ';']",0
DotPlanDumper.java,"['if', '(', 'in', ')', '{']",0
DotPlanDumper.java,"['id', '+', '=', '""', '_in', '""', ';']",0
DotPlanDumper.java,"['id', '+', '=', '""', '_out', '""', ';']",0
DotPlanDumper.java,"['return', 'id', ';']",0
DotPlanDumper.java,"['private', 'String', 'getSubgraphID', '(', 'Operator', 'op', ',', 'boolean', 'in', ')', '{']",0
DotPlanDumper.java,"['String', 'id', '=', '""', 's', '""', '+', 'getID', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['if', '(', 'in', ')', '{']",0
DotPlanDumper.java,"['id', '+', '=', '""', '_in', '""', ';']",0
DotPlanDumper.java,"['id', '+', '=', '""', '_out', '""', ';']",0
DotPlanDumper.java,"['return', 'id', ';']",0
DotPlanDumper.java,"['private', 'String', 'getID', '(', 'Operator', 'op', ')', '{']",0
DotPlanDumper.java,"['return', '""', '""', '+', 'Math', '.', 'abs', '(', 'op', '.', 'hashCode', '(', ')', ')', ';']",0
DotPlanDumper.java,"['private', 'String', 'getInvisibleAttributes', '(', 'Operator', 'op', ')', '{']",0
DotPlanDumper.java,"['return', '""', '[', 'label', '=', '\\', '""', '\\', '""', ',', 'style', '=', 'invis', ',', 'height', '=', '0', ',', 'width', '=', '0', ']', '""', ';']",0
DotPlanDumper.java,"['private', 'void', 'dumpInvisibleEdge', '(', 'String', 'op', ',', 'String', 'suc', ')', '{']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'op', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', '""', '-', '>', '""', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'print', '(', 'suc', ')', ';']",0
DotPlanDumper.java,"['ps', '.', 'println', '(', '""', '[', 'style', '=', 'invis', ']', ';', '""', ')', ';']",0
LOOr.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOOr.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOOr.java,"['public', 'class', 'LOOr', 'extends', 'BinaryExpressionOperator', '{']",0
LOOr.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOOr.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOOr', '.', 'class', ')', ';']",0
LOOr.java,"['/', '*', '*']",1
LOOr.java,"['public', 'LOOr', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOOr.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOOr.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOOr.java,"['return', 'mSchema', ';']",0
LOOr.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOOr.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOOr.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOOr.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOOr.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOOr.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOOr.java,"['return', 'mFieldSchema', ';']",0
LOOr.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOOr.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOOr.java,"['public', 'String', 'name', '(', ')', '{']",0
LOOr.java,"['return', '""', 'Or', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
BinStorage.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'BufferedOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataInputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'DataOutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
BinStorage.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
BinStorage.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ReversibleLoadStoreFunc', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataReaderWriter', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'BufferedPositionedInputStream', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
BinStorage.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
BinStorage.java,"['public', 'class', 'BinStorage', 'implements', 'ReversibleLoadStoreFunc', '{']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_1', '=', '0x01', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_2', '=', '0x02', ';']",0
BinStorage.java,"['public', 'static', 'final', 'byte', 'RECORD_3', '=', '0x03', ';']",0
BinStorage.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'null', ';']",0
BinStorage.java,"['protected', 'BufferedPositionedInputStream', 'in', '=', 'null', ';']",0
BinStorage.java,"['private', 'static', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'BinStorage', '.', 'class', ')', ';']",0
BinStorage.java,"['private', 'DataInputStream', 'inData', '=', 'null', ';']",0
BinStorage.java,"['protected', 'long', 'end', '=', 'Long', '.', 'MAX_VALUE', ';']",0
BinStorage.java,"['/', '*', '*']",0
BinStorage.java,"['public', 'BinStorage', '(', ')', '{']",0
BinStorage.java,"['public', 'Tuple', 'getNext', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['byte', 'b', '=', '0', ';']",0
BinStorage.java,"['/', '/', 'skip', 'to', 'next', 'record']",0
BinStorage.java,"['while', '(', 'true', ')', '{']",0
BinStorage.java,"['if', '(', 'in', '=', '=', 'null', '|', '|', 'in', '.', 'getPosition', '(', ')', '>', '=', 'end', ')', '{']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '/', 'check', 'if', 'we', 'saw', 'RECORD_1', 'in', 'our', 'last', 'attempt']",0
BinStorage.java,"['/', '/', 'this', 'can', 'happen', 'if', 'we', 'have', 'the', 'following']",0
BinStorage.java,"['/', '/', 'sequence', 'RECORD_1', '-', 'RECORD_1', '-', 'RECORD_2', '-', 'RECORD_3']",0
BinStorage.java,"['/', '/', 'After', 'reading', 'the', 'second', 'RECORD_1', 'in', 'the', 'above']",0
BinStorage.java,"['/', '/', 'sequence', ',', 'we', 'should', 'not', 'look', 'for', 'RECORD_1', 'again']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', ')', '{']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_1', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_2', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'RECORD_3', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['b', '=', '(', 'byte', ')', 'in', '.', 'read', '(', ')', ';']",0
BinStorage.java,"['if', '(', 'b', '!', '=', 'DataType', '.', 'TUPLE', '&', '&', 'b', '!', '=', '-', '1', ')', '{']",0
BinStorage.java,"['if', '(', 'b', '=', '=', '-', '1', ')', 'return', 'null', ';']",0
BinStorage.java,"['/', '/', 'if', 'we', 'got', 'here', ',', 'we', 'have', 'seen', 'RECORD_1', '-', 'RECORD_2', '-', 'RECORD_3', '-', 'TUPLE_MARKER']",0
BinStorage.java,"['/', '/', 'sequence', '-', 'lets', 'now', 'read', 'the', 'contents', 'of', 'the', 'tuple']",0
BinStorage.java,"['return', '(', 'Tuple', ')', 'DataReaderWriter', '.', 'readDatum', '(', 'inData', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
BinStorage.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
BinStorage.java,"['throw', 'ee', ';']",0
BinStorage.java,"['throw', 'ee', ';']",0
BinStorage.java,"['public', 'void', 'bindTo', '(', 'String', 'fileName', ',', 'BufferedPositionedInputStream', 'in', ',', 'long', 'offset', ',', 'long', 'end', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'in', '=', 'in', ';']",0
BinStorage.java,"['inData', '=', 'new', 'DataInputStream', '(', 'in', ')', ';']",0
BinStorage.java,"['this', '.', 'end', '=', 'end', ';']",0
BinStorage.java,"['DataOutputStream', 'out', '=', 'null', ';']",0
BinStorage.java,"['public', 'void', 'bindTo', '(', 'OutputStream', 'os', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['this', '.', 'out', '=', 'new', 'DataOutputStream', '(', 'new', 'BufferedOutputStream', '(', 'os', ')', ')', ';']",0
BinStorage.java,"['public', 'void', 'finish', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'flush', '(', ')', ';']",0
BinStorage.java,"['public', 'void', 'putNext', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_1', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_2', ')', ';']",0
BinStorage.java,"['out', '.', 'write', '(', 'RECORD_3', ')', ';']",0
BinStorage.java,"['t', '.', 'write', '(', 'out', ')', ';']",0
BinStorage.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToBag', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'bag', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToCharArray', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'chararray', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Double', '(', 'dis', '.', 'readDouble', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'double', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Float', '(', 'dis', '.', 'readFloat', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'float', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Integer', '(', 'dis', '.', 'readInt', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'integer', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'new', 'Long', '(', 'dis', '.', 'readLong', '(', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'long', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToMap', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'map', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', '{']",0
BinStorage.java,"['DataInputStream', 'dis', '=', 'new', 'DataInputStream', '(', 'new', 'ByteArrayInputStream', '(', 'b', ')', ')', ';']",0
BinStorage.java,"['return', 'DataReaderWriter', '.', 'bytesToTuple', '(', 'dis', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
BinStorage.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'convert', 'bytearray', 'to', 'tuple', ',', '""', '+']",0
BinStorage.java,"['""', 'caught', 'IOException', '<', '""', '+', 'e', '.', 'getMessage', '(', ')', '+', '""', '>', '""', ',']",0
BinStorage.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',']",0
BinStorage.java,"['mLog', ')', ';']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
BinStorage.java,"['public', 'Schema', 'determineSchema', '(', 'String', 'fileName', ',', 'ExecType', 'execType', ',']",0
BinStorage.java,"['DataStorage', 'storage', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['if', '(', '!', 'FileLocalizer', '.', 'fileExists', '(', 'fileName', ',', 'storage', ')', ')', '{']",0
BinStorage.java,"['/', '/', 'At', 'compile', 'time', 'in', 'batch', 'mode', ',', 'the', 'file', 'may', 'not', 'exist']",0
BinStorage.java,"['/', '/', '(', 'such', 'as', 'intermediate', 'file', ')', '.', 'Just', 'return', 'null', '-', 'the']",0
BinStorage.java,"['/', '/', 'same', 'way', 'as', 'we', 'would', 'if', 'we', 'did', 'not', 'get', 'a', 'valid', 'record']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'fileName', ',', 'execType', ',', 'storage', ')', ';']",0
BinStorage.java,"['bindTo', '(', 'fileName', ',', 'new', 'BufferedPositionedInputStream', '(', 'is', ')', ',', '0', ',', 'Long', '.', 'MAX_VALUE', ')', ';']",0
BinStorage.java,"['/', '/', 'get', 'the', 'first', 'record', 'from', 'the', 'input', 'file']",0
BinStorage.java,"['/', '/', 'and', 'figure', 'out', 'the', 'schema', 'from', 'the', 'data', 'in']",0
BinStorage.java,"['/', '/', 'the', 'first', 'record']",0
BinStorage.java,"['Tuple', 't', '=', 'getNext', '(', ')', ';']",0
BinStorage.java,"['is', '.', 'close', '(', ')', ';']",0
BinStorage.java,"['if', '(', 't', '=', '=', 'null', ')', '{']",0
BinStorage.java,"['/', '/', 'we', 'couldn', ""'"", 't', 'get', 'a', 'valid', 'record', 'from', 'the', 'input']",0
BinStorage.java,"['return', 'null', ';']",0
BinStorage.java,"['int', 'numFields', '=', 't', '.', 'size', '(', ')', ';']",0
BinStorage.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
BinStorage.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'numFields', ';', 'i', '+', '+', ')', '{']",0
BinStorage.java,"['s', '.', 'add', '(', 'DataType', '.', 'determineFieldSchema', '(', 't', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2104', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'determining', 'schema', 'of', 'BinStorage', 'data', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
BinStorage.java,"['return', 's', ';']",0
BinStorage.java,"['public', 'void', 'fieldsToRead', '(', 'Schema', 'schema', ')', '{']",0
BinStorage.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'bag', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'bag', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 's', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'chararray', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'd', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'double', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'f', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'float', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'i', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'int', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'l', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'long', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 'm', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'map', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
BinStorage.java,"['DataOutputStream', 'dos', '=', 'new', 'DataOutputStream', '(', 'baos', ')', ';']",0
BinStorage.java,"['DataReaderWriter', '.', 'writeDatum', '(', 'dos', ',', 't', ')', ';']",0
BinStorage.java,"['}', 'catch', '(', 'Exception', 'ee', ')', '{']",0
BinStorage.java,"['int', 'errCode', '=', '2105', ';']",0
BinStorage.java,"['String', 'msg', '=', '""', 'Error', 'while', 'converting', 'tuple', 'to', 'bytes', '.', '""', ';']",0
BinStorage.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ee', ')', ';']",0
BinStorage.java,"['return', 'baos', '.', 'toByteArray', '(', ')', ';']",0
BinStorage.java,"['public', 'boolean', 'equals', '(', 'Object', 'obj', ')', '{']",0
BinStorage.java,"['return', 'true', ';']",0
BinStorage.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
BinStorage.java,"['public', 'Class', 'getStorePreparationClass', '(', ')', 'throws', 'IOException', '{']",0
BinStorage.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
BinStorage.java,"['return', 'null', ';']",0
LOUserFunc.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOUserFunc.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOUserFunc.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOUserFunc.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOUserFunc.java,"['public', 'class', 'LOUserFunc', 'extends', 'ExpressionOperator', '{']",0
LOUserFunc.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOUserFunc.java,"['private', 'FuncSpec', 'mFuncSpec', ';']",0
LOUserFunc.java,"['public', 'LOUserFunc', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',', 'FuncSpec', 'funcSpec', ',']",0
LOUserFunc.java,"['byte', 'returnType', ')', '{']",0
LOUserFunc.java,"['super', '(', 'plan', ',', 'k', ',', '-', '1', ')', ';']",0
LOUserFunc.java,"['mFuncSpec', '=', 'funcSpec', ';']",0
LOUserFunc.java,"['mType', '=', 'returnType', ';']",0
LOUserFunc.java,"['public', 'FuncSpec', 'getFuncSpec', '(', ')', '{']",0
LOUserFunc.java,"['return', 'mFuncSpec', ';']",0
LOUserFunc.java,"['public', 'List', '<', 'ExpressionOperator', '>', 'getArguments', '(', ')', '{']",0
LOUserFunc.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOUserFunc.java,"['List', '<', 'ExpressionOperator', '>', 'args', '=', 'new', 'ArrayList', '<', 'ExpressionOperator', '>', '(', ')', ';']",0
LOUserFunc.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOUserFunc.java,"['return', 'args', ';']",0
LOUserFunc.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'preds', ')', '{']",0
LOUserFunc.java,"['args', '.', 'add', '(', '(', 'ExpressionOperator', ')', 'lo', ')', ';']",0
LOUserFunc.java,"['return', 'args', ';']",0
LOUserFunc.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
LOUserFunc.java,"['return', 'true', ';']",1
LOUserFunc.java,"['public', 'String', 'name', '(', ')', '{']",0
LOUserFunc.java,"['return', '""', 'UserFunc', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', '+', '""', 'function', ':', '""', '+', 'mFuncSpec', ';']",0
LOUserFunc.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOUserFunc.java,"['return', 'mSchema', ';']",0
LOUserFunc.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOUserFunc.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOUserFunc.java,"['Schema', 'inputSchema', '=', 'new', 'Schema', '(', ')', ';']",0
LOUserFunc.java,"['List', '<', 'ExpressionOperator', '>', 'args', '=', 'getArguments', '(', ')', ';']",0
LOUserFunc.java,"['for', '(', 'ExpressionOperator', 'op', ':', 'args', ')', '{']",0
LOUserFunc.java,"['if', '(', '!', 'DataType', '.', 'isUsableType', '(', 'op', '.', 'getType', '(', ')', ')', ')', '{']",0
LOUserFunc.java,"['mFieldSchema', '=', 'null', ';']",0
LOUserFunc.java,"['mIsFieldSchemaComputed', '=', 'false', ';']",0
LOUserFunc.java,"['int', 'errCode', '=', '1014', ';']",0
LOUserFunc.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'input', ':', '""', '+', 'op', '+', '""', 'of', 'User', '-', 'defined', 'function', ':', '""', '+', 'this', ';']",0
LOUserFunc.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOUserFunc.java,"['inputSchema', '.', 'add', '(', 'op', '.', 'getFieldSchema', '(', ')', ')', ';']",0
LOUserFunc.java,"['EvalFunc', '<', '?', '>', 'ef', '=', '(', 'EvalFunc', '<', '?', '>', ')', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'mFuncSpec', ')', ';']",0
LOUserFunc.java,"['Schema', 'udfSchema', '=', 'ef', '.', 'outputSchema', '(', 'inputSchema', ')', ';']",0
LOUserFunc.java,"['byte', 'returnType', '=', 'DataType', '.', 'findType', '(', 'ef', '.', 'getReturnType', '(', ')', ')', ';']",0
LOUserFunc.java,"['if', '(', 'null', '!', '=', 'udfSchema', ')', '{']",0
LOUserFunc.java,"['Schema', '.', 'FieldSchema', 'fs', ';']",0
LOUserFunc.java,"['/', '/', 'try', '{']",0
LOUserFunc.java,"['if', '(', 'udfSchema', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
LOUserFunc.java,"['fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'returnType', ')', ';']",0
LOUserFunc.java,"['}', 'else', 'if', '(', 'udfSchema', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
LOUserFunc.java,"['fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'udfSchema', '.', 'getField', '(', '0', ')', ')', ';']",0
LOUserFunc.java,"['fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'udfSchema', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
LOUserFunc.java,"['/', '/', '}', 'catch', '(', 'ParseException', 'pe', ')', '{']",0
LOUserFunc.java,"['/', '/', 'throw', 'new', 'FrontendException', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
LOUserFunc.java,"['/', '/', '}']",0
LOUserFunc.java,"['setType', '(', 'fs', '.', 'type', ')', ';']",0
LOUserFunc.java,"['mFieldSchema', '=', 'fs', ';']",0
LOUserFunc.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOUserFunc.java,"['}', 'else', '{']",0
LOUserFunc.java,"['}', 'else', '{']",0
LOUserFunc.java,"['setType', '(', 'returnType', ')', ';']",0
LOUserFunc.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'null', ',', 'returnType', ')', ';']",0
LOUserFunc.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOUserFunc.java,"['return', 'mFieldSchema', ';']",0
LOUserFunc.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOUserFunc.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOUserFunc.java,"['/', '*', '*']",0
LOUserFunc.java,"['/', '*', '*']",0
LOUserFunc.java,"['public', 'void', 'setFuncSpec', '(', 'FuncSpec', 'funcSpec', ')', '{']",0
LOUserFunc.java,"['mFuncSpec', '=', 'funcSpec', ';']",0
LOUserFunc.java,"['/', '*', '*']",0
LOUserFunc.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOUserFunc.java,"['LOUserFunc', 'clone', '=', '(', 'LOUserFunc', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOUserFunc.java,"['/', '/', 'note', 'that', 'mFuncSpec', 'cannot', 'be', 'null', 'in', 'LOUserFunc']",0
LOUserFunc.java,"['clone', '.', 'mFuncSpec', '=', 'mFuncSpec', '.', 'clone', '(', ')', ';']",0
LOUserFunc.java,"['return', 'clone', ';']",0
LOCast.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOCast.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOCast.java,"['public', 'class', 'LOCast', 'extends', 'ExpressionOperator', '{']",0
LOCast.java,"['/', '/', 'Cast', 'has', 'an', 'expression', 'that', 'has', 'to', 'be', 'converted', 'to', 'a', 'specified', 'type']",0
LOCast.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOCast.java,"['private', 'FuncSpec', 'mLoadFuncSpec', '=', 'null', ';']",0
LOCast.java,"['public', 'LOCast', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',', 'byte', 'type', ')', '{']",0
LOCast.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOCast.java,"['mType', '=', 'type', ';']",0
LOCast.java,"['}', '/', '/', 'End', 'Constructor', 'LOCast']",0
LOCast.java,"['public', 'ExpressionOperator', 'getExpression', '(', ')', '{']",0
LOCast.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOCast.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOCast.java,"['return', 'null', ';']",0
LOCast.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '0', ')', ';']",0
LOCast.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOCast.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOCast.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOCast.java,"['return', 'mSchema', ';']",0
LOCast.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOCast.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOCast.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'mType', ')', ';']",0
LOCast.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOCast.java,"['return', 'mFieldSchema', ';']",0
LOCast.java,"['public', 'String', 'name', '(', ')', '{']",0
LOCast.java,"['return', '""', 'Cast', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOCast.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
LOCast.java,"['return', 'false', ';']",1
LOCast.java,"['public', 'FuncSpec', 'getLoadFuncSpec', '(', ')', '{']",0
LOCast.java,"['return', 'mLoadFuncSpec', ';']",0
LOCast.java,"['public', 'void', 'setLoadFuncSpec', '(', 'FuncSpec', 'loadFuncSpec', ')', '{']",0
LOCast.java,"['mLoadFuncSpec', '=', 'loadFuncSpec', ';']",0
LOCast.java,"['/', '*', '*']",0
LOCast.java,"['/', '*', '*']",0
LOCast.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOCast.java,"['LOCast', 'clone', '=', '(', 'LOCast', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOCast.java,"['if', '(', 'mLoadFuncSpec', '!', '=', 'null', ')', '{']",0
LOCast.java,"['clone', '.', 'mLoadFuncSpec', '=', 'mLoadFuncSpec', '.', 'clone', '(', ')', ';']",0
LOCast.java,"['return', 'clone', ';']",0
POProject.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', ';']",0
POProject.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
POProject.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
POProject.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'SingleTupleBag', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhyPlanVisitor', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
POProject.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['public', 'class', 'POProject', 'extends', 'ExpressionOperator', '{']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
POProject.java,"['private', 'static', 'TupleFactory', 'tupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
POProject.java,"['protected', 'static', 'BagFactory', 'bagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
POProject.java,"['private', 'boolean', 'resultSingleTupleBag', '=', 'false', ';']",0
POProject.java,"['/', '/', 'The', 'column', 'to', 'project']",0
POProject.java,"['protected', 'ArrayList', '<', 'Integer', '>', 'columns', ';']",0
POProject.java,"['/', '/', 'True', 'if', 'we', 'are', 'in', 'the', 'middle', 'of', 'streaming', 'tuples']",0
POProject.java,"['/', '/', 'in', 'a', 'bag']",0
POProject.java,"['boolean', 'processingBagOfTuples', '=', 'false', ';']",0
POProject.java,"['/', '/', 'The', 'bag', 'iterator', 'used', 'while', 'straeming', 'tuple']",0
POProject.java,"['Iterator', '<', 'Tuple', '>', 'bagIterator', '=', 'null', ';']",0
POProject.java,"['/', '/', 'Represents', 'the', 'fact', 'that', 'this', 'instance', 'of', 'POProject']",0
POProject.java,"['/', '/', 'is', 'overloaded', 'to', 'stream', 'tuples', 'in', 'the', 'bag', 'rather']",0
POProject.java,"['/', '/', 'than', 'passing', 'the', 'entire', 'bag', '.', 'It', 'is', 'the', 'responsibility']",0
POProject.java,"['/', '/', 'of', 'the', 'translator', 'to', 'set', 'this', '.']",0
POProject.java,"['boolean', 'overloaded', '=', 'false', ';']",0
POProject.java,"['boolean', 'star', '=', 'false', ';']",0
POProject.java,"['public', 'POProject', '(', 'OperatorKey', 'k', ')', '{']",0
POProject.java,"['this', '(', 'k', ',', '-', '1', ',', '0', ')', ';']",0
POProject.java,"['public', 'POProject', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
POProject.java,"['this', '(', 'k', ',', 'rp', ',', '0', ')', ';']",0
POProject.java,"['public', 'POProject', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'int', 'col', ')', '{']",0
POProject.java,"['super', '(', 'k', ',', 'rp', ')', ';']",0
POProject.java,"['columns', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",0
POProject.java,"['columns', '.', 'add', '(', 'col', ')', ';']",0
POProject.java,"['public', 'POProject', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'ArrayList', '<', 'Integer', '>', 'cols', ')', '{']",0
POProject.java,"['super', '(', 'k', ',', 'rp', ')', ';']",0
POProject.java,"['columns', '=', 'cols', ';']",0
POProject.java,"['public', 'String', 'name', '(', ')', '{']",0
POProject.java,"['return', '""', 'Project', '""', '+', '""', '[', '""', '+', 'DataType', '.', 'findTypeName', '(', 'resultType', ')', '+', '""', ']', '""', '+', '(', '(', 'star', ')', '?', '""', '[', '*', ']', '""', ':', 'columns', ')', '+', '""', '-', '""', '+', 'mKey', '.', 'toString', '(', ')', ';']",0
POProject.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
POProject.java,"['return', 'false', ';']",0
POProject.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
POProject.java,"['return', 'false', ';']",0
POProject.java,"['public', 'void', 'visit', '(', 'PhyPlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
POProject.java,"['v', '.', 'visitProject', '(', 'this', ')', ';']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['public', 'void', 'attachInput', '(', 'Tuple', 't', ')', '{']",0
POProject.java,"['super', '.', 'attachInput', '(', 't', ')', ';']",0
POProject.java,"['processingBagOfTuples', '=', 'false', ';']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['public', 'Result', 'getNext', '(', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['Result', 'res', '=', 'processInput', '(', ')', ';']",0
POProject.java,"['Tuple', 'inpValue', '=', '(', 'Tuple', ')', 'res', '.', 'result', ';']",0
POProject.java,"['Object', 'ret', ';']",0
POProject.java,"['if', '(', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_OK', ')', '{']",0
POProject.java,"['if', '(', 'star', ')', '{']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['}', 'else', 'if', '(', 'columns', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
POProject.java,"['ret', '=', 'inpValue', '.', 'get', '(', 'columns', '.', 'get', '(', '0', ')', ')', ';']",0
POProject.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
POProject.java,"['if', '(', 'pigLogger', '!', '=', 'null', ')', '{']",0
POProject.java,"['pigLogger', '.', 'warn', '(', 'this', ',', '""', 'Attempt', 'to', 'access', 'field', '""', '+']",0
POProject.java,"['""', 'which', 'was', 'not', 'found', 'in', 'the', 'input', '""', ',', 'PigWarning', '.', 'ACCESSING_NON_EXISTENT_FIELD', ')', ';']",0
POProject.java,"['ret', '=', 'null', ';']",0
POProject.java,"['}', 'else', '{']",0
POProject.java,"['ArrayList', '<', 'Object', '>', 'objList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', 'columns', '.', 'size', '(', ')', ')', ';']",0
POProject.java,"['for', '(', 'int', 'i', ':', 'columns', ')', '{']",0
POProject.java,"['objList', '.', 'add', '(', 'inpValue', '.', 'get', '(', 'i', ')', ')', ';']",0
POProject.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
POProject.java,"['if', '(', 'pigLogger', '!', '=', 'null', ')', '{']",0
POProject.java,"['pigLogger', '.', 'warn', '(', 'this', ',', '""', 'Attempt', 'to', 'access', 'field', '""', '+', 'i', '+']",0
POProject.java,"['""', 'which', 'was', 'not', 'found', 'in', 'the', 'input', '""', ',', 'PigWarning', '.', 'ACCESSING_NON_EXISTENT_FIELD', ')', ';']",0
POProject.java,"['objList', '.', 'add', '(', 'null', ')', ';']",0
POProject.java,"['ret', '=', 'tupleFactory', '.', 'newTuple', '(', 'objList', ')', ';']",0
POProject.java,"['res', '.', 'result', '=', 'ret', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'DataBag', 'db', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['Result', 'res', '=', 'processInputBag', '(', ')', ';']",0
POProject.java,"['if', '(', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_OK', ')']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['return', '(', 'consumeInputBag', '(', 'res', ')', ')', ';']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['protected', 'Result', 'consumeInputBag', '(', 'Result', 'input', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['DataBag', 'inpBag', '=', '(', 'DataBag', ')', 'input', '.', 'result', ';']",0
POProject.java,"['Result', 'retVal', '=', 'new', 'Result', '(', ')', ';']",0
POProject.java,"['if', '(', 'isInputAttached', '(', ')', '|', '|', 'star', ')', '{']",0
POProject.java,"['retVal', '.', 'result', '=', 'inpBag', ';']",0
POProject.java,"['retVal', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POProject.java,"['detachInput', '(', ')', ';']",0
POProject.java,"['return', 'retVal', ';']",0
POProject.java,"['DataBag', 'outBag', ';']",0
POProject.java,"['if', '(', 'resultSingleTupleBag', ')', '{']",0
POProject.java,"['/', '/', 'we', 'have', 'only', 'one', 'tuple', 'in', 'a', 'bag', '-', 'so', 'create']",0
POProject.java,"['/', '/', 'A', 'SingleTupleBag', 'for', 'the', 'result', 'and', 'fill', 'it']",0
POProject.java,"['/', '/', 'appropriately', 'from', 'the', 'input', 'bag']",0
POProject.java,"['Tuple', 'tuple', '=', 'inpBag', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
POProject.java,"['Tuple', 'tmpTuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'columns', '.', 'size', '(', ')', ')', ';']",0
POProject.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'columns', '.', 'size', '(', ')', ';', 'i', '+', '+', ')']",0
POProject.java,"['tmpTuple', '.', 'set', '(', 'i', ',', 'tuple', '.', 'get', '(', 'columns', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
POProject.java,"['outBag', '=', 'new', 'SingleTupleBag', '(', 'tmpTuple', ')', ';']",0
POProject.java,"['}', 'else', '{']",0
POProject.java,"['outBag', '=', 'bagFactory', '.', 'newDefaultBag', '(', ')', ';']",0
POProject.java,"['for', '(', 'Tuple', 'tuple', ':', 'inpBag', ')', '{']",0
POProject.java,"['Tuple', 'tmpTuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'columns', '.', 'size', '(', ')', ')', ';']",0
POProject.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'columns', '.', 'size', '(', ')', ';', 'i', '+', '+', ')']",0
POProject.java,"['tmpTuple', '.', 'set', '(', 'i', ',', 'tuple', '.', 'get', '(', 'columns', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
POProject.java,"['outBag', '.', 'add', '(', 'tmpTuple', ')', ';']",0
POProject.java,"['retVal', '.', 'result', '=', 'outBag', ';']",0
POProject.java,"['retVal', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POProject.java,"['return', 'retVal', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'DataByteArray', 'ba', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Double', 'd', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Float', 'f', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Integer', 'i', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Long', 'l', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Boolean', 'b', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Map', 'm', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'String', 's', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['return', 'getNext', '(', ')', ';']",0
POProject.java,"['/', '*', '*']",0
POProject.java,"['public', 'Result', 'getNext', '(', 'Tuple', 't', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['Result', 'res', '=', 'new', 'Result', '(', ')', ';']",0
POProject.java,"['if', '(', '!', 'processingBagOfTuples', ')', '{']",0
POProject.java,"['Tuple', 'inpValue', '=', 'null', ';']",0
POProject.java,"['res', '=', 'processInput', '(', ')', ';']",0
POProject.java,"['if', '(', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_OK', ')']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['if', '(', 'star', ')']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['inpValue', '=', '(', 'Tuple', ')', 'res', '.', 'result', ';']",0
POProject.java,"['res', '.', 'result', '=', 'null', ';']",0
POProject.java,"['Object', 'ret', ';']",0
POProject.java,"['if', '(', 'columns', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
POProject.java,"['ret', '=', 'inpValue', '.', 'get', '(', 'columns', '.', 'get', '(', '0', ')', ')', ';']",0
POProject.java,"['}', 'else', '{']",0
POProject.java,"['ArrayList', '<', 'Object', '>', 'objList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', 'columns', '.', 'size', '(', ')', ')', ';']",0
POProject.java,"['for', '(', 'int', 'i', ':', 'columns', ')', '{']",0
POProject.java,"['objList', '.', 'add', '(', 'inpValue', '.', 'get', '(', 'i', ')', ')', ';']",0
POProject.java,"['ret', '=', 'tupleFactory', '.', 'newTuple', '(', 'objList', ')', ';']",0
POProject.java,"['res', '.', 'result', '=', '(', 'Tuple', ')', 'ret', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['if', '(', 'overloaded', ')', '{']",0
POProject.java,"['DataBag', 'retBag', '=', '(', 'DataBag', ')', 'ret', ';']",0
POProject.java,"['bagIterator', '=', 'retBag', '.', 'iterator', '(', ')', ';']",0
POProject.java,"['if', '(', 'bagIterator', '.', 'hasNext', '(', ')', ')', '{']",0
POProject.java,"['processingBagOfTuples', '=', 'true', ';']",0
POProject.java,"['res', '.', 'result', '=', 'bagIterator', '.', 'next', '(', ')', ';']",0
POProject.java,"['res', '.', 'result', '=', '(', 'Tuple', ')', 'ret', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['if', '(', 'bagIterator', '.', 'hasNext', '(', ')', ')', '{']",0
POProject.java,"['res', '.', 'result', '=', 'bagIterator', '.', 'next', '(', ')', ';']",0
POProject.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POProject.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['/', '/', 'done', 'processing', 'the', 'bag', 'of', 'tuples']",0
POProject.java,"['processingBagOfTuples', '=', 'false', ';']",0
POProject.java,"['return', 'getNext', '(', 't', ')', ';']",0
POProject.java,"['public', 'ArrayList', '<', 'Integer', '>', 'getColumns', '(', ')', '{']",0
POProject.java,"['return', 'columns', ';']",0
POProject.java,"['public', 'int', 'getColumn', '(', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['if', '(', 'columns', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
POProject.java,"['int', 'errCode', '=', '2068', ';']",0
POProject.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Improper', 'use', 'of', 'method', 'getColumn', '(', ')', 'in', '""']",0
POProject.java,"['+', 'POProject', '.', 'class', '.', 'getSimpleName', '(', ')', ';']",0
POProject.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
POProject.java,"['return', 'columns', '.', 'get', '(', '0', ')', ';']",0
POProject.java,"['public', 'void', 'setColumns', '(', 'ArrayList', '<', 'Integer', '>', 'cols', ')', '{']",0
POProject.java,"['this', '.', 'columns', '=', 'cols', ';']",0
POProject.java,"['public', 'void', 'setColumn', '(', 'int', 'col', ')', '{']",0
POProject.java,"['if', '(', 'null', '=', '=', 'columns', ')', '{']",0
POProject.java,"['columns', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",0
POProject.java,"['}', 'else', '{']",0
POProject.java,"['columns', '.', 'clear', '(', ')', ';']",0
POProject.java,"['columns', '.', 'add', '(', 'col', ')', ';']",0
POProject.java,"['public', 'boolean', 'isOverloaded', '(', ')', '{']",0
POProject.java,"['return', 'overloaded', ';']",0
POProject.java,"['public', 'void', 'setOverloaded', '(', 'boolean', 'overloaded', ')', '{']",0
POProject.java,"['this', '.', 'overloaded', '=', 'overloaded', ';']",0
POProject.java,"['public', 'boolean', 'isStar', '(', ')', '{']",0
POProject.java,"['return', 'star', ';']",0
POProject.java,"['public', 'void', 'setStar', '(', 'boolean', 'star', ')', '{']",0
POProject.java,"['this', '.', 'star', '=', 'star', ';']",0
POProject.java,"['public', 'POProject', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
POProject.java,"['ArrayList', '<', 'Integer', '>', 'cols', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', 'columns', '.', 'size', '(', ')', ')', ';']",0
POProject.java,"['/', '/', 'Can', 'resuse', 'the', 'same', 'Integer', 'objects', ',', 'as', 'they', 'are', 'immutable']",0
POProject.java,"['for', '(', 'Integer', 'i', ':', 'columns', ')', '{']",0
POProject.java,"['cols', '.', 'add', '(', 'i', ')', ';']",0
POProject.java,"['POProject', 'clone', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'mKey', '.', 'scope', ',']",0
POProject.java,"['NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'mKey', '.', 'scope', ')', ')', ',']",0
POProject.java,"['requestedParallelism', ',', 'cols', ')', ';']",0
POProject.java,"['clone', '.', 'cloneHelper', '(', 'this', ')', ';']",0
POProject.java,"['clone', '.', 'star', '=', 'star', ';']",0
POProject.java,"['clone', '.', 'overloaded', '=', 'overloaded', ';']",0
POProject.java,"['return', 'clone', ';']",0
POProject.java,"['protected', 'Result', 'processInputBag', '(', ')', 'throws', 'ExecException', '{']",0
POProject.java,"['Result', 'res', '=', 'new', 'Result', '(', ')', ';']",0
POProject.java,"['if', '(', 'input', '=', '=', 'null', '&', '&', '(', 'inputs', '=', '=', 'null', '|', '|', 'inputs', '.', 'size', '(', ')', '=', '=', '0', ')', ')', '{']",0
POProject.java,"['/', '/', 'log', '.', 'warn', '(', '""', 'No', 'inputs', 'found', '.', 'Signaling', 'End', 'of', 'Processing', '.', '""', ')', ';']",0
POProject.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_EOP', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['/', '/', 'Should', 'be', 'removed', 'once', 'the', 'model', 'is', 'clear']",0
POProject.java,"['if', '(', 'reporter', '!', '=', 'null', ')', 'reporter', '.', 'progress', '(', ')', ';']",0
POProject.java,"['if', '(', '!', 'isInputAttached', '(', ')', ')']",0
POProject.java,"['return', 'inputs', '.', 'get', '(', '0', ')', '.', 'getNext', '(', 'dummyBag', ')', ';']",0
POProject.java,"['res', '.', 'result', '=', '(', 'DataBag', ')', 'input', '.', 'get', '(', 'columns', '.', 'get', '(', '0', ')', ')', ';']",0
POProject.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
POProject.java,"['return', 'res', ';']",0
POProject.java,"['public', 'void', 'setResultSingleTupleBag', '(', 'boolean', 'resultSingleTupleBag', ')', '{']",0
POProject.java,"['this', '.', 'resultSingleTupleBag', '=', 'resultSingleTupleBag', ';']",0
LogToPhyTranslationVisitor.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'Arrays', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'Random', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'java', '.', 'util', '.', 'Stack', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ComparisonFunc', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', '*', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', '*', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'ExpressionOperator', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'BinaryExpressionOperator', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', '.', 'GFCross', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DependencyOrderWalker', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DependencyOrderWalkerWOSeenChk', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanWalker', ';']",0
LogToPhyTranslationVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'class', 'LogToPhyTranslationVisitor', 'extends', 'LOVisitor', '{']",0
LogToPhyTranslationVisitor.java,"['protected', 'Map', '<', 'LogicalOperator', ',', 'PhysicalOperator', '>', 'LogToPhyMap', ';']",0
LogToPhyTranslationVisitor.java,"['Random', 'r', '=', 'new', 'Random', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['protected', 'Stack', '<', 'PhysicalPlan', '>', 'currentPlans', ';']",0
LogToPhyTranslationVisitor.java,"['protected', 'PhysicalPlan', 'currentPlan', ';']",0
LogToPhyTranslationVisitor.java,"['protected', 'NodeIdGenerator', 'nodeGen', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['private', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['protected', 'PigContext', 'pc', ';']",0
LogToPhyTranslationVisitor.java,"['LoadFunc', 'load', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'LogToPhyTranslationVisitor', '(', 'LogicalPlan', 'plan', ')', '{']",0
LogToPhyTranslationVisitor.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(']",0
LogToPhyTranslationVisitor.java,"['plan', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '=', 'new', 'Stack', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'PhysicalOperator', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'setPigContext', '(', 'PigContext', 'pc', ')', '{']",0
LogToPhyTranslationVisitor.java,"['this', '.', 'pc', '=', 'pc', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'PhysicalPlan', 'getPhysicalPlan', '(', ')', '{']",0
LogToPhyTranslationVisitor.java,"['return', 'currentPlan', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOGreaterThan', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'GreaterThanExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'currentExprPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOLesserThan', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'LessThanExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOGreaterThanEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'GTOrEqualToExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOLesserThanEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'LTOrEqualToExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'EqualToExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LONotEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'NotEqualToExpr', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOperandType', '(', 'op', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LORegexp', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=']",0
LogToPhyTranslationVisitor.java,"['new', 'PORegexp', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',']",0
LogToPhyTranslationVisitor.java,"['op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOAdd', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryExpressionOperator', 'exprOp', '=', 'new', 'Add', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOSubtract', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryExpressionOperator', 'exprOp', '=', 'new', 'Subtract', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOMultiply', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryExpressionOperator', 'exprOp', '=', 'new', 'Multiply', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LODivide', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryExpressionOperator', 'exprOp', '=', 'new', 'Divide', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOMod', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryExpressionOperator', 'exprOp', '=', 'new', 'Mod', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOAnd', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'POAnd', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', 'return', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOOr', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['BinaryComparisonOperator', 'exprOp', '=', 'new', 'POOr', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setLhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getLhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setRhs', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getRhsOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', 'return', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LONot', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['UnaryComparisonOperator', 'exprOp', '=', 'new', 'PONot', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setExpr', '(', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'getOperand', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', 'return', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'predecessors', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['protected', 'void', 'visit', '(', 'LOCross', 'cs', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'cs', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'cs', '.', 'getInputs', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POGlobalRearrange', 'poGlobal', '=', 'new', 'POGlobalRearrange', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POPackage', 'poPackage', '=', 'new', 'POPackage', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poGlobal', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poPackage', ')', ';']",0
LogToPhyTranslationVisitor.java,"['int', 'count', '=', '0', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'poGlobal', ',', 'poPackage', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'Boolean', '>', 'flattenLst', '=', 'Arrays', '.', 'asList', '(', 'true', ',', 'true', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalOperator', '>', 'pop', '=', 'Arrays', '.', 'asList', '(', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalPlan', 'fep1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ConstantExpression', 'ce1', '=', 'new', 'ConstantExpression', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1', '.', 'setValue', '(', 'inputs', '.', 'size', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1', '.', 'setResultType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'add', '(', 'ce1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ConstantExpression', 'ce2', '=', 'new', 'ConstantExpression', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce2', '.', 'setValue', '(', 'count', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce2', '.', 'setResultType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'add', '(', 'ce2', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '*', 'Tuple', 'ce1val', '=', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'newTuple', '(', '2', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1val', '.', 'set', '(', '0', ',', 'inputs', '.', 'size', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1val', '.', 'set', '(', '1', ',', 'count', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1', '.', 'setValue', '(', 'ce1val', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce1', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';', '*', '/']",0
LogToPhyTranslationVisitor.java,"['POUserFunc', 'gfc', '=', 'new', 'POUserFunc', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ',', 'Arrays', '.', 'asList', '(', '(', 'PhysicalOperator', ')', 'ce1', ',', '(', 'PhysicalOperator', ')', 'ce2', ')', ',', 'new', 'FuncSpec', '(', 'GFCross', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['gfc', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'addAsLeaf', '(', 'gfc', ')', ';']",0
LogToPhyTranslationVisitor.java,"['gfc', '.', 'setInputs', '(', 'Arrays', '.', 'asList', '(', '(', 'PhysicalOperator', ')', 'ce1', ',', '(', 'PhysicalOperator', ')', 'ce2', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '*', 'fep1', '.', 'add', '(', 'gfc', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'connect', '(', 'ce1', ',', 'gfc', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'connect', '(', 'ce2', ',', 'gfc', ')', ';', '*', '/']",0
LogToPhyTranslationVisitor.java,"['PhysicalPlan', 'fep2', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POProject', 'feproj', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['feproj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['feproj', '.', 'setStar', '(', 'true', ')', ';']",0
LogToPhyTranslationVisitor.java,"['feproj', '.', 'setOverloaded', '(', 'false', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep2', '.', 'add', '(', 'feproj', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'fePlans', '=', 'Arrays', '.', 'asList', '(', 'fep1', ',', 'fep2', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POForEach', 'fe', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ',', 'fePlans', ',', 'flattenLst', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'fe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ',', 'fe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POLocalRearrange', 'physOp', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'lrPlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalPlan', 'lrp1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POProject', 'lrproj1', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ',', 'i', ')', ';']",0
LogToPhyTranslationVisitor.java,"['lrproj1', '.', 'setOverloaded', '(', 'false', ')', ';']",0
LogToPhyTranslationVisitor.java,"['lrproj1', '.', 'setResultType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
LogToPhyTranslationVisitor.java,"['lrp1', '.', 'add', '(', 'lrproj1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['lrPlans', '.', 'add', '(', 'lrp1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setCross', '(', 'true', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setIndex', '(', 'count', '+', '+', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setPlans', '(', 'lrPlans', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'fe', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'physOp', ',', 'poGlobal', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2058', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'create', 'POLocalRearrange', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'VisitorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setKeyType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setNumInps', '(', 'count', ')', ';']",0
LogToPhyTranslationVisitor.java,"['boolean', 'inner', '[', ']', '=', 'new', 'boolean', '[', 'count', ']', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'count', ';', 'i', '+', '+', ')', '{']",0
LogToPhyTranslationVisitor.java,"['inner', '[', 'i', ']', '=', 'true', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setInner', '(', 'inner', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'fePlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'Boolean', '>', 'flattenLst', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'count', ';', 'i', '+', '+', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalPlan', 'fep1', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POProject', 'feproj1', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ',', 'i', ')', ';']",0
LogToPhyTranslationVisitor.java,"['feproj1', '.', 'setResultType', '(', 'DataType', '.', 'BAG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['feproj1', '.', 'setOverloaded', '(', 'false', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fep1', '.', 'add', '(', 'feproj1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['fePlans', '.', 'add', '(', 'fep1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['flattenLst', '.', 'add', '(', 'true', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POForEach', 'fe', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cs', '.', 'getRequestedParallelism', '(', ')', ',', 'fePlans', ',', 'flattenLst', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'fe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'poPackage', ',', 'fe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'cs', ',', 'fe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOCogroup', 'cg', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['boolean', 'currentPhysicalPlan', '=', 'false', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'cg', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'cg', '.', 'getInputs', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POGlobalRearrange', 'poGlobal', '=', 'new', 'POGlobalRearrange', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cg']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POPackage', 'poPackage', '=', 'new', 'POPackage', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cg', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poGlobal', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poPackage', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'poGlobal', ',', 'poPackage', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['int', 'count', '=', '0', ';']",0
LogToPhyTranslationVisitor.java,"['Byte', 'type', '=', 'null', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalPlan', '>', 'plans', '=', '(', 'List', '<', 'LogicalPlan', '>', ')', 'cg', '.', 'getGroupByPlans', '(', ')']",0
LogToPhyTranslationVisitor.java,"['.', 'get', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POLocalRearrange', 'physOp', '=', 'new', 'POLocalRearrange', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'cg']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'exprPlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalPlan', 'lp', ':', 'plans', ')', '{']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'mCurrentWalker']",0
LogToPhyTranslationVisitor.java,"['.', 'spawnChildWalker', '(', 'lp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['mCurrentWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprPlans', '.', 'add', '(', '(', 'PhysicalPlan', ')', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setPlans', '(', 'exprPlans', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",1
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2071', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'setting', 'up', 'local', 'rearrange', ""'"", 's', 'plans', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setIndex', '(', 'count', '+', '+', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'ExecException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2058', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'create', 'POLocalRearrange', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'VisitorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'plans', '.', 'size', '(', ')', '>', '1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['type', '=', 'DataType', '.', 'TUPLE', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setKeyType', '(', 'type', ')', ';']",0
LogToPhyTranslationVisitor.java,"['type', '=', 'exprPlans', '.', 'get', '(', '0', ')', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getResultType', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setKeyType', '(', 'type', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'physOp', ',', 'poGlobal', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setKeyType', '(', 'type', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setNumInps', '(', 'count', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poPackage', '.', 'setInner', '(', 'cg', '.', 'getInner', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'cg', ',', 'poPackage', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '*', '*']",1
LogToPhyTranslationVisitor.java,"['protected', 'void', 'visit', '(', 'LOFRJoin', 'frj', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'frj', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'frj', '.', 'getInputs', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'List', '<', 'PhysicalPlan', '>', '>', 'ppLists', '=', 'new', 'ArrayList', '<', 'List', '<', 'PhysicalPlan', '>', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'Byte', '>', 'keyTypes', '=', 'new', 'ArrayList', '<', 'Byte', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['int', 'fragment', '=', 'findFrag', '(', 'inputs', ',', 'frj', '.', 'getFragOp', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalOperator', '>', 'inp', '=', 'new', 'ArrayList', '<', 'PhysicalOperator', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LogToPhyTranslationVisitor.java,"['inp', '.', 'add', '(', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalPlan', '>', 'plans', '=', '(', 'List', '<', 'LogicalPlan', '>', ')', 'frj', '.', 'getJoinColPlans', '(', ')']",0
LogToPhyTranslationVisitor.java,"['.', 'get', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'exprPlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalPlan', 'lp', ':', 'plans', ')', '{']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'mCurrentWalker']",0
LogToPhyTranslationVisitor.java,"['.', 'spawnChildWalker', '(', 'lp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['mCurrentWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprPlans', '.', 'add', '(', '(', 'PhysicalPlan', ')', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ppLists', '.', 'add', '(', 'exprPlans', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'plans', '.', 'size', '(', ')', '>', '1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['keyTypes', '.', 'add', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['keyTypes', '.', 'add', '(', 'exprPlans', '.', 'get', '(', '0', ')', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getResultType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POFRJoin', 'pfrj', ';']",0
LogToPhyTranslationVisitor.java,"['pfrj', '=', 'new', 'POFRJoin', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'frj', '.', 'getRequestedParallelism', '(', ')', ',']",0
LogToPhyTranslationVisitor.java,"['inp', ',', 'ppLists', ',', 'keyTypes', ',', 'null', ',', 'fragment', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'ExecException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2058', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'set', 'index', 'on', 'newly', 'create', 'POLocalRearrange', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'VisitorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pfrj', '.', 'setResultType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'pfrj', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'inputs', ')', '{']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ',', 'pfrj', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'frj', ',', 'pfrj', ')', ';']",0
LogToPhyTranslationVisitor.java,"['private', 'int', 'findFrag', '(', 'List', '<', 'LogicalOperator', '>', 'inputs', ',', 'LogicalOperator', 'fragOp', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'i', '=', '-', '1', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lop', ':', 'inputs', ')', '{']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'fragOp', '.', 'getOperatorKey', '(', ')', '.', 'equals', '(', 'lop', '.', 'getOperatorKey', '(', ')', ')', ')']",0
LogToPhyTranslationVisitor.java,"['return', '+', '+', 'i', ';']",0
LogToPhyTranslationVisitor.java,"['return', '-', '1', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOFilter', 'filter', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'filter', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POFilter', 'poFilter', '=', 'new', 'POFilter', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'filter', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poFilter', '.', 'setResultType', '(', 'filter', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poFilter', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'filter', ',', 'poFilter', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'mCurrentWalker']",0
LogToPhyTranslationVisitor.java,"['.', 'spawnChildWalker', '(', 'filter', '.', 'getComparisonPlan', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['mCurrentWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poFilter', '.', 'setPlan', '(', '(', 'PhysicalPlan', ')', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'filter', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'filter', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Filter', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'poFilter', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOStream', 'stream', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'stream', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POStream', 'poStream', '=', 'new', 'POStream', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'stream', '.', 'getExecutableManager', '(', ')', ',']",0
LogToPhyTranslationVisitor.java,"['stream', '.', 'getStreamingCommand', '(', ')', ',', 'this', '.', 'pc', '.', 'getProperties', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poStream', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'stream', ',', 'poStream', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'stream', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'stream', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Stream', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'poStream', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOProject', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POProject', 'exprOp', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '.', 'isSendEmptyBagOnEOP', '(', ')', ')', '{']",0
LogToPhyTranslationVisitor.java,"['exprOp', '=', 'new', 'PORelationToExprProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['exprOp', '=', 'new', 'POProject', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setColumns', '(', '(', 'ArrayList', ')', 'op', '.', 'getProjection', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setStar', '(', 'op', '.', 'isStar', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['exprOp', '.', 'setOverloaded', '(', 'op', '.', 'getOverloaded', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'lp', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'Project', 'might', 'not', 'have', 'any', 'predecessors']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'predecessors', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'lo', ':', 'predecessors', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'lo', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'exprOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOForEach', 'g', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['boolean', 'currentPhysicalPlan', '=', 'false', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'g', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalPlan', '>', 'plans', '=', 'g', '.', 'getForEachPlans', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'plans', ')', '{']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'new', 'DependencyOrderWalkerWOSeenChk', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(']",0
LogToPhyTranslationVisitor.java,"['plan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['childWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['innerPlans', '.', 'add', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'PhysicalOperator', 'poGen', '=', 'new', 'POGenerate', '(', 'new', 'OperatorKey', '(', '""', '""', ',']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'r', '.', 'nextLong', '(', ')', ')', ',', 'inputs', ',', 'toBeFlattened', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POForEach', 'poFE', '=', 'new', 'POForEach', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'g', '.', 'getRequestedParallelism', '(', ')', ',', 'innerPlans', ',']",0
LogToPhyTranslationVisitor.java,"['g', '.', 'getFlatten', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poFE', '.', 'setResultType', '(', 'g', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'g', ',', 'poFE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poFE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'generate', 'cannot', 'have', 'multiple', 'inputs']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'g', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'g', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'generate', 'may', 'not', 'have', 'any', 'predecessors']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '=', '=', 'null', ')']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'poFE', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOSort', 's', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 's', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalPlan', '>', 'logPlans', '=', 's', '.', 'getSortColPlans', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'PhysicalPlan', '>', 'sortPlans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', 'logPlans', '.', 'size', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'convert', 'all', 'the', 'logical', 'expression', 'plans', 'to', 'physical', 'expression', 'plans']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'logPlans', ')', '{']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'mCurrentWalker']",0
LogToPhyTranslationVisitor.java,"['.', 'spawnChildWalker', '(', 'plan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['childWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['sortPlans', '.', 'add', '(', '(', 'PhysicalPlan', ')', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'get', 'the', 'physical', 'operator', 'for', 'sort']",0
LogToPhyTranslationVisitor.java,"['POSort', 'sort', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 's', '.', 'getUserFunc', '(', ')', '=', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['sort', '=', 'new', 'POSort', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 's', '.', 'getRequestedParallelism', '(', ')', ',', 'null', ',']",0
LogToPhyTranslationVisitor.java,"['sortPlans', ',', 's', '.', 'getAscendingCols', '(', ')', ',', 'null', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['POUserComparisonFunc', 'comparator', '=', 'new', 'POUserComparisonFunc', '(', 'new', 'OperatorKey', '(']",0
LogToPhyTranslationVisitor.java,"['scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 's']",0
LogToPhyTranslationVisitor.java,"['.', 'getRequestedParallelism', '(', ')', ',', 'null', ',', 's', '.', 'getUserFunc', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['sort', '=', 'new', 'POSort', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 's', '.', 'getRequestedParallelism', '(', ')', ',', 'null', ',']",0
LogToPhyTranslationVisitor.java,"['sortPlans', ',', 's', '.', 'getAscendingCols', '(', ')', ',', 'comparator', ')', ';']",0
LogToPhyTranslationVisitor.java,"['sort', '.', 'setLimit', '(', 's', '.', 'getLimit', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'sort', '.', 'setRequestedParallelism', '(', 's', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 's', ',', 'sort', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'sort', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 's', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 's', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Sort', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'sort', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['sort', '.', 'setResultType', '(', 's', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LODistinct', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'This', 'is', 'simpler', '.', 'No', 'plans', 'associated', 'with', 'this', '.', 'Just', 'create', 'the']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'physical', 'operator', ',']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'push', 'it', 'in', 'the', 'current', 'plan', 'and', 'make', 'the', 'connections']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'physOp', '=', 'new', 'PODistinct', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'Distinct', 'will', 'only', 'have', 'a', 'single', 'input']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'op', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'inputs', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Distinct', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOSplit', 'split', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'split', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'physOp', '=', 'new', 'POSplit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'split', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['FileSpec', 'splStrFile', ';']",0
LogToPhyTranslationVisitor.java,"['splStrFile', '=', 'new', 'FileSpec', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pc', ')', '.', 'toString', '(', ')', ',', 'new', 'FuncSpec', '(', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'IOException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['byte', 'errSrc', '=', 'pc', '.', 'getErrorSource', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '0', ';']",0
LogToPhyTranslationVisitor.java,"['switch', '(', 'errSrc', ')', '{']",0
LogToPhyTranslationVisitor.java,"['case', 'PigException', '.', 'BUG', ':']",0
LogToPhyTranslationVisitor.java,"['errCode', '=', '2016', ';']",0
LogToPhyTranslationVisitor.java,"['case', 'PigException', '.', 'REMOTE_ENVIRONMENT', ':']",0
LogToPhyTranslationVisitor.java,"['errCode', '=', '6002', ';']",0
LogToPhyTranslationVisitor.java,"['case', 'PigException', '.', 'USER_ENVIRONMENT', ':']",0
LogToPhyTranslationVisitor.java,"['errCode', '=', '4003', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'obtain', 'a', 'temporary', 'path', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'errSrc', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'POSplit', ')', 'physOp', ')', '.', 'setSplitStore', '(', 'splStrFile', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'split', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'split', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'split', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Split', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOSplitOutput', 'split', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'split', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'physOp', '=', 'new', 'POFilter', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'split', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'split', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlans', '.', 'push', '(', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'childWalker', '=', 'mCurrentWalker']",0
LogToPhyTranslationVisitor.java,"['.', 'spawnChildWalker', '(', 'split', '.', 'getConditionPlan', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['pushWalker', '(', 'childWalker', ')', ';']",0
LogToPhyTranslationVisitor.java,"['mCurrentWalker', '.', 'walk', '(', 'this', ')', ';']",0
LogToPhyTranslationVisitor.java,"['popWalker', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'POFilter', ')', 'physOp', ')', '.', 'setPlan', '(', '(', 'PhysicalPlan', ')', 'currentPlan', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '=', 'currentPlans', '.', 'pop', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'split', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'split', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Split', 'Output', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'func', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['Object', 'f', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'func', '.', 'getFuncSpec', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'p', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'f', 'instanceof', 'EvalFunc', ')', '{']",0
LogToPhyTranslationVisitor.java,"['p', '=', 'new', 'POUserFunc', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'func', '.', 'getRequestedParallelism', '(', ')', ',']",0
LogToPhyTranslationVisitor.java,"['null', ',', 'func', '.', 'getFuncSpec', '(', ')', ',', '(', 'EvalFunc', ')', 'f', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['p', '=', 'new', 'POUserComparisonFunc', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'func', '.', 'getRequestedParallelism', '(', ')', ',']",0
LogToPhyTranslationVisitor.java,"['null', ',', 'func', '.', 'getFuncSpec', '(', ')', ',', '(', 'ComparisonFunc', ')', 'f', ')', ';']",0
LogToPhyTranslationVisitor.java,"['p', '.', 'setResultType', '(', 'func', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'p', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'ExpressionOperator', '>', 'fromList', '=', 'func', '.', 'getArguments', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'fromList', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'fromList', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'p', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'func', ',', 'p', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOLoad', 'loLoad', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'loLoad', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POLoad', 'load', '=', 'new', 'POLoad', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'loLoad', '.', 'isSplittable', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['load', '.', 'setLFile', '(', 'loLoad', '.', 'getInputFile', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['load', '.', 'setPc', '(', 'pc', ')', ';']",0
LogToPhyTranslationVisitor.java,"['load', '.', 'setResultType', '(', 'loLoad', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'load', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'loLoad', ',', 'load', ')', ';']",0
LogToPhyTranslationVisitor.java,"['this', '.', 'load', '=', 'loLoad', '.', 'getLoadFunc', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'Load', 'is', 'typically', 'a', 'root', 'operator', ',', 'but', 'in', 'the', 'multiquery']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'case', 'it', 'might', 'have', 'a', 'store', 'as', 'a', 'predecessor', '.']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'loLoad', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'loLoad', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'load', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOStore', 'loStore', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'loStore', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POStore', 'store', '=', 'new', 'POStore', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['store', '.', 'setSFile', '(', 'loStore', '.', 'getOutputFile', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['store', '.', 'setInputSpec', '(', 'loStore', '.', 'getInputSpec', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'create', 'a', 'new', 'schema', 'for', 'ourselves', 'so', 'that', 'when']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'we', 'serialize', 'we', 'are', 'not', 'serializing', 'objects', 'that']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'contain', 'the', 'schema', '-', 'apparently', 'Java', 'tries', 'to']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'serialize', 'the', 'object', 'containing', 'the', 'schema', 'if']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'we', 'are', 'trying', 'to', 'serialize', 'the', 'schema', 'reference', 'in']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'the', 'containing', 'object', '.', 'The', 'schema', 'here', 'will', 'be', 'serialized']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'in', 'JobControlCompiler']",0
LogToPhyTranslationVisitor.java,"['store', '.', 'setSchema', '(', 'new', 'Schema', '(', 'loStore', '.', 'getSchema', '(', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'FrontendException', 'e1', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errorCode', '=', '1060', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'message', '=', '""', 'Cannot', 'resolve', 'Store', 'output', 'schema', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'VisitorException', '(', 'message', ',', 'errorCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'store', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'loStore', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'loStore', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Store', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'store', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'loStore', ',', 'store', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOConst', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['ConstantExpression', 'ce', '=', 'new', 'ConstantExpression', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce', '.', 'setValue', '(', 'op', '.', 'getValue', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ce', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['/', '/', 'this', 'operator', 'doesn', ""'"", 't', 'have', 'any', 'predecessors']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'ce', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'ce', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOBinCond', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'physOp', '=', 'new', 'POBinCond', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['POBinCond', 'phy', '=', '(', 'POBinCond', ')', 'physOp', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'cond', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getCond', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['phy', '.', 'setCond', '(', 'cond', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'lhs', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getLhsOp', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['phy', '.', 'setLhs', '(', 'lhs', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'rhs', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getRhsOp', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['phy', '.', 'setRhs', '(', 'rhs', ')', ';']",0
LogToPhyTranslationVisitor.java,"['phy', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'ops', '=', 'op', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'l', ':', 'ops', ')', '{']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'from', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'l', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LONegative', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'physOp', '=', 'new', 'PONegative', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ',']",0
LogToPhyTranslationVisitor.java,"['null', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'op', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'inputs', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Negative', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'PONegative', ')', 'physOp', ')', '.', 'setExpr', '(', 'from', ')', ';']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'PONegative', ')', 'physOp', ')', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOIsNull', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['UnaryComparisonOperator', 'physOp', '=', 'new', 'POIsNull', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ',', 'null', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'op', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'op', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'inputs', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'inputs', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Null', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setOperandType', '(', 'op', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",1
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'POIsNull', ')', 'physOp', ')', '.', 'setExpr', '(', 'from', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOMapLookup', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', '(', '(', 'OperatorKey', ')', 'op', '.', 'getOperatorKey', '(', ')', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'physOp', '=', 'new', 'POMapLookUp', '(', 'new', 'OperatorKey', '(', 'scope', ',']",0
LogToPhyTranslationVisitor.java,"['nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ',', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getLookUpKey', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'from', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getMap', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOCast', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'physOp', '=', 'new', 'POCast', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['ExpressionOperator', 'from', '=', '(', 'ExpressionOperator', ')', 'LogToPhyMap', '.', 'get', '(', 'op']",0
LogToPhyTranslationVisitor.java,"['.', 'getExpression', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['FuncSpec', 'lfSpec', '=', 'op', '.', 'getLoadFuncSpec', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', '{']",0
LogToPhyTranslationVisitor.java,"['(', '(', 'POCast', ')', 'physOp', ')', '.', 'setLoadFSpec', '(', 'lfSpec', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOLimit', 'limit', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'limit', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POLimit', 'poLimit', '=', 'new', 'POLimit', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen', '.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'limit', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poLimit', '.', 'setResultType', '(', 'limit', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['poLimit', '.', 'setLimit', '(', 'limit', '.', 'getLimit', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'poLimit', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'limit', ',', 'poLimit', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'op', '=', 'limit', '.', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'limit', ')', ';']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', ';']",0
LogToPhyTranslationVisitor.java,"['if', '(', 'op', '!', '=', 'null', ')', '{']",0
LogToPhyTranslationVisitor.java,"['from', '=', 'LogToPhyMap', '.', 'get', '(', 'op', '.', 'get', '(', '0', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'else', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2051', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'a', 'predecessor', 'for', 'Limit', '.', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'poLimit', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
LogToPhyTranslationVisitor.java,"['public', 'void', 'visit', '(', 'LOUnion', 'op', ')', 'throws', 'VisitorException', '{']",0
LogToPhyTranslationVisitor.java,"['String', 'scope', '=', 'op', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
LogToPhyTranslationVisitor.java,"['POUnion', 'physOp', '=', 'new', 'POUnion', '(', 'new', 'OperatorKey', '(', 'scope', ',', 'nodeGen']",0
LogToPhyTranslationVisitor.java,"['.', 'getNextNodeId', '(', 'scope', ')', ')', ',', 'op', '.', 'getRequestedParallelism', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'add', '(', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['physOp', '.', 'setResultType', '(', 'op', '.', 'getType', '(', ')', ')', ';']",0
LogToPhyTranslationVisitor.java,"['LogToPhyMap', '.', 'put', '(', 'op', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['List', '<', 'LogicalOperator', '>', 'ops', '=', 'op', '.', 'getInputs', '(', ')', ';']",0
LogToPhyTranslationVisitor.java,"['for', '(', 'LogicalOperator', 'l', ':', 'ops', ')', '{']",0
LogToPhyTranslationVisitor.java,"['PhysicalOperator', 'from', '=', 'LogToPhyMap', '.', 'get', '(', 'l', ')', ';']",0
LogToPhyTranslationVisitor.java,"['currentPlan', '.', 'connect', '(', 'from', ',', 'physOp', ')', ';']",0
LogToPhyTranslationVisitor.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{']",0
LogToPhyTranslationVisitor.java,"['int', 'errCode', '=', '2015', ';']",0
LogToPhyTranslationVisitor.java,"['String', 'msg', '=', '""', 'Invalid', 'physical', 'operators', 'in', 'the', 'physical', 'plan', '""', ';']",0
LogToPhyTranslationVisitor.java,"['throw', 'new', 'LogicalToPhysicalTranslatorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
TestTypeCheckingValidator.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestTypeCheckingValidator.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestTypeCheckingValidator.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestTypeCheckingValidator.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestTypeCheckingValidator.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestTypeCheckingValidator.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', '.', '*', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', '.', 'FieldSchema', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DepthFirstWalker', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanValidationException', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', '*', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestTypeCheckingValidator.java,"['import', 'static', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TypeCheckingTestUtil', '.', '*', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'LogicalPlanTester', ';']",0
TestTypeCheckingValidator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TypeCheckingTestUtil', ';']",0
TestTypeCheckingValidator.java,"['public', 'class', 'TestTypeCheckingValidator', 'extends', 'TestCase', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlanTester', 'planTester', '=', 'new', 'LogicalPlanTester', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['private', 'static', 'final', 'String', 'simpleEchoStreamingCommand', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')']",0
TestTypeCheckingValidator.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '\\', '\\', '""', '$', '_', '\\', '\\', '\\', '""', ""'"", '""', ';']",0
TestTypeCheckingValidator.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '""', '$', '_', '\\', '""', ""'"", '""', ';']",0
TestTypeCheckingValidator.java,"['File', 'fileA', '=', 'new', 'File', '(', '""', 'a', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['File', 'fileB', '=', 'new', 'File', '(', '""', 'b', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['fileA', '.', 'delete', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fileB', '.', 'delete', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'fileA', '.', 'createNewFile', '(', ')', '|', '|', '!', 'fileB', '.', 'createNewFile', '(', ')', ')']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Unable', 'to', 'create', 'input', 'files', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Unable', 'to', 'create', 'input', 'files', ':', '""', '+', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fileA', '.', 'deleteOnExit', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fileB', '.', 'deleteOnExit', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123f', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'add1', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Induction', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'add1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'mul1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Cast', 'insertion', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'add1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'mul1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeCheckingFail1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', '123', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'add1', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'new', 'DataByteArray', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant4', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['constant4', '.', 'setType', '(', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'sub1', '=', 'new', 'LOSubtract', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOGreaterThan', 'gt1', '=', 'new', 'LOGreaterThan', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAnd', 'and1', '=', 'new', 'LOAnd', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LONot', 'not1', '=', 'new', 'LONot', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant4', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'sub1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'and1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'not1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'sub1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'sub1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'sub1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'gt1', ',', 'and1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant4', ',', 'and1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'and1', ',', 'not1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'not', 'expected', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Induction', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'INTEGER', ',', 'sub1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'gt1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'and1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'not1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Cast', 'insertion', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'INTEGER', ',', 'sub1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'gt1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMod', 'mod1', '=', 'new', 'LOMod', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOEqual', 'equal1', '=', 'new', 'LOEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'mod1', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Induction', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'mod1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'equal1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Cast', 'insertion', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'mod1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'equal1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking4', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123f', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LODivide', 'div1', '=', 'new', 'LODivide', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'div1', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Induction', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'div1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'notequal1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Cast', 'insertion', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'div1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'notequal1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeCheckingFail4', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', '123', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LODivide', 'div1', '=', 'new', 'LODivide', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'div1', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking5', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10F', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123F', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant4', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant4', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLesserThanEqual', 'lesser1', '=', 'new', 'LOLesserThanEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOBinCond', 'bincond1', '=', 'new', 'LOBinCond', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant4', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'lesser1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'bincond1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'lesser1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'lesser1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'lesser1', ',', 'bincond1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'bincond1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant4', ',', 'bincond1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Induction', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'lesser1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'bincond1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Cast', 'insertion', 'check']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'FLOAT', ',', 'lesser1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'FLOAT', ',', 'lesser1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'bincond1', '.', 'getLhsOp', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'bincond1', '.', 'getRhsOp', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking6', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', '10', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking7', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant3', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '123L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant3', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOGreaterThan', 'gt1', '=', 'new', 'LOGreaterThan', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOEqual', 'equal1', '=', 'new', 'LOEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'gt1', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant3', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeChecking8', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TupleFactory', 'tupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Object', '>', 'innerObjList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Object', '>', 'objList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '3', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '7', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '17', ')', ';']",0
TestTypeCheckingValidator.java,"['Tuple', 'innerTuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'innerObjList', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', '""', 'World', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', '42', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', 'innerTuple', ')', ';']",0
TestTypeCheckingValidator.java,"['Tuple', 'tuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'objList', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'innerFss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'castFss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'stringFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'intFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'innerObjList', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
TestTypeCheckingValidator.java,"['innerFss', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'innerTupleSchema', '=', 'new', 'Schema', '(', 'innerFss', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'innerTupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'tupleSchema', '=', 'new', 'Schema', '(', 'fss', ')', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', '+', '+', 'i', ')', '{']",0
TestTypeCheckingValidator.java,"['castFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'castSchema', '=', 'new', 'Schema', '(', 'castFss', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerTuple', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setFieldSchema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'innerTupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'tuple', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setFieldSchema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'tupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['cast1', '.', 'setFieldSchema', '(', 'new', 'FieldSchema', '(', 'null', ',', 'castSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOEqual', 'equal1', '=', 'new', 'LOEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'equal1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'TUPLE', ',', 'equal1', '.', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'TUPLE', ',', 'equal1', '.', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testExpressionTypeCheckingFail8', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TupleFactory', 'tupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Object', '>', 'innerObjList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Object', '>', 'objList', '=', 'new', 'ArrayList', '<', 'Object', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '""', '10', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '""', '3', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '7', ')', ';']",0
TestTypeCheckingValidator.java,"['innerObjList', '.', 'add', '(', '""', '17', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['Tuple', 'innerTuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'innerObjList', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', '""', 'World', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', '42', ')', ';']",0
TestTypeCheckingValidator.java,"['objList', '.', 'add', '(', 'innerTuple', ')', ';']",0
TestTypeCheckingValidator.java,"['Tuple', 'tuple', '=', 'tupleFactory', '.', 'newTuple', '(', 'objList', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'innerFss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', 'castFss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'stringFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'intFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'doubleFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['innerFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['innerFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['innerFss', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['innerFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'innerTupleSchema', '=', 'new', 'Schema', '(', 'innerFss', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['fss', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'innerTupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'tupleSchema', '=', 'new', 'Schema', '(', 'fss', ')', ';']",0
TestTypeCheckingValidator.java,"['castFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['castFss', '.', 'add', '(', 'stringFs', ')', ';']",0
TestTypeCheckingValidator.java,"['castFss', '.', 'add', '(', 'doubleFs', ')', ';']",0
TestTypeCheckingValidator.java,"['castFss', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'castSchema', '=', 'new', 'Schema', '(', 'castFss', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerTuple', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setFieldSchema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'innerTupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'tuple', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setFieldSchema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'tupleSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast1', '=', 'new', 'LOCast', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['cast1', '.', 'setFieldSchema', '(', 'new', 'FieldSchema', '(', 'null', ',', 'castSchema', ',', 'DataType', '.', 'TUPLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOEqual', 'equal1', '=', 'new', 'LOEqual', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'cast1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'cast1', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'equal1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['}', 'catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testArithmeticOpCastInsert1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20D', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Before', 'type', 'checking', 'its', 'set', 'correctly', '-', 'PIG', '-', '421']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'mul1', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'mul1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'mul1', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'DOUBLE', ',', 'mul1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testArithmeticOpCastInsert2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LONegative', 'neg1', '=', 'new', 'LONegative', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract1', '=', 'new', 'LOSubtract', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'neg1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'subtract1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'neg1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'neg1', ',', 'subtract1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'subtract1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Before', 'type', 'checking', 'its', 'set', 'correctly', '=', 'PIG', '-', '421']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'subtract1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'subtract1', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'subtract1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'subtract1', '.', 'getLhsOperand', '(', ')', 'instanceof', 'LOCast', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', '(', '(', 'LOCast', ')', 'subtract1', '.', 'getLhsOperand', '(', ')', ')', '.', 'getType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', '(', '(', 'LOCast', ')', 'subtract1', '.', 'getLhsOperand', '(', ')', ')', '.', 'getExpression', '(', ')', '=', '=', 'neg1', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testModCastInsert1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '20L', ')', ';']",0
TestTypeCheckingValidator.java,"['constant2', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMod', 'mod1', '=', 'new', 'LOMod', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'mod1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Before', 'type', 'checking', 'its', 'set', 'correctly', '=', 'PIG', '-', '421']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'mod1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'mod1', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'mod1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'mod1', '.', 'getLhsOperand', '(', ')', 'instanceof', 'LOCast', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', '(', '(', 'LOCast', ')', 'mod1', '.', 'getLhsOperand', '(', ')', ')', '.', 'getType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', '(', '(', 'LOCast', ')', 'mod1', '.', 'getLhsOperand', '(', ')', ')', '.', 'getExpression', '(', ')', '=', '=', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'case']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testRegexTypeChecking1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', '10', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', 'Regex', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LORegexp', 'regex', '=', 'new', 'LORegexp', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'regex', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'regex', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'case', 'with', 'cast', 'insertion']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testRegexTypeChecking2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'new', 'DataByteArray', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', 'Regex', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LORegexp', 'regex', '=', 'new', 'LORegexp', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'Exception', '(', '""', 'Error', 'not', 'expected', 'during', 'type', 'checking', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'type']",0
TestTypeCheckingValidator.java,"['System', '.', 'out', '.', 'println', '(', 'DataType', '.', 'findTypeName', '(', 'regex', '.', 'getType', '(', ')', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'BOOLEAN', ',', 'regex', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'wiring']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'regex', '.', 'getOperand', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cast', '.', 'getType', '(', ')', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cast', '.', 'getExpression', '(', ')', ',', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Negative', 'case']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testRegexTypeChecking3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant2', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '""', 'Regex', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LORegexp', 'regex', '=', 'new', 'LORegexp', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant2', ',', 'regex', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['/', '/', 'Expression', 'plan', 'has', 'to', 'support', 'DAG', 'before', 'this', 'can', 'be', 'used', '.']",0
TestTypeCheckingValidator.java,"['/', '/', 'Currently', 'it', 'supports', 'only', 'tree', '.']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testDiamondShapedExpressionPlan1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'constant1', '=', 'new', 'LOConst', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidator.java,"['constant1', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LONegative', 'neg1', '=', 'new', 'LONegative', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'constant1', ')', ';']",1
TestTypeCheckingValidator.java,"['LONegative', 'neg2', '=', 'new', 'LONegative', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['LODivide', 'div1', '=', 'new', 'LODivide', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'neg1', ',', 'neg2', ')', ';']",0
TestTypeCheckingValidator.java,"['LONegative', 'neg3', '=', 'new', 'LONegative', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['LONegative', 'neg4', '=', 'new', 'LONegative', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'neg3', ',', 'neg4', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'constant1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'neg1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'neg2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'neg3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'neg4', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'neg1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'constant1', ',', 'neg2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'neg1', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'neg2', ',', 'div1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'div1', ',', 'neg3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'div1', ',', 'neg3', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'neg3', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'neg4', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Before', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'UNKNOWN', ',', 'add1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'After', 'type', 'checking']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'div1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'DataType', '.', 'LONG', ',', 'add1', '.', 'getType', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'tests', 'when', 'both', 'inputs', 'need', 'casting']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionCastingInsert1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field3b', '""', ',', 'DataType', '.', 'FLOAT', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field4b', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOUnion', 'union', '=', 'new', 'LOUnion', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'outputSchema', '=', 'union', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'expectedSchema', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsListExpected', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field3b', '""', ',', 'DataType', '.', 'FLOAT', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field4b', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['expectedSchema', '=', 'new', 'Schema', '(', 'fsListExpected', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'outputSchema', ',', 'expectedSchema', ',', 'true', ',', 'false', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'the', 'inserted', 'casting', 'of', 'input1']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'wiring']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList1', '=', 'plan', '.', 'getSuccessors', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList1', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'sucList1', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'foreach', 'instanceof', 'LOForEach', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList2', '=', 'plan', '.', 'getSuccessors', '(', 'foreach', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList2', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'sucList2', '.', 'get', '(', '0', ')', 'instanceof', 'LOUnion', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'inserted', 'casting']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '0', ',', 'true', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '1', ',', 'false', ',', 'DataType', '.', 'UNKNOWN', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '2', ',', 'true', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '3', ',', 'false', ',', 'DataType', '.', 'UNKNOWN', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'the', 'inserted', 'casting', 'of', 'input2']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'wiring']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList1', '=', 'plan', '.', 'getSuccessors', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList1', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'sucList1', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'foreach', 'instanceof', 'LOForEach', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList2', '=', 'plan', '.', 'getSuccessors', '(', 'foreach', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList2', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'sucList2', '.', 'get', '(', '0', ')', 'instanceof', 'LOUnion', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'inserted', 'casting']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '0', ',', 'false', ',', 'DataType', '.', 'UNKNOWN', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '1', ',', 'true', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '2', ',', 'false', ',', 'DataType', '.', 'UNKNOWN', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '3', ',', 'false', ',', 'DataType', '.', 'UNKNOWN', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'tests', 'when', 'both', 'only', 'on', 'input', 'needs', 'casting']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionCastingInsert2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOUnion', 'union', '=', 'new', 'LOUnion', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'outputSchema', '=', 'union', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'expectedSchema', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsListExpected', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsListExpected', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['expectedSchema', '=', 'new', 'Schema', '(', 'fsListExpected', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'outputSchema', ',', 'expectedSchema', ',', 'true', ',', 'false', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'the', 'inserted', 'casting', 'of', 'input1']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'wiring']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList1', '=', 'plan', '.', 'getSuccessors', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList1', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'sucList1', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'foreach', 'instanceof', 'LOForEach', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList2', '=', 'plan', '.', 'getSuccessors', '(', 'foreach', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList2', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'sucList2', '.', 'get', '(', '0', ')', 'instanceof', 'LOUnion', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'inserted', 'casting']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '0', ',', 'true', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['checkForEachCasting', '(', 'foreach', ',', '1', ',', 'true', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'the', 'inserted', 'casting', 'of', 'input2']",0
TestTypeCheckingValidator.java,"['/', '/', 'Check', 'wiring']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'sucList1', '=', 'plan', '.', 'getSuccessors', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'sucList1', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'sucList1', '.', 'get', '(', '0', ')', 'instanceof', 'LOUnion', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'has', 'to', 'fail', 'under', 'strict', 'typing', 'mode']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'is', 'a', 'negative', 'test']",0
TestTypeCheckingValidator.java,"['/', '/', 'Two', 'inputs', 'cannot', 'be', 'merged', 'due', 'to', 'incompatible', 'schemas']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionCastingInsert3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOUnion', 'union', '=', 'new', 'LOUnion', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'inputList', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'union', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testDistinct1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'innerList', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerList', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'innerfield1', '""', ',', 'DataType', '.', 'BAG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerList', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'innerfield2', '""', ',', 'DataType', '.', 'FLOAT', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema', '=', 'new', 'Schema', '(', 'innerList', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field3', '""', ',', 'innerSchema', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field4', '""', ',', 'DataType', '.', 'BAG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['LODistinct', 'distinct1', '=', 'new', 'LODistinct', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'distinct1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'distinct1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'outputSchema', '=', 'distinct1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'load1', '.', 'getSchema', '(', ')', ',', 'outputSchema', ',', 'false', ',', 'false', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterWithInnerPlan1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['testFilterWithInnerPlan', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterWithInnerPlan2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['testFilterWithInnerPlan', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Filter', 'test', 'helper']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterWithInnerPlan', '(', 'byte', 'field1Type', ',', 'byte', 'field2Type', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'field1Type', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'field2Type', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'inner', 'plan']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project1', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project2', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project2', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOGreaterThan', 'gt1', '=', 'new', 'LOGreaterThan', '(', 'innerPlan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'project1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'project2', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'connect', '(', 'project1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'connect', '(', 'project2', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'filter']",0
TestTypeCheckingValidator.java,"['LOFilter', 'filter1', '=', 'new', 'LOFilter', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlan', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'filter1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'filter1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'filter1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'field1Type', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'field2Type', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Negative', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterWithInnerPlan3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'inner', 'plan']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project1', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project2', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project2', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'project1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'project2', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'connect', '(', 'project1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan', '.', 'connect', '(', 'project2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'filter']",0
TestTypeCheckingValidator.java,"['LOFilter', 'filter1', '=', 'new', 'LOFilter', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlan', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'filter1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'filter1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'Exception', 't', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Simple', 'project', 'sort', 'columns']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSortWithInnerPlan1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'project', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project1', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'project', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project2', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'ASC', 'flags']",0
TestTypeCheckingValidator.java,"['List', '<', 'Boolean', '>', 'ascList', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Sort']",0
TestTypeCheckingValidator.java,"['LOSort', 'sort1', '=', 'new', 'LOSort', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlans', ',', 'ascList', ',', 'null', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'sort1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'outer']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'inner']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan1', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan2', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'expression', 'sort', 'columns']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSortWithInnerPlan2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26L', ')', ';']",0
TestTypeCheckingValidator.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMod', 'mod21', '=', 'new', 'LOMod', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'ASC', 'flags']",0
TestTypeCheckingValidator.java,"['List', '<', 'Boolean', '>', 'ascList', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Sort']",0
TestTypeCheckingValidator.java,"['LOSort', 'sort1', '=', 'new', 'LOSort', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlans', ',', 'ascList', ',', 'null', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'sort1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'outer']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'inner']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan1', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan2', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Negative', 'test', 'on', 'expression', 'sort', 'columns']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSortWithInnerPlan3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '""', '26', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMod', 'mod21', '=', 'new', 'LOMod', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'ASC', 'flags']",0
TestTypeCheckingValidator.java,"['List', '<', 'Boolean', '>', 'ascList', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Sort']",0
TestTypeCheckingValidator.java,"['LOSort', 'sort1', '=', 'new', 'LOSort', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlans', ',', 'ascList', ',', 'null', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'sort1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'Exception', 't', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'expression', 'cond', 'columns']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitWithInnerPlan1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLesserThanEqual', 'lesser21', '=', 'new', 'LOLesserThanEqual', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'lesser21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'lesser21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'lesser21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'split']",0
TestTypeCheckingValidator.java,"['LOSplit', 'split1', '=', 'new', 'LOSplit', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'output1']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutput1', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '0', ',', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['split1', '.', 'addOutput', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'output2']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutput2', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '1', ',', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['split1', '.', 'addOutput', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'split1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'split1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'split', 'itself']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema1', '=', 'split1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'outer']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema1', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema1', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'split', 'output', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema1', '=', 'splitOutput1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'outer']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema1', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema1', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'split', 'output', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema2', '=', 'splitOutput2', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'outer']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema2', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema2', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'inner', 'conditions', ':', 'all', 'have', 'to', 'be', 'boolean']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan1', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan2', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Negative', 'test', ':', 'expression', 'cond', 'columns', 'not', 'evaluate', 'to', 'boolean']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitWithInnerPlan2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract21', '=', 'new', 'LOSubtract', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'subtract21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'subtract21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'subtract21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'split']",0
TestTypeCheckingValidator.java,"['LOSplit', 'split1', '=', 'new', 'LOSplit', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'output1']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutput1', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '0', ',', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['split1', '.', 'addOutput', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'output2']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutput2', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '1', ',', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['split1', '.', 'addOutput', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'split1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'split1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'Exception', 't', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Error', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCOGroupWithInnerPlan1GroupByTuple1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan11', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project111', '=', 'new', 'LOProject', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project111', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const111', '=', 'new', 'LOConst', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidator.java,"['const111', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract111', '=', 'new', 'LOSubtract', '(', 'innerPlan11', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'project111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'const111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'project111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'const111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2', 'of', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan21', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project211', '=', 'new', 'LOProject', '(', 'innerPlan21', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project211', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project212', '=', 'new', 'LOProject', '(', 'innerPlan21', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project212', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add211', '=', 'new', 'LOAdd', '(', 'innerPlan21', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan21', '.', 'add', '(', 'project211', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan21', '.', 'add', '(', 'project212', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan21', '.', 'add', '(', 'add211', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan21', '.', 'connect', '(', 'project211', ',', 'add211', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan21', '.', 'connect', '(', 'project212', ',', 'add211', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan12', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project121', '=', 'new', 'LOProject', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', 'load2', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project121', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const121', '=', 'new', 'LOConst', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const121', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract121', '=', 'new', 'LOSubtract', '(', 'innerPlan12', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'project121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'const121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'connect', '(', 'project121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'connect', '(', 'const121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2', 'of', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan22', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const122', '=', 'new', 'LOConst', '(', 'innerPlan22', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const122', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan22', '.', 'add', '(', 'const122', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'Cogroup']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputs', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'maps']",0
TestTypeCheckingValidator.java,"['=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan11', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan21', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan12', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan22', ')', ';']",0
TestTypeCheckingValidator.java,"['boolean', '[', ']', 'isInner', '=', 'new', 'boolean', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestTypeCheckingValidator.java,"['isInner', '[', 'i', ']', '=', 'false', ';']",0
TestTypeCheckingValidator.java,"['LOCogroup', 'cogroup1', '=', 'new', 'LOCogroup', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['isInner', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'cogroup1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Tuple', 'group', 'column']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'schema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'schema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema1']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema1', '=', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema2']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema2', '=', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'group', 'by', 'col', 'end', 'result']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan11', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan21', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan12', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan22', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCOGroupWithInnerPlan1GroupByAtom1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan11', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project111', '=', 'new', 'LOProject', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project111', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const111', '=', 'new', 'LOConst', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidator.java,"['const111', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract111', '=', 'new', 'LOSubtract', '(', 'innerPlan11', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'project111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'const111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'project111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'const111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan12', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project121', '=', 'new', 'LOProject', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', 'load2', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project121', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const121', '=', 'new', 'LOConst', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const121', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract121', '=', 'new', 'LOSubtract', '(', 'innerPlan12', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'project121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'const121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'connect', '(', 'project121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'connect', '(', 'const121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'Cogroup']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputs', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'maps']",0
TestTypeCheckingValidator.java,"['=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan11', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan12', ')', ';']",0
TestTypeCheckingValidator.java,"['boolean', '[', ']', 'isInner', '=', 'new', 'boolean', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestTypeCheckingValidator.java,"['isInner', '[', 'i', ']', '=', 'false', ';']",0
TestTypeCheckingValidator.java,"['LOCogroup', 'cogroup1', '=', 'new', 'LOCogroup', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['isInner', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'cogroup1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Tuple', 'group', 'column']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema1']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema1', '=', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema2']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema2', '=', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'group', 'by', 'col', 'end', 'result']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan11', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan12', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCOGroupWithInnerPlan1GroupByIncompatibleAtom1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidator.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema2', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList2', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1b', '""', ',', 'DataType', '.', 'DOUBLE', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList2', '.', 'add', '(', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema2', '=', 'new', 'Schema', '(', 'fsList2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'inputSchema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan11', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project111', '=', 'new', 'LOProject', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project111', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const111', '=', 'new', 'LOConst', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidator.java,"['const111', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract111', '=', 'new', 'LOSubtract', '(', 'innerPlan11', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'project111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'const111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'add', '(', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'project111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan11', '.', 'connect', '(', 'const111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan12', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const121', '=', 'new', 'LOConst', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidator.java,"['const121', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan12', '.', 'add', '(', 'const121', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'Cogroup']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputs', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputs', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'maps']",0
TestTypeCheckingValidator.java,"['=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan11', ')', ';']",0
TestTypeCheckingValidator.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan12', ')', ';']",0
TestTypeCheckingValidator.java,"['boolean', '[', ']', 'isInner', '=', 'new', 'boolean', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestTypeCheckingValidator.java,"['isInner', '[', 'i', ']', '=', 'false', ';']",0
TestTypeCheckingValidator.java,"['LOCogroup', 'cogroup1', '=', 'new', 'LOCogroup', '(', 'plan', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['isInner', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'cogroup1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Tuple', 'group', 'column']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema1']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema1', '=', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema1', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'schema2']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema2', '=', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerSchema2', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'group', 'by', 'col', 'end', 'result']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan11', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'innerPlan12', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testForEachGenerate1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const11', '=', 'new', 'LOConst', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidator.java,"['const11', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract11', '=', 'new', 'LOSubtract', '(', 'innerPlan1', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'const11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'const11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project22', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project22', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project22', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'plans']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'flatten', 'flags']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'LOForEach']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach1', '=', 'new', 'LOForEach', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'generatePlans', ',', 'flattens', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'foreach1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Negative', 'test']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testForEachGenerate2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOConst', 'const11', '=', 'new', 'LOConst', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', '""', '26F', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['const11', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSubtract', 'subtract11', '=', 'new', 'LOSubtract', '(', 'innerPlan1', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'const11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'connect', '(', 'const11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project22', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project22', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project22', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'plans']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'flatten', 'flags']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'LOForEach']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach1', '=', 'new', 'LOForEach', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'generatePlans', ',', 'flattens', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'one', 'does', 'project', 'bag', 'in', 'inner', 'plans']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testForEachGenerate3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['String', '[', ']', 'aliases', '=', 'new', 'String', '[', ']', '{', '""', 'a', '""', ',', '""', 'b', '""', ',', '""', 'c', '""', '}', ';']",0
TestTypeCheckingValidator.java,"['byte', '[', ']', 'types', '=', 'new', 'byte', '[', ']', '{', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'BYTEARRAY', '}', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema1', '=', 'genFlatSchema', '(', 'aliases', ',', 'types', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field3a', '""', ',', 'innerSchema1', ',', 'DataType', '.', 'BAG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'Integer', '>', 'projections1', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['projections1', '.', 'add', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['projections1', '.', 'add', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'project11', ',', 'projections1', ')', ';']",0
TestTypeCheckingValidator.java,"['project12', '.', 'setSentinel', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",1
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project22', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",1
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan1', ',']",1
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidator.java,"['project22', ')', ';']",1
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project22', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project22', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'plans']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'flatten', 'flags']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'LOGenerate']",0
TestTypeCheckingValidator.java,"['LOGenerate', 'generate1', '=', 'new', 'LOGenerate', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'generatePlans', ',', 'flattens', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '.', 'add', '(', 'generate1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'LOForEach']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach1', '=', 'new', 'LOForEach', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'foreachPlan', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'foreach1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'inner', 'bag', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'bagSchema', '=', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'schema', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'bagSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'bagSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidator.java,"['/', '/', 'This', 'one', 'does', 'project', 'bag', 'in', 'inner', 'plans', 'with', 'flatten']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testForEachGenerate4', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['String', '[', ']', 'aliases', '=', 'new', 'String', '[', ']', '{', '""', 'a', '""', ',', '""', 'b', '""', ',', '""', 'c', '""', '}', ';']",0
TestTypeCheckingValidator.java,"['byte', '[', ']', 'types', '=', 'new', 'byte', '[', ']', '{', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'BYTEARRAY', '}', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'innerSchema1', '=', 'genFlatSchema', '(', 'aliases', ',', 'types', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'LONG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field3a', '""', ',', 'innerSchema1', ',', 'DataType', '.', 'BAG', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'Integer', '>', 'projections1', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['projections1', '.', 'add', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['projections1', '.', 'add', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'project11', ',', 'projections1', ')', ';']",0
TestTypeCheckingValidator.java,"['project12', '.', 'setSentinel', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOProject', 'project22', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidator.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'project22', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['innerPlan2', '.', 'connect', '(', 'project22', ',', 'add21', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'plans']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidator.java,"['generatePlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'List', 'of', 'flatten', 'flags']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidator.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'Create', 'LOForEach']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach1', '=', 'new', 'LOForEach', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'generatePlans', ',', 'flattens', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'foreach1', ')', ';']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidator.java,"['Schema', 'endResultSchema', '=', 'foreach1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCross1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['String', '[', ']', 'aliases1', '=', 'new', 'String', '[', ']', '{', '""', 'a', '""', ',', '""', 'b', '""', ',', '""', 'c', '""', '}', ';']",0
TestTypeCheckingValidator.java,"['byte', '[', ']', 'types1', '=', 'new', 'byte', '[', ']', '{', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'BYTEARRAY', '}', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'schema1', '=', 'genFlatSchema', '(', 'aliases1', ',', 'types1', ')', ';']",0
TestTypeCheckingValidator.java,"['String', '[', ']', 'aliases2', '=', 'new', 'String', '[', ']', '{', '""', 'e', '""', ',', '""', 'f', '""', '}', ';']",0
TestTypeCheckingValidator.java,"['byte', '[', ']', 'types2', '=', 'new', 'byte', '[', ']', '{', 'DataType', '.', 'FLOAT', ',', 'DataType', '.', 'DOUBLE', '}', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'schema2', '=', 'genFlatSchema', '(', 'aliases2', ',', 'types2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidator.java,"['load1', '.', 'setEnforcedSchema', '(', 'schema1', ')', ';']",0
TestTypeCheckingValidator.java,"['load2', '.', 'setEnforcedSchema', '(', 'schema2', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidator.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCross', 'cross', '=', 'new', 'LOCross', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'add', '(', 'cross', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cross', ')', ';']",0
TestTypeCheckingValidator.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cross', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'size', '(', ')', ',', '5', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'getField', '(', '3', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', '.', 'getField', '(', '4', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testLineage1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '=', '=', 'null', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testLineage1NoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testLineage2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'a', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineage2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineage2NoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineageStar', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'name', ',', 'age', ',', 'gpa', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', '+', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testGroupLineageStarNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'flatten', '(', 'group', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '0', '+', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupMapLookupLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'field1', '#', ""'"", 'key', ""'"", '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMapLookup', 'map', '=', '(', 'LOMapLookup', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'map', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStarLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStarLineageFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', '+', '1', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStarLineage1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'group', ')', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', '$', '0', '+', '1', ',', 'a', ':', ':', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStarLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStarLineageNoSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '*', ',', 'b', 'by', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', '+', '1', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupMultiColumnProjectLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'a', '.', '(', 'field1', ',', 'field2', ')', ',', 'b', '.', '(', 'field4', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'flatten', '(', '$', '1', ')', ',', 'flatten', '(', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupProjectStarLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupProjectStarLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupProjectStarLineageMixSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '*', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'd', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'group', ',', 'field1', '+', '1', ',', '$', '4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'not', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupLineageFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', '+', '1', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'The', 'following', 'test', 'is', 'commented', 'out', 'with', 'PIG', '-', '505']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupUDFLineageFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'flatten', '(', 'DIFF', '(', 'a', ',', 'b', ')', ')', 'as', 'diff_a_b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'diff_a_b', '+', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupLineage2NoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'here', 'the', 'type', 'checker', 'will', 'insert', 'a', 'cast', 'for', 'the', 'union', ',', 'converting', 'the', 'column', 'field2', 'into', 'a', 'float']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'field2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '=', '=', 'null', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'field1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageNoSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageDifferentSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'here', 'the', 'type', 'checker', 'will', 'insert', 'a', 'cast', 'for', 'the', 'union', ',', 'converting', 'the', 'column', 'field2', 'into', 'a', 'float']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ',', 'field7', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageDifferentSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ',', 'field7', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageMixSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'here', 'the', 'type', 'checker', 'will', 'insert', 'a', 'cast', 'for', 'the', 'union', ',', 'converting', 'the', 'column', 'field2', 'into', 'a', 'float']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testUnionLineageMixSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'field1', '>', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'filterPlan', '=', 'filter', '.', 'getComparisonPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'filterPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '0', '>', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'filterPlan', '=', 'filter', '.', 'getComparisonPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'filterPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterLineage1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', 'field2', '>', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testFilterLineage1NoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '0', '>', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupFilterLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'filter', 'd', 'by', 'field4', '>', '5', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupFilterLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'filter', 'd', 'by', '$', '2', '>', '5', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'field1', '>', '1', '.', '0', ',', 'c', 'if', 'field1', '<', '=', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutputB', '=', '(', 'LOSplitOutput', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'bPlan', '=', 'splitOutputB', '.', 'getConditionPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'bPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'bPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'bPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutputC', '=', '(', 'LOSplitOutput', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'cPlan', '=', 'splitOutputC', '.', 'getConditionPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'cPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'cPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'cPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', '$', '0', '>', '1', '.', '0', ',', 'c', 'if', '$', '1', '<', '=', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutputB', '=', '(', 'LOSplitOutput', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'bPlan', '=', 'splitOutputB', '.', 'getConditionPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'bPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'bPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'bPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['LOSplitOutput', 'splitOutputC', '=', '(', 'LOSplitOutput', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'cPlan', '=', 'splitOutputC', '.', 'getConditionPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'cPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'cPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'cPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitLineage1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'field2', '>', '1', '.', '0', ',', 'c', 'if', 'field2', '<', '=', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSplitLineage1NoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', '$', '0', '>', '1', '.', '0', ',', 'c', 'if', '$', '1', '<', '=', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSplitLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'split', 'd', 'into', 'e', 'if', 'field4', '>', ""'"", 'm', ""'"", ',', 'f', 'if', 'field6', '>', ""'"", 'm', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSplitLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'split', 'd', 'into', 'e', 'if', '$', '1', '>', ""'"", 'm', ""'"", ',', 'f', 'if', '$', '1', '>', ""'"", 'm', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testDistinctLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testDistinctLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupDistinctLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'distinct', 'd', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupDistinctLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'distinct', 'd', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSortLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testSortLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSortLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', 'field4', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSortLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', '$', '2', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSortStarLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', '*', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupSortStarLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', '*', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCrossLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCrossLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCrossLineageNoSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCrossLineageMixSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'here', 'the', 'type', 'checker', 'will', 'insert', 'a', 'cast', 'for', 'the', 'union', ',', 'converting', 'the', 'column', 'field2', 'into', 'a', 'float']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCrossLineageMixSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cross', 'a', ',', 'b', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testJoinLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'join', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testJoinLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'join', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testJoinLineageNoSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'this', 'test', 'case', 'should', 'change', 'when', 'we', 'decide', 'on', 'what', 'flattening', 'a', 'tuple', 'or', 'bag']",0
TestTypeCheckingValidator.java,"['/', '/', 'with', 'null', 'schema', 'results', 'in', 'a', 'foreach', 'flatten', 'and', 'hence', 'a', 'join']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'join', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '1', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testJoinLineageMixSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'join', 'a', 'by', 'field1', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testJoinLineageMixSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'this', 'test', 'case', 'should', 'change', 'when', 'we', 'decide', 'on', 'what', 'flattening', 'a', 'tuple', 'or', 'bag']",0
TestTypeCheckingValidator.java,"['/', '/', 'with', 'null', 'schema', 'results', 'in', 'a', 'foreach', 'flatten', 'and', 'hence', 'a', 'join']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'join', 'a', 'by', 'field1', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', '$', '3', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'good']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testLimitLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'limit', 'a', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'field1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testLimitLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'limit', 'a', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupLimitLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'limit', 'd', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupLimitLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'limit', 'd', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupTopKLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', 'field1', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'limit', 'e', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupTopKLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'using', 'PigStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'order', 'd', 'by', '$', '2', 'desc', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'f', '=', 'limit', 'e', '100', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'g', '=', 'foreach', 'f', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testStreamingLineage1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'stream', 'a', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '1', '+', '1', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testStreamingLineage2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'stream', 'a', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'f1', ',', 'f2', ':', 'float', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'f1', '+', '1', '.', '0', ',', 'f2', '+', '4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', 'instanceof', 'LOAdd', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStreamingLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'stream', 'a', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'field4', ',', 'field5', ',', 'field6', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'field1', ',', 'b', 'by', 'field4', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'field1', '+', '1', ',', 'field4', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testCogroupStreamingLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'stream', 'a', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', '$', '0', ',', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', '$', '1', '+', '1', ',', '$', '2', '+', '2', '.', '0', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '2', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testMapLookupLineage', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', 'as', '(', 'field1', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'field1', '#', ""'"", 'key1', ""'"", 'as', 'map1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'map1', '#', ""'"", 'key2', ""'"", '+', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMapLookup', 'map', '=', '(', 'LOMapLookup', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'map', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testMapLookupLineageNoSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'using', 'BinStorage', '(', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', '#', ""'"", 'key1', ""'"", ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '0', '#', ""'"", 'key2', ""'"", '+', '1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOMapLookup', 'map', '=', '(', 'LOMapLookup', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'map', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'BinStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testMapLookupLineage2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 's', ',', 'm', ',', 'l', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 's', '#', ""'"", 'x', ""'"", 'as', 'f1', ',', 's', '#', ""'"", 'y', ""'"", 'as', 'f2', ',', 's', '#', ""'"", 'z', ""'"", 'as', 'f3', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'group', 'b', 'by', 'f1', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', '{', 'fil', '=', 'filter', 'b', 'by', 'f2', '=', '=', '1', ';', 'generate', 'flatten', '(', 'group', ')', ',', 'SUM', '(', 'fil', '.', 'f3', ')', ';', '}', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'foreachPlan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalOperator', 'exOp', '=', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'foreachPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'filterPlan', '=', 'filter', '.', 'getComparisonPlan', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', '!', '(', 'exOp', 'instanceof', 'LOProject', ')', ')', 'exOp', '=', 'filterPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['LOCast', 'cast', '=', '(', 'LOCast', ')', 'filterPlan', '.', 'getSuccessors', '(', 'exOp', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testMapLookupLineage3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 's', ',', 'm', ',', 'l', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 's', '#', ""'"", 'src_spaceid', ""'"", 'AS', 'vspaceid', ',', 'flatten', '(', 'l', '#', ""'"", 'viewinfo', ""'"", ')', 'as', 'viewinfo', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '(', 'chararray', ')', 'vspaceid', '#', ""'"", 'foo', ""'"", ',', '(', 'chararray', ')', 'viewinfo', '#', ""'"", 'pos', ""'"", 'as', 'position', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['CastFinder', 'cf', '=', 'new', 'CastFinder', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['cf', '.', 'visit', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'LOCast', '>', 'casts', '=', 'cf', '.', 'casts', ';']",0
TestTypeCheckingValidator.java,"['for', '(', 'LOCast', 'cast', ':', 'casts', ')', '{']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'cast', '.', 'getLoadFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '.', 'startsWith', '(', '""', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', '""', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['class', 'CastFinder', 'extends', 'LOVisitor', '{']",0
TestTypeCheckingValidator.java,"['List', '<', 'LOCast', '>', 'casts', '=', 'new', 'ArrayList', '<', 'LOCast', '>', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '*', '*']",1
TestTypeCheckingValidator.java,"['public', 'CastFinder', '(', 'LogicalPlan', 'lp', ')', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'constructor', 'stub']",0
TestTypeCheckingValidator.java,"['super', '(', 'lp', ',', 'new', 'DepthFirstWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'lp', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestTypeCheckingValidator.java,"['protected', 'void', 'visit', '(', 'LOCast', 'cast', ')', 'throws', 'VisitorException', '{']",0
TestTypeCheckingValidator.java,"['casts', '.', 'add', '(', 'cast', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testBincond', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ',', 'gpa', ':', 'float', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'name', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '(', 'IsEmpty', '(', 'a', ')', '?', '""', '+', 'TestBinCondFieldSchema', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ':', 'a', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Did', 'not', 'expect', 'an', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'charFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'intFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'floatFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'bagSchema', '=', 'new', 'Schema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'charFs', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'floatFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'bagFs', '=', 'null', ';']",0
TestTypeCheckingValidator.java,"['bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'bagSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TestTypeCheckingValidator.java,"['fail', '(', '""', 'Did', 'not', 'expect', 'an', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'expectedSchema', '=', 'new', 'Schema', '(', 'bagFs', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'void', 'testBinCondForOuterJoin', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'LOAD', ""'"", 'student_data', ""'"", 'AS', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ',', 'gpa', ':', 'float', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'LOAD', ""'"", 'voter_data', ""'"", 'AS', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ',', 'registration', ':', 'chararray', ',', 'contributions', ':', 'float', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'COGROUP', 'a', 'BY', 'name', ',', 'b', 'BY', 'name', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'FOREACH', 'c', 'GENERATE', 'group', ',', 'flatten', '(', '(', 'not', 'IsEmpty', '(', 'a', ')', '?', 'a', ':', '(', 'bag', '{', 'tuple', '(', 'chararray', ',', 'int', ',', 'float', ')', '}', ')', '{', '(', 'null', ',', 'null', ',', 'null', ')', '}', ')', ')', ',', 'flatten', '(', '(', 'not', 'IsEmpty', '(', 'b', ')', '?', 'b', ':', '(', 'bag', '{', 'tuple', '(', 'chararray', ',', 'int', ',', 'chararray', ',', 'float', ')', '}', ')', '{', '(', 'null', ',', 'null', ',', 'null', ',', 'null', ')', '}', ')', ')', ';', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', 'validate']",0
TestTypeCheckingValidator.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidator.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidator.java,"['planTester', '.', 'printPlan', '(', 'plan', ',', 'TypeCheckingTestUtil', '.', 'getCurrentMethodName', '(', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidator.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidator.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestTypeCheckingValidator.java,"['String', 'expectedSchemaString', '=', '""', 'mygroup', ':', 'chararray', ',', 'A', ':', ':', 'name', ':', 'chararray', ',', 'A', ':', ':', 'age', ':', 'int', ',', 'A', ':', ':', 'gpa', ':', 'float', ',', 'B', ':', ':', 'name', ':', 'chararray', ',', 'B', ':', ':', 'age', ':', 'int', ',', 'B', ':', ':', 'registration', ':', 'chararray', ',', 'B', ':', ':', 'contributions', ':', 'float', '""', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'expectedSchema', '=', 'Util', '.', 'getSchemaFromString', '(', 'expectedSchemaString', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'Schema', '.', 'equals', '(', 'foreach', '.', 'getSchema', '(', ')', ',', 'expectedSchema', ',', 'false', ',', 'true', ')', ')', ';']",0
TestTypeCheckingValidator.java,"['public', 'static', 'class', 'TestBinCondFieldSchema', 'extends', 'EvalFunc', '<', 'DataBag', '>', '{']",0
TestTypeCheckingValidator.java,"['/', '/', 'no', '-', 'op', 'exec', 'method']",0
TestTypeCheckingValidator.java,"['public', 'DataBag', 'exec', '(', 'Tuple', 'input', ')', '{']",0
TestTypeCheckingValidator.java,"['return', 'null', ';']",0
TestTypeCheckingValidator.java,"['public', 'Schema', 'outputSchema', '(', 'Schema', 'input', ')', '{']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'charFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'intFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'floatFs', '=', 'new', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', 'bagSchema', '=', 'new', 'Schema', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'charFs', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'intFs', ')', ';']",0
TestTypeCheckingValidator.java,"['bagSchema', '.', 'add', '(', 'floatFs', ')', ';']",0
TestTypeCheckingValidator.java,"['Schema', '.', 'FieldSchema', 'bagFs', ';']",0
TestTypeCheckingValidator.java,"['bagFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'bagSchema', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidator.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TestTypeCheckingValidator.java,"['return', 'null', ';']",0
TestTypeCheckingValidator.java,"['return', 'new', 'Schema', '(', 'bagFs', ')', ';']",0
TestTypeCheckingValidator.java,"['/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', 'Helper', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/']",0
TestTypeCheckingValidator.java,"['private', 'void', 'checkForEachCasting', '(', 'LOForEach', 'foreach', ',', 'int', 'idx', ',', 'boolean', 'isCast', ',', 'byte', 'toType', ')', '{']",0
TestTypeCheckingValidator.java,"['LogicalPlan', 'plan', '=', 'foreach', '.', 'getForEachPlans', '(', ')', '.', 'get', '(', 'idx', ')', ';']",0
TestTypeCheckingValidator.java,"['if', '(', 'isCast', ')', '{']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'leaveList', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'leaveList', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'leaveList', '.', 'get', '(', '0', ')', 'instanceof', 'LOCast', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'leaveList', '.', 'get', '(', '0', ')', '.', 'getType', '(', ')', '=', '=', 'toType', ')', ';']",0
TestTypeCheckingValidator.java,"['List', '<', 'LogicalOperator', '>', 'leaveList', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestTypeCheckingValidator.java,"['assertEquals', '(', 'leaveList', '.', 'size', '(', ')', ',', '1', ')', ';']",0
TestTypeCheckingValidator.java,"['assertTrue', '(', 'leaveList', '.', 'get', '(', '0', ')', 'instanceof', 'LOProject', ')', ';']",0
LogicalPlanCloneHelper.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LogicalPlanCloneHelper.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
LogicalPlanCloneHelper.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LogicalPlanCloneHelper.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LogicalPlanCloneHelper.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LogicalPlanCloneHelper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
LogicalPlanCloneHelper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DependencyOrderWalker', ';']",0
LogicalPlanCloneHelper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LogicalPlanCloneHelper.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LogicalPlanCloneHelper.java,"['public', 'class', 'LogicalPlanCloneHelper', 'extends', 'LOVisitor', '{']",0
LogicalPlanCloneHelper.java,"['public', 'static', 'Map', '<', 'LogicalOperator', ',', 'LogicalOperator', '>', 'mOpToCloneMap', ';']",0
LogicalPlanCloneHelper.java,"['private', 'LogicalPlan', 'mOriginalPlan', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'LogicalPlanCloneHelper', '(', 'LogicalPlan', 'plan', ')', 'throws', 'CloneNotSupportedException', '{']",0
LogicalPlanCloneHelper.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'plan', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['mOriginalPlan', '=', 'plan', ';']",0
LogicalPlanCloneHelper.java,"['/', '/', 'LOVisitor', 'does', 'not', 'have', 'a', 'default', 'constructor', 'and', 'super', 'needs', 'to', 'be', 'the', 'first']",0
LogicalPlanCloneHelper.java,"['/', '/', 'statement', 'in', 'the', 'constructor', '.', 'As', 'a', 'result', ',', 'mPlan', 'and', 'mCurrentWalker', 'are', 'being']",0
LogicalPlanCloneHelper.java,"['/', '/', 're', '-', 'initialized', 'here']",0
LogicalPlanCloneHelper.java,"['mPlan', '=', 'plan', '.', 'clone', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['mCurrentWalker', '=', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'mPlan', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'LogicalPlanCloneHelper', '(', 'LogicalPlan', 'plan', ',']",0
LogicalPlanCloneHelper.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalOperator', '>', 'origCloneMap', ')', 'throws', 'CloneNotSupportedException', '{']",0
LogicalPlanCloneHelper.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'plan', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['mOpToCloneMap', '=', 'origCloneMap', ';']",0
LogicalPlanCloneHelper.java,"['mOriginalPlan', '=', 'plan', ';']",0
LogicalPlanCloneHelper.java,"['/', '/', 'LOVisitor', 'does', 'not', 'have', 'a', 'default', 'constructor', 'and', 'super', 'needs', 'to', 'be', 'the', 'first']",0
LogicalPlanCloneHelper.java,"['/', '/', 'statement', 'in', 'the', 'constructor', '.', 'As', 'a', 'result', ',', 'mPlan', 'and', 'mCurrentWalker', 'are', 'being']",0
LogicalPlanCloneHelper.java,"['/', '/', 're', '-', 'initialized', 'here']",0
LogicalPlanCloneHelper.java,"['mPlan', '=', 'plan', '.', 'clone', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['mCurrentWalker', '=', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'mPlan', ')', ';']",0
LogicalPlanCloneHelper.java,"['public', 'LogicalPlan', 'getClonedPlan', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LogicalPlanCloneHelper.java,"['/', '/', 'set', 'the', '""', 'mPlan', '""', 'member', 'of', 'all', 'the', 'Logical', 'operators']",0
LogicalPlanCloneHelper.java,"['/', '/', 'in', 'the', 'cloned', 'plan', 'to', 'the', 'cloned', 'plan']",0
LogicalPlanCloneHelper.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'mPlan', ')', ';']",0
LogicalPlanCloneHelper.java,"['ps', '.', 'visit', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '/', 'patch', 'up', 'the', 'connections']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['}', 'catch', '(', 'VisitorException', 'e', ')', '{']",0
LogicalPlanCloneHelper.java,"['CloneNotSupportedException', 'cnse', '=', 'new', 'CloneNotSupportedException', '(', '""', 'Unable', 'to', 'set', 'plan', 'correctly', 'during', 'cloning', '""', ')', ';']",0
LogicalPlanCloneHelper.java,"['cnse', '.', 'initCause', '(', 'e', ')', ';']",0
LogicalPlanCloneHelper.java,"['throw', 'cnse', ';']",0
LogicalPlanCloneHelper.java,"['return', 'mPlan', ';']",0
LogicalPlanCloneHelper.java,"['public', 'static', 'void', 'resetState', '(', ')', '{']",0
LogicalPlanCloneHelper.java,"['mOpToCloneMap', '.', 'clear', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'BinaryExpressionOperator', 'binOp', ')', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOAdd', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOAnd', 'binOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'binOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOBinCond', 'binCond', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOCast', 'cast', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOCogroup', 'cg', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlans', '=', 'cg', '.', 'getGroupByPlans', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlansClone', '=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['for', '(', 'LogicalOperator', 'cgInput', ':', 'groupByPlans', '.', 'keySet', '(', ')', ')', '{']",0
LogicalPlanCloneHelper.java,"['LogicalOperator', 'cgInputClone', '=', 'mOpToCloneMap', '.', 'get', '(', 'cgInput', ')', ';']",0
LogicalPlanCloneHelper.java,"['if', '(', 'cgInputClone', '!', '=', 'null', ')', '{']",0
LogicalPlanCloneHelper.java,"['groupByPlansClone', '.', 'put', '(', 'cgInputClone', ',', 'groupByPlans', '.', 'get', '(', 'cgInput', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['groupByPlansClone', '.', 'put', '(', 'cgInput', ',', 'groupByPlans', '.', 'get', '(', 'cgInput', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['cg', '.', 'setGroupByPlans', '(', 'groupByPlansClone', ')', ';']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'cg', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOConst', 'constant', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOCross', 'cs', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'cs', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LODistinct', 'dt', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'dt', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LODivide', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOFilter', 'filter', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'filter', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOForEach', 'forEach', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'forEach', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOGenerate', 'g', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'g', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LogicalOperator', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOGreaterThan', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOGreaterThanEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOIsNull', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'UnaryExpressionOperator', ')', 'uniOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOLesserThan', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOLesserThanEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOLimit', 'limOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'limOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOLoad', 'load', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '/', 'LOLoad', 'cloning', 'is', 'not', 'implemented']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOMapLookup', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOMod', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOMultiply', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LONegative', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'UnaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LONot', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'UnaryExpressionOperator', ')', 'uniOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LONotEqual', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOOr', 'binOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'binOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOProject', 'project', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['LogicalOperator', 'projectInputClone', '=', 'mOpToCloneMap', '.', 'get', '(', 'project', '.', 'getExpression', '(', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['if', '(', 'projectInputClone', '!', '=', 'null', ')', '{']",0
LogicalPlanCloneHelper.java,"['project', '.', 'setExpression', '(', 'projectInputClone', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LORegexp', 'binOp', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'binOp', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOSort', 's', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 's', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOSplit', 'split', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['List', '<', 'LogicalOperator', '>', 'splitOutputs', '=', 'split', '.', 'getOutputs', '(', ')', ';']",0
LogicalPlanCloneHelper.java,"['ArrayList', '<', 'LogicalOperator', '>', 'splitOutputClones', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', 'splitOutputs', '.', 'size', '(', ')', ')', ';']",0
LogicalPlanCloneHelper.java,"['for', '(', 'LogicalOperator', 'splitOutput', ':', 'splitOutputs', ')', '{']",0
LogicalPlanCloneHelper.java,"['LogicalOperator', 'splitOutputClone', '=', 'mOpToCloneMap', '.', 'get', '(', 'splitOutput', ')', ';']",0
LogicalPlanCloneHelper.java,"['if', '(', 'splitOutputClone', '!', '=', 'null', ')', '{']",0
LogicalPlanCloneHelper.java,"['splitOutputClones', '.', 'add', '(', 'splitOutputClone', ')', ';']",0
LogicalPlanCloneHelper.java,"['}', 'else', '{']",0
LogicalPlanCloneHelper.java,"['}', 'else', '{']",0
LogicalPlanCloneHelper.java,"['splitOutputClones', '.', 'add', '(', 'splitOutput', ')', ';']",0
LogicalPlanCloneHelper.java,"['split', '.', 'setOutputs', '(', 'splitOutputClones', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOSplitOutput', 'sop', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'sop', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOStore', 'store', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '/', 'TODO']",0
LogicalPlanCloneHelper.java,"['/', '/', 'TODO']",0
LogicalPlanCloneHelper.java,"['/', '/', 'LOStore', 'cloning', 'is', 'not', 'implemented']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOStream', 'stream', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '/', 'TODO']",0
LogicalPlanCloneHelper.java,"['/', '/', 'LOStream', 'cloning', 'is', 'not', 'implemented']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['public', 'void', 'visit', '(', 'LOSubtract', 'op', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['this', '.', 'visit', '(', '(', 'BinaryExpressionOperator', ')', 'op', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOUnion', 'u', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['super', '.', 'visit', '(', 'u', ')', ';']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
LogicalPlanCloneHelper.java,"['/', '*', '*']",0
LogicalPlanCloneHelper.java,"['protected', 'void', 'visit', '(', 'UnaryExpressionOperator', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
RuleMatcher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'Queue', ';']",0
RuleMatcher.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'RuleOperator', '.', 'NodeType', ';']",0
RuleMatcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
RuleMatcher.java,"['public', 'class', 'RuleMatcher', '<', 'O', 'extends', 'Operator', ',', 'P', 'extends', 'OperatorPlan', '<', 'O', '>', '>', '{']",0
RuleMatcher.java,"['private', 'Rule', '<', 'O', ',', 'P', '>', 'mRule', ';']",0
RuleMatcher.java,"['private', 'List', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', 'mMatch', ';']",0
RuleMatcher.java,"['private', 'List', '<', 'List', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', '>', 'mPrelimMatches', '=', 'new', 'ArrayList', '<', 'List', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['private', 'List', '<', 'List', '<', 'O', '>', '>', 'mMatches', '=', 'new', 'ArrayList', '<', 'List', '<', 'O', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['private', 'P', 'mPlan', ';', '/', '/', 'for', 'convenience', '.']",0
RuleMatcher.java,"['private', 'int', 'mNumCommonNodes', '=', '0', ';']",0
RuleMatcher.java,"['private', 'List', '<', 'RuleOperator', '>', 'mCommonNodes', '=', 'null', ';']",0
RuleMatcher.java,"['/', '*', '*']",0
RuleMatcher.java,"['/', '*', '*']",0
RuleMatcher.java,"['public', 'boolean', 'match', '(', 'Rule', '<', 'O', ',', 'P', '>', 'rule', ')', 'throws', 'OptimizerException', '{']",0
RuleMatcher.java,"['mRule', '=', 'rule', ';']",0
RuleMatcher.java,"['CommonNodeFinder', 'commonNodeFinder', '=', 'new', 'CommonNodeFinder', '(', 'mRule', '.', 'getPlan', '(', ')', ')', ';']",0
RuleMatcher.java,"['commonNodeFinder', '.', 'visit', '(', ')', ';']",0
RuleMatcher.java,"['mNumCommonNodes', '=', 'commonNodeFinder', '.', 'getCount', '(', ')', ';']",0
RuleMatcher.java,"['mCommonNodes', '=', 'commonNodeFinder', '.', 'getCommonNodes', '(', ')', ';']",0
RuleMatcher.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",1
RuleMatcher.java,"['int', 'errCode', '=', '2125', ';']",0
RuleMatcher.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Problem', 'in', 'computing', 'common', 'nodes', 'in', 'the', 'Rule', 'Plan', '.', '""', ';']",0
RuleMatcher.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 've', ')', ';']",0
RuleMatcher.java,"['mPlan', '=', 'mRule', '.', 'getTransformer', '(', ')', '.', 'getPlan', '(', ')', ';']",0
RuleMatcher.java,"['mMatches', '.', 'clear', '(', ')', ';']",0
RuleMatcher.java,"['mPrelimMatches', '.', 'clear', '(', ')', ';']",0
RuleMatcher.java,"['if', '(', 'mRule', '.', 'getWalkerAlgo', '(', ')', '=', '=', 'Rule', '.', 'WalkerAlgo', '.', 'DependencyOrderWalker', ')']",0
RuleMatcher.java,"['DependencyOrderWalker', '(', ')', ';']",0
RuleMatcher.java,"['else', 'if', '(', 'mRule', '.', 'getWalkerAlgo', '(', ')', '=', '=', 'Rule', '.', 'WalkerAlgo', '.', 'DepthFirstWalker', ')']",0
RuleMatcher.java,"['DepthFirstWalker', '(', ')', ';']",0
RuleMatcher.java,"['return', '(', 'mMatches', '.', 'size', '(', ')', '!', '=', '0', ')', ';']",0
RuleMatcher.java,"['private', 'void', 'DependencyOrderWalker', '(', ')']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'fifo', '=', 'new', 'ArrayList', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'leaves', '=', 'mPlan', '.', 'getLeaves', '(', ')', ';']",0
RuleMatcher.java,"['if', '(', 'leaves', '=', '=', 'null', ')', 'return', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'op', ':', 'leaves', ')', '{']",0
RuleMatcher.java,"['BFSDoAllPredecessors', '(', 'op', ',', 'seen', ',', 'fifo', ')', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'op', ':', 'fifo', ')', '{']",0
RuleMatcher.java,"['if', '(', 'beginMatch', '(', 'op', ')', ')']",0
RuleMatcher.java,"['mPrelimMatches', '.', 'add', '(', 'mMatch', ')', ';']",0
RuleMatcher.java,"['if', '(', 'mPrelimMatches', '.', 'size', '(', ')', '>', '0', ')', '{']",0
RuleMatcher.java,"['processPreliminaryMatches', '(', ')', ';']",0
RuleMatcher.java,"['/', '*', '*']",0
RuleMatcher.java,"['private', 'void', 'processPreliminaryMatches', '(', ')', '{']",0
RuleMatcher.java,"['/', '/', 'The', 'preliminary', 'matches', 'contain', 'paths', 'that', 'match']",0
RuleMatcher.java,"['/', '/', 'the', 'specification', 'in', 'the', 'RulePlan', '.', 'However', ',', 'if', 'there']",0
RuleMatcher.java,"['/', '/', 'are', 'twigs', 'and', 'DAGs', ',', 'then', 'a', 'further', 'computation', 'is', 'required']",0
RuleMatcher.java,"['/', '/', 'to', 'extract', 'the', 'nodes', 'in', 'the', 'mPlan', 'that', 'correspond', 'to', 'the']",0
RuleMatcher.java,"['/', '/', 'roots', 'of', 'the', 'RulePlan']",0
RuleMatcher.java,"['/', '/', 'compute', 'the', 'number', 'of', 'common', 'nodes', 'in', 'each', 'preliminary', 'match']",0
RuleMatcher.java,"['List', '<', 'List', '<', 'O', '>', '>', 'commonNodesPerMatch', '=', 'new', 'ArrayList', '<', 'List', '<', 'O', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mPrelimMatches', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
RuleMatcher.java,"['commonNodesPerMatch', '.', 'add', '(', 'getCommonNodesFromMatch', '(', 'mPrelimMatches', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
RuleMatcher.java,"['if', '(', 'mNumCommonNodes', '=', '=', '0', ')', '{']",0
RuleMatcher.java,"['/', '/', 'the', 'rule', 'plan', 'had', 'simple', 'paths']",0
RuleMatcher.java,"['/', '/', 'verification', 'step']",0
RuleMatcher.java,"['/', '/', 'if', 'any', 'of', 'the', 'preliminary', 'matches', 'had', 'common', 'nodes']",0
RuleMatcher.java,"['/', '/', 'then', 'its', 'an', 'anomaly']",0
RuleMatcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'commonNodesPerMatch', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
RuleMatcher.java,"['if', '(', 'commonNodesPerMatch', '.', 'get', '(', 'i', ')', '!', '=', 'null', ')', '{']",0
RuleMatcher.java,"['/', '/', 'we', 'have', 'found', 'common', 'nodes', 'when', 'there', 'should', 'be', 'none']",0
RuleMatcher.java,"['/', '/', 'just', 'return', 'as', 'mMatches', 'will', 'be', 'empty']",0
RuleMatcher.java,"['/', '/', 'pick', 'the', 'first', 'node', 'of', 'each', 'match', 'and', 'put', 'them', 'into', 'individual', 'lists']",0
RuleMatcher.java,"['/', '/', 'put', 'the', 'lists', 'inside', 'the', 'list', 'of', 'lists', 'mMatches']",0
RuleMatcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mPrelimMatches', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'match', '=', 'new', 'ArrayList', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['match', '.', 'add', '(', 'mPrelimMatches', '.', 'get', '(', 'i', ')', '.', 'get', '(', '0', ')', '.', 'first', ')', ';']",0
RuleMatcher.java,"['mMatches', '.', 'add', '(', 'match', ')', ';']",0
RuleMatcher.java,"['/', '/', 'all', 'the', 'matches', 'have', 'been', 'computed', 'for', 'the', 'simple', 'path']",0
RuleMatcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'commonNodesPerMatch', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
RuleMatcher.java,"['int', 'commonNodes', '=', '(', 'commonNodesPerMatch', '.', 'get', '(', 'i', ')', '=', '=', 'null', '?', '0', ':', 'commonNodesPerMatch', '.', 'get', '(', 'i', ')', '.', 'size', '(', ')', ')', ';']",0
RuleMatcher.java,"['if', '(', 'commonNodes', '!', '=', 'mNumCommonNodes', ')', '{']",0
RuleMatcher.java,"['/', '/', 'if', 'there', 'are', 'is', 'a', 'mismatch', 'in', 'the', 'common', 'nodes', 'then', 'we', 'have', 'a', 'problem']",0
RuleMatcher.java,"['/', '/', 'the', 'rule', 'plan', 'states', 'that', 'we', 'have', 'mNumCommonNodes', 'but', 'we', 'have', 'commonNodes']",0
RuleMatcher.java,"['/', '/', 'in', 'the', 'match', '.', 'Just', 'return']",0
RuleMatcher.java,"['/', '/', 'keep', 'track', 'of', 'the', 'matches', 'that', 'have', 'been', 'processed']",0
RuleMatcher.java,"['List', '<', 'Boolean', '>', 'processedMatches', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
RuleMatcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mPrelimMatches', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
RuleMatcher.java,"['processedMatches', '.', 'add', '(', 'false', ')', ';']",0
RuleMatcher.java,"['/', '/', 'a', 'do', 'while', 'loop', 'to', 'handle', 'single', 'matches']",0
RuleMatcher.java,"['int', 'outerIndex', '=', '0', ';']",0
RuleMatcher.java,"['if', '(', 'processedMatches', '.', 'get', '(', 'outerIndex', ')', ')', '{']",0
RuleMatcher.java,"['+', '+', 'outerIndex', ';']",0
RuleMatcher.java,"['List', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', 'outerMatch', '=', 'mPrelimMatches', '.', 'get', '(', 'outerIndex', ')', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'outerCommonNodes', '=', 'commonNodesPerMatch', '.', 'get', '(', 'outerIndex', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'outerSetCommonNodes', '=', 'new', 'HashSet', '<', 'O', '>', '(', 'outerCommonNodes', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'finalIntersection', '=', 'new', 'HashSet', '<', 'O', '>', '(', 'outerCommonNodes', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'cumulativeIntersection', '=', 'new', 'HashSet', '<', 'O', '>', '(', 'outerCommonNodes', ')', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'patternMatchingRoots', '=', 'new', 'ArrayList', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'unionOfRoots', '=', 'new', 'HashSet', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['boolean', 'innerMatchProcessed', '=', 'false', ';']",0
RuleMatcher.java,"['unionOfRoots', '.', 'add', '(', 'outerMatch', '.', 'get', '(', '0', ')', '.', 'first', ')', ';']",0
RuleMatcher.java,"['for', '(', 'int', 'innerIndex', '=', 'outerIndex', '+', '1', ';']",0
RuleMatcher.java,"['(', 'innerIndex', '<', 'mPrelimMatches', '.', 'size', '(', ')', ')', '&', '&', '(', '!', 'processedMatches', '.', 'get', '(', 'innerIndex', ')', ')', ';']",0
RuleMatcher.java,"['+', '+', 'innerIndex', ')', '{']",0
RuleMatcher.java,"['List', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', 'innerMatch', '=', 'mPrelimMatches', '.', 'get', '(', 'innerIndex', ')', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'innerCommonNodes', '=', 'commonNodesPerMatch', '.', 'get', '(', 'innerIndex', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'innerSetCommonNodes', '=', 'new', 'HashSet', '<', 'O', '>', '(', 'innerCommonNodes', ')', ';']",0
RuleMatcher.java,"['/', '/', 'we', 'need', 'to', 'compute', 'the', 'intersection', 'of', 'the', 'common', 'nodes']",0
RuleMatcher.java,"['/', '/', 'the', 'size', 'of', 'the', 'intersection', 'should', 'be', 'equal', 'to', 'the', 'number']",0
RuleMatcher.java,"['/', '/', 'of', 'common', 'nodes', 'and', 'the', 'type', 'of', 'each', 'rule', 'node', 'class']",0
RuleMatcher.java,"['/', '/', 'if', 'there', 'is', 'no', 'match', 'then', 'it', 'could', 'be', 'that', 'we', 'hit', 'a', 'match']",0
RuleMatcher.java,"['/', '/', 'for', 'a', 'different', 'path', ',', 'i', '.', 'e', '.', ',', 'another', 'pattern', 'that', 'matched']",0
RuleMatcher.java,"['/', '/', 'with', 'a', 'different', 'set', 'of', 'nodes', '.', 'In', 'this', 'case', ',', 'we', 'mark', 'this']",0
RuleMatcher.java,"['/', '/', 'match', 'as', 'not', 'processed', 'and', 'move', 'onto', 'the', 'next', 'match']",0
RuleMatcher.java,"['outerSetCommonNodes', '.', 'retainAll', '(', 'innerSetCommonNodes', ')', ';']",0
RuleMatcher.java,"['if', '(', 'outerSetCommonNodes', '.', 'size', '(', ')', '!', '=', 'mNumCommonNodes', ')', '{']",0
RuleMatcher.java,"['/', '/', 'there', 'was', 'no', 'match']",0
RuleMatcher.java,"['/', '/', 'continue', 'to', 'the', 'next', 'match']",0
RuleMatcher.java,"['}', 'else', '{']",0
RuleMatcher.java,"['}', 'else', '{']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'tempCumulativeIntersection', '=', 'new', 'HashSet', '<', 'O', '>', '(', 'cumulativeIntersection', ')', ';']",0
RuleMatcher.java,"['tempCumulativeIntersection', '.', 'retainAll', '(', 'outerSetCommonNodes', ')', ';']",0
RuleMatcher.java,"['if', '(', 'tempCumulativeIntersection', '.', 'size', '(', ')', '!', '=', 'mNumCommonNodes', ')', '{']",0
RuleMatcher.java,"['/', '/', 'problem', '-', 'there', 'was', 'a', 'set', 'intersection', 'with', 'a', 'size', 'mismatch']",0
RuleMatcher.java,"['/', '/', 'between', 'the', 'cumulative', 'intersection', 'and', 'the', 'intersection', 'of', 'the']",0
RuleMatcher.java,"['/', '/', 'inner', 'and', 'outer', 'common', 'nodes']",0
RuleMatcher.java,"['/', '/', 'set', 'mMatches', 'to', 'empty', 'and', 'return']",0
RuleMatcher.java,"['mMatches', '=', 'new', 'ArrayList', '<', 'List', '<', 'O', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['}', 'else', '{']",0
RuleMatcher.java,"['processedMatches', '.', 'set', '(', 'innerIndex', ',', 'true', ')', ';']",0
RuleMatcher.java,"['innerMatchProcessed', '=', 'true', ';']",0
RuleMatcher.java,"['cumulativeIntersection', '=', 'tempCumulativeIntersection', ';']",0
RuleMatcher.java,"['unionOfRoots', '.', 'add', '(', 'innerMatch', '.', 'get', '(', '0', ')', '.', 'first', ')', ';']",0
RuleMatcher.java,"['cumulativeIntersection', '.', 'retainAll', '(', 'finalIntersection', ')', ';']",0
RuleMatcher.java,"['if', '(', 'cumulativeIntersection', '.', 'size', '(', ')', '!', '=', 'mNumCommonNodes', ')', '{']",0
RuleMatcher.java,"['/', '/', 'the', 'cumulative', 'and', 'final', 'intersections', 'did', 'not', 'intersect']",0
RuleMatcher.java,"['/', '/', 'this', 'could', 'happen', 'when', 'each', 'of', 'the', 'matches', 'are', 'disjoint']",0
RuleMatcher.java,"['/', '/', 'check', 'if', 'the', 'innerMatches', 'were', 'processed', 'at', 'all']",0
RuleMatcher.java,"['if', '(', 'innerMatchProcessed', ')', '{']",0
RuleMatcher.java,"['/', '/', 'problem', '-', 'the', 'inner', 'matches', 'were', 'processed', 'and', 'we', 'did']",0
RuleMatcher.java,"['/', '/', 'not', 'find', 'common', 'intersections']",0
RuleMatcher.java,"['mMatches', '=', 'new', 'ArrayList', '<', 'List', '<', 'O', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['processedMatches', '.', 'set', '(', 'outerIndex', ',', 'true', ')', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'node', ':', 'unionOfRoots', ')', '{']",0
RuleMatcher.java,"['patternMatchingRoots', '.', 'add', '(', 'node', ')', ';']",0
RuleMatcher.java,"['mMatches', '.', 'add', '(', 'patternMatchingRoots', ')', ';']",0
RuleMatcher.java,"['+', '+', 'outerIndex', ';']",0
RuleMatcher.java,"['}', 'while', '(', 'outerIndex', '<', 'mPrelimMatches', '.', 'size', '(', ')', '-', '1', ')', ';']",0
RuleMatcher.java,"['private', 'List', '<', 'O', '>', 'getCommonNodesFromMatch', '(', 'List', '<', 'Pair', '<', 'O', ',', 'NodeType', '>', '>', 'match', ')', '{']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'commonNodes', '=', 'null', ';']",0
RuleMatcher.java,"['/', '/', 'A', 'lookup', 'table', 'to', 'weed', 'out', 'duplicates']",0
RuleMatcher.java,"['Map', '<', 'O', ',', 'Boolean', '>', 'lookup', '=', 'new', 'HashMap', '<', 'O', ',', 'Boolean', '>', '(', ')', ';']",0
RuleMatcher.java,"['for', '(', 'int', 'index', '=', '0', ';', 'index', '<', 'match', '.', 'size', '(', ')', ';', '+', '+', 'index', ')', '{']",0
RuleMatcher.java,"['if', '(', 'match', '.', 'get', '(', 'index', ')', '.', 'second', '.', 'equals', '(', 'RuleOperator', '.', 'NodeType', '.', 'COMMON_NODE', ')', ')', '{']",0
RuleMatcher.java,"['if', '(', 'commonNodes', '=', '=', 'null', ')', '{']",0
RuleMatcher.java,"['commonNodes', '=', 'new', 'ArrayList', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['O', 'node', '=', 'match', '.', 'get', '(', 'index', ')', '.', 'first', ';']",0
RuleMatcher.java,"['/', '/', 'lookup', 'the', 'node', 'under', 'question']",0
RuleMatcher.java,"['/', '/', 'if', 'the', 'node', 'is', 'not', 'found', 'in', 'the', 'table']",0
RuleMatcher.java,"['/', '/', 'then', 'we', 'are', 'examining', 'it', 'for', 'the', 'first', 'time']",0
RuleMatcher.java,"['/', '/', 'add', 'it', 'to', 'the', 'output', 'list', 'and', 'mark', 'it', 'as', 'seen']",0
RuleMatcher.java,"['/', '/', 'else', 'continue', 'to', 'the', 'next', 'iteration']",0
RuleMatcher.java,"['if', '(', 'lookup', '.', 'get', '(', 'node', ')', '=', '=', 'null', ')', '{']",0
RuleMatcher.java,"['commonNodes', '.', 'add', '(', 'node', ')', ';']",0
RuleMatcher.java,"['lookup', '.', 'put', '(', 'node', ',', 'true', ')', ';']",0
RuleMatcher.java,"['return', 'commonNodes', ';']",0
RuleMatcher.java,"['private', 'void', 'BFSDoAllPredecessors', '(', 'O', 'node', ',', 'Set', '<', 'O', '>', 'seen', ',', 'Collection', '<', 'O', '>', 'fifo', ')', '{']",0
RuleMatcher.java,"['if', '(', '!', 'seen', '.', 'contains', '(', 'node', ')', ')', '{']",0
RuleMatcher.java,"['/', '/', 'We', 'haven', ""'"", 't', 'seen', 'this', 'one', 'before', '.']",0
RuleMatcher.java,"['Collection', '<', 'O', '>', 'preds', '=', 'mPlan', '.', 'getPredecessors', '(', 'node', ')', ';']",0
RuleMatcher.java,"['if', '(', 'preds', '!', '=', 'null', '&', '&', 'preds', '.', 'size', '(', ')', '>', '0', ')', '{']",0
RuleMatcher.java,"['/', '/', 'Do', 'all', 'our', 'predecessors', 'before', 'ourself']",0
RuleMatcher.java,"['for', '(', 'O', 'op', ':', 'preds', ')', '{']",0
RuleMatcher.java,"['BFSDoAllPredecessors', '(', 'op', ',', 'seen', ',', 'fifo', ')', ';']",0
RuleMatcher.java,"['/', '/', 'Now', 'do', 'ourself']",0
RuleMatcher.java,"['seen', '.', 'add', '(', 'node', ')', ';']",0
RuleMatcher.java,"['fifo', '.', 'add', '(', 'node', ')', ';']",0
RuleMatcher.java,"['private', 'void', 'DepthFirstWalker', '(', ')']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'seen', '=', 'new', 'HashSet', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['Set', '<', 'O', '>', 'seen', '=', 'new', 'HashSet', '<', 'O', '>', '(', ')', ';']",0
RuleMatcher.java,"['DFSVisit', '(', 'null', ',', 'mPlan', '.', 'getRoots', '(', ')', ',', 'seen', ')', ';']",0
RuleMatcher.java,"['private', 'void', 'DFSVisit', '(', 'O', 'node', ',', 'Collection', '<', 'O', '>', 'successors', ',', 'Set', '<', 'O', '>', 'seen', ')']",0
RuleMatcher.java,"['if', '(', 'successors', '=', '=', 'null', ')', 'return', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'suc', ':', 'successors', ')', '{']",0
RuleMatcher.java,"['if', '(', 'seen', '.', 'add', '(', 'suc', ')', ')', '{']",0
RuleMatcher.java,"['if', '(', 'beginMatch', '(', 'suc', ')', ')']",0
RuleMatcher.java,"['mPrelimMatches', '.', 'add', '(', 'mMatch', ')', ';']",0
RuleMatcher.java,"['Collection', '<', 'O', '>', 'newSuccessors', '=', 'mPlan', '.', 'getSuccessors', '(', 'suc', ')', ';']",0
RuleMatcher.java,"['DFSVisit', '(', 'suc', ',', 'newSuccessors', ',', 'seen', ')', ';']",0
RuleMatcher.java,"['/', '*', '*']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'getMatches', '(', ')', '{']",0
RuleMatcher.java,"['if', '(', 'mMatches', '.', 'size', '(', ')', '>', '=', '1', ')']",0
RuleMatcher.java,"['return', 'mMatches', '.', 'get', '(', '0', ')', ';']",0
RuleMatcher.java,"['return', 'null', ';']",0
RuleMatcher.java,"['/', '*', '*']",0
RuleMatcher.java,"['List', '<', 'List', '<', 'O', '>', '>', 'getAllMatches', '(', ')', '{']",0
RuleMatcher.java,"['return', 'mMatches', ';']",0
RuleMatcher.java,"['private', 'boolean', 'beginMatch', '(', 'O', 'node', ')', '{']",0
RuleMatcher.java,"['if', '(', 'node', '=', '=', 'null', ')', 'return', 'false', ';']",0
RuleMatcher.java,"['mMatch', '=', 'new', 'ArrayList', '<', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '>', '(', ')', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'nodeSuccessors', ';']",0
RuleMatcher.java,"['List', '<', 'RuleOperator', '>', 'ruleRoots', '=', 'mRule', '.', 'getPlan', '(', ')', '.', 'getRoots', '(', ')', ';']",0
RuleMatcher.java,"['for', '(', 'RuleOperator', 'ruleRoot', ':', 'ruleRoots', ')', '{']",0
RuleMatcher.java,"['if', '(', 'node', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '.', 'equals', '(', 'ruleRoot', '.', 'getNodeClass', '(', ')', '.', 'getName', '(', ')', ')', '|', '|']",0
RuleMatcher.java,"['ruleRoot', '.', 'getNodeType', '(', ')', '.', 'equals', '(', 'RuleOperator', '.', 'NodeType', '.', 'ANY_NODE', ')', ')', '{']",0
RuleMatcher.java,"['mMatch', '.', 'add', '(', 'new', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '(', 'node', ',', 'ruleRoot', '.', 'getNodeType', '(', ')', ')', ')', ';']",0
RuleMatcher.java,"['List', '<', 'RuleOperator', '>', 'ruleRootSuccessors', '=', 'mRule', '.', 'getPlan', '(', ')', '.', 'getSuccessors', '(', 'ruleRoot', ')', ';']",0
RuleMatcher.java,"['if', '(', 'ruleRootSuccessors', '=', '=', 'null', ')', '{']",0
RuleMatcher.java,"['/', '/', 'This', 'was', 'looking', 'for', 'a', 'single', 'node']",1
RuleMatcher.java,"['nodeSuccessors', '=', 'mPlan', '.', 'getSuccessors', '(', 'node', ')', ';']",0
RuleMatcher.java,"['if', '(', '(', 'nodeSuccessors', '=', '=', 'null', ')', '|', '|', '(', 'nodeSuccessors', '.', 'size', '(', ')', '!', '=', 'ruleRootSuccessors', '.', 'size', '(', ')', ')', ')', '{']",0
RuleMatcher.java,"['/', '/', 'the', 'ruleRoot', 'has', 'successors', 'but', 'the', 'node', 'does', 'not']",0
RuleMatcher.java,"['/', '/', 'OR']",0
RuleMatcher.java,"['/', '/', 'the', 'number', 'of', 'successors', 'for', 'the', 'ruleRoot', 'does', 'not', 'match']",0
RuleMatcher.java,"['/', '/', 'the', 'number', 'of', 'successors', 'for', 'the', 'node']",0
RuleMatcher.java,"['boolean', 'foundMatch', '=', 'false', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'nodeSuccessor', ':', 'nodeSuccessors', ')', '{']",0
RuleMatcher.java,"['foundMatch', '|', '=', 'continueMatch', '(', 'nodeSuccessor', ',', 'ruleRootSuccessors', ')', ';']",0
RuleMatcher.java,"['return', 'foundMatch', ';']",0
RuleMatcher.java,"['/', '/', 'If', 'we', 'get', 'here', 'we', 'haven', ""'"", 't', 'found', 'it', '.']",0
RuleMatcher.java,"['return', 'false', ';']",0
RuleMatcher.java,"['return', 'false', ';']",0
RuleMatcher.java,"['private', 'boolean', 'continueMatch', '(', 'O', 'node', ',', 'List', '<', 'RuleOperator', '>', 'ruleOperators', ')', '{']",0
RuleMatcher.java,"['for', '(', 'RuleOperator', 'ruleOperator', ':', 'ruleOperators', ')', '{']",0
RuleMatcher.java,"['if', '(', 'node', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '.', 'equals', '(', 'ruleOperator', '.', 'getNodeClass', '(', ')', '.', 'getName', '(', ')', ')', '|', '|']",0
RuleMatcher.java,"['ruleOperator', '.', 'getNodeType', '(', ')', '.', 'equals', '(', 'RuleOperator', '.', 'NodeType', '.', 'ANY_NODE', ')', ')', '{']",0
RuleMatcher.java,"['mMatch', '.', 'add', '(', 'new', 'Pair', '<', 'O', ',', 'RuleOperator', '.', 'NodeType', '>', '(', 'node', ',', 'ruleOperator', '.', 'getNodeType', '(', ')', ')', ')', ';']",0
RuleMatcher.java,"['/', '/', 'Follow', 'the', 'edge', 'to', 'see', 'the', 'next', 'node', 'we', 'should', 'be', 'looking', 'for', '.']",0
RuleMatcher.java,"['/', '/', 'Follow', 'the', 'edge', 'to', 'see', 'the', 'next', 'node', 'we', 'should', 'be', 'looking', 'for', '.']",0
RuleMatcher.java,"['List', '<', 'RuleOperator', '>', 'ruleOperatorSuccessors', '=', 'mRule', '.', 'getPlan', '(', ')', '.', 'getSuccessors', '(', 'ruleOperator', ')', ';']",0
RuleMatcher.java,"['if', '(', 'ruleOperatorSuccessors', '=', '=', 'null', ')', '{']",0
RuleMatcher.java,"['/', '/', 'We', ""'"", 've', 'completed', 'the', 'match']",0
RuleMatcher.java,"['return', 'true', ';']",0
RuleMatcher.java,"['return', 'true', ';']",0
RuleMatcher.java,"['List', '<', 'O', '>', 'nodeSuccessors', ';']",0
RuleMatcher.java,"['nodeSuccessors', '=', 'mPlan', '.', 'getSuccessors', '(', 'node', ')', ';']",0
RuleMatcher.java,"['if', '(', '(', 'nodeSuccessors', '=', '=', 'null', ')', '|', '|']",0
RuleMatcher.java,"['(', 'nodeSuccessors', '.', 'size', '(', ')', '!', '=', 'ruleOperatorSuccessors', '.', 'size', '(', ')', ')', ')', '{']",0
RuleMatcher.java,"['/', '/', 'the', 'ruleOperator', 'has', 'successors', 'but', 'the', 'node', 'does', 'not']",0
RuleMatcher.java,"['/', '/', 'OR']",0
RuleMatcher.java,"['/', '/', 'the', 'number', 'of', 'successors', 'for', 'the', 'ruleOperator', 'does', 'not', 'match']",0
RuleMatcher.java,"['/', '/', 'the', 'number', 'of', 'successors', 'for', 'the', 'node']",0
RuleMatcher.java,"['return', 'false', ';']",0
RuleMatcher.java,"['boolean', 'foundMatch', '=', 'false', ';']",0
RuleMatcher.java,"['for', '(', 'O', 'nodeSuccessor', ':', 'nodeSuccessors', ')', '{']",0
RuleMatcher.java,"['foundMatch', '|', '=', 'continueMatch', '(', 'nodeSuccessor', ',', 'ruleOperatorSuccessors', ')', ';']",0
RuleMatcher.java,"['return', 'foundMatch', ';']",0
RuleMatcher.java,"['/', '/', 'We', 'can', 'arrive', 'here', 'either', 'because', 'we', 'didn', ""'"", 't', 'match', 'at', 'this', 'node', 'or']",1
RuleMatcher.java,"['/', '/', 'further', 'down', 'the', 'line', '.', 'One', 'way', 'or', 'another', 'we', 'need', 'to', 'remove', 'ourselves']",0
RuleMatcher.java,"['/', '/', 'from', 'the', 'match', 'vector', 'and', 'return', 'false', '.']",1
RuleMatcher.java,"['/', '/', 'SMS', '-', 'I', 'don', ""'"", 't', 'think', 'we', 'need', 'this', 'as', 'mMatch', 'will', 'be', 'discarded', 'anyway']",0
RuleMatcher.java,"['/', '/', 'mMatch', '.', 'set', '(', 'nodeNumber', ',', 'null', ')', ';']",0
RuleMatcher.java,"['return', 'false', ';']",0
RuleMatcher.java,"['return', 'false', ';']",0
LOUnion.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
LOUnion.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOUnion.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOUnion.java,"['public', 'class', 'LOUnion', 'extends', 'LogicalOperator', '{']",0
LOUnion.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LOUnion.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOUnion', '.', 'class', ')', ';']",0
LOUnion.java,"['public', 'LOUnion', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOUnion.java,"['super', '(', 'plan', ',', 'k', ')', ';']",1
LOUnion.java,"['public', 'List', '<', 'LogicalOperator', '>', 'getInputs', '(', ')', '{']",1
LOUnion.java,"['return', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOUnion.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOUnion.java,"['if', '(', '!', 'mIsSchemaComputed', ')', '{']",0
LOUnion.java,"['Collection', '<', 'LogicalOperator', '>', 's', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOUnion.java,"['log', '.', 'debug', '(', '""', 'Number', 'of', 'predecessors', 'in', 'the', 'graph', ':', '""', '+', 's', '.', 'size', '(', ')', ')', ';']",0
LOUnion.java,"['Iterator', '<', 'LogicalOperator', '>', 'iter', '=', 's', '.', 'iterator', '(', ')', ';']",0
LOUnion.java,"['LogicalOperator', 'op', '=', 'iter', '.', 'next', '(', ')', ';']",0
LOUnion.java,"['if', '(', 'null', '=', '=', 'op', ')', '{']",0
LOUnion.java,"['int', 'errCode', '=', '1006', ';']",0
LOUnion.java,"['String', 'msg', '=', '""', 'Could', 'not', 'find', 'operator', 'in', 'plan', '""', ';']",0
LOUnion.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",1
LOUnion.java,"['mSchema', '=', 'op', '.', 'getSchema', '(', ')', ';']",1
LOUnion.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
LOUnion.java,"['op', '=', 'iter', '.', 'next', '(', ')', ';']",0
LOUnion.java,"['if', '(', 'null', '!', '=', 'mSchema', ')', '{']",0
LOUnion.java,"['mSchema', '=', 'mSchema', '.', 'merge', '(', 'op', '.', 'getSchema', '(', ')', ',', 'false', ')', ';']",0
LOUnion.java,"['if', '(', 'null', '!', '=', 'mSchema', ')', '{']",0
LOUnion.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'fs', ':', 'mSchema', '.', 'getFields', '(', ')', ')', '{']",0
LOUnion.java,"['iter', '=', 's', '.', 'iterator', '(', ')', ';']",0
LOUnion.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
LOUnion.java,"['op', '=', 'iter', '.', 'next', '(', ')', ';']",0
LOUnion.java,"['Schema', 'opSchema', '=', 'op', '.', 'getSchema', '(', ')', ';']",0
LOUnion.java,"['if', '(', 'null', '!', '=', 'opSchema', ')', '{']",0
LOUnion.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'opFs', ':', 'opSchema', '.', 'getFields', '(', ')', ')', '{']",0
LOUnion.java,"['fs', '.', 'setParent', '(', 'opFs', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOUnion.java,"['}', 'else', '{']",0
LOUnion.java,"['}', 'else', '{']",0
LOUnion.java,"['fs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOUnion.java,"['mIsSchemaComputed', '=', 'true', ';']",1
LOUnion.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
LOUnion.java,"['mSchema', '=', 'null', ';']",0
LOUnion.java,"['mSchema', '=', 'null', ';']",0
LOUnion.java,"['mIsSchemaComputed', '=', 'false', ';']",1
LOUnion.java,"['throw', 'fe', ';']",0
LOUnion.java,"['return', 'mSchema', ';']",1
LOUnion.java,"['public', 'String', 'name', '(', ')', '{']",1
LOUnion.java,"['return', '""', 'Union', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOUnion.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",1
LOUnion.java,"['return', 'true', ';']",1
LOUnion.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",1
LOUnion.java,"['v', '.', 'visit', '(', 'this', ')', ';']",1
LOUnion.java,"['public', 'byte', 'getType', '(', ')', '{']",0
LOUnion.java,"['return', 'DataType', '.', 'BAG', ';']",0
LOUnion.java,"['/', '*', '*']",0
LOUnion.java,"['/', '*', '*']",0
LOUnion.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOUnion.java,"['LOUnion', 'unionClone', '=', '(', 'LOUnion', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOUnion.java,"['return', 'unionClone', ';']",0
LOUnion.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LOUnion.java,"['Schema', 'outputSchema', ';']",1
LOUnion.java,"['outputSchema', '=', 'getSchema', '(', ')', ';']",1
LOUnion.java,"['if', '(', 'outputSchema', '=', '=', 'null', ')', '{']",1
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', '(', 'ArrayList', '<', 'LogicalOperator', '>', ')', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOUnion.java,"['LogicalOperator', 'predecessor', '=', 'predecessors', '.', 'get', '(', 'inputNum', ')', ';']",1
LOUnion.java,"['Schema', 'inputSchema', '=', 'null', ';']",1
LOUnion.java,"['inputSchema', '=', 'predecessor', '.', 'getSchema', '(', ')', ';']",1
LOUnion.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOUnion.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['if', '(', 'inputSchema', '=', '=', 'null', ')', '{']",1
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['}', 'else', '{']",0
LOUnion.java,"['for', '(', 'int', 'inputColumn', '=', '0', ';', 'inputColumn', '<', 'inputSchema', '.', 'size', '(', ')', ';', '+', '+', 'inputColumn', ')', '{']",1
LOUnion.java,"['mapFields', '.', 'put', '(', 'inputColumn', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOUnion.java,"['/', '/', 'removedFields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', 'inputNum', ',', 'inputColumn', ')', ')', ';']",1
LOUnion.java,"['return', 'new', 'ProjectionMap', '(', 'mapFields', ',', 'null', ',', 'null', ')', ';']",1
LOUnion.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LOUnion.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOUnion.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOUnion.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",0
LOUnion.java,"['return', 'null', ';']",0
LOUnion.java,"['List', '<', 'RequiredFields', '>', 'requiredFields', '=', 'new', 'ArrayList', '<', 'RequiredFields', '>', '(', ')', ';']",1
LOUnion.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ';', '+', '+', 'inputNum', ')', '{']",0
LOUnion.java,"['for', '(', 'int', 'inputNum', '=', '0', ';', 'inputNum', '<', 'predecessors', '.', 'size', '(', ')', ';', '+', '+', 'inputNum', ')', '{']",0
LOUnion.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'true', ')', ')', ';']",1
LOUnion.java,"['return', '(', 'requiredFields', '.', 'size', '(', ')', '=', '=', '0', '?', 'null', ':', 'requiredFields', ')', ';']",1
FindQuantiles.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'builtin', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'io', '.', 'ObjectInputStream', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'Comparator', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
FindQuantiles.java,"['import', 'java', '.', 'util', '.', 'Map', '.', 'Entry', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ComparisonFunc', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'HDataType', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MRCompiler', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'partitioners', '.', 'CountingMap', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'partitioners', '.', 'DiscreteProbabilitySampleGenerator', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DefaultDataBag', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableBytesWritable', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableDoubleWritable', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableFloatWritable', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableIntWritable', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableLongWritable', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableText', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableTuple', ';']",0
FindQuantiles.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'PigNullableWritable', ';']",0
FindQuantiles.java,"['public', 'class', 'FindQuantiles', 'extends', 'EvalFunc', '<', 'Map', '<', 'Object', ',', 'Object', '>', '>', '{']",0
FindQuantiles.java,"['/', '/', 'keys', 'for', 'the', 'weightedparts', 'Map']",0
FindQuantiles.java,"['public', 'static', 'final', 'String', 'QUANTILES_LIST', '=', '""', 'quantiles', '.', 'list', '""', ';']",0
FindQuantiles.java,"['public', 'static', 'final', 'String', 'WEIGHTED_PARTS', '=', '""', 'weighted', '.', 'parts', '""', ';']",0
FindQuantiles.java,"['BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
FindQuantiles.java,"['TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
FindQuantiles.java,"['boolean', '[', ']', 'mAsc', ';']",0
FindQuantiles.java,"['enum', 'State', '{', 'ALL_ASC', ',', 'ALL_DESC', ',', 'MIXED', '}', ';']",0
FindQuantiles.java,"['State', 'mState', ';']",0
FindQuantiles.java,"['private', 'class', 'SortComparator', 'implements', 'Comparator', '<', 'Tuple', '>', '{']",0
FindQuantiles.java,"['@', 'SuppressWarnings', '(', '""', 'unchecked', '""', ')']",0
FindQuantiles.java,"['public', 'int', 'compare', '(', 'Tuple', 't1', ',', 'Tuple', 't2', ')', '{']",0
FindQuantiles.java,"['switch', '(', 'mState', ')', '{']",0
FindQuantiles.java,"['case', 'ALL_ASC', ':']",0
FindQuantiles.java,"['return', 't1', '.', 'compareTo', '(', 't2', ')', ';']",0
FindQuantiles.java,"['case', 'ALL_DESC', ':']",0
FindQuantiles.java,"['return', 't2', '.', 'compareTo', '(', 't1', ')', ';']",0
FindQuantiles.java,"['case', 'MIXED', ':']",0
FindQuantiles.java,"['/', '/', 'Have', 'to', 'break', 'the', 'tuple', 'down', 'and', 'compare', 'it', 'field', 'to', 'field', '.']",0
FindQuantiles.java,"['int', 'sz1', '=', 't1', '.', 'size', '(', ')', ';']",0
FindQuantiles.java,"['int', 'sz2', '=', 't2', '.', 'size', '(', ')', ';']",0
FindQuantiles.java,"['if', '(', 'sz2', '<', 'sz1', ')', '{']",0
FindQuantiles.java,"['return', '1', ';']",0
FindQuantiles.java,"['}', 'else', 'if', '(', 'sz2', '>', 'sz1', ')', '{']",0
FindQuantiles.java,"['return', '-', '1', ';']",0
FindQuantiles.java,"['}', 'else', '{']",0
FindQuantiles.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sz1', ';', 'i', '+', '+', ')', '{']",0
FindQuantiles.java,"['int', 'c', '=', 'DataType', '.', 'compare', '(', 't1', '.', 'get', '(', 'i', ')', ',', 't2', '.', 'get', '(', 'i', ')', ')', ';']",0
FindQuantiles.java,"['if', '(', 'c', '!', '=', '0', ')', '{']",0
FindQuantiles.java,"['if', '(', '!', 'mAsc', '[', 'i', ']', ')', 'c', '*', '=', '-', '1', ';']",0
FindQuantiles.java,"['return', 'c', ';']",0
FindQuantiles.java,"['}', 'catch', '(', 'ExecException', 'e', ')', '{']",0
FindQuantiles.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unable', 'to', 'compare', 'tuples', '""', ',', 'e', ')', ';']",0
FindQuantiles.java,"['return', '0', ';']",0
FindQuantiles.java,"['return', '-', '1', ';', '/', '/', 'keep', 'the', 'compiler', 'happy']",0
FindQuantiles.java,"['private', 'Comparator', '<', 'Tuple', '>', 'mComparator', '=', 'new', 'SortComparator', '(', ')', ';']",0
FindQuantiles.java,"['private', 'FuncSpec', 'mUserComparisonFuncSpec', ';']",0
FindQuantiles.java,"['private', 'ComparisonFunc', 'mUserComparisonFunc', ';']",0
FindQuantiles.java,"['@', 'SuppressWarnings', '(', '""', 'unchecked', '""', ')']",0
FindQuantiles.java,"['private', 'void', 'instantiateFunc', '(', ')', '{']",0
FindQuantiles.java,"['if', '(', 'mUserComparisonFunc', '!', '=', 'null', ')', '{']",0
FindQuantiles.java,"['this', '.', 'mUserComparisonFunc', '=', '(', 'ComparisonFunc', ')', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'this', '.', 'mUserComparisonFuncSpec', ')', ';']",0
FindQuantiles.java,"['this', '.', 'mUserComparisonFunc', '.', 'setReporter', '(', 'reporter', ')', ';']",0
FindQuantiles.java,"['this', '.', 'mComparator', '=', 'mUserComparisonFunc', ';']",0
FindQuantiles.java,"['/', '/', 'We', 'need', 'to', 'instantiate', 'any', 'user', 'defined', 'comparison', 'function']",0
FindQuantiles.java,"['/', '/', 'on', 'the', 'backend', 'when', 'the', 'FindQuantiles', 'udf', 'is', 'deserialized']",0
FindQuantiles.java,"['private', 'void', 'readObject', '(', 'ObjectInputStream', 'is', ')', 'throws', 'IOException', ',', 'ClassNotFoundException', '{']",0
FindQuantiles.java,"['is', '.', 'defaultReadObject', '(', ')', ';']",0
FindQuantiles.java,"['instantiateFunc', '(', ')', ';']",0
FindQuantiles.java,"['public', 'FindQuantiles', '(', ')', '{']",0
FindQuantiles.java,"['mState', '=', 'State', '.', 'ALL_ASC', ';']",0
FindQuantiles.java,"['public', 'FindQuantiles', '(', 'String', '[', ']', 'args', ')', '{']",0
FindQuantiles.java,"['int', 'startIndex', '=', '0', ';']",0
FindQuantiles.java,"['int', 'ascFlagsLength', '=', 'args', '.', 'length', ';']",0
FindQuantiles.java,"['/', '/', 'the', 'first', 'argument', 'may', 'be', 'the', 'information']",0
FindQuantiles.java,"['/', '/', 'about', 'user', 'defined', 'comparison', 'function', 'if', 'one']",0
FindQuantiles.java,"['/', '/', 'was', 'specified']",0
FindQuantiles.java,"['if', '(', 'args', '[', '0', ']', '.', 'startsWith', '(', 'MRCompiler', '.', 'USER_COMPARATOR_MARKER', ')', ')', '{']",0
FindQuantiles.java,"['mUserComparisonFuncSpec', '=', 'new', 'FuncSpec', '(']",0
FindQuantiles.java,"['args', '[', '0', ']', '.', 'substring', '(', 'MRCompiler', '.', 'USER_COMPARATOR_MARKER', '.', 'length', '(', ')', ')', ')', ';']",0
FindQuantiles.java,"['/', '/', 'skip', 'the', 'first', 'argument', 'now', 'that', 'we', 'used', 'it']",0
FindQuantiles.java,"['startIndex', '+', '+', ';']",0
FindQuantiles.java,"['ascFlagsLength', '-', '-', ';']",0
FindQuantiles.java,"['mAsc', '=', 'new', 'boolean', '[', 'ascFlagsLength', ']', ';']",0
FindQuantiles.java,"['boolean', 'sawAsc', '=', 'false', ';']",0
FindQuantiles.java,"['boolean', 'sawDesc', '=', 'false', ';']",0
FindQuantiles.java,"['for', '(', 'int', 'i', '=', 'startIndex', ';', 'i', '<', 'ascFlagsLength', ';', 'i', '+', '+', ')', '{']",0
FindQuantiles.java,"['mAsc', '[', 'i', ']', '=', 'Boolean', '.', 'parseBoolean', '(', 'args', '[', 'i', ']', ')', ';']",0
FindQuantiles.java,"['if', '(', 'mAsc', '[', 'i', ']', ')', 'sawAsc', '=', 'true', ';']",0
FindQuantiles.java,"['else', 'sawDesc', '=', 'true', ';']",0
FindQuantiles.java,"['if', '(', 'sawAsc', '&', '&', 'sawDesc', ')', 'mState', '=', 'State', '.', 'MIXED', ';']",0
FindQuantiles.java,"['else', 'if', '(', 'sawDesc', ')', 'mState', '=', 'State', '.', 'ALL_DESC', ';']",0
FindQuantiles.java,"['else', 'mState', '=', 'State', '.', 'ALL_ASC', ';', '/', '/', 'In', 'cast', 'they', 'gave', 'us', 'no', 'args', 'this']",0
FindQuantiles.java,"['/', '/', 'defaults', 'to', 'all', 'ascending', '.']",0
FindQuantiles.java,"['/', '*', '*']",0
FindQuantiles.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'exec', '(', 'Tuple', 'in', ')', 'throws', 'IOException', '{']",0
FindQuantiles.java,"['Map', '<', 'Object', ',', 'Object', '>', 'output', '=', 'new', 'HashMap', '<', 'Object', ',', 'Object', '>', '(', ')', ';']",0
FindQuantiles.java,"['if', '(', 'in', '=', '=', 'null', '|', '|', 'in', '.', 'size', '(', ')', '=', '=', '0', ')']",0
FindQuantiles.java,"['return', 'null', ';']",0
FindQuantiles.java,"['Integer', 'numQuantiles', '=', 'null', ';']",0
FindQuantiles.java,"['DataBag', 'samples', '=', 'null', ';']",0
FindQuantiles.java,"['ArrayList', '<', 'Tuple', '>', 'quantilesList', '=', 'new', 'ArrayList', '<', 'Tuple', '>', '(', ')', ';']",0
FindQuantiles.java,"['Map', '<', 'Tuple', ',', 'Tuple', '>', 'weightedParts', '=', 'new', 'HashMap', '<', 'Tuple', ',', 'Tuple', '>', '(', ')', ';']",0
FindQuantiles.java,"['/', '/', 'the', 'sample', 'file', 'has', 'a', 'tuple', 'as', 'under', ':']",0
FindQuantiles.java,"['/', '/', '(', 'numQuantiles', ',', 'bag', 'of', 'samples', ')']",0
FindQuantiles.java,"['/', '/', 'numQuantiles', 'here', 'is', 'the', 'reduce', 'parallelism']",0
FindQuantiles.java,"['numQuantiles', '=', '(', 'Integer', ')', 'in', '.', 'get', '(', '0', ')', ';']",0
FindQuantiles.java,"['samples', '=', '(', 'DataBag', ')', 'in', '.', 'get', '(', '1', ')', ';']",0
FindQuantiles.java,"['long', 'numSamples', '=', 'samples', '.', 'size', '(', ')', ';']",1
FindQuantiles.java,"['long', 'toSkip', '=', 'numSamples', '/', 'numQuantiles', ';']",1
FindQuantiles.java,"['if', '(', 'toSkip', '=', '=', '0', ')', '{']",1
FindQuantiles.java,"['/', '/', 'numSamples', 'is', '<', 'numQuantiles', ';']",1
FindQuantiles.java,"['/', '/', 'set', 'numQuantiles', 'to', 'numSamples']",1
FindQuantiles.java,"['numQuantiles', '=', '(', 'int', ')', 'numSamples', ';']",1
FindQuantiles.java,"['toSkip', '=', '1', ';']",1
FindQuantiles.java,"['long', 'ind', '=', '0', ',', 'j', '=', '-', '1', ',', 'nextQuantile', '=', 'toSkip', '-', '1', ';']",1
FindQuantiles.java,"['if', '(', 'ind', '=', '=', 'nextQuantile', ')', '{']",1
FindQuantiles.java,"['+', '+', 'j', ';']",1
FindQuantiles.java,"['quantilesList', '.', 'add', '(', 'it', ')', ';']",0
FindQuantiles.java,"['nextQuantile', '+', '=', 'toSkip', ';']",1
FindQuantiles.java,"['if', '(', 'j', '=', '=', 'numQuantiles', '-', '1', ')']",1
FindQuantiles.java,"['ind', '+', '+', ';']",1
FindQuantiles.java,"['if', '(', 'ind', '%', '1000', '=', '=', '0', ')', 'progress', '(', ')', ';']",0
FindQuantiles.java,"['long', 'i', '=', '-', '1', ';']",1
FindQuantiles.java,"['Map', '<', 'Tuple', ',', 'CountingMap', '<', 'Integer', '>', '>', 'contribs', '=', 'new', 'HashMap', '<', 'Tuple', ',', 'CountingMap', '<', 'Integer', '>', '>', '(', ')', ';']",0
FindQuantiles.java,"['for', '(', 'Tuple', 'it', ':', 'samples', ')', '{']",0
FindQuantiles.java,"['for', '(', 'Tuple', 'it', ':', 'samples', ')', '{']",0
FindQuantiles.java,"['+', '+', 'i', ';']",1
FindQuantiles.java,"['if', '(', 'i', '%', '1000', '=', '=', '0', ')', 'progress', '(', ')', ';']",0
FindQuantiles.java,"['int', 'partInd', '=', 'new', 'Long', '(', 'i', '/', 'toSkip', ')', '.', 'intValue', '(', ')', ';', '/', '/', 'which', 'partition']",1
FindQuantiles.java,"['if', '(', 'partInd', '=', '=', 'numQuantiles', ')', 'break', ';']",1
FindQuantiles.java,"['/', '/', 'the', 'quantiles', 'array', 'has', 'the', 'element', 'from', 'the', 'sample', 'which', 'is', 'the']",1
FindQuantiles.java,"['/', '/', 'last', 'element', 'for', 'a', 'given', 'partition', '.', 'For', 'example', ':', 'if', 'numQuantiles']",0
FindQuantiles.java,"['/', '/', 'is', '5', 'and', 'number', 'of', 'samples', 'is', '100', ',', 'then', 'toSkip', '=', '20']",1
FindQuantiles.java,"['/', '/', 'quantiles', '[', '0', ']', '=', 'sample', '[', '19', ']', '/', '/', 'the', '20th', 'element']",1
FindQuantiles.java,"['/', '/', 'quantiles', '[', '1', ']', '=', 'sample', '[', '39', ']', '/', '/', 'the', '40th', 'element']",1
FindQuantiles.java,"['/', '/', 'and', 'so', 'on', '.', 'For', 'any', 'element', 'in', 'the', 'sample', 'between', '0', 'and', '19', ',', 'partInd']",1
FindQuantiles.java,"['/', '/', 'will', 'be', '0', '.', 'We', 'want', 'to', 'check', 'if', 'a', 'sample', 'element', 'which', 'is']",1
FindQuantiles.java,"['/', '/', 'present', 'between', '0', 'and', '19', 'is', 'also', 'the', '19th', '(', 'quantiles', '[', '0', ']', 'element', ')', '.']",0
FindQuantiles.java,"['/', '/', 'This', 'would', 'mean', 'that', 'element', 'might', 'spread', 'over', 'the', '0th', 'and', '1st']",1
FindQuantiles.java,"['/', '/', 'partition', '.', 'We', 'are', 'looking', 'for', 'contributions', 'to', 'a', 'partition']",1
FindQuantiles.java,"['/', '/', 'from', 'such', 'elements', '.']",1
FindQuantiles.java,"['/', '/', 'First', 'We', 'only', 'check', 'for', 'sample', 'elements', 'in', 'partitions', 'other', 'than', 'the', 'last', 'one']",1
FindQuantiles.java,"['/', '/', '<', 'numQuantiles', '-', '1', '(', 'partInd', 'is', '0', 'indexed', ')', '.']",0
FindQuantiles.java,"['if', '(', 'partInd', '<', 'numQuantiles', '-', '1', '&', '&', 'areEqual', '(', 'it', ',', 'quantilesList', '.', 'get', '(', 'partInd', ')', ')', ')', '{']",0
FindQuantiles.java,"['if', '(', '!', 'contribs', '.', 'containsKey', '(', 'it', ')', ')', '{']",0
FindQuantiles.java,"['CountingMap', '<', 'Integer', '>', 'cm', '=', 'new', 'CountingMap', '<', 'Integer', '>', '(', ')', ';']",1
FindQuantiles.java,"['cm', '.', 'put', '(', 'partInd', ',', '1', ')', ';']",1
FindQuantiles.java,"['contribs', '.', 'put', '(', 'it', ',', 'cm', ')', ';']",0
FindQuantiles.java,"['contribs', '.', 'get', '(', 'it', ')', '.', 'put', '(', 'partInd', ',', '1', ')', ';']",0
FindQuantiles.java,"['/', '/', 'we', 'are', 'either', 'in', 'the', 'last', 'partition', '(', 'last', 'quantile', ')']",1
FindQuantiles.java,"['/', '/', 'OR', 'the', 'sample', 'element', 'we', 'are', 'currently', 'processing', 'is', 'not']",1
FindQuantiles.java,"['/', '/', 'the', 'same', 'as', 'the', 'element', 'in', 'the', 'quantile', 'array', 'for', 'this', 'partition']",1
FindQuantiles.java,"['/', '/', 'if', 'we', 'haven', ""'"", 't', 'seen', 'this', 'sample', 'item', 'earlier', ',', 'this', 'is', 'not', 'an']",1
FindQuantiles.java,"['/', '/', 'element', 'which', 'crosses', 'partitions', '-', 'so', 'ignore']",1
FindQuantiles.java,"['if', '(', '!', 'contribs', '.', 'containsKey', '(', 'it', ')', ')']",0
FindQuantiles.java,"['/', '/', 'we', 'have', 'seen', 'this', 'sample', 'before', '(', 'in', 'a', 'previous', 'partInd', ')', ',']",1
FindQuantiles.java,"['/', '/', 'add', 'to', 'the', 'contribution', 'associated', 'with', 'this', 'sample', '-', 'if', 'we', 'had']",1
FindQuantiles.java,"['/', '/', 'not', 'seen', 'this', 'sample', 'in', 'a', 'previous', 'partInd', ',', 'then', 'we', 'would', 'have', 'not']",0
FindQuantiles.java,"['/', '/', 'had', 'this', 'in', 'the', 'contribs', 'map', '!', '(', 'because', 'of', 'the', 'if', 'above', ')', '.', 'This']",1
FindQuantiles.java,"['/', '/', '""', 'key', '""', '(', 'represented', 'by', 'the', 'sample', 'item', ')', 'can', 'either', 'go', 'to', 'the']",0
FindQuantiles.java,"['/', '/', 'previous', 'partInd', 'or', 'this', 'partInd', 'in', 'the', 'final', 'sort', 'reduce', 'stage', '.']",0
FindQuantiles.java,"['/', '/', 'That', 'is', 'where', 'the', 'amount', 'of', 'contribution', 'to', 'each', 'partInd', 'will']",0
FindQuantiles.java,"['/', '/', 'matter', 'and', 'influence', 'the', 'choice', '.']",0
FindQuantiles.java,"['contribs', '.', 'get', '(', 'it', ')', '.', 'put', '(', 'partInd', ',', '1', ')', ';']",0
FindQuantiles.java,"['int', 'k', '=', '0', ';']",0
FindQuantiles.java,"['for', '(', 'Entry', '<', 'Tuple', ',', 'CountingMap', '<', 'Integer', '>', '>', 'ent', ':', 'contribs', '.', 'entrySet', '(', ')', ')', '{']",0
FindQuantiles.java,"['if', '(', 'k', '%', '1000', '=', '=', '0', ')', 'progress', '(', ')', ';']",0
FindQuantiles.java,"['Tuple', 'key', '=', 'ent', '.', 'getKey', '(', ')', ';', '/', '/', 'sample', 'item', 'which', 'repeats']",0
FindQuantiles.java,"['/', '/', 'this', 'map', 'will', 'have', 'the', 'contributions', 'of', 'the', 'sample', 'item', 'to', 'the', 'different', 'partitions']",1
FindQuantiles.java,"['CountingMap', '<', 'Integer', '>', 'value', '=', 'ent', '.', 'getValue', '(', ')', ';']",1
FindQuantiles.java,"['long', 'total', '=', 'value', '.', 'getTotalCount', '(', ')', ';']",1
FindQuantiles.java,"['Tuple', 'probVec', '=', 'mTupleFactory', '.', 'newTuple', '(', 'numQuantiles', '.', 'intValue', '(', ')', ')', ';']",0
FindQuantiles.java,"['/', '/', 'initialize', 'all', 'contribution', 'fractions', 'for', 'different']",0
FindQuantiles.java,"['/', '/', 'partitions', 'to', '0', '.', '0']",0
FindQuantiles.java,"['for', '(', 'int', 'l', '=', '0', ';', 'l', '<', 'numQuantiles', ';', 'l', '+', '+', ')', '{']",0
FindQuantiles.java,"['probVec', '.', 'set', '(', 'l', ',', 'new', 'Float', '(', '0', '.', '0', ')', ')', ';']",0
FindQuantiles.java,"['/', '/', 'for', 'each', 'partition', 'that', 'this', 'sample', 'item', 'is', 'present', 'in', ',']",1
FindQuantiles.java,"['/', '/', 'compute', 'the', 'fraction', 'of', 'the', 'total', 'occurences', 'for', 'that']",1
FindQuantiles.java,"['/', '/', 'partition', '-', 'this', 'will', 'be', 'the', 'probability', 'with', 'which', 'we']",1
FindQuantiles.java,"['/', '/', 'will', 'pick', 'this', 'partition', 'in', 'the', 'final', 'sort', 'reduce', 'job']",1
FindQuantiles.java,"['/', '/', 'for', 'this', 'sample', 'item']",1
FindQuantiles.java,"['for', '(', 'Entry', '<', 'Integer', ',', 'Integer', '>', 'valEnt', ':', 'value', '.', 'entrySet', '(', ')', ')', '{']",1
FindQuantiles.java,"['probVec', '.', 'set', '(', 'valEnt', '.', 'getKey', '(', ')', ',', '(', 'float', ')', 'valEnt', '.', 'getValue', '(', ')', '/', 'total', ')', ';']",0
FindQuantiles.java,"['weightedParts', '.', 'put', '(', 'key', ',', 'probVec', ')', ';']",0
FindQuantiles.java,"['output', '.', 'put', '(', 'QUANTILES_LIST', ',', 'mBagFactory', '.', 'newDefaultBag', '(', 'quantilesList', ')', ')', ';']",0
FindQuantiles.java,"['output', '.', 'put', '(', 'WEIGHTED_PARTS', ',', 'weightedParts', ')', ';']",0
FindQuantiles.java,"['return', 'output', ';']",0
FindQuantiles.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
FindQuantiles.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
FindQuantiles.java,"['throw', 'new', 'RuntimeException', '(', 'e', ')', ';']",0
FindQuantiles.java,"['private', 'boolean', 'areEqual', '(', 'Tuple', 'it', ',', 'Tuple', 'tuple', ')', '{']",0
FindQuantiles.java,"['return', 'mComparator', '.', 'compare', '(', 'it', ',', 'tuple', ')', '=', '=', '0', ';']",0
LOMod.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOMod.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOMod.java,"['public', 'class', 'LOMod', 'extends', 'BinaryExpressionOperator', '{']",0
LOMod.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOMod.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOMod', '.', 'class', ')', ';']",0
LOMod.java,"['/', '*', '*']",1
LOMod.java,"['public', 'LOMod', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOMod.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOMod.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOMod.java,"['return', 'mSchema', ';']",0
LOMod.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOMod.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOMod.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'mergeType', '(', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ',', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ')', ';']",0
LOMod.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOMod.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOMod.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOMod.java,"['return', 'mFieldSchema', ';']",0
LOMod.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOMod.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOMod.java,"['public', 'String', 'name', '(', ')', '{']",0
LOMod.java,"['return', '""', 'Mod', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LONot.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LONot.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LONot.java,"['public', 'class', 'LONot', 'extends', 'UnaryExpressionOperator', '{']",0
LONot.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LONot.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LONot', '.', 'class', ')', ';']",0
LONot.java,"['/', '*', '*']",1
LONot.java,"['public', 'LONot', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LONot.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LONot.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LONot.java,"['return', 'mSchema', ';']",0
LONot.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LONot.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LONot.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LONot.java,"['mFieldSchema', '.', 'setParent', '(', 'getOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getOperand', '(', ')', ')', ';']",0
LONot.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LONot.java,"['return', 'mFieldSchema', ';']",0
LONot.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LONot.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LONot.java,"['public', 'String', 'name', '(', ')', '{']",0
LONot.java,"['return', '""', 'Not', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
MapReducePOStoreImpl.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
MapReducePOStoreImpl.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MapReducePOStoreImpl.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
MapReducePOStoreImpl.java,"['import', 'java', '.', 'text', '.', 'NumberFormat', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileSystem', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'Path', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'FileOutputFormat', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'OutputFormat', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RecordWriter', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'OutputCollector', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Reporter', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreConfig', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreFunc', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'util', '.', 'PlanHelper', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStoreImpl', ';']",0
MapReducePOStoreImpl.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigOutputFormat', ';']",0
MapReducePOStoreImpl.java,"['/', '*', '*']",0
MapReducePOStoreImpl.java,"['public', 'class', 'MapReducePOStoreImpl', 'extends', 'POStoreImpl', '{']",0
MapReducePOStoreImpl.java,"['private', 'PigContext', 'pc', ';']",0
MapReducePOStoreImpl.java,"['private', 'StoreFunc', 'storer', ';']",0
MapReducePOStoreImpl.java,"['private', 'FileSpec', 'sFile', ';']",0
MapReducePOStoreImpl.java,"['private', 'Reporter', 'reporter', ';']",0
MapReducePOStoreImpl.java,"['private', 'RecordWriter', 'writer', ';']",0
MapReducePOStoreImpl.java,"['private', 'JobConf', 'job', ';']",0
MapReducePOStoreImpl.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['public', 'static', 'final', 'String', 'PIG_STORE_CONFIG', '=', '""', 'pig', '.', 'store', '.', 'config', '""', ';']",0
MapReducePOStoreImpl.java,"['public', 'MapReducePOStoreImpl', '(', 'JobConf', 'job', ')', '{']",0
MapReducePOStoreImpl.java,"['this', '.', 'job', '=', 'job', ';']",0
MapReducePOStoreImpl.java,"['public', 'void', 'setReporter', '(', 'Reporter', 'reporter', ')', '{']",0
MapReducePOStoreImpl.java,"['this', '.', 'reporter', '=', 'reporter', ';']",0
MapReducePOStoreImpl.java,"['public', 'StoreFunc', 'createStoreFunc', '(', 'FileSpec', 'sFile', ',', 'Schema', 'schema', ')']",0
MapReducePOStoreImpl.java,"['throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['/', '/', 'set', 'up', 'a', 'new', 'job', 'conf']",0
MapReducePOStoreImpl.java,"['JobConf', 'outputConf', '=', 'new', 'JobConf', '(', 'job', ')', ';']",0
MapReducePOStoreImpl.java,"['String', 'tmpPath', '=', 'PlanHelper', '.', 'makeStoreTmpPath', '(', 'sFile', '.', 'getFileName', '(', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'If', 'the', 'StoreFunc', 'associate', 'with', 'the', 'POStore', 'is', 'implements']",0
MapReducePOStoreImpl.java,"['/', '/', 'getStorePreparationClass', '(', ')', 'and', 'returns', 'a', 'non', 'null', 'value', ',']",0
MapReducePOStoreImpl.java,"['/', '/', 'then', 'it', 'could', 'be', 'wanting', 'to', 'implement', 'OutputFormat', 'for', 'writing', 'out', 'to', 'hadoop']",0
MapReducePOStoreImpl.java,"['/', '/', 'Check', 'if', 'this', 'is', 'the', 'case', ',', 'if', 'so', ',', 'use', 'the', 'OutputFormat', 'class', 'the']",0
MapReducePOStoreImpl.java,"['/', '/', 'StoreFunc', 'gives', 'us', 'else', 'use', 'our', 'default', 'PigOutputFormat']",0
MapReducePOStoreImpl.java,"['Object', 'storeFunc', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'sFile', '.', 'getFuncSpec', '(', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['Class', 'sPrepClass', '=', 'null', ';']",0
MapReducePOStoreImpl.java,"['sPrepClass', '=', '(', '(', 'StoreFunc', ')', 'storeFunc', ')', '.', 'getStorePreparationClass', '(', ')', ';']",0
MapReducePOStoreImpl.java,"['}', 'catch', '(', 'AbstractMethodError', 'e', ')', '{']",0
MapReducePOStoreImpl.java,"['/', '/', 'this', 'is', 'for', 'backward', 'compatibility', 'wherein', 'some', 'old', 'StoreFunc']",0
MapReducePOStoreImpl.java,"['/', '/', 'which', 'does', 'not', 'implement', 'getStorePreparationClass', '(', ')', 'is', 'being']",0
MapReducePOStoreImpl.java,"['/', '/', 'used', '.', 'In', 'this', 'case', ',', 'we', 'want', 'to', 'just', 'use', 'PigOutputFormat']",0
MapReducePOStoreImpl.java,"['sPrepClass', '=', 'null', ';']",0
MapReducePOStoreImpl.java,"['if', '(', 'sPrepClass', '!', '=', 'null', '&', '&', 'OutputFormat', '.', 'class', '.', 'isAssignableFrom', '(', 'sPrepClass', ')', ')', '{']",0
MapReducePOStoreImpl.java,"['outputConf', '.', 'setOutputFormat', '(', 'sPrepClass', ')', ';']",0
MapReducePOStoreImpl.java,"['}', 'else', '{']",1
MapReducePOStoreImpl.java,"['outputConf', '.', 'setOutputFormat', '(', 'PigOutputFormat', '.', 'class', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'PigOuputFormat', 'will', 'look', 'for', 'pig', '.', 'storeFunc', 'to', 'actually']",0
MapReducePOStoreImpl.java,"['/', '/', 'write', 'stuff', 'out', '.']",0
MapReducePOStoreImpl.java,"['/', '/', 'serialize', 'the', 'store', 'func', 'spec', 'using', 'ObjectSerializer']",0
MapReducePOStoreImpl.java,"['/', '/', 'ObjectSerializer', '.', 'serialize', '(', ')', 'uses', 'default', 'java', 'serialization']",0
MapReducePOStoreImpl.java,"['/', '/', 'and', 'then', 'further', 'encodes', 'the', 'output', 'so', 'that', 'control', 'characters']",0
MapReducePOStoreImpl.java,"['/', '/', 'get', 'encoded', 'as', 'regular', 'characters', '.', 'Otherwise', 'any', 'control', 'characters']",0
MapReducePOStoreImpl.java,"['/', '/', 'in', 'the', 'store', 'funcspec', 'would', 'break', 'the', 'job', '.', 'xml', 'which', 'is', 'created', 'by']",0
MapReducePOStoreImpl.java,"['/', '/', 'hadoop', 'from', 'the', 'jobconf', '.']",0
MapReducePOStoreImpl.java,"['outputConf', '.', 'set', '(', '""', 'pig', '.', 'storeFunc', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'sFile', '.', 'getFuncSpec', '(', ')', '.', 'toString', '(', ')', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'We', 'set', 'the', 'output', 'dir', 'to', 'the', 'final', 'location', 'of', 'the', 'output', ',']",0
MapReducePOStoreImpl.java,"['/', '/', 'the', 'output', 'dir', 'set', 'in', 'the', 'original', 'job', 'config', 'points', 'to', 'the']",0
MapReducePOStoreImpl.java,"['/', '/', 'temp', 'location', 'for', 'the', 'multi', 'store', '.']",0
MapReducePOStoreImpl.java,"['Path', 'outputDir', '=', 'new', 'Path', '(', 'sFile', '.', 'getFileName', '(', ')', ')', '.', 'makeQualified', '(', 'FileSystem', '.', 'get', '(', 'outputConf', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['outputConf', '.', 'set', '(', '""', 'mapred', '.', 'output', '.', 'dir', '""', ',', 'outputDir', '.', 'toString', '(', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'Set', 'the', 'schema']",0
MapReducePOStoreImpl.java,"['outputConf', '.', 'set', '(', 'PIG_STORE_CONFIG', ',']",0
MapReducePOStoreImpl.java,"['ObjectSerializer', '.', 'serialize', '(', 'new', 'StoreConfig', '(', 'outputDir', '.', 'toString', '(', ')', ',', 'schema', ')', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'The', 'workpath', 'is', 'set', 'to', 'a', 'unique', '-', 'per', '-', 'store', 'subdirectory', 'of']",0
MapReducePOStoreImpl.java,"['/', '/', 'the', 'current', 'working', 'directory', '.']",0
MapReducePOStoreImpl.java,"['String', 'workPath', '=', 'outputConf', '.', 'get', '(', '""', 'mapred', '.', 'work', '.', 'output', '.', 'dir', '""', ')', ';']",0
MapReducePOStoreImpl.java,"['outputConf', '.', 'set', '(', '""', 'mapred', '.', 'work', '.', 'output', '.', 'dir', '""', ',']",0
MapReducePOStoreImpl.java,"['new', 'Path', '(', 'workPath', ',', 'tmpPath', ')', '.', 'toString', '(', ')', ')', ';']",0
MapReducePOStoreImpl.java,"['OutputFormat', 'outputFormat', '=', 'outputConf', '.', 'getOutputFormat', '(', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'Generate', 'a', 'unique', 'part', 'name', '(', 'part', '-', '<', 'task_partition_number', '>', ')', '.']",0
MapReducePOStoreImpl.java,"['String', 'fileName', '=', 'getPartName', '(', 'outputConf', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'create', 'a', 'new', 'record', 'writer']",0
MapReducePOStoreImpl.java,"['writer', '=', 'outputFormat', '.', 'getRecordWriter', '(', 'FileSystem', '.', 'get', '(', 'outputConf', ')', ',']",0
MapReducePOStoreImpl.java,"['outputConf', ',', 'fileName', ',', 'reporter', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '/', 'return', 'an', 'output', 'collector', 'using', 'the', 'writer', 'we', 'just', 'created', '.']",0
MapReducePOStoreImpl.java,"['return', 'new', 'StoreFuncAdaptor', '(', 'new', 'OutputCollector', '(', ')']",0
MapReducePOStoreImpl.java,"['@', 'SuppressWarnings', '(', '{', '""', 'unchecked', '""', '}', ')']",0
MapReducePOStoreImpl.java,"['public', 'void', 'collect', '(', 'Object', 'key', ',', 'Object', 'value', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['writer', '.', 'write', '(', 'key', ',', 'value', ')', ';']",0
MapReducePOStoreImpl.java,"['}', ')', ';']",0
MapReducePOStoreImpl.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['if', '(', 'writer', '!', '=', 'null', ')', '{']",0
MapReducePOStoreImpl.java,"['writer', '.', 'close', '(', 'reporter', ')', ';']",0
MapReducePOStoreImpl.java,"['writer', '=', 'null', ';']",0
MapReducePOStoreImpl.java,"['public', 'void', 'cleanUp', '(', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['if', '(', 'writer', '!', '=', 'null', ')', '{']",0
MapReducePOStoreImpl.java,"['writer', '.', 'close', '(', 'reporter', ')', ';']",0
MapReducePOStoreImpl.java,"['writer', '=', 'null', ';']",0
MapReducePOStoreImpl.java,"['private', 'String', 'getPartName', '(', 'JobConf', 'conf', ')', '{']",0
MapReducePOStoreImpl.java,"['int', 'partition', '=', 'conf', '.', 'getInt', '(', '""', 'mapred', '.', 'task', '.', 'partition', '""', ',', '-', '1', ')', ';']",0
MapReducePOStoreImpl.java,"['NumberFormat', 'numberFormat', '=', 'NumberFormat', '.', 'getInstance', '(', ')', ';']",0
MapReducePOStoreImpl.java,"['numberFormat', '.', 'setMinimumIntegerDigits', '(', '5', ')', ';']",0
MapReducePOStoreImpl.java,"['numberFormat', '.', 'setGroupingUsed', '(', 'false', ')', ';']",0
MapReducePOStoreImpl.java,"['return', '""', 'part', '-', '""', '+', 'numberFormat', '.', 'format', '(', 'partition', ')', ';']",0
MapReducePOStoreImpl.java,"['/', '*', '*']",0
MapReducePOStoreImpl.java,"['private', 'class', 'StoreFuncAdaptor', 'implements', 'StoreFunc', '{']",0
MapReducePOStoreImpl.java,"['private', 'OutputCollector', 'collector', ';']",0
MapReducePOStoreImpl.java,"['public', 'StoreFuncAdaptor', '(', 'OutputCollector', 'collector', ')', '{']",0
MapReducePOStoreImpl.java,"['this', '.', 'collector', '=', 'collector', ';']",0
MapReducePOStoreImpl.java,"['public', 'void', 'bindTo', '(', 'OutputStream', 'os', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['public', 'void', 'putNext', '(', 'Tuple', 'f', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['collector', '.', 'collect', '(', 'null', ',', 'f', ')', ';']",0
MapReducePOStoreImpl.java,"['public', 'void', 'finish', '(', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['public', 'Class', 'getStorePreparationClass', '(', ')', 'throws', 'IOException', '{']",0
MapReducePOStoreImpl.java,"['return', 'null', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', '.', 'TypeCheckingValidator', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanValidationException', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', '.', 'FieldSchema', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'static', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TypeCheckingTestUtil', '.', '*', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TypeCheckingTestUtil', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'class', 'TestTypeCheckingValidatorNoSchema', 'extends', 'TestCase', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testUnion1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOUnion', 'union', '=', 'new', 'LOUnion', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'validate']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'outputSchema', '=', 'union', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'outputSchema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testUnion2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', '[', ']', 'aliases', '=', 'new', 'String', '[', ']', '{', '""', 'a', '""', ',', '""', 'b', '""', ',', '""', 'c', '""', '}', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['byte', '[', ']', 'types', '=', 'new', 'byte', '[', ']', '{', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'BYTEARRAY', '}', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'schema1', '=', 'genFlatSchema', '(', 'aliases', ',', 'types', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'schema1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOUnion', 'union', '=', 'new', 'LOUnion', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'union', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'validate']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'outputSchema', '=', 'union', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'outputSchema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'expression', 'cond', 'columns']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testSplitWithInnerPlan1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLesserThanEqual', 'lesser21', '=', 'new', 'LOLesserThanEqual', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'lesser21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'lesser21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'lesser21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidatorNoSchema.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'split']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplit', 'split1', '=', 'new', 'LOSplit', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'output1']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplitOutput', 'splitOutput1', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '0', ',', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['split1', '.', 'addOutput', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'output2']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplitOutput', 'splitOutput2', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '1', ',', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['split1', '.', 'addOutput', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'split1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'split1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'split', 'itself']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'split1', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'split', 'output', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'splitOutput1', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'splitOutput2', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'inner', 'conditions', ':', 'all', 'have', 'to', 'be', 'boolean']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan1', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan2', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Negative', 'test', 'in', 'cond', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testSplitWithInnerPlan2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LONotEqual', 'notequal1', '=', 'new', 'LONotEqual', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'notequal1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const22', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '""', 'hoho', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const22', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract21', '=', 'new', 'LOSubtract', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'const22', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'subtract21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'add21', ',', 'subtract21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'const22', ',', 'subtract21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidatorNoSchema.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'split']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplit', 'split1', '=', 'new', 'LOSplit', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'output1']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplitOutput', 'splitOutput1', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '0', ',', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['split1', '.', 'addOutput', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'output2']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSplitOutput', 'splitOutput2', '=', 'new', 'LOSplitOutput', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', '1', ',', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['split1', '.', 'addOutput', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'split1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'split1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'split1', ',', 'splitOutput2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'good']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testDistinct1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LODistinct', 'distinct1', '=', 'new', 'LODistinct', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'distinct1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'distinct1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'validate']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'end', 'result', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'distinct1', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'expression', 'sort', 'columns']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testSort1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project12', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOMultiply', 'mul1', '=', 'new', 'LOMultiply', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project12', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'mul1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project12', ',', 'mul1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const21', '=', 'new', 'LOConst', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const21', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOMod', 'mod21', '=', 'new', 'LOMod', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'const21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'mod21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'const21', ',', 'mod21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'innerplans']",0
TestTypeCheckingValidatorNoSchema.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'ASC', 'flags']",0
TestTypeCheckingValidatorNoSchema.java,"['List', '<', 'Boolean', '>', 'ascList', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['ascList', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Sort']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSort', 'sort1', '=', 'new', 'LOSort', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlans', ',', 'ascList', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'sort1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'sort1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'sort1', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'expression', 'column']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testFilter1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'inner', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project1', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project2', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project2', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const1', '=', 'new', 'LOConst', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', '10', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const1', '.', 'setType', '(', 'DataType', '.', 'LONG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOGreaterThan', 'gt1', '=', 'new', 'LOGreaterThan', '(', 'innerPlan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'project1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'project2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'const1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'project1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'project2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'add1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'const1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'filter']",0
TestTypeCheckingValidatorNoSchema.java,"['LOFilter', 'filter1', '=', 'new', 'LOFilter', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'filter1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'filter1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'filter1', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Negative', 'expression', 'column']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testFilter2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'outer', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'new', 'LOLoad', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['new', 'FileSpec', '(', '""', 'pi', '""', ',', 'new', 'FuncSpec', '(', 'pigStorage', ')', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['null', ',', 'null', ',', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'inner', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project1', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project1', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project2', '=', 'new', 'LOProject', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project2', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOAdd', 'add1', '=', 'new', 'LOAdd', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const1', '=', 'new', 'LOConst', '(', 'innerPlan', ',', 'genNewOperatorKey', '(', ')', ',', '""', '10', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const1', '.', 'setType', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOGreaterThan', 'gt1', '=', 'new', 'LOGreaterThan', '(', 'innerPlan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'project1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'project2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'const1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'add', '(', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'project1', ',', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'project2', ',', 'add1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'add1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan', '.', 'connect', '(', 'const1', ',', 'gt1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'filter']",0
TestTypeCheckingValidatorNoSchema.java,"['LOFilter', 'filter1', '=', 'new', 'LOFilter', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'innerPlan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'filter1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'filter1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['fail', '(', '""', 'Exception', 'expected', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['catch', '(', 'PlanValidationException', 'pve', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'good']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', '!', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'an', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testCross1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'schema', 'for', 'input', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'inputSchema1', '=', 'null', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['List', '<', 'FieldSchema', '>', 'fsList1', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field1a', '""', ',', 'DataType', '.', 'INTEGER', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['fsList1', '.', 'add', '(', 'new', 'FieldSchema', '(', '""', 'field2a', '""', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputSchema1', '=', 'new', 'Schema', '(', 'fsList1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'inputSchema1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOCross', 'cross', '=', 'new', 'LOCross', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'validate']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testCross2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'create', 'union', 'operator']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputList', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputList', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOCross', 'cross', '=', 'new', 'LOCross', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'wiring']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cross', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'validate']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'cross', '.', 'getSchema', '(', ')', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testCOGroupByAtom1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan11', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project111', '=', 'new', 'LOProject', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project111', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const111', '=', 'new', 'LOConst', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const111', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract111', '=', 'new', 'LOSubtract', '(', 'innerPlan11', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'project111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'const111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'connect', '(', 'project111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'connect', '(', 'const111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan12', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project121', '=', 'new', 'LOProject', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', 'load2', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project121', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const121', '=', 'new', 'LOConst', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const121', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract121', '=', 'new', 'LOSubtract', '(', 'innerPlan12', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'project121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'const121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'connect', '(', 'project121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'connect', '(', 'const121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'Cogroup']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputs', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputs', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputs', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'maps']",0
TestTypeCheckingValidatorNoSchema.java,"['=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan12', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['boolean', '[', ']', 'isInner', '=', 'new', 'boolean', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['isInner', '[', 'i', ']', '=', 'false', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOCogroup', 'cogroup1', '=', 'new', 'LOCogroup', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['isInner', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'endResultSchema', '=', 'cogroup1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Tuple', 'group', 'column']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'inner', 'schema1']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'schema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'schema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'group', 'by', 'col', 'end', 'result']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan11', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan12', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testCOGroupByTuple1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['String', 'pigStorage', '=', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load2', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['load2', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan11', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project111', '=', 'new', 'LOProject', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project111', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const111', '=', 'new', 'LOConst', '(', 'innerPlan11', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const111', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract111', '=', 'new', 'LOSubtract', '(', 'innerPlan11', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'project111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'const111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'add', '(', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'connect', '(', 'project111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan11', '.', 'connect', '(', 'const111', ',', 'subtract111', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2', 'of', 'input', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan21', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project211', '=', 'new', 'LOProject', '(', 'innerPlan21', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project211', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project212', '=', 'new', 'LOProject', '(', 'innerPlan21', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project212', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOAdd', 'add211', '=', 'new', 'LOAdd', '(', 'innerPlan21', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan21', '.', 'add', '(', 'project211', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan21', '.', 'add', '(', 'project212', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan21', '.', 'add', '(', 'add211', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan21', '.', 'connect', '(', 'project211', ',', 'add211', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan21', '.', 'connect', '(', 'project212', ',', 'add211', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1', 'of', 'input', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan12', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project121', '=', 'new', 'LOProject', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', 'load2', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project121', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const121', '=', 'new', 'LOConst', '(', 'innerPlan12', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const121', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract121', '=', 'new', 'LOSubtract', '(', 'innerPlan12', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'project121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'const121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'add', '(', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'connect', '(', 'project121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan12', '.', 'connect', '(', 'const121', ',', 'subtract121', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2', 'of', 'input', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan22', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const122', '=', 'new', 'LOConst', '(', 'innerPlan22', ',', 'genNewOperatorKey', '(', ')', ',', '26', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const122', '.', 'setType', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan22', '.', 'add', '(', 'const122', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'Cogroup']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalOperator', '>', 'inputs', '=', 'new', 'ArrayList', '<', 'LogicalOperator', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputs', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['inputs', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'maps']",0
TestTypeCheckingValidatorNoSchema.java,"['=', 'new', 'MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load1', ',', 'innerPlan21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan12', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['maps', '.', 'put', '(', 'load2', ',', 'innerPlan22', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['boolean', '[', ']', 'isInner', '=', 'new', 'boolean', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'isInner', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['isInner', '[', 'i', ']', '=', 'false', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOCogroup', 'cogroup1', '=', 'new', 'LOCogroup', '(', 'plan', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['isInner', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load2', ',', 'cogroup1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingTestUtil', '.', 'printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'endResultSchema', '=', 'cogroup1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Tuple', 'group', 'column']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'schema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'schema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'type', ',', 'DataType', '.', 'BAG', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'inner', 'schema1']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'schema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '2', ')', '.', 'schema', ',', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'group', 'by', 'col', 'end', 'result']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan11', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan21', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan12', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'innerPlan22', '.', 'getSingleLeafPlanOutputType', '(', ')', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Positive', 'test']",0
TestTypeCheckingValidatorNoSchema.java,"['public', 'void', 'testForEachGenerate1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['printCurrentMethodName', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'plan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOLoad', 'load1', '=', 'genDummyLOLoad', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'set', 'schemas']",0
TestTypeCheckingValidatorNoSchema.java,"['load1', '.', 'setEnforcedSchema', '(', 'null', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '1']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan1', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project11', '=', 'new', 'LOProject', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project11', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOConst', 'const11', '=', 'new', 'LOConst', '(', 'innerPlan1', ',', 'genNewOperatorKey', '(', ')', ',', '26F', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['const11', '.', 'setType', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOSubtract', 'subtract11', '=', 'new', 'LOSubtract', '(', 'innerPlan1', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'project11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'const11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'add', '(', 'subtract11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'project11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan1', '.', 'connect', '(', 'const11', ',', 'subtract11', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'expression', 'inner', 'plan', '#', '2']",0
TestTypeCheckingValidatorNoSchema.java,"['LogicalPlan', 'innerPlan2', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project21', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '0', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOProject', 'project22', '=', 'new', 'LOProject', '(', 'innerPlan2', ',', 'genNewOperatorKey', '(', ')', ',', 'load1', ',', '1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['project21', '.', 'setSentinel', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['LOAdd', 'add21', '=', 'new', 'LOAdd', '(', 'innerPlan2', ',']",0
TestTypeCheckingValidatorNoSchema.java,"['genNewOperatorKey', '(', ')', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'project21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'project22', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'add', '(', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'project21', ',', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['innerPlan2', '.', 'connect', '(', 'project22', ',', 'add21', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'plans']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['generatePlans', '.', 'add', '(', 'innerPlan1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['generatePlans', '.', 'add', '(', 'innerPlan2', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'List', 'of', 'flatten', 'flags']",0
TestTypeCheckingValidatorNoSchema.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['flattens', '.', 'add', '(', 'true', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'Create', 'LOForEach']",0
TestTypeCheckingValidatorNoSchema.java,"['LOForEach', 'foreach1', '=', 'new', 'LOForEach', '(', 'plan', ',', 'genNewOperatorKey', '(', ')', ',', 'generatePlans', ',', 'flattens', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'construct', 'the', 'main', 'plan']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'load1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'add', '(', 'foreach1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['plan', '.', 'connect', '(', 'load1', ',', 'foreach1', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['TypeCheckingValidator', 'typeValidator', '=', 'new', 'TypeCheckingValidator', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['typeValidator', '.', 'validate', '(', 'plan', ',', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printMessageCollector', '(', 'collector', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['printTypeGraph', '(', 'plan', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['if', '(', 'collector', '.', 'hasError', '(', ')', ')', '{']",0
TestTypeCheckingValidatorNoSchema.java,"['throw', 'new', 'AssertionError', '(', '""', 'Expect', 'no', 'error', '""', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['/', '/', 'check', 'outer', 'schema']",0
TestTypeCheckingValidatorNoSchema.java,"['Schema', 'endResultSchema', '=', 'foreach1', '.', 'getSchema', '(', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '0', ')', '.', 'type', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TestTypeCheckingValidatorNoSchema.java,"['assertEquals', '(', 'endResultSchema', '.', 'getField', '(', '1', ')', '.', 'type', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
LOLesserThan.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOLesserThan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOLesserThan.java,"['public', 'class', 'LOLesserThan', 'extends', 'BinaryExpressionOperator', '{']",0
LOLesserThan.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOLesserThan.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOLesserThan', '.', 'class', ')', ';']",0
LOLesserThan.java,"['/', '*', '*']",1
LOLesserThan.java,"['public', 'LOLesserThan', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOLesserThan.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOLesserThan.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOLesserThan.java,"['return', 'mSchema', ';']",0
LOLesserThan.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOLesserThan.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOLesserThan.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOLesserThan.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOLesserThan.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOLesserThan.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOLesserThan.java,"['return', 'mFieldSchema', ';']",0
LOLesserThan.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOLesserThan.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOLesserThan.java,"['public', 'String', 'name', '(', ')', '{']",0
LOLesserThan.java,"['return', '""', 'LesserThan', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
TestUnion.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestUnion.java,"['import', 'static', 'org', '.', 'junit', '.', 'Assert', '.', 'assertEquals', ';']",0
TestUnion.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestUnion.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestUnion.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DefaultBagFactory', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DefaultTuple', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFilter', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POForEach', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLoad', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POUnion', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'GenPhyOp', ';']",0
TestUnion.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TestHelper', ';']",0
TestUnion.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestUnion.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestUnion.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestUnion.java,"['/', '*', '*']",0
TestUnion.java,"['public', 'class', 'TestUnion', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestUnion.java,"['POUnion', 'sp', ';']",0
TestUnion.java,"['DataBag', 'expBag', ';']",0
TestUnion.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestUnion.java,"['PigContext', 'pc', '=', 'new', 'PigContext', '(', ')', ';']",0
TestUnion.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestUnion.java,"['pc', '.', 'connect', '(', ')', ';']",0
TestUnion.java,"['GenPhyOp', '.', 'setPc', '(', 'pc', ')', ';']",0
TestUnion.java,"['POLoad', 'ld1', '=', 'GenPhyOp', '.', 'topLoadOp', '(', ')', ';']",0
TestUnion.java,"['String', 'curDir', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'dir', '""', ')', ';']",0
TestUnion.java,"['String', 'inpDir', '=', 'curDir', '+', 'File', '.', 'separatorChar', '+', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'InputFiles', '/', '""', ';']",0
TestUnion.java,"['FileSpec', 'fSpec', '=', 'new', 'FileSpec', '(', '""', 'file', ':', '""', '+', 'inpDir', '+', '""', 'passwd', '""', ',', 'new', 'FuncSpec', '(', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ',', 'new', 'String', '[', ']', '{', '""', ':', '""', '}', ')', ')', ';']",0
TestUnion.java,"['ld1', '.', 'setLFile', '(', 'fSpec', ')', ';']",0
TestUnion.java,"['POLoad', 'ld2', '=', 'GenPhyOp', '.', 'topLoadOp', '(', ')', ';']",0
TestUnion.java,"['ld2', '.', 'setLFile', '(', 'fSpec', ')', ';']",0
TestUnion.java,"['POFilter', 'fl1', '=', 'GenPhyOp', '.', 'topFilterOpWithProj', '(', '1', ',', '50', ',', 'GenPhyOp', '.', 'LTE', ')', ';']",0
TestUnion.java,"['POFilter', 'fl2', '=', 'GenPhyOp', '.', 'topFilterOpWithProj', '(', '1', ',', '50', ',', 'GenPhyOp', '.', 'GT', ')', ';']",0
TestUnion.java,"['int', '[', ']', 'flds', '=', '{', '0', ',', '2', '}', ';']",0
TestUnion.java,"['Tuple', 'sample', '=', 'new', 'DefaultTuple', '(', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'S', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'x', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'Integer', '(', '""', '10', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'Integer', '(', '""', '20', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'S', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'x', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'S', '""', ')', ')', ';']",0
TestUnion.java,"['sample', '.', 'append', '(', 'new', 'String', '(', '""', 'x', '""', ')', ')', ';']",0
TestUnion.java,"['POForEach', 'fe1', '=', 'GenPhyOp', '.', 'topForEachOPWithPlan', '(', 'flds', ',', 'sample', ')', ';']",0
TestUnion.java,"['POForEach', 'fe2', '=', 'GenPhyOp', '.', 'topForEachOPWithPlan', '(', 'flds', ',', 'sample', ')', ';']",0
TestUnion.java,"['sp', '=', 'GenPhyOp', '.', 'topUnionOp', '(', ')', ';']",0
TestUnion.java,"['PhysicalPlan', 'plan', '=', 'new', 'PhysicalPlan', '(', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'ld1', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'ld2', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'fl1', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'fl2', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'fe1', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'fe2', ')', ';']",0
TestUnion.java,"['plan', '.', 'add', '(', 'sp', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'ld1', ',', 'fe1', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'fe1', ',', 'fl1', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'ld2', ',', 'fe2', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'fe2', ',', 'fl2', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'fl1', ',', 'sp', ')', ';']",0
TestUnion.java,"['plan', '.', 'connect', '(', 'fl2', ',', 'sp', ')', ';']",0
TestUnion.java,"['/', '*', 'PlanPrinter', 'ppp', '=', 'new', 'PlanPrinter', '(', 'plan', ')', ';']",0
TestUnion.java,"['ppp', '.', 'visit', '(', ')', ';', '*', '/']",0
TestUnion.java,"['POLoad', 'ld3', '=', 'GenPhyOp', '.', 'topLoadOp', '(', ')', ';']",0
TestUnion.java,"['ld3', '.', 'setLFile', '(', 'fSpec', ')', ';']",0
TestUnion.java,"['DataBag', 'fullBag', '=', 'DefaultBagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
TestUnion.java,"['Tuple', 't', '=', 'null', ';']",0
TestUnion.java,"['for', '(', 'Result', 'res', '=', 'ld3', '.', 'getNext', '(', 't', ')', ';', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_EOP', ';', 'res', '=', 'ld3', '.', 'getNext', '(', 't', ')', ')', '{']",0
TestUnion.java,"['fullBag', '.', 'add', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ';']",0
TestUnion.java,"['int', '[', ']', 'fields', '=', '{', '0', ',', '2', '}', ';']",0
TestUnion.java,"['expBag', '=', 'TestHelper', '.', 'projectBag', '(', 'fullBag', ',', 'fields', ')', ';']",0
TestUnion.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestUnion.java,"['private', 'Tuple', 'castToDBA', '(', 'Tuple', 'in', ')', 'throws', 'ExecException', '{']",0
TestUnion.java,"['Tuple', 'res', '=', 'new', 'DefaultTuple', '(', ')', ';']",0
TestUnion.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'in', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TestUnion.java,"['DataByteArray', 'dba', '=', 'new', 'DataByteArray', '(', 'in', '.', 'get', '(', 'i', ')', '.', 'toString', '(', ')', ')', ';']",0
TestUnion.java,"['res', '.', 'append', '(', 'dba', ')', ';']",0
TestUnion.java,"['return', 'res', ';']",1
TestUnion.java,"['public', 'void', 'testGetNextTuple', '(', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
TestUnion.java,"['Tuple', 't', '=', 'null', ';']",0
TestUnion.java,"['DataBag', 'outBag', '=', 'DefaultBagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
TestUnion.java,"['for', '(', 'Result', 'res', '=', 'sp', '.', 'getNext', '(', 't', ')', ';', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_EOP', ';', 'res', '=', 'sp', '.', 'getNext', '(', 't', ')', ')', '{']",0
TestUnion.java,"['outBag', '.', 'add', '(', 'castToDBA', '(', '(', 'Tuple', ')', 'res', '.', 'result', ')', ')', ';']",0
TestUnion.java,"['assertEquals', '(', 'true', ',', 'TestHelper', '.', 'compareBags', '(', 'expBag', ',', 'outBag', ')', ')', ';']",0
TestUnion.java,"['/', '/', 'Test', 'the', 'case', 'when', 'POUnion', 'is', 'one', 'of', 'the', 'roots', 'in', 'a', 'map', 'reduce']",0
TestUnion.java,"['/', '/', 'plan', 'and', 'the', 'input', 'to', 'it', 'can', 'be', 'null']",0
TestUnion.java,"['/', '/', 'This', 'can', 'happen', 'when', 'we', 'have']",0
TestUnion.java,"['/', '/', 'a', 'plan', 'like', 'below']",0
TestUnion.java,"['/', '/', 'POUnion']",0
TestUnion.java,"['/', '/', '|']",0
TestUnion.java,"['/', '/', '|', '-', '-', 'POLocalRearrange']",0
TestUnion.java,"['/', '/', '|', '|']",0
TestUnion.java,"['/', '/', '|', '|', '-', 'POUnion', '(', 'root', '2', ')', '-', '-', '>', 'This', 'union', ""'"", 's', 'getNext', '(', ')', 'can', 'lead', 'the', 'code', 'here']",0
TestUnion.java,"['/', '/', '|']",0
TestUnion.java,"['/', '/', '|', '-', '-', 'POLocalRearrange', '(', 'root', '1', ')']",0
TestUnion.java,"['/', '/', 'The', 'inner', 'POUnion', 'above', 'is', 'a', 'root', 'in', 'the', 'plan', 'which', 'has', '2', 'roots', '.']",0
TestUnion.java,"['/', '/', 'So', 'these', '2', 'roots', 'would', 'have', 'input', 'coming', 'from', 'different', 'input']",0
TestUnion.java,"['/', '/', 'sources', '(', 'dfs', 'files', ')', '.', 'So', 'certain', 'maps', 'would', 'be', 'working', 'on', 'input', 'only']",0
TestUnion.java,"['/', '/', 'meant', 'for', '""', 'root', '1', '""', 'above', 'and', 'some', 'maps', 'would', 'work', 'on', 'input']",0
TestUnion.java,"['/', '/', 'meant', 'only', 'for', '""', 'root', '2', '""', '.', 'In', 'the', 'former', 'case', ',', '""', 'root', '2', '""', 'would']",0
TestUnion.java,"['/', '/', 'neither', 'get', 'input', 'attached', 'to', 'it', 'nor', 'does', 'it', 'have', 'predecessors']",0
TestUnion.java,"['public', 'void', 'testGetNextNullInput', '(', ')', 'throws', 'Exception', '{']",0
TestUnion.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'a', '.', 'txt', '""', ',', 'new', 'String', '[', ']', '{', '""', '1', '\\', 't2', '\\', 't3', '""', ',', '""', '4', '\\', 't5', '\\', 't6', '""', '}', ')', ';']",0
TestUnion.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'b', '.', 'txt', '""', ',', 'new', 'String', '[', ']', '{', '""', '7', '\\', 't8', '\\', 't9', '""', ',', '""', '1', '\\', 't200', '\\', 't300', '""', '}', ')', ';']",0
TestUnion.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'c', '.', 'txt', '""', ',', 'new', 'String', '[', ']', '{', '""', '1', '\\', 't20', '\\', 't30', '""', '}', ')', ';']",0
TestUnion.java,"['FileLocalizer', '.', 'deleteTempFiles', '(', ')', ';']",0
TestUnion.java,"['PigServer', 'pig', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestUnion.java,"['pig', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", 'a', '.', 'txt', ""'"", ';', '""', ')', ';']",0
TestUnion.java,"['pig', '.', 'registerQuery', '(', '""', 'b', '=', 'load', ""'"", 'b', '.', 'txt', ""'"", ';', '""', ')', ';']",0
TestUnion.java,"['pig', '.', 'registerQuery', '(', '""', 'c', '=', 'union', 'a', ',', 'b', ';', '""', ')', ';']",0
TestUnion.java,"['pig', '.', 'registerQuery', '(', '""', 'd', '=', 'load', ""'"", 'c', '.', 'txt', ""'"", ';', '""', ')', ';']",0
TestUnion.java,"['pig', '.', 'registerQuery', '(', '""', 'e', '=', 'cogroup', 'c', 'by', '$', '0', 'inner', ',', 'd', 'by', '$', '0', 'inner', ';', '""', ')', ';']",0
TestUnion.java,"['pig', '.', 'explain', '(', '""', 'e', '""', ',', 'System', '.', 'err', ')', ';']",0
TestUnion.java,"['/', '/', 'output', 'should', 'be']",0
TestUnion.java,"['/', '/', '(', '1', ',', '{', '(', '1', ',', '2', ',', '3', ')', ',', '(', '1', ',', '200', ',', '300', ')', '}', ',', '{', '(', '1', ',', '20', ',', '30', ')', '}', ')']",0
TestUnion.java,"['Tuple', 'expectedResult', '=', 'new', 'DefaultTuple', '(', ')', ';']",0
TestUnion.java,"['expectedResult', '.', 'append', '(', 'new', 'DataByteArray', '(', '""', '1', '""', ')', ')', ';']",0
TestUnion.java,"['Tuple', '[', ']', 'secondFieldContents', '=', 'new', 'DefaultTuple', '[', '2', ']', ';']",0
TestUnion.java,"['secondFieldContents', '[', '0', ']', '=', 'Util', '.', 'createTuple', '(', 'Util', '.', 'toDataByteArrays', '(', 'new', 'String', '[', ']', '{', '""', '1', '""', ',', '""', '2', '""', ',', '""', '3', '""', '}', ')', ')', ';']",0
TestUnion.java,"['secondFieldContents', '[', '1', ']', '=', 'Util', '.', 'createTuple', '(', 'Util', '.', 'toDataByteArrays', '(', 'new', 'String', '[', ']', '{', '""', '1', '""', ',', '""', '200', '""', ',', '""', '300', '""', '}', ')', ')', ';']",0
TestUnion.java,"['DataBag', 'secondField', '=', 'Util', '.', 'createBag', '(', 'secondFieldContents', ')', ';']",0
TestUnion.java,"['expectedResult', '.', 'append', '(', 'secondField', ')', ';']",0
TestUnion.java,"['DataBag', 'thirdField', '=', 'Util', '.', 'createBag', '(', 'new', 'Tuple', '[', ']', '{', 'Util', '.', 'createTuple', '(', 'Util', '.', 'toDataByteArrays', '(', 'new', 'String', '[', ']', '{', '""', '1', '""', ',', '""', '20', '""', ',', '""', '30', '""', '}', ')', ')', '}', ')', ';']",0
TestUnion.java,"['expectedResult', '.', 'append', '(', 'thirdField', ')', ';']",0
TestUnion.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pig', '.', 'openIterator', '(', '""', 'e', '""', ')', ';']",0
TestUnion.java,"['assertEquals', '(', 'expectedResult', ',', 'it', '.', 'next', '(', ')', ')', ';']",0
TestUnion.java,"['assertFalse', '(', 'it', '.', 'hasNext', '(', ')', ')', ';']",0
TestUnion.java,"['/', '/', 'Test', 'schema', 'merge', 'in', 'union', 'when', 'one', 'of', 'the', 'fields', 'is', 'a', 'bag']",0
TestUnion.java,"['public', 'void', 'testSchemaMergeWithBag', '(', ')', 'throws', 'Exception', '{']",0
TestUnion.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'input1', '.', 'txt', '""', ',', 'new', 'String', '[', ']', '{', '""', 'dummy', '""', '}', ')', ';']",0
TestUnion.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'input2', '.', 'txt', '""', ',', 'new', 'String', '[', ']', '{', '""', 'dummy', '""', '}', ')', ';']",0
TestUnion.java,"['PigServer', 'pig', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestUnion.java,"['Util', '.', 'registerMultiLineQuery', '(', 'pig', ',', '""', 'a', '=', 'load', ""'"", 'input1', '.', 'txt', ""'"", ';', '""', '+']",0
TestUnion.java,"['""', 'b', '=', 'load', ""'"", 'input2', '.', 'txt', ""'"", ';', '""', '+']",0
TestUnion.java,"['""', 'c', '=', 'foreach', 'a', 'generate', '1', ',', '{', '(', '1', ',', ""'"", 'str1', ""'"", ')', '}', ';', '""', '+']",0
TestUnion.java,"['""', 'd', '=', 'foreach', 'b', 'generate', '2', ',', '{', '(', '2', ',', ""'"", 'str2', ""'"", ')', '}', ';', '""', '+']",0
TestUnion.java,"['""', 'e', '=', 'union', 'c', ',', 'd', ';', '""', '+']",0
TestUnion.java,"['""', '""', ')', ';']",0
TestUnion.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pig', '.', 'openIterator', '(', '""', 'e', '""', ')', ';']",0
TestUnion.java,"['Object', '[', ']', 'expected', '=', 'new', 'Object', '[', ']', '{', 'Util', '.', 'getPigConstant', '(', '""', '(', '1', ',', '{', '(', '1', ',', ""'"", 'str1', ""'"", ')', '}', ')', '""', ')', ',']",0
TestUnion.java,"['Util', '.', 'getPigConstant', '(', '""', '(', '2', ',', '{', '(', '2', ',', ""'"", 'str2', ""'"", ')', '}', ')', '""', ')', '}', ';']",0
TestUnion.java,"['Object', '[', ']', 'results', '=', 'new', 'Object', '[', '2', ']', ';']",0
TestUnion.java,"['int', 'i', '=', '0', ';']",0
TestUnion.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
TestUnion.java,"['if', '(', 'i', '=', '=', '2', ')', '{']",0
TestUnion.java,"['fail', '(', '""', 'Got', 'more', 'tuples', 'than', 'expected', '!', '""', ')', ';']",0
TestUnion.java,"['Tuple', 't', '=', 'it', '.', 'next', '(', ')', ';']",0
TestUnion.java,"['if', '(', 't', '.', 'get', '(', '0', ')', '.', 'equals', '(', '1', ')', ')', '{']",0
TestUnion.java,"['/', '/', 'this', 'is', 'the', 'first', 'tuple']",0
TestUnion.java,"['results', '[', '0', ']', '=', 't', ';']",0
TestUnion.java,"['}', 'else', '{']",0
TestUnion.java,"['results', '[', '1', ']', '=', 't', ';']",0
TestUnion.java,"['i', '+', '+', ';']",0
TestUnion.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'expected', '.', 'length', ';', 'j', '+', '+', ')', '{']",0
TestUnion.java,"['assertTrue', '(', 'expected', '[', 'j', ']', '.', 'equals', '(', 'results', '[', 'j', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
TestOperatorPlan.java,"['import', 'java', '.', 'util', '.', 'TreeSet', ';']",0
TestOperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', '*', ';']",0
TestOperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', '*', ';']",0
TestOperatorPlan.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestOperatorPlan.java,"['/', '*', '*']",1
TestOperatorPlan.java,"['public', 'class', 'TestOperatorPlan', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestOperatorPlan.java,"['private', 'int', 'mNextKey', '=', '0', ';']",0
TestOperatorPlan.java,"['private', 'static', 'final', 'String', 'SCOPE', '=', '""', 'RULE', '""', ';']",0
TestOperatorPlan.java,"['private', 'static', 'NodeIdGenerator', 'nodeIdGen', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
TestOperatorPlan.java,"['public', 'static', 'int', 'MAX_OPTIMIZATION_ITERATIONS', '=', '250', ';']",0
TestOperatorPlan.java,"['abstract', 'class', 'TOperator', 'extends', 'Operator', 'implements', 'Comparable', '{']",0
TestOperatorPlan.java,"['protected', 'String', 'mName', ';']",0
TestOperatorPlan.java,"['TOperator', '(', 'String', 'name', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'new', 'OperatorKey', '(', '""', '""', ',', 'mNextKey', '+', '+', ')', ')', ';']",0
TestOperatorPlan.java,"['mName', '=', 'name', ';']",0
TestOperatorPlan.java,"['public', 'int', 'compareTo', '(', 'Object', 'o', ')', '{']",0
TestOperatorPlan.java,"['if', '(', '!', '(', 'o', 'instanceof', 'TOperator', ')', ')', '{']",0
TestOperatorPlan.java,"['return', '-', '1', ';']",0
TestOperatorPlan.java,"['TOperator', 'other', '=', '(', 'TOperator', ')', 'o', ';']",0
TestOperatorPlan.java,"['return', 'mName', '.', 'compareTo', '(', 'other', '.', 'mName', ')', ';']",0
TestOperatorPlan.java,"['class', 'SingleOperator', 'extends', 'TOperator', '{']",0
TestOperatorPlan.java,"['SingleOperator', '(', 'String', 'name', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'name', ')', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'false', ';']",0
TestOperatorPlan.java,"['return', 'false', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'PlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['(', '(', 'TVisitor', ')', 'v', ')', '.', 'visit', '(', 'this', ')', ';']",0
TestOperatorPlan.java,"['public', 'String', 'name', '(', ')', '{']",0
TestOperatorPlan.java,"['/', '/', 'return', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'mName']",0
TestOperatorPlan.java,"['return', 'mName', ';']",0
TestOperatorPlan.java,"['class', 'MultiOperator', 'extends', 'TOperator', '{']",0
TestOperatorPlan.java,"['MultiOperator', '(', 'String', 'name', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'name', ')', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'true', ';']",0
TestOperatorPlan.java,"['return', 'true', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'PlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['(', '(', 'TVisitor', ')', 'v', ')', '.', 'visit', '(', 'this', ')', ';']",0
TestOperatorPlan.java,"['public', 'String', 'name', '(', ')', '{']",0
TestOperatorPlan.java,"['/', '/', 'return', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'mName', ';']",0
TestOperatorPlan.java,"['return', 'mName', ';']",0
TestOperatorPlan.java,"['class', 'MultiInputSingleOutputOperator', 'extends', 'TOperator', '{']",0
TestOperatorPlan.java,"['MultiInputSingleOutputOperator', '(', 'String', 'name', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'name', ')', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'true', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'false', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'PlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['(', '(', 'TVisitor', ')', 'v', ')', '.', 'visit', '(', 'this', ')', ';']",0
TestOperatorPlan.java,"['public', 'String', 'name', '(', ')', '{']",0
TestOperatorPlan.java,"['/', '/', 'return', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'mName']",0
TestOperatorPlan.java,"['return', 'mName', ';']",0
TestOperatorPlan.java,"['class', 'MultiOutputSingleInputOperator', 'extends', 'TOperator', '{']",0
TestOperatorPlan.java,"['MultiOutputSingleInputOperator', '(', 'String', 'name', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'name', ')', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'false', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'true', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'PlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['(', '(', 'TVisitor', ')', 'v', ')', '.', 'visit', '(', 'this', ')', ';']",0
TestOperatorPlan.java,"['public', 'String', 'name', '(', ')', '{']",0
TestOperatorPlan.java,"['/', '/', 'return', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'mName']",0
TestOperatorPlan.java,"['return', 'mName', ';']",0
TestOperatorPlan.java,"['class', 'TPlan', 'extends', 'OperatorPlan', '<', 'TOperator', '>', '{']",0
TestOperatorPlan.java,"['public', 'String', 'display', '(', ')', '{']",0
TestOperatorPlan.java,"['StringBuilder', 'buf', '=', 'new', 'StringBuilder', '(', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', '""', 'Nodes', ':', '""', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Guarantee', 'a', 'sorting']",0
TestOperatorPlan.java,"['TreeSet', '<', 'TOperator', '>', 'ts', '=', 'new', 'TreeSet', '(', 'mOps', '.', 'keySet', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'TOperator', 'op', ':', 'ts', ')', '{']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', 'op', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', '""', 'FromEdges', ':', '""', ')', ';']",0
TestOperatorPlan.java,"['ts', '=', 'new', 'TreeSet', '(', 'mFromEdges', '.', 'keySet', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['Iterator', '<', 'TOperator', '>', 'i', '=', 'ts', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
TestOperatorPlan.java,"['TOperator', 'from', '=', 'i', '.', 'next', '(', ')', ';']",0
TestOperatorPlan.java,"['TreeSet', '<', 'TOperator', '>', 'ts2', '=', 'new', 'TreeSet', '(', 'mFromEdges', '.', 'get', '(', 'from', ')', ')', ';']",0
TestOperatorPlan.java,"['Iterator', '<', 'TOperator', '>', 'j', '=', 'ts2', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['while', '(', 'j', '.', 'hasNext', '(', ')', ')', '{']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', 'from', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', '""', '-', '>', '""', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', 'j', '.', 'next', '(', ')', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', '""', 'ToEdges', ':', '""', ')', ';']",0
TestOperatorPlan.java,"['ts', '=', 'new', 'TreeSet', '(', 'mToEdges', '.', 'keySet', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'ts', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
TestOperatorPlan.java,"['TOperator', 'from', '=', 'i', '.', 'next', '(', ')', ';']",0
TestOperatorPlan.java,"['TreeSet', '<', 'TOperator', '>', 'ts2', '=', 'new', 'TreeSet', '(', 'mToEdges', '.', 'get', '(', 'from', ')', ')', ';']",0
TestOperatorPlan.java,"['Iterator', '<', 'TOperator', '>', 'j', '=', 'ts2', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['while', '(', 'j', '.', 'hasNext', '(', ')', ')', '{']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', 'from', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', '""', '-', '>', '""', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', 'j', '.', 'next', '(', ')', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['buf', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['return', 'buf', '.', 'toString', '(', ')', ';']",0
TestOperatorPlan.java,"['abstract', 'class', 'TVisitor', 'extends', 'PlanVisitor', '<', 'TOperator', ',', 'TPlan', '>', '{']",0
TestOperatorPlan.java,"['protected', 'StringBuilder', 'mJournal', ';']",0
TestOperatorPlan.java,"['TVisitor', '(', 'TPlan', 'plan', ',', 'PlanWalker', '<', 'TOperator', ',', 'TPlan', '>', 'walker', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'walker', ')', ';']",0
TestOperatorPlan.java,"['mJournal', '=', 'new', 'StringBuilder', '(', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'SingleOperator', 'so', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', 'so', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'MultiOperator', 'mo', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', 'mo', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'MultiInputSingleOutputOperator', 'miso', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', 'miso', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'visit', '(', 'MultiOutputSingleInputOperator', 'mosi', ')', 'throws', 'VisitorException', '{']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', 'mosi', '.', 'name', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['mJournal', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
TestOperatorPlan.java,"['public', 'String', 'getJournal', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'mJournal', '.', 'toString', '(', ')', ';']",0
TestOperatorPlan.java,"['class', 'TDepthVisitor', 'extends', 'TVisitor', '{']",0
TestOperatorPlan.java,"['TDepthVisitor', '(', 'TPlan', 'plan', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '(', 'plan', ')', ')', ';']",0
TestOperatorPlan.java,"['class', 'TDependVisitor', 'extends', 'TVisitor', '{']",0
TestOperatorPlan.java,"['TDependVisitor', '(', 'TPlan', 'plan', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '(', 'plan', ')', ')', ';']",0
TestOperatorPlan.java,"['static', 'class', 'TOptimizer', 'extends', 'PlanOptimizer', '<', 'TOperator', ',', 'TPlan', '>', '{']",0
TestOperatorPlan.java,"['public', 'TOptimizer', '(', 'TPlan', 'plan', ')', '{']",0
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'TestOperatorPlan', '.', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'addRule', '(', 'Rule', 'rule', ')', '{']",0
TestOperatorPlan.java,"['mRules', '.', 'add', '(', 'rule', ')', ';']",0
TestOperatorPlan.java,"['class', 'AlwaysTransform', 'extends', 'Transformer', '<', 'TOperator', ',', 'TPlan', '>', '{']",1
TestOperatorPlan.java,"['private', 'int', 'mNumChecks', '=', '0', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', '(', 'TPlan', 'plan', ')', '{']",1
TestOperatorPlan.java,"['+', '+', 'mNumChecks', ';']",0
TestOperatorPlan.java,"['return', 'true', ';']",0
TestOperatorPlan.java,"['public', 'int', 'getNumberOfChecks', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'mNumChecks', ';']",0
TestOperatorPlan.java,"['class', 'NeverTransform', 'extends', 'Transformer', '<', 'TOperator', ',', 'TPlan', '>', '{']",1
TestOperatorPlan.java,"['public', 'boolean', 'mTransformed', '=', 'false', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'mTransformed', '=', 'false', ';']",0
TestOperatorPlan.java,"['private', 'int', 'mNumChecks', '=', '0', ';']",0
TestOperatorPlan.java,"['NeverTransform', '(', 'TPlan', 'plan', ')', '{']",1
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'TOperator', ',', 'TPlan', '>', '(', 'plan', ')', ')', ';']",0
TestOperatorPlan.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'TOperator', ',', 'TPlan', '>', '(', 'plan', ')', ')', ';']",0
TestOperatorPlan.java,"['public', 'boolean', 'check', '(', 'List', '<', 'TOperator', '>', 'nodes', ')', '{']",0
TestOperatorPlan.java,"['public', 'boolean', 'check', '(', 'List', '<', 'TOperator', '>', 'nodes', ')', '{']",0
TestOperatorPlan.java,"['+', '+', 'mNumChecks', ';']",0
TestOperatorPlan.java,"['return', 'false', ';']",0
TestOperatorPlan.java,"['public', 'void', 'transform', '(', 'List', '<', 'TOperator', '>', 'nodes', ')', '{']",0
TestOperatorPlan.java,"['public', 'void', 'transform', '(', 'List', '<', 'TOperator', '>', 'nodes', ')', '{']",0
TestOperatorPlan.java,"['mTransformed', '=', 'true', ';']",0
TestOperatorPlan.java,"['mTransformed', '=', 'true', ';']",0
TestOperatorPlan.java,"['public', 'int', 'getNumberOfChecks', '(', ')', '{']",0
TestOperatorPlan.java,"['return', 'mNumChecks', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testAddRemove', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'can', 'add', 'and', 'remove', 'nodes', 'from', 'the', 'plan', '.', 'Also', 'test']",0
TestOperatorPlan.java,"['/', '/', 'that', 'we', 'can', 'fetch', 'the', 'nodes', 'by', 'operator', 'key', ',', 'by', 'operator', ',', 'by']",0
TestOperatorPlan.java,"['/', '/', 'roots', ',', 'by', 'leaves', ',', 'that', 'they', 'have', 'no', 'predecessors', 'and', 'no']",0
TestOperatorPlan.java,"['/', '/', 'successors', '.']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'All', 'should', 'be', 'roots', ',', 'as', 'none', 'are', 'connected']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Roots', 'should', 'contain', 'operator', '""', '+', 'i', ',']",0
TestOperatorPlan.java,"['roots', '.', 'contains', '(', 'ops', '[', 'i', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'All', 'should', 'be', 'leaves', ',', 'as', 'none', 'are', 'connected']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Leaves', 'should', 'contain', 'operator', '""', '+', 'i', ',']",0
TestOperatorPlan.java,"['leaves', '.', 'contains', '(', 'ops', '[', 'i', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Each', 'operator', 'should', 'have', 'no', 'successors', 'or', 'predecessors', '.']",0
TestOperatorPlan.java,"['assertNull', '(', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '1', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '1', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Make', 'sure', 'we', 'find', 'them', 'all', 'when', 'we', 'iterate', 'through', 'them', '.']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 's', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['Iterator', '<', 'TOperator', '>', 'j', '=', 'plan', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['while', '(', 'j', '.', 'hasNext', '(', ')', ')', '{']",0
TestOperatorPlan.java,"['s', '.', 'add', '(', 'j', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Iterator', 'should', 'contain', 'operator', '""', '+', 'i', ',']",0
TestOperatorPlan.java,"['s', '.', 'contains', '(', 'ops', '[', 'i', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'can', 'find', 'an', 'operator', 'by', 'its', 'key', '.']",0
TestOperatorPlan.java,"['TOperator', 'op', '=', 'plan', '.', 'getOperator', '(', 'new', 'OperatorKey', '(', '""', '""', ',', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Expected', 'to', 'get', 'back', 'ops', '[', '1', ']', '""', ',', 'ops', '[', '1', ']', ',', 'op', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'can', 'get', 'an', 'operator', 'key', 'by', 'its', 'operator']",0
TestOperatorPlan.java,"['OperatorKey', 'opkey', '=', 'new', 'OperatorKey', '(', '""', '""', ',', '1', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Expected', 'to', 'get', 'back', 'key', 'for', 'ops', '[', '1', ']', '""', ',']",0
TestOperatorPlan.java,"['opkey', '.', 'equals', '(', 'plan', '.', 'getOperatorKey', '(', 'ops', '[', '1', ']', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'can', 'remove', 'operators']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Should', 'only', 'have', 'two', 'roots', 'now', '.', '""', ',', '2', ',']",0
TestOperatorPlan.java,"['plan', '.', 'getRoots', '(', ')', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Should', 'only', 'have', 'two', 'leaves', 'now', '.', '""', ',', '2', ',']",0
TestOperatorPlan.java,"['plan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['j', '=', 'plan', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['int', 'k', ';']",0
TestOperatorPlan.java,"['for', '(', 'k', '=', '0', ';', 'j', '.', 'hasNext', '(', ')', ';', 'k', '+', '+', ')', 'j', '.', 'next', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Iterator', 'should', 'only', 'return', 'two', 'now', '""', ',', '2', ',', 'k', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Remove', 'all', 'operators']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Should', 'only', 'have', 'no', 'roots', 'now', '.', '""', ',', '0', ',']",0
TestOperatorPlan.java,"['plan', '.', 'getRoots', '(', ')', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Should', 'only', 'have', 'no', 'leaves', 'now', '.', '""', ',', '0', ',']",0
TestOperatorPlan.java,"['plan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['j', '=', 'plan', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', '""', 'Iterator', 'should', 'return', 'nothing', 'now', '""', ',', 'j', '.', 'hasNext', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testInsertBetween', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'insertBetween', 'works', '.']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '3', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Connect', '0', 'to', '2']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['Collection', 'p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['Iterator', 'i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '2', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '0', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Insert', '1', 'in', 'between', '0', 'and', '2']",0
TestOperatorPlan.java,"['plan', '.', 'insertBetween', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '1', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '0', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '2', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '1', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['p', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertNull', '(', 'p', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testInsertBetweenNegative', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'insertBetween', 'throws', 'errors', 'when', 'it', 'should', '.']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '4', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '4', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'MultiOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['boolean', 'caughtIt', '=', 'false', ';']",0
TestOperatorPlan.java,"['plan', '.', 'insertBetween', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '3', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['caughtIt', '=', 'true', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'caughtIt', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testLinearGraph', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '5', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '5', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['if', '(', 'i', '>', '0', ')', 'plan', '.', 'connect', '(', 'ops', '[', 'i', '-', '1', ']', ',', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'connecting', 'a', 'node', 'not', 'yet', 'in', 'the', 'plan', 'is', 'detected', '.']",0
TestOperatorPlan.java,"['TOperator', 'bogus', '=', 'new', 'SingleOperator', '(', '""', 'X', '""', ')', ';']",0
TestOperatorPlan.java,"['boolean', 'sawError', '=', 'false', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'bogus', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'ioe', ')', '{']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Attempt', 'to', 'connect', 'operator', 'X', 'which', 'is', 'not', 'in', '""']",0
TestOperatorPlan.java,"['+', '""', 'the', 'plan', '.', '""', ',', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['sawError', '=', 'true', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Should', 'have', 'caught', 'an', 'error', 'when', 'we', 'tried', 'to', 'connect', 'a', '""']",0
TestOperatorPlan.java,"['+', '""', 'node', 'that', 'was', 'not', 'in', 'the', 'plan', '""', ',', 'sawError', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Get', 'roots', 'should', 'just', 'return', 'ops', '[', '0', ']']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'roots', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Get', 'leaves', 'should', 'just', 'return', 'ops', '[', '4', ']']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'leaves', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'connecting', 'another', 'input', 'to', 'SingleOperator', 'gives']",0
TestOperatorPlan.java,"['/', '/', 'error', '.']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'bogus', ')', ';']",0
TestOperatorPlan.java,"['sawError', '=', 'false', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'bogus', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'ioe', ')', '{']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Attempt', 'to', 'give', 'operator', 'of', 'type', '""', '+']",0
TestOperatorPlan.java,"['""', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'TestOperatorPlan', '$', 'SingleOperator', '""', '+']",0
TestOperatorPlan.java,"['""', 'multiple', 'inputs', '.', 'This', 'operator', 'does', '""']",0
TestOperatorPlan.java,"['+', '""', 'not', 'support', 'multiple', 'inputs', '.', '""', ',', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['sawError', '=', 'true', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Should', 'have', 'caught', 'an', 'error', 'when', 'we', 'tried', 'to', 'connect', 'a', '""']",0
TestOperatorPlan.java,"['+', '""', 'second', 'input', 'to', 'a', 'Single', '""', ',', 'sawError', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'connecting', 'another', 'output', 'to', 'SingleOperator', 'gives']",0
TestOperatorPlan.java,"['/', '/', 'error', '.']",0
TestOperatorPlan.java,"['sawError', '=', 'false', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'bogus', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'ioe', ')', '{']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Attempt', 'to', 'give', 'operator', 'of', 'type', '""', '+']",0
TestOperatorPlan.java,"['""', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'TestOperatorPlan', '$', 'SingleOperator', '""', '+']",0
TestOperatorPlan.java,"['""', 'multiple', 'outputs', '.', 'This', 'operator', 'does', '""']",0
TestOperatorPlan.java,"['+', '""', 'not', 'support', 'multiple', 'outputs', '.', '""', ',', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['sawError', '=', 'true', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', '""', 'Should', 'have', 'caught', 'an', 'error', 'when', 'we', 'tried', 'to', 'connect', 'a', '""']",0
TestOperatorPlan.java,"['+', '""', 'second', 'output', 'to', 'a', '""', '+']",0
TestOperatorPlan.java,"['""', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'TestOperatorPlan', '$', 'SingleOperator', '""', ',', 'sawError', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'bogus', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Successor', 'for', 'ops', '[', '1', ']', 'should', 'be', 'ops', '[', '2', ']']",0
TestOperatorPlan.java,"['Collection', 's', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 's', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['Iterator', 'i', '=', 's', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '2', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Predecessor', 'for', 'ops', '[', '1', ']', 'should', 'be', 'ops', '[', '0', ']']",0
TestOperatorPlan.java,"['Collection', 'p', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '1', ',', 'p', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['i', '=', 'p', '.', 'iterator', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'ops', '[', '0', ']', ',', 'i', '.', 'next', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '1', '2', '3', '4', 'FromEdges', ':', '0', '-', '>', '1', '1', '-', '>', '2', '2', '-', '>', '3', '3', '-', '>', '4', 'ToEdges', ':', '1', '-', '>', '0', '2', '-', '>', '1', '3', '-', '>', '2', '4', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Visit', 'it', 'depth', 'first']",0
TestOperatorPlan.java,"['TVisitor', 'visitor', '=', 'new', 'TDepthVisitor', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['visitor', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', '0', '1', '2', '3', '4', '""', ',', 'visitor', '.', 'getJournal', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Visit', 'it', 'dependency', 'order']",0
TestOperatorPlan.java,"['visitor', '=', 'new', 'TDependVisitor', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['visitor', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', '0', '1', '2', '3', '4', '""', ',', 'visitor', '.', 'getJournal', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'disconnect']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '1', '2', '3', '4', 'FromEdges', ':', '0', '-', '>', '1', '1', '-', '>', '2', '3', '-', '>', '4', 'ToEdges', ':', '1', '-', '>', '0', '2', '-', '>', '1', '4', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'remove']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '2', '3', '4', 'FromEdges', ':', '3', '-', '>', '4', 'ToEdges', ':', '4', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testDAG', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '6', ';', 'i', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'MultiOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Get', 'roots', 'should', 'return', 'ops', '[', '0', ']', 'and', 'ops', '[', '1', ']']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '2', ',', 'roots', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'roots', '.', 'contains', '(', 'ops', '[', '0', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'roots', '.', 'contains', '(', 'ops', '[', '1', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Get', 'leaves', 'should', 'return', 'ops', '[', '4', ']', 'and', 'ops', '[', '5', ']']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '2', ',', 'leaves', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leaves', '.', 'contains', '(', 'ops', '[', '4', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leaves', '.', 'contains', '(', 'ops', '[', '5', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Successor', 'for', 'ops', '[', '3', ']', 'should', 'be', 'ops', '[', '4', ']', 'and', 'ops', '[', '5', ']']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 's', '=', 'new', 'ArrayList', '<', 'TOperator', '>', '(', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '3', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '2', ',', 's', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 's', '.', 'contains', '(', 'ops', '[', '4', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 's', '.', 'contains', '(', 'ops', '[', '5', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Predecessor', 'for', 'ops', '[', '2', ']', 'should', 'be', 'ops', '[', '0', ']', 'and', 'ops', '[', '1', ']']",0
TestOperatorPlan.java,"['s', '=', 'new', 'ArrayList', '<', 'TOperator', '>', '(', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '2', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '2', ',', 's', '.', 'size', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 's', '.', 'contains', '(', 'ops', '[', '0', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 's', '.', 'contains', '(', 'ops', '[', '1', ']', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '1', '2', '3', '4', '5', 'FromEdges', ':', '0', '-', '>', '2', '1', '-', '>', '2', '2', '-', '>', '3', '3', '-', '>', '4', '3', '-', '>', '5', 'ToEdges', ':', '2', '-', '>', '0', '2', '-', '>', '1', '3', '-', '>', '2', '4', '-', '>', '3', '5', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Visit', 'it', 'depth', 'first']",0
TestOperatorPlan.java,"['TVisitor', 'visitor', '=', 'new', 'TDepthVisitor', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['visitor', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'There', 'are', 'a', 'number', 'of', 'valid', 'patterns', ',', 'make', 'sure', 'we', 'found', 'one', 'of']",0
TestOperatorPlan.java,"['/', '/', 'them', '.']",0
TestOperatorPlan.java,"['String', 'result', '=', 'visitor', '.', 'getJournal', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'result', '.', 'equals', '(', '""', '1', '2', '3', '4', '5', '0', '""', ')', '|', '|']",0
TestOperatorPlan.java,"['result', '.', 'equals', '(', '""', '1', '2', '3', '5', '4', '0', '""', ')', '|', '|', 'result', '.', 'equals', '(', '""', '0', '2', '3', '4', '5', '1', '""', ')']",0
TestOperatorPlan.java,"['|', '|', 'result', '.', 'equals', '(', '""', '0', '2', '3', '5', '4', '1', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Visit', 'it', 'dependency', 'order']",0
TestOperatorPlan.java,"['visitor', '=', 'new', 'TDependVisitor', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['visitor', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['result', '=', 'visitor', '.', 'getJournal', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'result', '.', 'equals', '(', '""', '0', '1', '2', '3', '4', '5', '""', ')', '|', '|']",0
TestOperatorPlan.java,"['result', '.', 'equals', '(', '""', '0', '1', '2', '3', '5', '4', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'disconnect']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '1', '2', '3', '4', '5', 'FromEdges', ':', '0', '-', '>', '2', '1', '-', '>', '2', '3', '-', '>', '4', '3', '-', '>', '5', 'ToEdges', ':', '2', '-', '>', '0', '2', '-', '>', '1', '4', '-', '>', '3', '5', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'remove']",0
TestOperatorPlan.java,"['plan', '.', 'remove', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '0', '1', '3', '4', '5', 'FromEdges', ':', '3', '-', '>', '4', '3', '-', '>', '5', 'ToEdges', ':', '4', '-', '>', '3', '5', '-', '>', '3', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'don', ""'"", 't', 'match', 'when', 'nodes', 'don', ""'"", 't', 'match', 'pattern', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'M', '-', '>', 'S', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerDifferentNodes', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'SingleOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'don', ""'"", 't', 'match', 'when', 'edges', 'don', ""'"", 't', 'match', 'pattern', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'S', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerDifferentEdges', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'when', 'appropriate', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'S', '-', '>', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerMatches', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'when', 'the', 'pattern', 'says', 'any', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'any', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'S', '-', '>', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerMatchesAny', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['RuleOperator', '.', 'NodeType', '.', 'ANY_NODE', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'when', 'the', 'whole', 'plan', 'doesn', ""'"", 't', 'match', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'S', '-', '>', 'S', '-', '>', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerMatchesPart', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '4', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'SingleOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'MultiOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'when', 'a', 'node', 'is', 'optional', 'and', 'the', 'optional', 'node', 'is']",1
TestOperatorPlan.java,"['/', '/', 'present', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', '(', 'with', 'second', 'S', 'optional', ')', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'S', '-', '>', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerOptionalMatches', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'do', 'not', 'match', 'when', 'a', 'node', 'is', 'missing', '.', 'Will', 'give']",0
TestOperatorPlan.java,"['/', '/', 'a', 'pattern', 'of', 'S', '-', '>', 'S', '-', '>', 'M', 'and', 'a', 'plan', 'of', 'S', '-', '>', 'M', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testOptimizerOptionalMissing', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'transformer', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'even', 'if', 'we', 'match', ',', 'if', 'check', 'returns', 'false', 'then', 'the', 'optimization']",0
TestOperatorPlan.java,"['/', '/', 'is', 'not', 'done', '.']",0
TestOperatorPlan.java,"['public', 'void', 'testCheck', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'transformer', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'transformer', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'transformer', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testReplace', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'MultiOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'MultiOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'replace', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '1', '2', '4', '5', '6', 'FromEdges', ':', '1', '-', '>', '6', '2', '-', '>', '6', '6', '-', '>', '4', '6', '-', '>', '5', 'ToEdges', ':', '4', '-', '>', '6', '5', '-', '>', '6', '6', '-', '>', '1', '6', '-', '>', '2', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['public', 'void', 'testReplaceNoConnections', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '4', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'MultiOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'replace', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', '""', 'Nodes', ':', '1', '3', '4', 'FromEdges', ':', '1', '-', '>', '3', 'ToEdges', ':', '3', '-', '>', '1', '""', ',', 'plan', '.', 'display', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'and', 'pattern', 'are', 'both']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testMultiInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Pattern']",0
TestOperatorPlan.java,"['/', '/', 'S', 'M']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'has', 'the', 'roots', 'swapped']",0
TestOperatorPlan.java,"['/', '/', 'M', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testIsomorphicMultiInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'and', 'pattern', 'are', 'both']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testMultiInputMultiOutputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'and', 'pattern', 'are', 'both']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testMultiOutputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'SingleOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Pattern']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'don', ""'"", 't', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativeMultiOutputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Pattern']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'don', ""'"", 't', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativeMultiOutputPattern1', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'MultiOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Pattern']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'multiple', 'instances', 'in', 'the', 'disconnected', 'graph']",0
TestOperatorPlan.java,"['public', 'void', 'testMultipleMultiInputPatternInDisconnectedGraph', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '(', '2', '*', 'MAX_OPTIMIZATION_ITERATIONS', ')', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '(', '2', '*', 'MAX_OPTIMIZATION_ITERATIONS', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Pattern', 'is']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M', 'M']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'multiple', 'instances', 'in', 'a', 'connected', 'graph']",0
TestOperatorPlan.java,"['public', 'void', 'testMultipleMultiInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '7', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '6', ']', '=', 'new', 'MultiOperator', '(', '""', '7', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '(', '2', '*', 'MAX_OPTIMIZATION_ITERATIONS', ')', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '(', '2', '*', 'MAX_OPTIMIZATION_ITERATIONS', ')', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Pattern', 'is']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'only', 'one', 'instance', 'in', 'a', 'connected', 'graph']",0
TestOperatorPlan.java,"['public', 'void', 'testSingleMultiInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'MultiOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'and', 'pattern', 'are', 'both']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testDiamondPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '4', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'SingleOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'MultiOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Pattern']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'has', 'an', 'additional', 'edge', 'from', 'the', 'bottom', 'of', 'the', 'diamond']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testDiamondWithEdgePattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '5', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'MultiOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'SingleOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'MultiOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';', '/', '/', 'default', 'max', 'iterations']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'and', 'Pattern', 'is']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'match', 'once']",0
TestOperatorPlan.java,"['public', 'void', 'testComplexInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_3', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_4', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_3', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_4', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_2', ',', 'singleOperator_3', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_2', ',', 'singleOperator_4', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', 'MAX_OPTIMIZATION_ITERATIONS', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Pattern', 'is']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Input', 'is']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'M']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S', 'S']",0
TestOperatorPlan.java,"['/', '/', 'Test', 'that', 'we', 'don', ""'"", 't', 'match']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativeComplexInputPattern', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['/', '/', 'Build', 'a', 'plan']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Create', 'our', 'rule']",0
TestOperatorPlan.java,"['RulePlan', 'rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_1', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_2', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_1', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_1', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'singleOperator_2', ',', 'multiOperator_1', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_3', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'singleOperator_4', '=', 'new', 'RuleOperator', '(', 'SingleOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['RuleOperator', 'multiOperator_2', '=', 'new', 'RuleOperator', '(', 'MultiOperator', '.', 'class', ',']",0
TestOperatorPlan.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_3', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'singleOperator_4', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'add', '(', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_2', ',', 'singleOperator_3', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_2', ',', 'singleOperator_4', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['rulePlan', '.', 'connect', '(', 'multiOperator_1', ',', 'multiOperator_2', ')', ';']",0
TestOperatorPlan.java,"['AlwaysTransform', 'alwaysTransform', '=', 'new', 'AlwaysTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r1', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'alwaysTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['NeverTransform', 'neverTransform', '=', 'new', 'NeverTransform', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['Rule', '<', 'TOperator', ',', 'TPlan', '>', 'r2', '=']",0
TestOperatorPlan.java,"['new', 'Rule', '<', 'TOperator', ',', 'TPlan', '>', '(', 'rulePlan', ',', 'neverTransform', ',', '""', 'TestRule', '""', ')', ';']",0
TestOperatorPlan.java,"['TOptimizer', 'optimizer', '=', 'new', 'TOptimizer', '(', 'plan', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r1', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'addRule', '(', 'r2', ')', ';']",0
TestOperatorPlan.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'alwaysTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'alwaysTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';']",0
TestOperatorPlan.java,"['assertFalse', '(', 'neverTransform', '.', 'mTransformed', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'neverTransform', '.', 'getNumberOfChecks', '(', ')', '=', '=', '0', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'two', 'roots', 'in', 'a', 'graph', '.', 'Both', 'the', 'roots', 'are', 'disconnected']",0
TestOperatorPlan.java,"['/', '/', 'and', 'are', 'the', 'only', 'nodes', 'in', 'the', 'graph']",0
TestOperatorPlan.java,"['public', 'void', 'testSwapRootsInDisconnectedGraph', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'roots', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', 'i', ')', ',', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'two', 'nodes', 'in', 'a', 'graph', '.']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2']",0
TestOperatorPlan.java,"['/', '/', 'Ouput']",0
TestOperatorPlan.java,"['/', '/', 'S2', '-', '>', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'again']",0
TestOperatorPlan.java,"['/', '/', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2']",0
TestOperatorPlan.java,"['public', 'void', 'testSimpleSwap', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '2', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'two', 'nodes', 'in', 'a', 'graph', '.']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S1', 'and', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Intermediate', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S3', '-', '>', 'S2', '-', '>', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['public', 'void', 'testSimpleSwap2', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'two', 'nodes', 'in', 'a', 'graph', 'and', 'then', 'swap', 'it', 'back', 'again', '.']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S2', 'and', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Intermediate', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S3', '-', '>', 'S2']",0
TestOperatorPlan.java,"['/', '/', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['public', 'void', 'testSimpleSwap3', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'two', 'nodes', 'in', 'a', 'graph', 'and', 'then', 'swap', 'it', 'back', 'again', '.']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S1', 'and', 'S2']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Intermediate', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S2', '-', '>', 'S1', '-', '>', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Output']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3']",0
TestOperatorPlan.java,"['public', 'void', 'testSimpleSwap4', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '3', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['roots', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getRoots', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'roots', '.', 'get', '(', '0', ')', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'roots', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'rootSuccessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['leaves', '=', '(', 'ArrayList', '<', 'TOperator', '>', ')', 'plan', '.', 'getLeaves', '(', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leaves', '.', 'get', '(', '0', ')', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['leafPredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'leaves', '.', 'get', '(', '0', ')', ')', ';']",0
TestOperatorPlan.java,"['assertEquals', '(', 'leafPredecessors', '.', 'get', '(', '0', ')', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'non', '-', 'existent', 'nodes', 'in', 'a', 'graph', 'and', 'check', 'for', 'exceptions']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S1', 'and', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S4', 'and', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S5', 'and', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S1', 'and', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'null', 'and', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'null', 'and', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3', 'S4', 'S5']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativeSimpleSwap', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '5', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'null', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1092', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'null', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1092', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'null', ',', 'null', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1092', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'nodes', 'that', 'have', 'multiple', 'inputs', 'and', 'multiple', 'outs', 'in', 'a', 'graph', 'and', 'check', 'for', 'exceptions']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2']",0
TestOperatorPlan.java,"['/', '/', '\\', '/']",0
TestOperatorPlan.java,"['/', '/', 'M1']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'M2']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S1', 'and', 'M1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'M1', 'and', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'M1', 'and', 'M2']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'M2', 'and', 'M1']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'M2', 'and', 'S3']",0
TestOperatorPlan.java,"['/', '/', 'Swap', 'S3', 'and', 'M2']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativeSimpleSwap1', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '6', ']', ';']",0
TestOperatorPlan.java,"['ops', '[', '0', ']', '=', 'new', 'SingleOperator', '(', '""', '1', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '1', ']', '=', 'new', 'SingleOperator', '(', '""', '2', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '2', ']', '=', 'new', 'MultiOperator', '(', '""', '3', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '3', ']', '=', 'new', 'SingleOperator', '(', '""', '4', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '4', ']', '=', 'new', 'SingleOperator', '(', '""', '5', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '5', ']', '=', 'new', 'MultiOperator', '(', '""', '6', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'input', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'input', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'input', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'output', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'output', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'swap', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'multi', '-', 'output', 'operator', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1093', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'M11', 'before', 'M10', ""'"", 's', 'inputs', '-', '0', 'through', '3']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S5', 'M11', 'S6']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['/', '/', 'Output', 'when', 'pushed', 'before', '1st', 'input']",0
TestOperatorPlan.java,"['/', '/', 'S2']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'M11', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '/', '|', '\\', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S5', 'S7', 'S8', 'S9', 'S6']",0
TestOperatorPlan.java,"['public', 'void', 'testpushBefore', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'index', '=', '0', ';', 'index', '<', '4', ';', 'index', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ',', 'index', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'rootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedRootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getRoots', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'retainAll', '(', 'expectedRootSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'rootSet', '.', 'size', '(', ')', '=', '=', '4', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'leafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedLeafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getLeaves', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'retainAll', '(', 'expectedLeafSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leafSet', '.', 'size', '(', ')', '=', '=', '5', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm10Predecessors', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm10Predecessors', '.', 'get', '(', 'index', ')', '=', '=', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm11Predecessors', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm11Predecessors', '.', 'get', '(', '0', ')', '=', '=', 'ops', '[', 'index', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S5', 'and', 'S6', 'before', 'M10', ""'"", 's', 'input']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S5', 'M11', 'S6']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['/', '/', 'Output', 'when', 'pushed', 'before', '1st', 'input']",0
TestOperatorPlan.java,"['/', '/', 'S2']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S5', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '\\']",0
TestOperatorPlan.java,"['/', '/', 'M11', 'S6']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['public', 'void', 'testpushBefore2', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'outerIndex', '=', '0', ';', 'outerIndex', '<', '2', ';', 'outerIndex', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'index', '=', '0', ';', 'index', '<', '2', ';', 'index', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['int', 'secondNodeIndex', '=', 'outerIndex', '+', '4', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', 'secondNodeIndex', ']', ',', 'index', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'rootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedRootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getRoots', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'retainAll', '(', 'expectedRootSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'rootSet', '.', 'size', '(', ')', '=', '=', '4', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'leafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'leafIndex', '=', '4', ';', 'leafIndex', '<', '9', ';', '+', '+', 'leafIndex', ')', '{']",0
TestOperatorPlan.java,"['if', '(', 'leafIndex', '!', '=', 'secondNodeIndex', ')', '{']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', 'leafIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedLeafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getLeaves', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'retainAll', '(', 'expectedLeafSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leafSet', '.', 'size', '(', ')', '=', '=', '4', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'outerIndexNodePredecessors', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', 'secondNodeIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'outerIndexNodePredecessors', '.', 'get', '(', '0', ')', '=', '=', 'ops', '[', 'index', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm10Predecessors', '=', 'plan', '.', 'getPredecessors', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm10Predecessors', '.', 'get', '(', 'index', ')', '=', '=', 'ops', '[', 'secondNodeIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'non', '-', 'existent', 'nodes', 'in', 'a', 'graph', 'and', 'check', 'for', 'exceptions']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S1', 'after', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S4', 'after', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S5', 'after', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S1', 'after', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'null', 'after', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'null', 'after', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3', 'S4', 'S5']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativePushBefore', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '5', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '3', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '3', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '0', ']', ',', 'null', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'null', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'null', ',', 'null', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Negative', 'test', 'cases']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S5', 'M11', 'S6']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativePushBefore2', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'null', 'predecessors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1086', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'one', 'predecessor', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1086', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ',', '4', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'inputNum', 'exceeding', 'number', 'of', 'predecessors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1087', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'having', 'null', 'predecessors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1088', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '9', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'having', 'more', 'than', 'one', 'predecessor', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1088', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '8', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'not', 'being', 'a', 'successor', 'of', 'first', 'operator', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1089', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['MultiInputSingleOutputOperator', 'miso', '=', 'new', 'MultiInputSingleOutputOperator', '(', '""', '12', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'replace', '(', 'ops', '[', '9', ']', ',', 'miso', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushBefore', '(', 'miso', ',', 'ops', '[', '10', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'trying', 'to', 'connect', 'multiple', 'outputs', 'to', 'the', 'first', 'operator', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1091', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'M10', 'after', 'M11', ""'"", 's', 'outputs', '-', '0', 'through', '2']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', 'S5', '|', 'S6']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M11']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['/', '/', 'Output', 'when', 'pushed', 'after', '1st', 'output']",0
TestOperatorPlan.java,"['/', '/', 'S5', 'S1', 'S2', 'S3', 'S4', 'S6']",0
TestOperatorPlan.java,"['/', '/', '\\', '\\', '\\', '/', '/', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'M11', 'S9']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S8']",0
TestOperatorPlan.java,"['public', 'void', 'testpushAfter', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'index', '=', '0', ';', 'index', '<', '3', ';', 'index', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '9', ']', ',', 'index', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'rootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '4', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '5', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedRootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getRoots', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'retainAll', '(', 'expectedRootSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'rootSet', '.', 'size', '(', ')', '=', '=', '6', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'leafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedLeafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getLeaves', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'retainAll', '(', 'expectedLeafSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leafSet', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm10Successors', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm10Successors', '.', 'get', '(', '0', ')', '=', '=', 'ops', '[', 'index', '+', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm11Successors', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm11Successors', '.', 'get', '(', 'index', ')', '=', '=', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S5', 'and', 'S6', 'after', 'M11', ""'"", 's', 'outputs', '-', '0', 'through', '2']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', 'S5', '|', 'S6']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M11']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['/', '/', 'Output', 'when', 'S5', 'is', 'pushed', 'after', '1st', 'output']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', '|', 'S6']",0
TestOperatorPlan.java,"['/', '/', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M11']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S5', 'S9']",0
TestOperatorPlan.java,"['/', '/', '|']",0
TestOperatorPlan.java,"['/', '/', 'S8']",0
TestOperatorPlan.java,"['public', 'void', 'testpushAfter1', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'outerIndex', '=', '0', ';', 'outerIndex', '<', '2', ';', 'outerIndex', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['for', '(', 'int', 'index', '=', '0', ';', 'index', '<', '3', ';', 'index', '+', '+', ')', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['int', 'secondNodeIndex', '=', 'outerIndex', '+', '4', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', 'secondNodeIndex', ']', ',', 'index', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'rootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '0', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', '3', ']', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'rootIndex', '=', '0', ';', 'rootIndex', '<', '6', ';', '+', '+', 'rootIndex', ')', '{']",0
TestOperatorPlan.java,"['if', '(', 'rootIndex', '!', '=', 'secondNodeIndex', ')', '{']",0
TestOperatorPlan.java,"['rootSet', '.', 'add', '(', 'ops', '[', 'rootIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedRootSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getRoots', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['rootSet', '.', 'retainAll', '(', 'expectedRootSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'rootSet', '.', 'size', '(', ')', '=', '=', '5', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'leafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'add', '(', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['Set', '<', 'TOperator', '>', 'expectedLeafSet', '=', 'new', 'HashSet', '<', 'TOperator', '>', '(', 'plan', '.', 'getLeaves', '(', ')', ')', ';']",0
TestOperatorPlan.java,"['leafSet', '.', 'retainAll', '(', 'expectedLeafSet', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'leafSet', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'outerIndexNodeSuccessors', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', 'secondNodeIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'outerIndexNodeSuccessors', '.', 'get', '(', '0', ')', '=', '=', 'ops', '[', 'index', '+', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['List', '<', 'TOperator', '>', 'm11Successors', '=', 'plan', '.', 'getSuccessors', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['assertTrue', '(', 'm11Successors', '.', 'get', '(', 'index', ')', '=', '=', 'ops', '[', 'secondNodeIndex', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'non', '-', 'existent', 'nodes', 'in', 'a', 'graph', 'and', 'check', 'for', 'exceptions']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S1', 'after', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S4', 'after', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S5', 'after', 'S4']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'S1', 'after', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'null', 'after', 'S1']",0
TestOperatorPlan.java,"['/', '/', 'Push', 'null', 'after', 'null']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', '-', '>', 'S2', '-', '>', 'S3', 'S4', 'S5']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativePushAfter', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '5', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', ')', ')', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '1', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '2', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '3', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '3', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'node', 'not', 'in', 'plan', '.', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'not', 'in', 'the', 'plan', '""', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '0', ']', ',', 'null', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'null', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'null', ',', 'null', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'having', 'null', 'as', 'one', 'of', 'the', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1085', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'Negative', 'test', 'cases']",0
TestOperatorPlan.java,"['/', '/', 'Input']",0
TestOperatorPlan.java,"['/', '/', 'S1', 'S2', 'S3', 'S4']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M10']",0
TestOperatorPlan.java,"['/', '/', 'S5', '|', 'S6']",0
TestOperatorPlan.java,"['/', '/', '\\', '|', '/']",0
TestOperatorPlan.java,"['/', '/', 'M11']",0
TestOperatorPlan.java,"['/', '/', '/', '|', '\\']",0
TestOperatorPlan.java,"['/', '/', 'S7', 'S8', 'S9']",0
TestOperatorPlan.java,"['public', 'void', 'testNegativePushAfter2', '(', ')', 'throws', 'Exception', '{']",0
TestOperatorPlan.java,"['TPlan', 'plan', '=', 'new', 'TPlan', '(', ')', ';']",0
TestOperatorPlan.java,"['TOperator', '[', ']', 'ops', '=', 'new', 'TOperator', '[', '11', ']', ';']",0
TestOperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'ops', '.', 'length', '-', '2', ';', '+', '+', 'i', ')', '{']",0
TestOperatorPlan.java,"['ops', '[', 'i', ']', '=', 'new', 'SingleOperator', '(', 'Integer', '.', 'toString', '(', 'i', '+', '1', ')', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', 'i', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '9', ']', '=', 'new', 'MultiOperator', '(', '""', '10', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['ops', '[', '10', ']', '=', 'new', 'MultiOperator', '(', '""', '11', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'add', '(', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '1', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '2', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '3', ']', ',', 'ops', '[', '9', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '7', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'connect', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '8', ']', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', 'planPrinter', '=', 'new', 'PlanPrinter', '<', 'TOperator', ',', 'TPlan', '>', '(', 'System', '.', 'err', ',', 'plan', ')', ';']",0
TestOperatorPlan.java,"['/', '/', 'planPrinter', '.', 'visit', '(', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '6', ']', ',', 'ops', '[', '9', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'null', 'successors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1086', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '0', ']', ',', 'ops', '[', '9', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'no', 'inputs', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1088', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '9', ']', ',', 'ops', '[', '6', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'one', 'successor', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1086', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '6', ']', ',', 'ops', '[', '10', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'first', 'operator', 'having', 'one', 'successors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1086', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '9', ']', ',', '4', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'outputNum', 'exceeding', 'the', 'number', 'of', 'outputs', 'of', 'first', 'operator', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1087', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '6', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'having', 'null', 'successors', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1088', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '10', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'having', 'more', 'than', 'one', 'successor', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1088', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'ops', '[', '10', ']', ',', 'ops', '[', '0', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'second', 'operator', 'not', 'being', 'a', 'predecessor', 'of', 'first', 'operator', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1089', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '4', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'disconnect', '(', 'ops', '[', '5', ']', ',', 'ops', '[', '10', ']', ')', ';']",0
TestOperatorPlan.java,"['MultiOutputSingleInputOperator', 'mosi', '=', 'new', 'MultiOutputSingleInputOperator', '(', '""', '12', '""', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'replace', '(', 'ops', '[', '10', ']', ',', 'mosi', ')', ';']",0
TestOperatorPlan.java,"['plan', '.', 'pushAfter', '(', 'mosi', ',', 'ops', '[', '9', ']', ',', '0', ')', ';']",0
TestOperatorPlan.java,"['fail', '(', '""', 'Expected', 'exception', 'for', 'trying', 'to', 'connect', 'multiple', 'inputs', 'to', 'the', 'first', 'operator', '""', ')', ';']",0
TestOperatorPlan.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",0
TestOperatorPlan.java,"['assertTrue', '(', 'pe', '.', 'getErrorCode', '(', ')', '=', '=', '1091', ')', ';']",0
LOMultiply.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOMultiply.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOMultiply.java,"['public', 'class', 'LOMultiply', 'extends', 'BinaryExpressionOperator', '{']",0
LOMultiply.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOMultiply.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOMultiply', '.', 'class', ')', ';']",0
LOMultiply.java,"['/', '*', '*']",1
LOMultiply.java,"['public', 'LOMultiply', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOMultiply.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOMultiply.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOMultiply.java,"['return', 'mSchema', ';']",0
LOMultiply.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOMultiply.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOMultiply.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'mergeType', '(', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ',', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ')', ';']",0
LOMultiply.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOMultiply.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOMultiply.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOMultiply.java,"['return', 'mFieldSchema', ';']",0
LOMultiply.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOMultiply.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOMultiply.java,"['public', 'String', 'name', '(', ')', '{']",0
LOMultiply.java,"['return', '""', 'Multiply', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
OperatorPlan.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'io', '.', 'Serializable', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
OperatorPlan.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
OperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
OperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
OperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
OperatorPlan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
OperatorPlan.java,"['/', '/', 'import', 'org', '.', 'apache', '.', 'commons', '.', 'collections', '.', 'map', '.', 'MultiValueMap', ';']",0
OperatorPlan.java,"['public', 'abstract', 'class', 'OperatorPlan', '<', 'E', 'extends', 'Operator', '>', 'implements', 'Iterable', '<', 'E', '>', ',', 'Serializable', ',', 'Cloneable', '{']",0
OperatorPlan.java,"['protected', 'Map', '<', 'E', ',', 'OperatorKey', '>', 'mOps', ';']",0
OperatorPlan.java,"['protected', 'Map', '<', 'OperatorKey', ',', 'E', '>', 'mKeys', ';']",0
OperatorPlan.java,"['protected', 'MultiMap', '<', 'E', ',', 'E', '>', 'mFromEdges', ';']",0
OperatorPlan.java,"['protected', 'MultiMap', '<', 'E', ',', 'E', '>', 'mToEdges', ';']",0
OperatorPlan.java,"['private', 'List', '<', 'E', '>', 'mRoots', ';']",0
OperatorPlan.java,"['private', 'List', '<', 'E', '>', 'mLeaves', ';']",0
OperatorPlan.java,"['protected', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'OperatorPlan', '.', 'class', ')', ';']",0
OperatorPlan.java,"['public', 'OperatorPlan', '(', ')', '{']",0
OperatorPlan.java,"['mRoots', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['mLeaves', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['mOps', '=', 'new', 'HashMap', '<', 'E', ',', 'OperatorKey', '>', '(', ')', ';']",0
OperatorPlan.java,"['mKeys', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '=', 'new', 'MultiMap', '<', 'E', ',', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['mToEdges', '=', 'new', 'MultiMap', '<', 'E', ',', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'List', '<', 'E', '>', 'getRoots', '(', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mRoots', '.', 'size', '(', ')', '=', '=', '0', '&', '&', 'mOps', '.', 'size', '(', ')', '>', '0', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'mOps', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mToEdges', '.', 'get', '(', 'op', ')', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['mRoots', '.', 'add', '(', 'op', ')', ';']",0
OperatorPlan.java,"['return', 'mRoots', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'List', '<', 'E', '>', 'getLeaves', '(', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mLeaves', '.', 'size', '(', ')', '=', '=', '0', '&', '&', 'mOps', '.', 'size', '(', ')', '>', '0', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'mOps', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mFromEdges', '.', 'get', '(', 'op', ')', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['mLeaves', '.', 'add', '(', 'op', ')', ';']",0
OperatorPlan.java,"['return', 'mLeaves', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'OperatorKey', 'getOperatorKey', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['return', 'mOps', '.', 'get', '(', 'op', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'E', 'getOperator', '(', 'OperatorKey', 'opKey', ')', '{']",0
OperatorPlan.java,"['return', 'mKeys', '.', 'get', '(', 'opKey', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'Map', '<', 'OperatorKey', ',', 'E', '>', 'getKeys', '(', ')', '{']",0
OperatorPlan.java,"['return', 'mKeys', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'add', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['mOps', '.', 'put', '(', 'op', ',', 'op', '.', 'getOperatorKey', '(', ')', ')', ';']",0
OperatorPlan.java,"['mKeys', '.', 'put', '(', 'op', '.', 'getOperatorKey', '(', ')', ',', 'op', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'connect', '(', 'E', 'from', ',', 'E', 'to', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Check', 'that', 'both', 'nodes', 'are', 'in', 'the', 'plan', '.']",0
OperatorPlan.java,"['checkInPlan', '(', 'from', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'to', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Check', 'to', 'see', 'if', 'the', 'from', 'operator', 'already', 'has', 'outputs', ',', 'and', 'if', 'so']",0
OperatorPlan.java,"['/', '/', 'whether', 'it', 'supports', 'multiple', 'outputs', '.']",0
OperatorPlan.java,"['if', '(', 'mFromEdges', '.', 'get', '(', 'from', ')', '!', '=', 'null', '&', '&']",0
OperatorPlan.java,"['!', 'from', '.', 'supportsMultipleOutputs', '(', ')', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'give', 'operator', 'of', 'type', '""', '+']",0
OperatorPlan.java,"['from', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', 'multiple', 'outputs', '.', 'This', 'operator', 'does', '""']",0
OperatorPlan.java,"['+', '""', 'not', 'support', 'multiple', 'outputs', '.', '""', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Check', 'to', 'see', 'if', 'the', 'to', 'operator', 'already', 'has', 'inputs', ',', 'and', 'if', 'so']",0
OperatorPlan.java,"['/', '/', 'whether', 'it', 'supports', 'multiple', 'inputs', '.']",0
OperatorPlan.java,"['if', '(', 'mToEdges', '.', 'get', '(', 'to', ')', '!', '=', 'null', '&', '&']",0
OperatorPlan.java,"['!', 'to', '.', 'supportsMultipleInputs', '(', ')', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'give', 'operator', 'of', 'type', '""', '+']",0
OperatorPlan.java,"['to', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', 'multiple', 'inputs', '.', 'This', 'operator', 'does', '""']",0
OperatorPlan.java,"['+', '""', 'not', 'support', 'multiple', 'inputs', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'put', '(', 'from', ',', 'to', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'put', '(', 'to', ',', 'from', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'boolean', 'disconnect', '(', 'E', 'from', ',', 'E', 'to', ')', '{']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['boolean', 'sawNull', '=', 'false', ';']",0
OperatorPlan.java,"['if', '(', 'mFromEdges', '.', 'remove', '(', 'from', ',', 'to', ')', '=', '=', 'null', ')', 'sawNull', '=', 'true', ';']",0
OperatorPlan.java,"['if', '(', 'mToEdges', '.', 'remove', '(', 'to', ',', 'from', ')', '=', '=', 'null', ')', 'sawNull', '=', 'true', ';']",0
OperatorPlan.java,"['return', '!', 'sawNull', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'remove', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['removeEdges', '(', 'op', ',', 'mFromEdges', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['removeEdges', '(', 'op', ',', 'mToEdges', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Remove', 'the', 'operator', 'from', 'nodes']",0
OperatorPlan.java,"['mOps', '.', 'remove', '(', 'op', ')', ';']",0
OperatorPlan.java,"['mKeys', '.', 'remove', '(', 'op', '.', 'getOperatorKey', '(', ')', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'trimBelow', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['trimBelow', '(', 'getSuccessors', '(', 'op', ')', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'trimBelow', '(', 'List', '<', 'E', '>', 'ops', ')', '{']",0
OperatorPlan.java,"['if', '(', 'ops', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['/', '/', 'Make', 'a', 'copy', 'because', 'we', ""'"", 'll', 'be', 'messing', 'with', 'the', 'underlying', 'list', '.']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'copy', '=', 'new', 'ArrayList', '<', 'E', '>', '(', 'ops', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'copy', ')', '{']",0
OperatorPlan.java,"['trimBelow', '(', 'getSuccessors', '(', 'op', ')', ')', ';']",0
OperatorPlan.java,"['remove', '(', 'op', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'trimAbove', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['trimAbove', '(', 'getPredecessors', '(', 'op', ')', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'trimAbove', '(', 'List', '<', 'E', '>', 'ops', ')', '{']",0
OperatorPlan.java,"['if', '(', 'ops', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['/', '/', 'Make', 'a', 'copy', 'because', 'we', ""'"", 'll', 'be', 'messing', 'with', 'the', 'underlying', 'list', '.']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'copy', '=', 'new', 'ArrayList', '<', 'E', '>', '(', 'ops', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'copy', ')', '{']",0
OperatorPlan.java,"['trimAbove', '(', 'getPredecessors', '(', 'op', ')', ')', ';']",0
OperatorPlan.java,"['remove', '(', 'op', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'List', '<', 'E', '>', 'getPredecessors', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['return', '(', 'List', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'op', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'List', '<', 'E', '>', 'getSuccessors', '(', 'E', 'op', ')', '{']",0
OperatorPlan.java,"['return', '(', 'List', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'op', ')', ';']",0
OperatorPlan.java,"['public', 'Iterator', '<', 'E', '>', 'iterator', '(', ')', '{']",0
OperatorPlan.java,"['return', 'mOps', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'markDirty', '(', ')', '{']",0
OperatorPlan.java,"['mRoots', '.', 'clear', '(', ')', ';']",0
OperatorPlan.java,"['mLeaves', '.', 'clear', '(', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'removeEdges', '(', 'E', 'op', ',']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'fromMap', ',']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'toMap', ')', '{']",0
OperatorPlan.java,"['/', '/', 'Find', 'all', 'of', 'the', 'from', 'edges', ',', 'as', 'I', 'have', 'to', 'remove', 'all', 'the', 'associated', 'to']",0
OperatorPlan.java,"['/', '/', 'edges', '.', 'Need', 'to', 'make', 'a', 'copy', 'so', 'we', 'can', 'delete', 'from', 'the', 'map', 'without']",0
OperatorPlan.java,"['/', '/', 'screwing', 'up', 'our', 'iterator', '.']",0
OperatorPlan.java,"['Collection', 'c', '=', 'fromMap', '.', 'get', '(', 'op', ')', ';']",0
OperatorPlan.java,"['if', '(', 'c', '=', '=', 'null', ')', 'return', ';']",0
OperatorPlan.java,"['ArrayList', 'al', '=', 'new', 'ArrayList', '(', 'c', ')', ';']",1
OperatorPlan.java,"['Iterator', 'i', '=', 'al', '.', 'iterator', '(', ')', ';']",0
OperatorPlan.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
OperatorPlan.java,"['E', 'to', '=', '(', 'E', ')', 'i', '.', 'next', '(', ')', ';']",0
OperatorPlan.java,"['toMap', '.', 'remove', '(', 'to', ',', 'op', ')', ';']",0
OperatorPlan.java,"['fromMap', '.', 'remove', '(', 'op', ',', 'to', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'checkInPlan', '(', 'E', 'op', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['if', '(', 'mOps', '.', 'get', '(', 'op', ')', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'connect', 'operator', '""', '+']",0
OperatorPlan.java,"['op', '.', 'name', '(', ')', '+', '""', 'which', 'is', 'not', 'in', 'the', 'plan', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'OperatorPlan', '<', 'E', '>', 'merge', '(', 'OperatorPlan', '<', 'E', '>', 'inpPlan', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['return', 'doMerge', '(', 'inpPlan', ',', 'false', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'OperatorPlan', '<', 'E', '>', 'mergeSharedPlan', '(', 'OperatorPlan', '<', 'E', '>', 'inpPlan', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['return', 'doMerge', '(', 'inpPlan', ',', 'true', ')', ';']",0
OperatorPlan.java,"['private', 'OperatorPlan', '<', 'E', '>', 'doMerge', '(', 'OperatorPlan', '<', 'E', '>', 'inpPlan', ',', 'boolean', 'allowSharedPlan', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['Map', '<', 'E', ',', 'OperatorKey', '>', 'inpOps', '=', 'inpPlan', '.', 'mOps', ';']",0
OperatorPlan.java,"['Set', '<', 'E', '>', 'curOpsKeySet', '=', 'mOps', '.', 'keySet', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'Map', '.', 'Entry', '<', 'E', ',', 'OperatorKey', '>', 'mapEnt', ':', 'inpOps', '.', 'entrySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'curOpsKeySet', '.', 'contains', '(', 'mapEnt', '.', 'getKey', '(', ')', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', '!', 'allowSharedPlan', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(']",0
OperatorPlan.java,"['""', 'There', 'are', 'operators', 'that', 'are', 'shared', 'across', 'the', 'plans', '.', 'Merge', 'of', '""']",0
OperatorPlan.java,"['+', '""', 'mutually', 'exclusive', 'plans', 'is', 'the', 'only', 'supported', 'merge', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['mOps', '.', 'put', '(', 'mapEnt', '.', 'getKey', '(', ')', ',', 'mapEnt', '.', 'getValue', '(', ')', ')', ';']",0
OperatorPlan.java,"['Map', '<', 'OperatorKey', ',', 'E', '>', 'inpKeys', '=', 'inpPlan', '.', 'mKeys', ';']",0
OperatorPlan.java,"['Set', '<', 'OperatorKey', '>', 'curOKKeySet', '=', 'mKeys', '.', 'keySet', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'Map', '.', 'Entry', '<', 'OperatorKey', ',', 'E', '>', 'mapEnt', ':', 'inpKeys', '.', 'entrySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'curOKKeySet', '.', 'contains', '(', 'mapEnt', '.', 'getKey', '(', ')', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', '!', 'allowSharedPlan', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(']",0
OperatorPlan.java,"['""', 'There', 'are', 'operators', 'that', 'are', 'shared', 'across', 'the', 'plans', '.', 'Merge', 'of', '""']",0
OperatorPlan.java,"['+', '""', 'mutually', 'exclusive', 'plans', 'is', 'the', 'only', 'supported', 'merge', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['mKeys', '.', 'put', '(', 'mapEnt', '.', 'getKey', '(', ')', ',', 'mapEnt', '.', 'getValue', '(', ')', ')', ';']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'inpFromEdges', '=', 'inpPlan', '.', 'mFromEdges', ';']",0
OperatorPlan.java,"['Set', '<', 'E', '>', 'curFEKeySet', '=', 'mFromEdges', '.', 'keySet', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'fromEdg', ':', 'inpFromEdges', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'curFEKeySet', '.', 'contains', '(', 'fromEdg', ')', '&', '&', '!', 'allowSharedPlan', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(']",0
OperatorPlan.java,"['""', 'There', 'are', 'operators', 'that', 'are', 'shared', 'across', 'the', 'plans', '.', 'Merge', 'of', '""']",0
OperatorPlan.java,"['+', '""', 'mutually', 'exclusive', 'plans', 'is', 'the', 'only', 'supported', 'merge', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'e', ':', 'inpFromEdges', '.', 'get', '(', 'fromEdg', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mFromEdges', '.', 'get', '(', 'fromEdg', ')', '=', '=', 'null', '|', '|', '!', 'mFromEdges', '.', 'get', '(', 'fromEdg', ')', '.', 'contains', '(', 'e', ')', ')', '{']",0
OperatorPlan.java,"['mFromEdges', '.', 'put', '(', 'fromEdg', ',', 'e', ')', ';']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'inpToEdges', '=', 'inpPlan', '.', 'mToEdges', ';']",0
OperatorPlan.java,"['Set', '<', 'E', '>', 'curTEKeySet', '=', 'mToEdges', '.', 'keySet', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'toEdg', ':', 'inpToEdges', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'curTEKeySet', '.', 'contains', '(', 'toEdg', ')', '&', '&', '!', 'allowSharedPlan', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(']",0
OperatorPlan.java,"['""', 'There', 'are', 'operators', 'that', 'are', 'shared', 'across', 'the', 'plans', '.', 'Merge', 'of', '""']",0
OperatorPlan.java,"['+', '""', 'mutually', 'exclusive', 'plans', 'is', 'the', 'only', 'supported', 'merge', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'e', ':', 'inpToEdges', '.', 'get', '(', 'toEdg', ')', ')', '{']",0
OperatorPlan.java,"['if', '(', 'mToEdges', '.', 'get', '(', 'toEdg', ')', '=', '=', 'null', '|', '|', '!', 'mToEdges', '.', 'get', '(', 'toEdg', ')', '.', 'contains', '(', 'e', ')', ')', '{']",0
OperatorPlan.java,"['mToEdges', '.', 'put', '(', 'toEdg', ',', 'e', ')', ';']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['return', 'this', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'addAsLeaf', '(', 'E', 'leaf', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'ret', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'operator', ':', 'getLeaves', '(', ')', ')', '{']",0
OperatorPlan.java,"['ret', '.', 'add', '(', 'operator', ')', ';']",0
OperatorPlan.java,"['add', '(', 'leaf', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'oper', ':', 'ret', ')', '{']",0
OperatorPlan.java,"['connect', '(', 'oper', ',', 'leaf', ')', ';']",0
OperatorPlan.java,"['public', 'boolean', 'isSingleLeafPlan', '(', ')', '{']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'tmpList', '=', 'getLeaves', '(', ')', ';']",0
OperatorPlan.java,"['return', 'tmpList', '.', 'size', '(', ')', '=', '=', '1', ';']",0
OperatorPlan.java,"['public', 'int', 'size', '(', ')', '{']",0
OperatorPlan.java,"['return', 'mKeys', '.', 'size', '(', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'insertBetween', '(']",0
OperatorPlan.java,"['E', 'after', ',']",0
OperatorPlan.java,"['E', 'newNode', ',']",0
OperatorPlan.java,"['E', 'before', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['checkInPlan', '(', 'newNode', ')', ';']",0
OperatorPlan.java,"['if', '(', '!', 'replaceNode', '(', 'after', ',', 'newNode', ',', 'before', ',', 'mFromEdges', ')', '|', '|', '!', 'replaceNode', '(', 'before', ',', 'newNode', ',', 'after', ',', 'mToEdges', ')', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'insert', 'between', 'two', 'nodes', '""', '+']",0
OperatorPlan.java,"['""', 'that', 'were', 'not', 'connected', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'put', '(', 'newNode', ',', 'before', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'put', '(', 'newNode', ',', 'after', ')', ';']",0
OperatorPlan.java,"['/', '/', 'replaces', '(', 'src', '-', '>', 'dst', ')', 'entry', 'in', 'multiMap', 'with', '(', 'src', '-', '>', 'replacement', ')']",0
OperatorPlan.java,"['private', 'boolean', 'replaceNode', '(', 'E', 'src', ',', 'E', 'replacement', ',', 'E', 'dst', ',', 'MultiMap', '<', 'E', ',', 'E', '>', 'multiMap', ')', '{']",0
OperatorPlan.java,"['if', '(', 'multiMap', '=', '=', 'null', ')', 'return', 'false', ';']",0
OperatorPlan.java,"['if', '(', 'src', '=', '=', 'null', ')', 'return', 'false', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'nodes', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'multiMap', '.', 'get', '(', 'src', ')', ';']",0
OperatorPlan.java,"['if', '(', 'nodes', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['/', '/', 'we', 'need', 'to', 'add', 'replacement', 'to', 'the', 'multimap', 'as', 'long', 'as', 'replacement', '!', '=', 'null']",0
OperatorPlan.java,"['if', '(', 'replacement', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['}', 'else', 'if', '(', 'dst', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'replacementNodes', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['replacementNodes', '.', 'add', '(', 'replacement', ')', ';']",0
OperatorPlan.java,"['multiMap', '.', 'put', '(', 'src', ',', 'replacementNodes', ')', ';']",0
OperatorPlan.java,"['return', 'true', ';']",1
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['return', 'false', ';']",0
OperatorPlan.java,"['return', 'false', ';']",0
OperatorPlan.java,"['if', '(', 'dst', '=', '=', 'null', ')', 'return', 'false', ';']",0
OperatorPlan.java,"['boolean', 'replaced', '=', 'false', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'replacementNodes', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'nodes', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
OperatorPlan.java,"['E', 'to', '=', 'nodes', '.', 'get', '(', 'i', ')', ';']",0
OperatorPlan.java,"['if', '(', 'to', '.', 'equals', '(', 'dst', ')', ')', '{']",1
OperatorPlan.java,"['replaced', '=', 'true', ';']",0
OperatorPlan.java,"['if', '(', 'replacement', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['replacementNodes', '.', 'add', '(', 'replacement', ')', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['replacementNodes', '.', 'add', '(', 'to', ')', ';']",0
OperatorPlan.java,"['if', '(', 'replaced', ')', '{']",0
OperatorPlan.java,"['multiMap', '.', 'removeKey', '(', 'src', ')', ';']",1
OperatorPlan.java,"['if', '(', 'replacementNodes', '.', 'size', '(', ')', '>', '0', ')', '{']",0
OperatorPlan.java,"['multiMap', '.', 'put', '(', 'src', ',', 'replacementNodes', ')', ';']",0
OperatorPlan.java,"['return', 'replaced', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'replace', '(', 'E', 'oldNode', ',', 'E', 'newNode', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['checkInPlan', '(', 'oldNode', ')', ';']",0
OperatorPlan.java,"['add', '(', 'newNode', ')', ';']",0
OperatorPlan.java,"['mToEdges', '=', 'generateNewMap', '(', 'oldNode', ',', 'newNode', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '=', 'generateNewMap', '(', 'oldNode', ',', 'newNode', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['remove', '(', 'oldNode', ')', ';']",0
OperatorPlan.java,"['private', 'MultiMap', '<', 'E', ',', 'E', '>', 'generateNewMap', '(']",0
OperatorPlan.java,"['E', 'oldNode', ',']",0
OperatorPlan.java,"['E', 'newNode', ',']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'mm', ')', '{']",0
OperatorPlan.java,"['/', '/', 'First', ',', 'replace', 'the', 'key']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'targets', '=', 'mm', '.', 'get', '(', 'oldNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'targets', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['mm', '.', 'removeKey', '(', 'oldNode', ')', ';']",0
OperatorPlan.java,"['mm', '.', 'put', '(', 'newNode', ',', 'targets', ')', ';']",0
OperatorPlan.java,"['/', '/', 'We', 'can', ""'"", 't', 'just', 'do', 'a', 'remove', 'and', 'add', 'in', 'the', 'map', 'because', 'of', 'our']",0
OperatorPlan.java,"['/', '/', 'guarantee', 'of', 'not', 'changing', 'orders', '.', 'So', 'we', 'need', 'to', 'walk', 'the', 'lists', 'and']",0
OperatorPlan.java,"['/', '/', 'put', 'the', 'new', 'node', 'in', 'the', 'same', 'slot', 'as', 'the', 'old', '.']",0
OperatorPlan.java,"['/', '/', 'Walk', 'all', 'the', 'other', 'keys', 'and', 'replace', 'any', 'references', 'to', 'the', 'oldNode']",0
OperatorPlan.java,"['/', '/', 'in', 'their', 'targets', '.']",0
OperatorPlan.java,"['MultiMap', '<', 'E', ',', 'E', '>', 'newMap', '=', 'new', 'MultiMap', '<', 'E', ',', 'E', '>', '(', 'mm', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'key', ':', 'mm', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'c', '=', 'mm', '.', 'get', '(', 'key', ')', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'al', '=', 'new', 'ArrayList', '<', 'E', '>', '(', 'c', ')', ';']",0
OperatorPlan.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'al', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
OperatorPlan.java,"['if', '(', 'al', '.', 'get', '(', 'i', ')', '=', '=', 'oldNode', ')', 'al', '.', 'set', '(', 'i', ',', 'newNode', ')', ';']",0
OperatorPlan.java,"['newMap', '.', 'put', '(', 'key', ',', 'al', ')', ';']",0
OperatorPlan.java,"['return', 'newMap', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'removeAndReconnect', '(', 'E', 'node', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'preds', '=', 'getPredecessors', '(', 'node', ')', ';']",0
OperatorPlan.java,"['E', 'pred', '=', 'null', ';']",0
OperatorPlan.java,"['if', '(', 'preds', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['if', '(', 'preds', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', 'multiple', 'predecessors', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['pred', '=', 'preds', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['disconnect', '(', 'pred', ',', 'node', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'succs', '=', 'getSuccessors', '(', 'node', ')', ';']",0
OperatorPlan.java,"['E', 'succ', '=', 'null', ';']",0
OperatorPlan.java,"['if', '(', 'succs', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['if', '(', 'succs', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', 'multiple', 'successors', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['succ', '=', 'succs', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['disconnect', '(', 'node', ',', 'succ', ')', ';']",0
OperatorPlan.java,"['remove', '(', 'node', ')', ';']",0
OperatorPlan.java,"['if', '(', 'pred', '!', '=', 'null', '&', '&', 'succ', '!', '=', 'null', ')', 'connect', '(', 'pred', ',', 'succ', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'reconnectSuccessors', '(', 'E', 'node', ',', 'boolean', 'successorRequired', ',', 'boolean', 'removeNode', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['/', '/', 'Before', ':']",0
OperatorPlan.java,"['/', '/', 'A', '(', 'predecessor', '(', 'only', 'one', ')', ')']",0
OperatorPlan.java,"['/', '/', '/', '|']",0
OperatorPlan.java,"['/', '/', 'X', 'B', '(', 'nodeB', ')', 'Y', '(', 'some', 'predecessor', 'of', 'a', 'Cn', ')']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\', '/']",0
OperatorPlan.java,"['/', '/', 'C1', 'C2', 'C3', '.', '.', '.', '(', 'Successors', ')']",0
OperatorPlan.java,"['/', '/', 'should', 'become']",0
OperatorPlan.java,"['/', '/', 'After', ':']",0
OperatorPlan.java,"['/', '/', '___', 'A', 'Y']",0
OperatorPlan.java,"['/', '/', '/', '/', '|', '\\', '/']",0
OperatorPlan.java,"['/', '/', 'X', 'C1', 'C2', 'C3', '.', '.', '.']",0
OperatorPlan.java,"['/', '/', 'the', 'variable', 'names', 'are', 'from', 'above', 'example']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'preds', '=', 'getPredecessors', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'checking', 'pre', '-', 'requisite', 'conditions']",0
OperatorPlan.java,"['if', '(', 'preds', '=', '=', 'null', '|', '|', 'preds', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
OperatorPlan.java,"['Integer', 'size', '=', 'null', ';']",0
OperatorPlan.java,"['if', '(', 'preds', '!', '=', 'null', ')']",0
OperatorPlan.java,"['size', '=', 'preds', '.', 'size', '(', ')', ';']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', '""', '+', 'size', '+']",0
OperatorPlan.java,"['""', 'predecessors', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['/', '/', 'A', 'and', 'C']",0
OperatorPlan.java,"['E', 'nodeA', '=', 'preds', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'nodeC', '=', 'mFromEdges', '.', 'get', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'checking', 'pre', '-', 'requisite', 'conditions']",0
OperatorPlan.java,"['if', '(', 'successorRequired', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', 'no', 'successors', '.', '""', ')', ';']",1
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['/', '/', 'replace', 'B', 'in', 'A', '.', 'succesors', 'and', 'add', 'B', '.', 'successors', '(', 'ie', 'C', ')', 'to', 'it']",0
OperatorPlan.java,"['replaceAndAddSucessors', '(', 'nodeA', ',', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'for', 'all', 'C', '(', 'succs', ')', ',', 'replace', 'B', '(', 'node', ')', 'in', 'predecessors', ',', 'with', 'A', '(', 'pred', ')']",0
OperatorPlan.java,"['if', '(', 'nodeC', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'sPreds', '=', 'mToEdges', '.', 'get', '(', 'c', ')', ';']",1
OperatorPlan.java,"['mToEdges', '.', 'removeKey', '(', 'c', ')', ';']",1
OperatorPlan.java,"['mToEdges', '.', 'put', '(', 'c', ',', 'newPreds', ')', ';']",1
OperatorPlan.java,"['if', '(', 'removeNode', ')', '{']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['/', '/', 'make', 'sure', 'that', 'the', 'node', 'does', 'not', 'have', 'any', 'dangling', 'from', 'and', 'to', 'edges']",0
OperatorPlan.java,"['mFromEdges', '.', 'removeKey', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'removeKey', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['private', 'void', 'reconnectPredecessors', '(', 'E', 'node', ',', 'boolean', 'predecessorRequired', ',', 'boolean', 'removeNode', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['/', '/', 'Before', ':']",0
OperatorPlan.java,"['/', '/', 'C1', 'C2', 'C3', '.', '.', '.', '(', 'Predecessors', ')']",0
OperatorPlan.java,"['/', '/', '\\', '|', '/', '\\']",0
OperatorPlan.java,"['/', '/', 'X', 'B', '(', 'nodeB', ')', 'Y', '(', 'some', 'successor', 'of', 'a', 'Cn', ')']",0
OperatorPlan.java,"['/', '/', '\\', '|']",0
OperatorPlan.java,"['/', '/', 'A', '(', 'successor', '(', 'only', 'one', ')', ')']",0
OperatorPlan.java,"['/', '/', 'should', 'become']",0
OperatorPlan.java,"['/', '/', 'After', ':']",0
OperatorPlan.java,"['/', '/', 'X', 'C1', 'C2', 'C3', '.', '.', '.']",0
OperatorPlan.java,"['/', '/', '\\', '\\', '|', '/', '\\']",0
OperatorPlan.java,"['/', '/', 'A', 'Y']",0
OperatorPlan.java,"['/', '/', 'the', 'variable', 'names', 'are', 'from', 'above', 'example']",0
OperatorPlan.java,"['E', 'nodeB', '=', 'node', ';']",0
OperatorPlan.java,"['E', 'nodeB', '=', 'node', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'nodeBsuccessors', '=', 'getSuccessors', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'checking', 'pre', '-', 'requisite', 'conditions']",0
OperatorPlan.java,"['if', '(', 'nodeBsuccessors', '=', '=', 'null', '|', '|', 'nodeBsuccessors', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
OperatorPlan.java,"['Integer', 'size', '=', 'null', ';']",0
OperatorPlan.java,"['if', '(', 'nodeBsuccessors', '!', '=', 'null', ')']",0
OperatorPlan.java,"['size', '=', 'nodeBsuccessors', '.', 'size', '(', ')', ';']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', '""', '+', 'size', '+']",0
OperatorPlan.java,"['""', 'successors', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['/', '/', 'A', 'and', 'C']",0
OperatorPlan.java,"['E', 'nodeA', '=', 'nodeBsuccessors', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'nodeC', '=', 'mToEdges', '.', 'get', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'checking', 'pre', '-', 'requisite', 'conditions']",0
OperatorPlan.java,"['if', '(', 'predecessorRequired', ')', '{']",0
OperatorPlan.java,"['if', '(', 'nodeC', '=', '=', 'null', '|', '|', 'nodeC', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
OperatorPlan.java,"['if', '(', 'nodeC', '=', '=', 'null', '|', '|', 'nodeC', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
OperatorPlan.java,"['PlanException', 'pe', '=', 'new', 'PlanException', '(', '""', 'Attempt', 'to', 'remove', '""', '+']",0
OperatorPlan.java,"['""', 'and', 'reconnect', 'for', 'node', 'with', 'no', 'predecessors', '.', '""', ')', ';']",0
OperatorPlan.java,"['log', '.', 'error', '(', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
OperatorPlan.java,"['throw', 'pe', ';']",0
OperatorPlan.java,"['/', '/', 'replace', 'B', 'in', 'A', '.', 'predecessors', 'and', 'add', 'B', '.', 'predecessors', '(', 'ie', 'C', ')', 'to', 'it']",0
OperatorPlan.java,"['replaceAndAddPredecessors', '(', 'nodeA', ',', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'for', 'all', 'C', '(', 'predecessors', ')', ',', 'replace', 'B', '(', 'node', ')', 'in', 'successors', ',', 'with', 'A', '(', 'successor', ')']",0
OperatorPlan.java,"['if', '(', 'nodeC', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'c', ':', 'nodeC', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'c', ':', 'nodeC', ')', '{']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'sPreds', '=', 'mFromEdges', '.', 'get', '(', 'c', ')', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'newPreds', '=', 'new', 'ArrayList', '<', 'E', '>', '(', 'sPreds', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'newPreds', '=', 'new', 'ArrayList', '<', 'E', '>', '(', 'sPreds', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'p', ':', 'sPreds', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'p', ':', 'sPreds', ')', '{']",0
OperatorPlan.java,"['if', '(', 'p', '=', '=', 'nodeB', ')', '{']",0
OperatorPlan.java,"['if', '(', 'p', '=', '=', 'nodeB', ')', '{']",0
OperatorPlan.java,"['/', '/', 'replace']",0
OperatorPlan.java,"['/', '/', 'replace']",0
OperatorPlan.java,"['newPreds', '.', 'add', '(', 'nodeA', ')', ';']",0
OperatorPlan.java,"['newPreds', '.', 'add', '(', 'nodeA', ')', ';']",0
OperatorPlan.java,"['newPreds', '.', 'add', '(', 'p', ')', ';']",0
OperatorPlan.java,"['newPreds', '.', 'add', '(', 'p', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'removeKey', '(', 'c', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'put', '(', 'c', ',', 'newPreds', ')', ';']",0
OperatorPlan.java,"['if', '(', 'removeNode', ')', '{']",0
OperatorPlan.java,"['remove', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['remove', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['/', '/', 'make', 'sure', 'that', 'the', 'node', 'does', 'not', 'have', 'any', 'dangling', 'from', 'and', 'to', 'edges']",0
OperatorPlan.java,"['mFromEdges', '.', 'removeKey', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'removeKey', '(', 'nodeB', ')', ';']",0
OperatorPlan.java,"['/', '/', 'removes', 'entry', 'for', 'successor', 'in', 'list', 'of', 'successors', 'of', 'node']",0
OperatorPlan.java,"['/', '/', 'and', 'adds', 'successors', 'of', 'successor', 'in', 'its', 'place']",0
OperatorPlan.java,"['/', '/', '@', 'param', 'noded', '-', 'parent', 'node', 'whose', 'entry', 'for', 'successor', 'needs', 'to', 'be', 'replaced']",0
OperatorPlan.java,"['/', '/', '@', 'param', 'successor', '-', 'see', 'above']",0
OperatorPlan.java,"['private', 'void', 'replaceAndAddSucessors', '(', 'E', 'node', ',', 'E', 'successor', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'oldSuccessors', '=', 'mFromEdges', '.', 'get', '(', 'node', ')', ';']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'replacementSuccessors', '=', 'mFromEdges', '.', 'get', '(', 'successor', ')', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'newSuccessors', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 's', ':', 'oldSuccessors', ')', '{']",0
OperatorPlan.java,"['if', '(', 's', '=', '=', 'successor', ')', '{']",0
OperatorPlan.java,"['if', '(', 'replacementSuccessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['newSuccessors', '.', 'addAll', '(', 'replacementSuccessors', ')', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['newSuccessors', '.', 'add', '(', 's', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'removeKey', '(', 'node', ')', ';']",0
OperatorPlan.java,"['mFromEdges', '.', 'put', '(', 'node', ',', 'newSuccessors', ')', ';']",0
OperatorPlan.java,"['/', '/', 'removes', 'entry', 'for', 'predecessor', 'in', 'list', 'of', 'predecessors', 'of', 'node', ',']",0
OperatorPlan.java,"['/', '/', 'and', 'adds', 'predecessors', 'of', 'predecessor', 'in', 'its', 'place']",0
OperatorPlan.java,"['/', '/', '@', 'param', 'node', '-', 'parent', 'node', 'whose', 'entry', 'for', 'predecessor', 'needs', 'to', 'be', 'replaced']",0
OperatorPlan.java,"['/', '/', '@', 'param', 'predecessor', '-', 'see', 'above']",0
OperatorPlan.java,"['private', 'void', 'replaceAndAddPredecessors', '(', 'E', 'node', ',', 'E', 'predecessor', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'oldPredecessors', '=', 'mToEdges', '.', 'get', '(', 'node', ')', ';']",0
OperatorPlan.java,"['Collection', '<', 'E', '>', 'replacementPredecessors', '=', 'mToEdges', '.', 'get', '(', 'predecessor', ')', ';']",0
OperatorPlan.java,"['ArrayList', '<', 'E', '>', 'newPredecessors', '=', 'new', 'ArrayList', '<', 'E', '>', '(', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'p', ':', 'oldPredecessors', ')', '{']",0
OperatorPlan.java,"['if', '(', 'p', '=', '=', 'predecessor', ')', '{']",0
OperatorPlan.java,"['if', '(', 'replacementPredecessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['newPredecessors', '.', 'addAll', '(', 'replacementPredecessors', ')', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['newPredecessors', '.', 'add', '(', 'p', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'removeKey', '(', 'node', ')', ';']",0
OperatorPlan.java,"['mToEdges', '.', 'put', '(', 'node', ',', 'newPredecessors', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'removeAndReconnectMultiSucc', '(', 'E', 'node', ')', 'throws', 'PlanException', '{']",1
OperatorPlan.java,"['reconnectSuccessors', '(', 'node', ',', 'true', ',', 'true', ')', ';']",0
OperatorPlan.java,"['public', 'void', 'dump', '(', 'PrintStream', 'ps', ')', '{']",0
OperatorPlan.java,"['ps', '.', 'println', '(', '""', 'Ops', '""', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'mOps', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['ps', '.', 'println', '(', 'op', '.', 'name', '(', ')', ')', ';']",0
OperatorPlan.java,"['ps', '.', 'println', '(', '""', 'from', 'edges', '""', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'mFromEdges', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'to', ':', 'mFromEdges', '.', 'get', '(', 'op', ')', ')', '{']",0
OperatorPlan.java,"['ps', '.', 'println', '(', 'op', '.', 'name', '(', ')', '+', '""', '-', '>', '""', '+', 'to', '.', 'name', '(', ')', ')', ';']",0
OperatorPlan.java,"['ps', '.', 'println', '(', '""', 'to', 'edges', '""', ')', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'op', ':', 'mToEdges', '.', 'keySet', '(', ')', ')', '{']",0
OperatorPlan.java,"['for', '(', 'E', 'to', ':', 'mToEdges', '.', 'get', '(', 'op', ')', ')', '{']",0
OperatorPlan.java,"['ps', '.', 'println', '(', 'op', '.', 'name', '(', ')', '+', '""', '-', '>', '""', '+', 'to', '.', 'name', '(', ')', ')', ';']",0
OperatorPlan.java,"['public', 'void', 'explain', '(']",0
OperatorPlan.java,"['OutputStream', 'out', ',']",0
OperatorPlan.java,"['PrintStream', 'ps', ')', 'throws', 'VisitorException', ',', 'IOException', '{']",0
OperatorPlan.java,"['PlanPrinter', 'pp', '=', 'new', 'PlanPrinter', '(', 'ps', ',', 'this', ')', ';']",0
OperatorPlan.java,"['pp', '.', 'print', '(', 'out', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'swap', '(', 'E', 'first', ',', 'E', 'second', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['E', 'firstNode', '=', 'first', ';']",0
OperatorPlan.java,"['E', 'secondNode', '=', 'second', ';']",0
OperatorPlan.java,"['if', '(', 'firstNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1092', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'swap', 'is', 'null', '.', 'Cannot', 'swap', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1092', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'swap', 'is', 'null', '.', 'Cannot', 'swap', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodePredecessors', '!', '=', 'null', '&', '&', 'firstNodePredecessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1093', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Swap', 'supports', 'swap', 'of', 'operators', 'with', 'at', 'most', 'one', 'input', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'firstNodePredecessors', '.', 'size', '(', ')', '+', '""', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodeSuccessors', '!', '=', 'null', '&', '&', 'firstNodeSuccessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1093', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Swap', 'supports', 'swap', 'of', 'operators', 'with', 'at', 'most', 'one', 'output', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'firstNodeSuccessors', '.', 'size', '(', ')', '+', '""', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodePredecessors', '!', '=', 'null', '&', '&', 'secondNodePredecessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1093', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Swap', 'supports', 'swap', 'of', 'operators', 'with', 'at', 'most', 'one', 'input', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'second', 'operator', 'with', '""', '+', 'secondNodePredecessors', '.', 'size', '(', ')', '+', '""', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodeSuccessors', '!', '=', 'null', '&', '&', 'secondNodeSuccessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1093', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Swap', 'supports', 'swap', 'of', 'operators', 'with', 'at', 'most', 'one', 'output', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'second', 'operator', 'with', '""', '+', 'secondNodeSuccessors', '.', 'size', '(', ')', '+', '""', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['E', 'firstNodePredecessor', '=', 'null', ';']",0
OperatorPlan.java,"['E', 'firstNodeSuccessor', '=', 'null', ';']",0
OperatorPlan.java,"['E', 'secondNodePredecessor', '=', 'null', ';']",0
OperatorPlan.java,"['E', 'secondNodeSuccessor', '=', 'null', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodePredecessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['firstNodePredecessor', '=', 'firstNodePredecessors', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodeSuccessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['firstNodeSuccessor', '=', 'firstNodeSuccessors', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodePredecessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['secondNodePredecessor', '=', 'secondNodePredecessors', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodeSuccessors', '!', '=', 'null', ')', '{']",0
OperatorPlan.java,"['secondNodeSuccessor', '=', 'secondNodeSuccessors', '.', 'get', '(', '0', ')', ';']",0
OperatorPlan.java,"['boolean', 'immediateNodes', '=', 'false', ';']",0
OperatorPlan.java,"['if', '(', '(', 'firstNodeSuccessor', '=', '=', 'secondNode', ')', '&', '&', '(', 'secondNodePredecessor', '=', '=', 'firstNode', ')', ')', '{']",0
OperatorPlan.java,"['immediateNodes', '=', 'true', ';']",0
OperatorPlan.java,"['}', 'else', 'if', '(', '(', 'secondNodeSuccessor', '=', '=', 'firstNode', ')', '&', '&', '(', 'firstNodePredecessor', '=', '=', 'secondNode', ')', ')', '{']",0
OperatorPlan.java,"['immediateNodes', '=', 'true', ';']",0
OperatorPlan.java,"['/', '/', 'swap', 'the', 'firstNode', 'and', 'secondNode']",0
OperatorPlan.java,"['E', 'tmpNode', '=', 'firstNode', ';']",0
OperatorPlan.java,"['firstNode', '=', 'secondNode', ';']",0
OperatorPlan.java,"['secondNode', '=', 'tmpNode', ';']",0
OperatorPlan.java,"['/', '/', 'swap', 'the', 'predecessor', 'and', 'successor', 'nodes']",0
OperatorPlan.java,"['tmpNode', '=', 'firstNodePredecessor', ';']",0
OperatorPlan.java,"['firstNodePredecessor', '=', 'secondNodePredecessor', ';']",0
OperatorPlan.java,"['secondNodePredecessor', '=', 'tmpNode', ';']",0
OperatorPlan.java,"['tmpNode', '=', 'firstNodeSuccessor', ';']",0
OperatorPlan.java,"['firstNodeSuccessor', '=', 'secondNodeSuccessor', ';']",0
OperatorPlan.java,"['secondNodeSuccessor', '=', 'tmpNode', ';']",0
OperatorPlan.java,"['if', '(', 'immediateNodes', ')', '{']",0
OperatorPlan.java,"['/', '/', 'Replace', 'the', 'predecessors', 'and', 'successors', 'of', 'first', 'and', 'second', 'in', 'their', 'respective', 'edge', 'lists']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNode', ',', 'secondNodeSuccessor', ',', 'firstNodeSuccessor', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNode', ',', 'secondNode', ',', 'firstNodePredecessor', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNode', ',', 'firstNode', ',', 'secondNodeSuccessor', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNode', ',', 'firstNodePredecessor', ',', 'secondNodePredecessor', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['}', 'else', '{']",0
OperatorPlan.java,"['/', '/', 'Replace', 'the', 'predecessors', 'and', 'successors', 'of', 'first', 'and', 'second', 'in', 'their', 'respective', 'edge', 'lists']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNode', ',', 'secondNodeSuccessor', ',', 'firstNodeSuccessor', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNode', ',', 'secondNodePredecessor', ',', 'firstNodePredecessor', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNode', ',', 'firstNodeSuccessor', ',', 'secondNodeSuccessor', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNode', ',', 'firstNodePredecessor', ',', 'secondNodePredecessor', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Replace', 'first', 'with', 'second', 'in', 'the', 'edges', 'list', 'for', 'first', ""'"", 's', 'predecessor', 'and', 'successor']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNodePredecessor', ',', 'secondNode', ',', 'firstNode', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'firstNodeSuccessor', ',', 'secondNode', ',', 'firstNode', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Replace', 'second', 'with', 'first', 'in', 'the', 'edges', 'list', 'for', 'second', ""'"", 's', 'predecessor', 'and', 'successor']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNodePredecessor', ',', 'firstNode', ',', 'secondNode', ',', 'mFromEdges', ')', ';']",0
OperatorPlan.java,"['replaceNode', '(', 'secondNodeSuccessor', ',', 'firstNode', ',', 'secondNode', ',', 'mToEdges', ')', ';']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'pushBefore', '(', 'E', 'first', ',', 'E', 'second', ',', 'int', 'inputNum', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['E', 'firstNode', '=', 'first', ';']",0
OperatorPlan.java,"['E', 'secondNode', '=', 'second', ';']",0
OperatorPlan.java,"['if', '(', 'firstNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1085', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushBefore', 'is', 'null', '.', 'Cannot', 'pushBefore', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1085', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushBefore', 'is', 'null', '.', 'Cannot', 'pushBefore', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodePredecessors', '=', '=', 'null', '|', '|', 'firstNodePredecessors', '.', 'size', '(', ')', '<', '=', '1', ')', '{']",0
OperatorPlan.java,"['int', 'size', '=', '(', 'firstNodePredecessors', '=', '=', 'null', '?', '0', ':', 'firstNodePredecessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['int', 'errCode', '=', '1086', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushBefore', 'should', 'have', 'multiple', 'inputs', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'size', '+', '""', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['if', '(', 'inputNum', '>', '=', 'firstNodePredecessors', '.', 'size', '(', ')', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1087', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'The', 'inputNum', '""', '+', 'inputNum', '+', '""', 'should', 'be', 'lesser', 'than', 'the', 'number', 'of', 'inputs', 'of', 'the', 'first', 'operator', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'firstNodePredecessors', '.', 'size', '(', ')', '+', '""', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodeSuccessors', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1088', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushBefore', 'should', 'have', 'at', 'least', 'one', 'output', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', 'no', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodePredecessors', '=', '=', 'null', '|', '|', 'secondNodePredecessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'size', '=', '(', 'secondNodePredecessors', '=', '=', 'null', '?', '0', ':', 'secondNodePredecessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['int', 'errCode', '=', '1088', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushBefore', 'should', 'have', 'one', 'input', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'second', 'operator', 'with', '""', '+', 'size', '+', '""', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['/', '/', 'check', 'for', 'multiple', 'edges', 'from', 'first', 'to', 'second']",0
OperatorPlan.java,"['int', 'edgesFromFirstToSecond', '=', '0', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'node', ':', 'firstNodeSuccessors', ')', '{']",0
OperatorPlan.java,"['if', '(', 'node', '=', '=', 'secondNode', ')', '{']",0
OperatorPlan.java,"['+', '+', 'edgesFromFirstToSecond', ';']",0
OperatorPlan.java,"['if', '(', 'edgesFromFirstToSecond', '=', '=', '0', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1089', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushBefore', 'should', 'be', 'the', 'successor', 'of', 'the', 'First', 'operator', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['}', 'else', 'if', '(', 'edgesFromFirstToSecond', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1090', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'can', 'have', 'at', 'most', 'one', 'incoming', 'edge', 'from', 'First', 'operator', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', '""', '+', 'edgesFromFirstToSecond', '+', '""', 'edges', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['/', '/', 'check', 'if', 'E', '(', 'i', '.', 'e', '.', ',', 'firstNode', ')', 'can', 'support', 'multiple', 'outputs', 'before', 'we', 'short', '-', 'circuit']",0
OperatorPlan.java,"['if', '(', '!', 'firstNode', '.', 'supportsMultipleOutputs', '(', ')', ')', '{']",0
OperatorPlan.java,"['int', 'numSecondNodeSuccessors', '=', '(', 'secondNodeSuccessors', '=', '=', 'null', '?', '0', ':', 'secondNodeSuccessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['if', '(', '(', 'firstNodeSuccessors', '.', 'size', '(', ')', '>', '0', ')', '|', '|', '(', 'numSecondNodeSuccessors', '>', '0', ')', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1091', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'does', 'not', 'support', 'multiple', 'outputs', '.', '""']",0
OperatorPlan.java,"['+', '""', 'On', 'completing', 'the', 'pushBefore', 'operation', 'First', 'operator', 'will', 'end', 'up', 'with', '""']",0
OperatorPlan.java,"['+', '(', 'firstNodeSuccessors', '.', 'size', '(', ')', '+', 'numSecondNodeSuccessors', ')', '+', '""', 'edges', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Assume', 'that', 'we', 'have', 'a', 'graph', 'which', 'is', 'like']",0
OperatorPlan.java,"['/', '/', 'A', 'B', 'C', 'D']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'E']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\']",0
OperatorPlan.java,"['/', '/', 'F', 'G', 'H']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\']",0
OperatorPlan.java,"['/', '/', 'I', 'J', 'K']",0
OperatorPlan.java,"['/', '/', 'Now', 'pushBefore', '(', 'E', ',', 'G', ',', '1', ')']",0
OperatorPlan.java,"['/', '/', 'This', 'can', 'be', 'done', 'using', 'the', 'following', 'sequence', 'of', 'transformations']",0
OperatorPlan.java,"['/', '/', '1', '.', 'Promote', 'G', ""'"", 's', 'successors', 'as', 'E', ""'"", 's', 'successors', 'using', 'reconnectSuccessors', '(', 'G', ')']",0
OperatorPlan.java,"['/', '/', '2', '.', 'Insert', 'G', 'between', 'B', 'and', 'E', 'using', 'insertBetween', '(', 'B', ',', 'G', ',', 'E', ')']",0
OperatorPlan.java,"['/', '/', 'The', 'graphs', 'after', 'each', 'step']",0
OperatorPlan.java,"['/', '/', 'Step', '1', '-', 'Note', 'that', 'G', 'is', 'standing', 'alone']",0
OperatorPlan.java,"['/', '/', 'A', 'B', 'C', 'D', 'G']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'E']",0
OperatorPlan.java,"['/', '/', '/', '/', '|', '\\', '\\']",0
OperatorPlan.java,"['/', '/', 'F', 'I', 'J', 'K', 'H']",0
OperatorPlan.java,"['/', '/', 'Step', '2']",0
OperatorPlan.java,"['/', '/', 'B']",0
OperatorPlan.java,"['/', '/', '|']",0
OperatorPlan.java,"['/', '/', 'A', 'G', 'C', 'D']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'E']",0
OperatorPlan.java,"['/', '/', '/', '/', '|', '\\', '\\']",0
OperatorPlan.java,"['/', '/', 'F', 'I', 'J', 'K', 'H']",0
OperatorPlan.java,"['reconnectSuccessors', '(', 'secondNode', ',', 'false', ',', 'false', ')', ';']",0
OperatorPlan.java,"['insertBetween', '(', 'firstNodePredecessors', '.', 'get', '(', 'inputNum', ')', ',', 'secondNode', ',', 'firstNode', ')', ';']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
OperatorPlan.java,"['/', '*', '*']",0
OperatorPlan.java,"['public', 'void', 'pushAfter', '(', 'E', 'first', ',', 'E', 'second', ',', 'int', 'outputNum', ')', 'throws', 'PlanException', '{']",0
OperatorPlan.java,"['E', 'firstNode', '=', 'first', ';']",0
OperatorPlan.java,"['E', 'secondNode', '=', 'second', ';']",0
OperatorPlan.java,"['if', '(', 'firstNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1085', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushAfter', 'is', 'null', '.', 'Cannot', 'pushBefore', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNode', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1085', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushAfter', 'is', 'null', '.', 'Cannot', 'pushBefore', 'null', 'operators', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['checkInPlan', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodePredecessors', '=', '=', 'null', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1088', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushAfter', 'should', 'have', 'at', 'least', 'one', 'input', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', 'no', 'inputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'firstNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'firstNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'firstNodeSuccessors', '=', '=', 'null', '|', '|', 'firstNodeSuccessors', '.', 'size', '(', ')', '<', '=', '1', ')', '{']",0
OperatorPlan.java,"['int', 'size', '=', '(', 'firstNodeSuccessors', '=', '=', 'null', '?', '0', ':', 'firstNodeSuccessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['int', 'errCode', '=', '1086', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'in', 'pushAfter', 'should', 'have', 'multiple', 'outputs', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'size', '+', '""', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['if', '(', 'outputNum', '>', '=', 'firstNodeSuccessors', '.', 'size', '(', ')', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1087', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'The', 'outputNum', '""', '+', 'outputNum', '+', '""', 'should', 'be', 'lesser', 'than', 'the', 'number', 'of', 'outputs', 'of', 'the', 'first', 'operator', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'first', 'operator', 'with', '""', '+', 'firstNodeSuccessors', '.', 'size', '(', ')', '+', '""', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodePredecessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mToEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['List', '<', 'E', '>', 'secondNodeSuccessors', '=', '(', 'ArrayList', '<', 'E', '>', ')', 'mFromEdges', '.', 'get', '(', 'secondNode', ')', ';']",0
OperatorPlan.java,"['if', '(', 'secondNodeSuccessors', '=', '=', 'null', '|', '|', 'secondNodeSuccessors', '.', 'size', '(', ')', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'size', '=', '(', 'secondNodeSuccessors', '=', '=', 'null', '?', '0', ':', 'secondNodeSuccessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['int', 'errCode', '=', '1088', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushAfter', 'should', 'have', 'one', 'output', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', 'second', 'operator', 'with', '""', '+', 'size', '+', '""', 'outputs', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['/', '/', 'check', 'for', 'multiple', 'edges', 'from', 'second', 'to', 'first']",0
OperatorPlan.java,"['int', 'edgesFromSecondToFirst', '=', '0', ';']",0
OperatorPlan.java,"['for', '(', 'E', 'node', ':', 'secondNodeSuccessors', ')', '{']",0
OperatorPlan.java,"['if', '(', 'node', '=', '=', 'firstNode', ')', '{']",0
OperatorPlan.java,"['+', '+', 'edgesFromSecondToFirst', ';']",0
OperatorPlan.java,"['if', '(', 'edgesFromSecondToFirst', '=', '=', '0', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1089', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'in', 'pushAfter', 'should', 'be', 'the', 'predecessor', 'of', 'the', 'First', 'operator', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['}', 'else', 'if', '(', 'edgesFromSecondToFirst', '>', '1', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1090', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'Second', 'operator', 'can', 'have', 'at', 'most', 'one', 'outgoing', 'edge', 'from', 'First', 'operator', '.', '""']",0
OperatorPlan.java,"['+', '""', 'Found', '""', '+', 'edgesFromSecondToFirst', '+', '""', 'edges', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['/', '/', 'check', 'if', 'E', '(', 'i', '.', 'e', '.', ',', 'firstNode', ')', 'can', 'support', 'multiple', 'outputs', 'before', 'we', 'short', '-', 'circuit']",0
OperatorPlan.java,"['if', '(', '!', 'firstNode', '.', 'supportsMultipleInputs', '(', ')', ')', '{']",0
OperatorPlan.java,"['int', 'numSecondNodePredecessors', '=', '(', 'secondNodePredecessors', '=', '=', 'null', '?', '0', ':', 'secondNodePredecessors', '.', 'size', '(', ')', ')', ';']",0
OperatorPlan.java,"['if', '(', '(', 'firstNodePredecessors', '.', 'size', '(', ')', '>', '0', ')', '|', '|', '(', 'numSecondNodePredecessors', '>', '0', ')', ')', '{']",0
OperatorPlan.java,"['int', 'errCode', '=', '1091', ';']",0
OperatorPlan.java,"['String', 'msg', '=', '""', 'First', 'operator', 'does', 'not', 'support', 'multiple', 'inputs', '.', '""']",0
OperatorPlan.java,"['+', '""', 'On', 'completing', 'the', 'pushAfter', 'operation', 'First', 'operator', 'will', 'end', 'up', 'with', '""']",0
OperatorPlan.java,"['+', '(', 'firstNodePredecessors', '.', 'size', '(', ')', '+', 'numSecondNodePredecessors', ')', '+', '""', 'edges', '.', '""', ';']",0
OperatorPlan.java,"['throw', 'new', 'PlanException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
OperatorPlan.java,"['/', '/', 'Assume', 'that', 'we', 'have', 'a', 'graph', 'which', 'is', 'like']",0
OperatorPlan.java,"['/', '/', 'A', 'B', 'C', 'D']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'E']",0
OperatorPlan.java,"['/', '/', '|']",0
OperatorPlan.java,"['/', '/', 'G']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\']",0
OperatorPlan.java,"['/', '/', 'I', 'J', 'K']",0
OperatorPlan.java,"['/', '/', 'Now', 'pushAfter', '(', 'G', ',', 'E', ',', '1', ')']",0
OperatorPlan.java,"['/', '/', 'This', 'can', 'be', 'done', 'using', 'the', 'following', 'sequence', 'of', 'transformations']",0
OperatorPlan.java,"['/', '/', '1', '.', 'Promote', 'E', ""'"", 's', 'predecessors', 'as', 'G', ""'"", 's', 'predecessors', 'using', 'reconnectPredecessors', '(', 'E', ')']",0
OperatorPlan.java,"['/', '/', '2', '.', 'Insert', 'E', 'between', 'G', 'and', 'J', 'using', 'insertBetween', '(', 'G', ',', 'E', ',', 'J', ')']",0
OperatorPlan.java,"['/', '/', 'The', 'graphs', 'after', 'each', 'step']",0
OperatorPlan.java,"['/', '/', 'Step', '1', '-', 'Note', 'that', 'E', 'is', 'standing', 'alone']",0
OperatorPlan.java,"['/', '/', 'A', 'B', 'C', 'D', 'E']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'G']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\']",0
OperatorPlan.java,"['/', '/', 'I', 'J', 'K']",0
OperatorPlan.java,"['/', '/', 'Step', '2']",0
OperatorPlan.java,"['/', '/', 'A', 'B', 'C', 'D']",0
OperatorPlan.java,"['/', '/', '\\', '|', '|', '/']",0
OperatorPlan.java,"['/', '/', 'G']",0
OperatorPlan.java,"['/', '/', '/', '|', '\\']",0
OperatorPlan.java,"['/', '/', 'I', 'E', 'K']",0
OperatorPlan.java,"['/', '/', '|']",0
OperatorPlan.java,"['/', '/', 'J']",0
OperatorPlan.java,"['reconnectPredecessors', '(', 'secondNode', ',', 'false', ',', 'false', ')', ';']",0
OperatorPlan.java,"['insertBetween', '(', 'firstNode', ',', 'secondNode', ',', 'firstNodeSuccessors', '.', 'get', '(', 'outputNum', ')', ')', ';']",0
OperatorPlan.java,"['markDirty', '(', ')', ';']",0
TestEvalPipeline2.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestEvalPipeline2.java,"['import', 'static', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', '.', 'MAPREDUCE', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TestEvalPipeline2.java,"['import', 'java', '.', 'util', '.', 'Random', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', '*', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'Identity', ';']",0
TestEvalPipeline2.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
TestEvalPipeline2.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestEvalPipeline2.java,"['public', 'class', 'TestEvalPipeline2', 'extends', 'TestCase', '{']",0
TestEvalPipeline2.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestEvalPipeline2.java,"['private', 'PigServer', 'pigServer', ';']",0
TestEvalPipeline2.java,"['TupleFactory', 'mTf', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
TestEvalPipeline2.java,"['BagFactory', 'mBf', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestEvalPipeline2.java,"['FileLocalizer', '.', 'setR', '(', 'new', 'Random', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testUdfInputOrder', '(', ')', 'throws', 'IOException', '{']",0
TestEvalPipeline2.java,"['String', '[', ']', 'input', '=', '{']",0
TestEvalPipeline2.java,"['""', '(', '123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', '(', '123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', '123123123123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', 'asdf', ')', '""']",0
TestEvalPipeline2.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'table_udfInp', '""', ',', 'input', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", 'table_udfInp', ""'"", 'as', '(', 'i', ':', 'int', ')', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'foreach', 'a', '{', 'dec', '=', ""'"", 'hello', ""'"", ';', 'str1', '=', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+']",0
TestEvalPipeline2.java,"['""', '(', 'dec', ',', ""'"", 'abc', ""'"", ',', ""'"", 'def', ""'"", ')', ';', '""', '+']",0
TestEvalPipeline2.java,"['""', 'generate', 'dec', ',', 'str1', ';', '}', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pigServer', '.', 'openIterator', '(', '""', 'b', '""', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 'tup', '=', 'null', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '1']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 'out', '=', '(', 'Tuple', ')', 'tup', '.', 'get', '(', '1', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'out', '.', 'get', '(', '0', ')', '.', 'toString', '(', ')', ',', '""', 'hello', '""', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'out', '.', 'get', '(', '1', ')', '.', 'toString', '(', ')', ',', '""', 'abc', '""', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'out', '.', 'get', '(', '2', ')', '.', 'toString', '(', ')', ',', '""', 'def', '""', ')', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'deleteFile', '(', 'cluster', ',', '""', 'table_udfInp', '""', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testUDFwithStarInput', '(', ')', 'throws', 'Exception', '{']",0
TestEvalPipeline2.java,"['int', 'LOOP_COUNT', '=', '10', ';']",0
TestEvalPipeline2.java,"['File', 'tmpFile', '=', 'File', '.', 'createTempFile', '(', '""', 'test', '""', ',', '""', 'txt', '""', ')', ';']",0
TestEvalPipeline2.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile', ')', ')', ';']",0
TestEvalPipeline2.java,"['Random', 'r', '=', 'new', 'Random', '(', ')', ';']",0
TestEvalPipeline2.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'LOOP_COUNT', ';', 'i', '+', '+', ')', '{']",0
TestEvalPipeline2.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'LOOP_COUNT', ';', 'j', '+', '=', '2', ')', '{']",0
TestEvalPipeline2.java,"['ps', '.', 'println', '(', 'i', '+', '""', '\\', 't', '""', '+', 'j', ')', ';']",0
TestEvalPipeline2.java,"['ps', '.', 'println', '(', 'i', '+', '""', '\\', 't', '""', '+', 'j', ')', ';']",0
TestEvalPipeline2.java,"['ps', '.', 'close', '(', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'by', '$', '0', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['String', 'query', '=', '""', 'C', '=', 'foreach', 'B', '{', '""']",0
TestEvalPipeline2.java,"['+', '""', 'generate', '""', '+', 'Identity', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '*', ')', ';', '""']",0
TestEvalPipeline2.java,"['+', '""', '}', ';', '""', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', 'query', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestEvalPipeline2.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'output', 'found', '""', ')', ';']",0
TestEvalPipeline2.java,"['int', 'numIdentity', '=', '0', ';']",0
TestEvalPipeline2.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestEvalPipeline2.java,"['Tuple', 'tuple', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 't', '=', '(', 'Tuple', ')', 'tuple', '.', 'get', '(', '0', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'DataByteArray', '.', 'class', ',', 't', '.', 'get', '(', '0', ')', '.', 'getClass', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['int', 'group', '=', 'Integer', '.', 'parseInt', '(', 'new', 'String', '(', '(', '(', 'DataByteArray', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', ')', ')', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'numIdentity', ',', 'group', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 't', '.', 'get', '(', '1', ')', 'instanceof', 'DataBag', ')', ';']",0
TestEvalPipeline2.java,"['DataBag', 'bag', '=', '(', 'DataBag', ')', 't', '.', 'get', '(', '1', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', '10', ',', 'bag', '.', 'size', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', '2', ',', 't', '.', 'size', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['+', '+', 'numIdentity', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'LOOP_COUNT', ',', 'numIdentity', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testBinStorageByteArrayCastsSimple', '(', ')', 'throws', 'IOException', '{']",0
TestEvalPipeline2.java,"['/', '/', 'Test', 'for', 'PIG', '-', '544', 'fix']",0
TestEvalPipeline2.java,"['/', '/', 'Tries', 'to', 'read', 'data', 'in', 'BinStorage', 'bytearrays', 'as', 'other', 'pig', 'types', ',']",0
TestEvalPipeline2.java,"['/', '/', 'should', 'return', 'null', 'if', 'the', 'conversion', 'fails', '.']",0
TestEvalPipeline2.java,"['/', '/', 'This', 'test', 'case', 'does', 'not', 'use', 'a', 'practical', 'example', ',', 'it', 'just', 'tests']",0
TestEvalPipeline2.java,"['/', '/', 'if', 'the', 'conversion', 'happens', 'when', 'minimum', 'conditions', 'for', 'conversion']",0
TestEvalPipeline2.java,"['/', '/', 'such', 'as', 'expected', 'number', 'of', 'bytes', 'are', 'met', '.']",0
TestEvalPipeline2.java,"['String', '[', ']', 'input', '=', '{']",0
TestEvalPipeline2.java,"['""', 'asdf', '\\', 't12', '\\', 't1', '.', '1', '\\', 't231', '\\', 't234', '""', ',']",0
TestEvalPipeline2.java,"['""', 'sa', '\\', 't1231', '\\', 't123', '.', '4', '\\', 't12345678', '\\', 't1234', '.', '567', '""', ',']",0
TestEvalPipeline2.java,"['""', 'asdff', '\\', 't1232123', '\\', 't1', '.', '45345', '\\', 't123456789', '\\', 't123456789', '.', '9', '""']",0
TestEvalPipeline2.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'table_bs_ac', '""', ',', 'input', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'test', 'with', 'BinStorage']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", 'table_bs_ac', ""'"", ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['String', 'output', '=', '""', '/', 'pig', '/', 'out', '/', 'TestEvalPipeline2_BinStorageByteArrayCasts', '""', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'deleteFile', '(', 'output', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'store', '(', '""', 'a', '""', ',', 'output', ',', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'load', ""'"", '""', '+', 'output', '+', '""', ""'"", 'using', 'BinStorage', '(', ')', '""']",0
TestEvalPipeline2.java,"['+', '""', 'as', '(', 'name', ':', 'int', ',', 'age', ':', 'int', ',', 'gpa', ':', 'float', ',', 'lage', ':', 'long', ',', 'dgpa', ':', 'double', ')', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pigServer', '.', 'openIterator', '(', '""', 'b', '""', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 'tup', '=', 'null', ';']",0
TestEvalPipeline2.java,"['/', '/', 'I', 'have', 'separately', 'verified', 'only', 'few', 'of', 'the', 'successful', 'conversions', ',']",0
TestEvalPipeline2.java,"['/', '/', 'assuming', 'the', 'rest', 'are', 'correct', '.']",0
TestEvalPipeline2.java,"['/', '/', 'It', 'is', 'primarily', 'testing', 'if', 'null', 'is', 'being', 'returned', 'when', 'conversions']",0
TestEvalPipeline2.java,"['/', '/', 'are', 'expected', 'to', 'fail']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '1']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', '1634952294', 'is', 'integer', 'whose', 'binary', 'represtation', 'is', 'same', 'as', 'that', 'of', '""', 'asdf', '""']",0
TestEvalPipeline2.java,"['/', '/', 'other', 'columns', 'are', 'returning', 'null', 'because', 'they', 'have', 'less', 'than', 'num', 'of', 'bytes']",0
TestEvalPipeline2.java,"['/', '/', 'expected', 'for', 'the', 'corresponding', 'numeric', 'type', ""'"", 's', 'binary', 'respresentation', '.']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Integer', ')', 'tup', '.', 'get', '(', '0', ')', '=', '=', '1634952294', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '1', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '2', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '3', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '4', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '2']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Integer', ')', 'tup', '.', 'get', '(', '1', ')', '=', '=', '825373489', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Float', ')', 'tup', '.', 'get', '(', '2', ')', '=', '=', '2', '.', '5931501E', '-', '9F', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Long', ')', 'tup', '.', 'get', '(', '3', ')', '=', '=', '3544952156018063160L', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Double', ')', 'tup', '.', 'get', '(', '4', ')', '=', '=', '1', '.', '030084341992388E', '-', '71', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '3']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'when', 'byte', 'array', 'is', 'larger', 'than', 'required', 'num', 'of', 'bytes', 'for', 'given', 'number', 'type']",0
TestEvalPipeline2.java,"['/', '/', 'it', 'uses', 'the', 'required', 'bytes', 'from', 'beginging', 'of', 'byte', 'array', 'for', 'conversion']",0
TestEvalPipeline2.java,"['/', '/', 'for', 'example', '1634952294', 'corresponds', 'to', 'first', '4', 'byptes', 'of', 'binary', 'string', 'correspnding', 'to']",0
TestEvalPipeline2.java,"['/', '/', 'asdff']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Integer', ')', 'tup', '.', 'get', '(', '0', ')', '=', '=', '1634952294', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Integer', ')', 'tup', '.', 'get', '(', '1', ')', '=', '=', '825373490', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Float', ')', 'tup', '.', 'get', '(', '2', ')', '=', '=', '2', '.', '5350009E', '-', '9F', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Long', ')', 'tup', '.', 'get', '(', '3', ')', '=', '=', '3544952156018063160L', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', '(', 'Double', ')', 'tup', '.', 'get', '(', '4', ')', '=', '=', '1', '.', '0300843656201408E', '-', '71', ')', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'deleteFile', '(', 'cluster', ',', '""', 'table', '""', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testBinStorageByteArrayCastsComplexBag', '(', ')', 'throws', 'IOException', '{']",0
TestEvalPipeline2.java,"['/', '/', 'Test', 'for', 'PIG', '-', '544', 'fix']",0
TestEvalPipeline2.java,"['/', '/', 'Tries', 'to', 'read', 'data', 'in', 'BinStorage', 'bytearrays', 'as', 'other', 'pig', 'bags', ',']",0
TestEvalPipeline2.java,"['/', '/', 'should', 'return', 'null', 'if', 'the', 'conversion', 'fails', '.']",0
TestEvalPipeline2.java,"['String', '[', ']', 'input', '=', '{']",0
TestEvalPipeline2.java,"['""', '{', '(', 'asdf', ')', '}', '""', ',']",0
TestEvalPipeline2.java,"['""', '{', '(', '2344', ')', '}', '""', ',']",0
TestEvalPipeline2.java,"['""', '{', '(', '2344', '}', '""', ',']",0
TestEvalPipeline2.java,"['""', '{', '(', '323423423423434', ')', '}', '""', ',']",0
TestEvalPipeline2.java,"['""', '{', '(', '323423423423434L', ')', '}', '""', ',']",0
TestEvalPipeline2.java,"['""', '{', '(', 'asdff', ')', '}', '""']",0
TestEvalPipeline2.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'table_bs_ac_clx', '""', ',', 'input', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'test', 'with', 'BinStorage']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", 'table_bs_ac_clx', ""'"", 'as', '(', 'f1', ')', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'bag', '{', 'tuple', '(', 'int', ')', '}', ')', 'f1', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pigServer', '.', 'openIterator', '(', '""', 'b', '""', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 'tup', '=', 'null', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '1']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '2']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '3', '-', 'malformed']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '4', '-', 'integer', 'exceeds', 'size', 'limit']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '5']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '6']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'deleteFile', '(', 'cluster', ',', '""', 'table_bs_ac_clx', '""', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testBinStorageByteArrayCastsComplexTuple', '(', ')', 'throws', 'IOException', '{']",0
TestEvalPipeline2.java,"['/', '/', 'Test', 'for', 'PIG', '-', '544', 'fix']",0
TestEvalPipeline2.java,"['/', '/', 'Tries', 'to', 'read', 'data', 'in', 'BinStorage', 'bytearrays', 'as', 'other', 'pig', 'bags', ',']",0
TestEvalPipeline2.java,"['/', '/', 'should', 'return', 'null', 'if', 'the', 'conversion', 'fails', '.']",0
TestEvalPipeline2.java,"['String', '[', ']', 'input', '=', '{']",0
TestEvalPipeline2.java,"['""', '(', '123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', '(', '123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', '123123123123', ')', '""', ',']",0
TestEvalPipeline2.java,"['""', '(', 'asdf', ')', '""']",0
TestEvalPipeline2.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'table_bs_ac_clxt', '""', ',', 'input', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'test', 'with', 'BinStorage']",0
TestEvalPipeline2.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", 'table_bs_ac_clxt', ""'"", 'as', '(', 't', ':', 'tuple', '(', 't', ':', 'tuple', '(', 'i', ':', 'int', ')', ')', ')', ';', '""', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pigServer', '.', 'openIterator', '(', '""', 'a', '""', ')', ';']",0
TestEvalPipeline2.java,"['Tuple', 'tup', '=', 'null', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '1']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '2', '-', 'malformed', 'tuple']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '3', '-', 'integer', 'exceeds', 'size', 'limit']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '=', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['/', '/', 'tuple', '5']",0
TestEvalPipeline2.java,"['tup', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['assertTrue', '(', 'tup', '.', 'get', '(', '0', ')', '!', '=', 'null', ')', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'deleteFile', '(', 'cluster', ',', '""', 'table_bs_ac_clxt', '""', ')', ';']",0
TestEvalPipeline2.java,"['public', 'void', 'testPigStorageWithCtrlChars', '(', ')', 'throws', 'Exception', '{']",0
TestEvalPipeline2.java,"['String', '[', ']', 'inputData', '=', '{', '""', 'hello', '\\', 'u0001world', '""', ',', '""', 'good', '\\', 'u0001morning', '""', ',', '""', 'nice', '\\', 'u0001day', '""', '}', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'createInputFile', '(', 'cluster', ',', '""', 'testPigStorageWithCtrlCharsInput', '.', 'txt', '""', ',', 'inputData', ')', ';']",0
TestEvalPipeline2.java,"['String', 'script', '=', '""', 'a', '=', 'load', ""'"", 'testPigStorageWithCtrlCharsInput', '.', 'txt', ""'"", 'using', 'PigStorage', '(', ""'"", '\\', 'u0001', ""'"", ')', ';', '""', '+']",0
TestEvalPipeline2.java,"['""', 'b', '=', 'foreach', 'a', 'generate', '$', '0', ',', 'CONCAT', '(', '$', '0', ',', ""'"", '\\', 'u0005', ""'"", ')', ',', '$', '1', ';', '""', '+']",0
TestEvalPipeline2.java,"['""', 'store', 'b', 'into', ""'"", 'testPigStorageWithCtrlCharsOutput', '.', 'txt', ""'"", 'using', 'PigStorage', '(', ""'"", '\\', 'u0001', ""'"", ')', ';', '""', '+']",0
TestEvalPipeline2.java,"['""', 'c', '=', 'load', ""'"", 'testPigStorageWithCtrlCharsOutput', '.', 'txt', ""'"", 'using', 'PigStorage', '(', ""'"", '\\', 'u0001', ""'"", ')', 'as', '(', 'f1', ':', 'chararray', ',', 'f2', ':', 'chararray', ',', 'f3', ':', 'chararray', ')', ';', '""', ';']",0
TestEvalPipeline2.java,"['Util', '.', 'registerMultiLineQuery', '(', 'pigServer', ',', 'script', ')', ';']",0
TestEvalPipeline2.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'pigServer', '.', 'openIterator', '(', '""', 'c', '""', ')', ';']",0
TestEvalPipeline2.java,"['HashMap', '<', 'String', ',', 'Tuple', '>', 'expectedResults', '=', 'new', 'HashMap', '<', 'String', ',', 'Tuple', '>', '(', ')', ';']",0
TestEvalPipeline2.java,"['expectedResults', '.', 'put', '(', '""', 'hello', '""', ',', '(', 'Tuple', ')', 'Util', '.', 'getPigConstant', '(', '""', '(', ""'"", 'hello', ""'"", ',', ""'"", 'hello', '\\', 'u0005', ""'"", ',', ""'"", 'world', ""'"", ')', '""', ')', ')', ';']",0
TestEvalPipeline2.java,"['expectedResults', '.', 'put', '(', '""', 'good', '""', ',', '(', 'Tuple', ')', 'Util', '.', 'getPigConstant', '(', '""', '(', ""'"", 'good', ""'"", ',', ""'"", 'good', '\\', 'u0005', ""'"", ',', ""'"", 'morning', ""'"", ')', '""', ')', ')', ';']",0
TestEvalPipeline2.java,"['expectedResults', '.', 'put', '(', '""', 'nice', '""', ',', '(', 'Tuple', ')', 'Util', '.', 'getPigConstant', '(', '""', '(', ""'"", 'nice', ""'"", ',', ""'"", 'nice', '\\', 'u0005', ""'"", ',', ""'"", 'day', ""'"", ')', '""', ')', ')', ';']",0
TestEvalPipeline2.java,"['HashMap', '<', 'String', ',', 'Boolean', '>', 'seen', '=', 'new', 'HashMap', '<', 'String', ',', 'Boolean', '>', '(', ')', ';']",0
TestEvalPipeline2.java,"['int', 'numRows', '=', '0', ';']",0
TestEvalPipeline2.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
TestEvalPipeline2.java,"['Tuple', 't', '=', 'it', '.', 'next', '(', ')', ';']",0
TestEvalPipeline2.java,"['String', 'firstCol', '=', '(', 'String', ')', 't', '.', 'get', '(', '0', ')', ';']",0
TestEvalPipeline2.java,"['assertFalse', '(', 'seen', '.', 'containsKey', '(', 'firstCol', ')', ')', ';']",0
TestEvalPipeline2.java,"['seen', '.', 'put', '(', 'firstCol', ',', 'true', ')', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', 'expectedResults', '.', 'get', '(', 'firstCol', ')', ',', 't', ')', ';']",0
TestEvalPipeline2.java,"['numRows', '+', '+', ';']",0
TestEvalPipeline2.java,"['assertEquals', '(', '3', ',', 'numRows', ')', ';']",0
LOLoad.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOLoad.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
LOLoad.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LOLoad.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOLoad.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOLoad.java,"['public', 'class', 'LOLoad', 'extends', 'LogicalOperator', '{']",0
LOLoad.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LOLoad.java,"['protected', 'boolean', 'splittable', '=', 'true', ';']",0
LOLoad.java,"['private', 'FileSpec', 'mInputFileSpec', ';']",0
LOLoad.java,"['transient', 'private', 'LoadFunc', 'mLoadFunc', ';']",0
LOLoad.java,"['private', 'String', 'mSchemaFile', ';']",0
LOLoad.java,"['private', 'Schema', 'mEnforcedSchema', '=', 'null', ';']",0
LOLoad.java,"['transient', 'private', 'DataStorage', 'mStorage', ';']",0
LOLoad.java,"['private', 'ExecType', 'mExecType', ';']",0
LOLoad.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOLoad', '.', 'class', ')', ';']",0
LOLoad.java,"['private', 'Schema', 'mDeterminedSchema', '=', 'null', ';']",0
LOLoad.java,"['public', 'LOLoad', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'key', ',', 'FileSpec', 'inputFileSpec', ',']",0
LOLoad.java,"['ExecType', 'execType', ',', 'DataStorage', 'storage', ',', 'boolean', 'splittable', ')', 'throws', 'IOException', '{']",0
LOLoad.java,"['super', '(', 'plan', ',', 'key', ')', ';']",0
LOLoad.java,"['mInputFileSpec', '=', 'inputFileSpec', ';']",0
LOLoad.java,"['/', '/', 'mSchemaFile', '=', 'schemaFile', ';']",0
LOLoad.java,"['/', '/', 'schemaFile', 'is', 'the', 'input', 'file', 'since', 'we', 'are', 'trying']",0
LOLoad.java,"['/', '/', 'to', 'deduce', 'the', 'schema', 'by', 'looking', 'at', 'the', 'input', 'file']",0
LOLoad.java,"['mSchemaFile', '=', 'inputFileSpec', '.', 'getFileName', '(', ')', ';']",0
LOLoad.java,"['mStorage', '=', 'storage', ';']",0
LOLoad.java,"['mExecType', '=', 'execType', ';']",0
LOLoad.java,"['this', '.', 'splittable', '=', 'splittable', ';']",0
LOLoad.java,"['mLoadFunc', '=', '(', 'LoadFunc', ')']",0
LOLoad.java,"['PigContext', '.', 'instantiateFuncFromSpec', '(', 'inputFileSpec', '.', 'getFuncSpec', '(', ')', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'ClassCastException', 'cce', ')', '{']",0
LOLoad.java,"['log', '.', 'error', '(', 'inputFileSpec', '.', 'getFuncSpec', '(', ')', '+', '""', 'should', 'implement', 'the', 'LoadFunc', 'interface', '.', '""', ')', ';']",0
LOLoad.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', 'cce', ')', ';']",0
LOLoad.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
LOLoad.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', 'e', ')', ';']",0
LOLoad.java,"['public', 'FileSpec', 'getInputFile', '(', ')', '{']",0
LOLoad.java,"['return', 'mInputFileSpec', ';']",0
LOLoad.java,"['public', 'void', 'setInputFile', '(', 'FileSpec', 'inputFileSpec', ')', 'throws', 'IOException', '{']",0
LOLoad.java,"['mLoadFunc', '=', '(', 'LoadFunc', ')']",0
LOLoad.java,"['PigContext', '.', 'instantiateFuncFromSpec', '(', 'inputFileSpec', '.', 'getFuncSpec', '(', ')', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'ClassCastException', 'cce', ')', '{']",0
LOLoad.java,"['log', '.', 'error', '(', 'inputFileSpec', '.', 'getFuncSpec', '(', ')', '+', '""', 'should', 'implement', 'the', 'LoadFunc', 'interface', '.', '""', ')', ';']",0
LOLoad.java,"['IOException', 'ioe', '=', 'new', 'IOException', '(', 'cce', '.', 'getMessage', '(', ')', ')', ';']",0
LOLoad.java,"['ioe', '.', 'setStackTrace', '(', 'cce', '.', 'getStackTrace', '(', ')', ')', ';']",0
LOLoad.java,"['catch', '(', 'Exception', 'e', ')', '{']",0
LOLoad.java,"['IOException', 'ioe', '=', 'new', 'IOException', '(', 'e', '.', 'getMessage', '(', ')', ')', ';']",0
LOLoad.java,"['ioe', '.', 'setStackTrace', '(', 'e', '.', 'getStackTrace', '(', ')', ')', ';']",0
LOLoad.java,"['throw', 'ioe', ';']",0
LOLoad.java,"['throw', 'ioe', ';']",0
LOLoad.java,"['mInputFileSpec', '=', 'inputFileSpec', ';']",0
LOLoad.java,"['public', 'String', 'getSchemaFile', '(', ')', '{']",0
LOLoad.java,"['return', 'mSchemaFile', ';']",0
LOLoad.java,"['public', 'LoadFunc', 'getLoadFunc', '(', ')', '{']",0
LOLoad.java,"['return', 'mLoadFunc', ';']",0
LOLoad.java,"['public', 'String', 'name', '(', ')', '{']",1
LOLoad.java,"['return', '""', 'Load', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOLoad.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOLoad.java,"['if', '(', '!', 'mIsSchemaComputed', ')', '{']",0
LOLoad.java,"['/', '/', 'get', 'the', 'schema', 'of', 'the', 'load', 'function']",0
LOLoad.java,"['if', '(', 'mEnforcedSchema', '!', '=', 'null', ')', '{']",0
LOLoad.java,"['mSchema', '=', 'mEnforcedSchema', ';']",0
LOLoad.java,"['if', '(', 'null', '=', '=', 'mDeterminedSchema', ')', '{']",0
LOLoad.java,"['mSchema', '=', 'mLoadFunc', '.', 'determineSchema', '(', 'mSchemaFile', ',', 'mExecType', ',', 'mStorage', ')', ';']",0
LOLoad.java,"['mDeterminedSchema', '=', 'mSchema', ';']",0
LOLoad.java,"['mIsSchemaComputed', '=', 'true', ';']",1
LOLoad.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
LOLoad.java,"['int', 'errCode', '=', '1018', ';']",0
LOLoad.java,"['String', 'msg', '=', '""', 'Problem', 'determining', 'schema', 'during', 'load', '""', ';']",0
LOLoad.java,"['FrontendException', 'fee', '=', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'ioe', ')', ';']",0
LOLoad.java,"['mIsSchemaComputed', '=', 'false', ';']",1
LOLoad.java,"['mSchema', '=', 'null', ';']",1
LOLoad.java,"['throw', 'fee', ';']",0
LOLoad.java,"['return', 'mSchema', ';']",0
LOLoad.java,"['return', 'mSchema', ';']",0
LOLoad.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",1
LOLoad.java,"['public', 'void', 'setSchema', '(', 'Schema', 'schema', ')', 'throws', 'FrontendException', '{']",0
LOLoad.java,"['/', '/', 'In', 'general', ',', 'operators', 'don', ""'"", 't', 'generate', 'their', 'schema', 'until', 'they', ""'"", 're']",0
LOLoad.java,"['/', '/', 'asked', ',', 'so', 'ask', 'them', 'to', 'do', 'it', '.']",0
LOLoad.java,"['getSchema', '(', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'FrontendException', 'ioe', ')', '{']",1
LOLoad.java,"['/', '/', 'It', ""'"", 's', 'fine', ',', 'it', 'just', 'means', 'we', 'don', ""'"", 't', 'have', 'a', 'schema', 'yet', '.']",0
LOLoad.java,"['if', '(', 'mSchema', '=', '=', 'null', ')', '{']",0
LOLoad.java,"['log', '.', 'debug', '(', '""', 'Operator', 'schema', 'is', 'null', ';', 'Setting', 'it', 'to', 'new', 'schema', '""', ')', ';']",1
LOLoad.java,"['mSchema', '=', 'schema', ';']",0
LOLoad.java,"['log', '.', 'debug', '(', '""', 'Reconciling', 'schema', '""', ')', ';']",1
LOLoad.java,"['log', '.', 'debug', '(', '""', 'mSchema', ':', '""', '+', 'mSchema', '+', '""', 'schema', ':', '""', '+', 'schema', ')', ';']",1
LOLoad.java,"['mSchema', '=', 'mSchema', '.', 'mergePrefixSchema', '(', 'schema', ',', 'true', ',', 'true', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'SchemaMergeException', 'e', ')', '{']",0
LOLoad.java,"['int', 'errCode', '=', '1019', ';']",0
LOLoad.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'merge', 'schemas', '""', ';']",0
LOLoad.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'e', ')', ';']",0
LOLoad.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",1
LOLoad.java,"['return', 'false', ';']",1
LOLoad.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",1
LOLoad.java,"['v', '.', 'visit', '(', 'this', ')', ';']",1
LOLoad.java,"['public', 'Schema', 'getEnforcedSchema', '(', ')', '{']",0
LOLoad.java,"['return', 'mEnforcedSchema', ';']",0
LOLoad.java,"['/', '*', '*', '*']",0
LOLoad.java,"['public', 'void', 'setEnforcedSchema', '(', 'Schema', 'enforcedSchema', ')', '{']",0
LOLoad.java,"['this', '.', 'mEnforcedSchema', '=', 'enforcedSchema', ';']",0
LOLoad.java,"['public', 'boolean', 'isSplittable', '(', ')', '{']",0
LOLoad.java,"['return', 'splittable', ';']",0
LOLoad.java,"['public', 'byte', 'getType', '(', ')', '{']",0
LOLoad.java,"['return', 'DataType', '.', 'BAG', ';']",0
LOLoad.java,"['/', '*', '*']",0
LOLoad.java,"['/', '*', '*']",0
LOLoad.java,"['public', 'Schema', 'getDeterminedSchema', '(', ')', '{']",0
LOLoad.java,"['return', 'mDeterminedSchema', ';']",0
LOLoad.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LOLoad.java,"['Schema', 'outputSchema', ';']",1
LOLoad.java,"['outputSchema', '=', 'getSchema', '(', ')', ';']",1
LOLoad.java,"['if', '(', 'outputSchema', '=', '=', 'null', ')', '{']",1
LOLoad.java,"['return', 'null', ';']",0
LOLoad.java,"['return', 'null', ';']",0
LOLoad.java,"['Schema', 'inputSchema', '=', 'null', ';']",1
LOLoad.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', '(', 'ArrayList', '<', 'LogicalOperator', '>', ')', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOLoad.java,"['if', '(', 'predecessors', '!', '=', 'null', ')', '{']",0
LOLoad.java,"['inputSchema', '=', 'predecessors', '.', 'get', '(', '0', ')', '.', 'getSchema', '(', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOLoad.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOLoad.java,"['return', 'null', ';']",0
LOLoad.java,"['}', 'else', '{']",0
LOLoad.java,"['}', 'else', '{']",0
LOLoad.java,"['inputSchema', '=', 'mLoadFunc', '.', 'determineSchema', '(', 'mSchemaFile', ',', 'mExecType', ',', 'mStorage', ')', ';']",0
LOLoad.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
LOLoad.java,"['return', 'null', ';']",0
LOLoad.java,"['if', '(', 'inputSchema', '=', '=', 'null', ')', '{']",1
LOLoad.java,"['return', 'null', ';']",0
LOLoad.java,"['if', '(', 'Schema', '.', 'equals', '(', 'inputSchema', ',', 'outputSchema', ',', 'false', ',', 'true', ')', ')', '{']",0
LOLoad.java,"['/', '/', 'there', 'is', 'a', 'one', 'is', 'to', 'one', 'mapping', 'between', 'input', 'and', 'output', 'schemas']",0
LOLoad.java,"['return', 'new', 'ProjectionMap', '(', 'false', ')', ';']",1
LOLoad.java,"['}', 'else', '{']",0
LOLoad.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOLoad.java,"['/', '/', 'compute', 'the', 'mapping', 'assuming', 'its', 'a', 'prefix', 'projection']",0
LOLoad.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputSchema', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOLoad.java,"['mapFields', '.', 'put', '(', 'i', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'i', ')', ')', ';']",1
LOLoad.java,"['return', 'new', 'ProjectionMap', '(', 'mapFields', ',', 'null', ',', 'null', ')', ';']",1
LOLoad.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LOLoad.java,"['List', '<', 'RequiredFields', '>', 'requiredFields', '=', 'new', 'ArrayList', '<', 'RequiredFields', '>', '(', ')', ';']",1
LOLoad.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'false', ',', 'true', ')', ')', ';']",1
LOLoad.java,"['return', 'requiredFields', ';']",1
UnaryExpressionOperator.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
UnaryExpressionOperator.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
UnaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
UnaryExpressionOperator.java,"['public', 'abstract', 'class', 'UnaryExpressionOperator', 'extends', 'ExpressionOperator', '{']",0
UnaryExpressionOperator.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
UnaryExpressionOperator.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'UnaryExpressionOperator', '.', 'class', ')', ';']",0
UnaryExpressionOperator.java,"['/', '*', '*']",0
UnaryExpressionOperator.java,"['/', '*', '*']",0
UnaryExpressionOperator.java,"['public', 'UnaryExpressionOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
UnaryExpressionOperator.java,"['super', '(', 'plan', ',', 'k', ',', 'rp', ')', ';']",0
UnaryExpressionOperator.java,"['/', '*', '*']",0
UnaryExpressionOperator.java,"['public', 'UnaryExpressionOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
UnaryExpressionOperator.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
UnaryExpressionOperator.java,"['public', 'ExpressionOperator', 'getOperand', '(', ')', '{']",0
UnaryExpressionOperator.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
UnaryExpressionOperator.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
UnaryExpressionOperator.java,"['return', 'null', ';']",0
UnaryExpressionOperator.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '0', ')', ';']",0
UnaryExpressionOperator.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
UnaryExpressionOperator.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
UnaryExpressionOperator.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
UnaryExpressionOperator.java,"['return', 'false', ';']",1
UnaryExpressionOperator.java,"['/', '*', '*']",0
UnaryExpressionOperator.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
UnaryExpressionOperator.java,"['UnaryExpressionOperator', 'unExOpClone', '=', '(', 'UnaryExpressionOperator', ')', 'super', '.', 'clone', '(', ')', ';']",0
UnaryExpressionOperator.java,"['return', 'unExOpClone', ';']",0
Grunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Grunt.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
Grunt.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Grunt.java,"['import', 'jline', '.', 'Completor', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'PigCompletor', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'PigCompletorAliases', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', '*', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'TokenMgrError', ';']",0
Grunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Grunt.java,"['public', 'class', 'Grunt']",0
Grunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Grunt.java,"['BufferedReader', 'in', ';']",0
Grunt.java,"['PigServer', 'pig', ';']",0
Grunt.java,"['GruntParser', 'parser', ';']",0
Grunt.java,"['public', 'Grunt', '(', 'BufferedReader', 'in', ',', 'PigContext', 'pigContext', ')', 'throws', 'ExecException']",0
Grunt.java,"['this', '.', 'in', '=', 'in', ';']",0
Grunt.java,"['this', '.', 'pig', '=', 'new', 'PigServer', '(', 'pigContext', ')', ';']",0
Grunt.java,"['if', '(', 'in', '!', '=', 'null', ')']",0
Grunt.java,"['parser', '=', 'new', 'GruntParser', '(', 'in', ')', ';']",0
Grunt.java,"['parser', '.', 'setParams', '(', 'pig', ')', ';']",0
Grunt.java,"['public', 'void', 'setConsoleReader', '(', 'ConsoleReader', 'c', ')']",0
Grunt.java,"['c', '.', 'addCompletor', '(', 'new', 'PigCompletorAliases', '(', 'pig', ')', ')', ';']",0
Grunt.java,"['c', '.', 'addCompletor', '(', 'new', 'PigCompletor', '(', ')', ')', ';']",0
Grunt.java,"['parser', '.', 'setConsoleReader', '(', 'c', ')', ';']",0
Grunt.java,"['public', 'void', 'run', '(', ')', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['while', '(', 'true', ')', '{']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'true', ')', ';']",0
Grunt.java,"['parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['parser', '.', 'ReInit', '(', 'in', ')', ';']",0
Grunt.java,"['public', 'int', '[', ']', 'exec', '(', ')', 'throws', 'Throwable', '{']",0
Grunt.java,"['boolean', 'verbose', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ';']",0
Grunt.java,"['parser', '.', 'setInteractive', '(', 'false', ')', ';']",0
Grunt.java,"['return', 'parser', '.', 'parseStopOnError', '(', ')', ';']",0
Grunt.java,"['}', 'catch', '(', 'Throwable', 't', ')', '{']",0
Grunt.java,"['LogUtils', '.', 'writeLog', '(', 't', ',', 'pig', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'verbose', ')', ';']",0
Grunt.java,"['throw', '(', 't', ')', ';']",0
LogicalOptimizer.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', ';']",0
LogicalOptimizer.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLimit', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOPrinter', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStream', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LogicalOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', '*', ';']",0
LogicalOptimizer.java,"['/', '*', '*']",1
LogicalOptimizer.java,"['public', 'class', 'LogicalOptimizer', 'extends']",0
LogicalOptimizer.java,"['PlanOptimizer', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '{']",0
LogicalOptimizer.java,"['private', 'static', 'final', 'String', 'SCOPE', '=', '""', 'RULE', '""', ';']",0
LogicalOptimizer.java,"['private', 'static', 'NodeIdGenerator', 'nodeIdGen', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', ';']",0
LogicalOptimizer.java,"['private', 'Set', '<', 'String', '>', 'mRulesOff', '=', 'null', ';']",0
LogicalOptimizer.java,"['public', 'LogicalOptimizer', '(', 'LogicalPlan', 'plan', ')', '{']",0
LogicalOptimizer.java,"['this', '(', 'plan', ',', 'ExecType', '.', 'MAPREDUCE', ')', ';']",0
LogicalOptimizer.java,"['public', 'LogicalOptimizer', '(', 'LogicalPlan', 'plan', ',', 'ExecType', 'mode', ')', '{']",0
LogicalOptimizer.java,"['runOptimizations', '(', 'plan', ',', 'mode', ')', ';']",0
LogicalOptimizer.java,"['public', 'LogicalOptimizer', '(', 'LogicalPlan', 'plan', ',', 'ExecType', 'mode', ',', 'Set', '<', 'String', '>', 'turnOffRules', ')', '{']",0
LogicalOptimizer.java,"['super', '(', 'plan', ')', ';']",0
LogicalOptimizer.java,"['super', '(', 'plan', ')', ';']",0
LogicalOptimizer.java,"['mRulesOff', '=', 'turnOffRules', ';']",0
LogicalOptimizer.java,"['runOptimizations', '(', 'plan', ',', 'mode', ')', ';']",0
LogicalOptimizer.java,"['private', 'void', 'runOptimizations', '(', 'LogicalPlan', 'plan', ',', 'ExecType', 'mode', ')', '{']",0
LogicalOptimizer.java,"['RulePlan', 'rulePlan', ';']",0
LogicalOptimizer.java,"['/', '/', 'List', 'of', 'rules', 'for', 'the', 'logical', 'optimizer']",0
LogicalOptimizer.java,"['/', '/', 'This', 'one', 'has', 'to', 'be', 'first', ',', 'as', 'the', 'type', 'cast', 'inserter', 'expects', 'the']",0
LogicalOptimizer.java,"['/', '/', 'load', 'to', 'only', 'have', 'one', 'output', '.']",0
LogicalOptimizer.java,"['/', '/', 'Find', 'any', 'places', 'in', 'the', 'plan', 'that', 'have', 'an', 'implicit', 'split', 'and', 'make']",0
LogicalOptimizer.java,"['/', '/', 'it', 'explicit', '.', 'Since', 'the', 'RuleMatcher', 'doesn', ""'"", 't', 'handle', 'trees', 'properly', ',']",0
LogicalOptimizer.java,"['/', '/', 'we', 'cheat', 'and', 'say', 'that', 'we', 'match', 'any', 'node', '.', 'Then', 'we', ""'"", 'll', 'do', 'the', 'actual']",0
LogicalOptimizer.java,"['/', '/', 'test', 'in', 'the', 'transformers', 'check', 'method', '.']",0
LogicalOptimizer.java,"['boolean', 'turnAllRulesOff', '=', 'false', ';']",0
LogicalOptimizer.java,"['if', '(', 'mRulesOff', '!', '=', 'null', ')', '{']",0
LogicalOptimizer.java,"['for', '(', 'String', 'rule', ':', 'mRulesOff', ')', '{']",0
LogicalOptimizer.java,"['if', '(', '""', 'all', '""', '.', 'equalsIgnoreCase', '(', 'rule', ')', ')', '{']",0
LogicalOptimizer.java,"['turnAllRulesOff', '=', 'true', ';']",0
LogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
LogicalOptimizer.java,"['RuleOperator', 'anyLogicalOperator', '=', 'new', 'RuleOperator', '(', 'LogicalOperator', '.', 'class', ',', 'RuleOperator', '.', 'NodeType', '.', 'ANY_NODE', ',']",0
LogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
LogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'anyLogicalOperator', ')', ';']",0
LogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',']",0
LogicalOptimizer.java,"['new', 'ImplicitSplitInserter', '(', 'plan', ')', ',', '""', 'ImplicitSplitInserter', '""', ')', ')', ';']",0
LogicalOptimizer.java,"['/', '/', 'Add', 'type', 'casting', 'to', 'plans', 'where', 'the', 'schema', 'has', 'been', 'declared', '(', 'by']",0
LogicalOptimizer.java,"['/', '/', 'user', ',', 'data', ',', 'or', 'data', 'catalog', ')', '.']",0
LogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
LogicalOptimizer.java,"['RuleOperator', 'loLoad', '=', 'new', 'RuleOperator', '(', 'LOLoad', '.', 'class', ',']",0
LogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
LogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'loLoad', ')', ';']",0
LogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',']",0
LogicalOptimizer.java,"['new', 'TypeCastInserter', '(', 'plan', ',', 'LOLoad', '.', 'class', '.', 'getName', '(', ')', ')', ',', '""', 'LoadTypeCastInserter', '""', ')', ')', ';']",0
LogicalOptimizer.java,"['/', '/', 'Add', 'type', 'casting', 'to', 'plans', 'where', 'the', 'schema', 'has', 'been', 'declared', 'by']",0
LogicalOptimizer.java,"['/', '/', 'user', 'in', 'a', 'statement', 'with', 'stream', 'operator', '.']",0
LogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
LogicalOptimizer.java,"['RuleOperator', 'loStream', '=', 'new', 'RuleOperator', '(', 'LOStream', '.', 'class', ',']",0
LogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
LogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'loStream', ')', ';']",0
LogicalOptimizer.java,"['mRules', '.', 'add', '(', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',', 'new', 'TypeCastInserter', '(', 'plan', ',']",0
LogicalOptimizer.java,"['LOStream', '.', 'class', '.', 'getName', '(', ')', ')', ',', '""', 'StreamTypeCastInserter', '""', ')', ')', ';']",0
LogicalOptimizer.java,"['/', '/', 'Optimize', 'when', 'LOAD', 'precedes', 'STREAM', 'and', 'the', 'loader', 'class']",0
LogicalOptimizer.java,"['/', '/', 'is', 'the', 'same', 'as', 'the', 'serializer', 'for', 'the', 'STREAM', '.']",0
LogicalOptimizer.java,"['/', '/', 'Similarly', 'optimize', 'when', 'STREAM', 'is', 'followed', 'by', 'store', 'and', 'the']",0
LogicalOptimizer.java,"['/', '/', 'deserializer', 'class', 'is', 'same', 'as', 'the', 'Storage', 'class', '.']",0
LogicalOptimizer.java,"['if', '(', '!', 'turnAllRulesOff', ')', '{']",0
LogicalOptimizer.java,"['Rule', 'rule', '=', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',', 'new', 'StreamOptimizer', '(', 'plan', ',']",0
LogicalOptimizer.java,"['LOStream', '.', 'class', '.', 'getName', '(', ')', ')', ',', '""', 'StreamOptimizer', '""', ')', ';']",0
LogicalOptimizer.java,"['checkAndAddRule', '(', 'rule', ')', ';']",0
LogicalOptimizer.java,"['/', '/', 'Push', 'up', 'limit', 'where', 'ever', 'possible', '.']",0
LogicalOptimizer.java,"['if', '(', '!', 'turnAllRulesOff', ')', '{']",0
LogicalOptimizer.java,"['rulePlan', '=', 'new', 'RulePlan', '(', ')', ';']",0
LogicalOptimizer.java,"['RuleOperator', 'loLimit', '=', 'new', 'RuleOperator', '(', 'LOLimit', '.', 'class', ',']",0
LogicalOptimizer.java,"['new', 'OperatorKey', '(', 'SCOPE', ',', 'nodeIdGen', '.', 'getNextNodeId', '(', 'SCOPE', ')', ')', ')', ';']",0
LogicalOptimizer.java,"['rulePlan', '.', 'add', '(', 'loLimit', ')', ';']",0
LogicalOptimizer.java,"['Rule', 'rule', '=', 'new', 'Rule', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'rulePlan', ',']",0
LogicalOptimizer.java,"['new', 'OpLimitOptimizer', '(', 'plan', ',', 'mode', ')', ',', '""', 'LimitOptimizer', '""', ')', ';']",0
LogicalOptimizer.java,"['checkAndAddRule', '(', 'rule', ')', ';']",0
LogicalOptimizer.java,"['private', 'void', 'checkAndAddRule', '(', 'Rule', 'rule', ')', '{']",0
LogicalOptimizer.java,"['if', '(', 'mRulesOff', '!', '=', 'null', ')', '{']",0
LogicalOptimizer.java,"['for', '(', 'String', 'ruleOff', ':', 'mRulesOff', ')', '{']",0
LogicalOptimizer.java,"['String', 'ruleName', '=', 'rule', '.', 'getRuleName', '(', ')', ';']",0
LogicalOptimizer.java,"['if', '(', 'ruleName', '=', '=', 'null', ')', 'continue', ';']",0
LogicalOptimizer.java,"['if', '(', 'ruleName', '.', 'equalsIgnoreCase', '(', 'ruleOff', ')', ')', 'return', ';']",0
LogicalOptimizer.java,"['mRules', '.', 'add', '(', 'rule', ')', ';']",0
BinaryExpressionOperator.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
BinaryExpressionOperator.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
BinaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
BinaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
BinaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
BinaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
BinaryExpressionOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
BinaryExpressionOperator.java,"['public', 'abstract', 'class', 'BinaryExpressionOperator', 'extends', 'ExpressionOperator', '{']",0
BinaryExpressionOperator.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
BinaryExpressionOperator.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'BinaryExpressionOperator', '.', 'class', ')', ';']",0
BinaryExpressionOperator.java,"['/', '*', '*']",0
BinaryExpressionOperator.java,"['/', '*', '*']",0
BinaryExpressionOperator.java,"['public', 'BinaryExpressionOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
BinaryExpressionOperator.java,"['super', '(', 'plan', ',', 'k', ',', 'rp', ')', ';']",0
BinaryExpressionOperator.java,"['/', '*', '*']",0
BinaryExpressionOperator.java,"['public', 'BinaryExpressionOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
BinaryExpressionOperator.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
BinaryExpressionOperator.java,"['public', 'ExpressionOperator', 'getLhsOperand', '(', ')', '{']",0
BinaryExpressionOperator.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
BinaryExpressionOperator.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
BinaryExpressionOperator.java,"['return', 'null', ';']",0
BinaryExpressionOperator.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '0', ')', ';']",0
BinaryExpressionOperator.java,"['public', 'ExpressionOperator', 'getRhsOperand', '(', ')', '{']",0
BinaryExpressionOperator.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
BinaryExpressionOperator.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
BinaryExpressionOperator.java,"['return', 'null', ';']",0
BinaryExpressionOperator.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '1', ')', ';']",0
BinaryExpressionOperator.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
BinaryExpressionOperator.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
BinaryExpressionOperator.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
BinaryExpressionOperator.java,"['return', 'true', ';']",1
BinaryExpressionOperator.java,"['/', '*', '*']",0
BinaryExpressionOperator.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
BinaryExpressionOperator.java,"['BinaryExpressionOperator', 'binExOpClone', '=', '(', 'BinaryExpressionOperator', ')', 'super', '.', 'clone', '(', ')', ';']",0
BinaryExpressionOperator.java,"['return', 'binExOpClone', ';']",0
PlanOptimizer.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', ';']",0
PlanOptimizer.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PlanOptimizer.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PlanOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
PlanOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
PlanOptimizer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
PlanOptimizer.java,"['/', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']",0
PlanOptimizer.java,"['public', 'abstract', 'class', 'PlanOptimizer', '<', 'O', 'extends', 'Operator', ',', 'P', 'extends', 'OperatorPlan', '<', 'O', '>', '>', '{']",0
PlanOptimizer.java,"['protected', 'List', '<', 'Rule', '>', 'mRules', ';']",0
PlanOptimizer.java,"['protected', 'P', 'mPlan', ';']",0
PlanOptimizer.java,"['protected', 'int', 'mMaxIterations', ';']",0
PlanOptimizer.java,"['protected', 'PlanOptimizer', '(', 'P', 'plan', ')', '{']",0
PlanOptimizer.java,"['this', '(', 'plan', ',', '500', ')', ';']",0
PlanOptimizer.java,"['/', '*', '*']",0
PlanOptimizer.java,"['/', '*', '*']",0
PlanOptimizer.java,"['protected', 'PlanOptimizer', '(', 'P', 'plan', ',', 'int', 'iterations', ')', '{']",0
PlanOptimizer.java,"['mRules', '=', 'new', 'ArrayList', '<', 'Rule', '>', '(', ')', ';']",0
PlanOptimizer.java,"['mPlan', '=', 'plan', ';']",0
PlanOptimizer.java,"['if', '(', 'iterations', '<', '0', ')', '{']",0
PlanOptimizer.java,"['mMaxIterations', '=', '1000', ';']",0
PlanOptimizer.java,"['}', 'else', '{']",1
PlanOptimizer.java,"['mMaxIterations', '=', 'iterations', ';']",0
PlanOptimizer.java,"['/', '*', '*']",0
PlanOptimizer.java,"['public', 'final', 'void', 'optimize', '(', ')', 'throws', 'OptimizerException', '{']",0
PlanOptimizer.java,"['boolean', 'sawMatch', '=', 'false', ';']",0
PlanOptimizer.java,"['int', 'numIterations', '=', '0', ';']",0
PlanOptimizer.java,"['sawMatch', '=', 'false', ';']",0
PlanOptimizer.java,"['for', '(', 'Rule', 'rule', ':', 'mRules', ')', '{']",1
PlanOptimizer.java,"['RuleMatcher', 'matcher', '=', 'new', 'RuleMatcher', '(', ')', ';']",1
PlanOptimizer.java,"['if', '(', 'matcher', '.', 'match', '(', 'rule', ')', ')', '{']",1
PlanOptimizer.java,"['/', '/', 'It', 'matches', 'the', 'pattern', '.', 'Now', 'check', 'if', 'the', 'transformer']",0
PlanOptimizer.java,"['/', '/', 'approves', 'as', 'well', '.']",1
PlanOptimizer.java,"['List', '<', 'List', '<', 'O', '>', '>', 'matches', '=', 'matcher', '.', 'getAllMatches', '(', ')', ';']",1
PlanOptimizer.java,"['for', '(', 'List', '<', 'O', '>', 'match', ':', 'matches', ')']",1
PlanOptimizer.java,"['if', '(', 'rule', '.', 'getTransformer', '(', ')', '.', 'check', '(', 'match', ')', ')', '{']",0
PlanOptimizer.java,"['/', '/', 'The', 'transformer', 'approves', '.']",1
PlanOptimizer.java,"['sawMatch', '=', 'true', ';']",0
PlanOptimizer.java,"['rule', '.', 'getTransformer', '(', ')', '.', 'transform', '(', 'match', ')', ';']",0
PlanOptimizer.java,"['}', 'while', '(', 'sawMatch', '&', '&', '+', '+', 'numIterations', '<', 'mMaxIterations', ')', ';']",0
TestCounters.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestCounters.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestCounters.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
TestCounters.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestCounters.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
TestCounters.java,"['import', 'java', '.', 'io', '.', 'PrintWriter', ';']",0
TestCounters.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TestCounters.java,"['import', 'java', '.', 'util', '.', 'Random', ';']",0
TestCounters.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'Path', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
TestCounters.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
TestCounters.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestCounters.java,"['public', 'class', 'TestCounters', 'extends', 'TestCase', '{']",0
TestCounters.java,"['String', 'file', '=', '""', 'input', '.', 'txt', '""', ';']",0
TestCounters.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestCounters.java,"['final', 'int', 'MAX', '=', '100', '*', '1000', ';']",0
TestCounters.java,"['Random', 'r', '=', 'new', 'Random', '(', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapOnly', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 't', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 't', ')', ';']",0
TestCounters.java,"['if', '(', 't', '>', '50', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '0', '>', '50', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '0', '-', '50', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output_map_only', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['/', '/', 'PigStats', 'pigStats', '=', 'pigServer', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['/', '/', 'counting', 'the', 'no', '.', 'of', 'bytes', 'in', 'the', 'output', 'file']",0
TestCounters.java,"['/', '/', 'long', 'filesize', '=', 'cluster', '.', 'getFileSystem', '(', ')', '.', 'getFileStatus', '(', 'new', 'Path', '(', '""', 'output_map_only', '""', ')', ')', '.', 'getLen', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output_map_only', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output_map_only', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'Map', 'Only', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['/', '/', 'System', '.', 'out', '.', 'println', '(', '""', 'Job', 'Name', ':', '""', '+', 'e', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', '0', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', '0', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapOnlyBinStorage', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 't', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 't', ')', ';']",0
TestCounters.java,"['if', '(', 't', '>', '50', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '0', '>', '50', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', '$', '0', '-', '50', ';', '""', ')', ';']",0
TestCounters.java,"['/', '/', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output_map_only', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output_map_only', '""', ',', '""', 'BinStorage', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output_map_only', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output_map_only', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'Map', 'Only', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['/', '/', 'System', '.', 'out', '.', 'println', '(', '""', 'Job', 'Name', ':', '""', '+', 'e', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', '0', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', '0', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapReduceOnly', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'MapReduce', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapReduceOnlyBinStorage', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output', '""', ',', '""', 'BinStorage', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'MapReduce', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapCombineReduce', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', ',', 'SUM', '(', 'a', '.', '$', '1', ')', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'MapCombineReduce', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMapCombineReduceBinStorage', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'group', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'group', ',', 'SUM', '(', 'a', '.', '$', '1', ')', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'c', '""', ',', '""', 'output', '""', ',', '""', 'BinStorage', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'MapCombineReduce', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'e', '=', 'stats', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'e', '.', 'getValue', '(', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_COMBINE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertNotNull', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_PLAN', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testMultipleMRJobs', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'file', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'group', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'SUM', '(', 'b', '.', '$', '1', ')', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'd', '""', ',', '""', 'output', '""', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', '""', 'output', '""', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', 'file', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['cluster', '.', 'getFileSystem', '(', ')', '.', 'delete', '(', 'new', 'Path', '(', '""', 'output', '""', ')', ',', 'true', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Test', 'case', 'MultipleMRJobs', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'MRPlan', ':', '\\', 'n', '""', '+', 'pigStats', '.', 'getMRPlan', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'entry', ':', 'stats', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', ':', '""', '+', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
TestCounters.java,"['for', '(', 'Map', '.', 'Entry', '<', 'String', ',', 'String', '>', 'e1', ':', 'entry', '.', 'getValue', '(', ')', '.', 'entrySet', '(', ')', ')', '{']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '""', '+', 'e1', '.', 'getKey', '(', ')', '+', '""', ':', '\\', 'n', '""', '+', 'e1', '.', 'getValue', '(', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '""', ')', ';']",0
TestCounters.java,"['Map', '<', 'String', ',', 'String', '>', 'jobStats', '=', 'stats', '.', 'get', '(', 'pigStats', '.', 'getRootJobIDs', '(', ')', '.', 'get', '(', '0', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Map', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'MAX', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_MAP_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'input', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_INPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Reduce', 'output', 'records', ':', '""', '+', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'Integer', '.', 'parseInt', '(', 'jobStats', '.', 'get', '(', '""', 'PIG_STATS_REDUCE_OUTPUT_RECORDS', '""', ')', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TestCounters.java,"['public', 'void', 'testLocal', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestCounters.java,"['int', 'count', '=', '0', ';']",0
TestCounters.java,"['/', '/', 'PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'Util', '.', 'createInputFile', '(', 'cluster', ',', 'file', ')', ')', ';']",0
TestCounters.java,"['File', 'file', '=', 'File', '.', 'createTempFile', '(', '""', 'data', '""', ',', '""', '.', 'txt', '""', ')', ';']",0
TestCounters.java,"['PrintWriter', 'pw', '=', 'new', 'PrintWriter', '(', 'new', 'FileOutputStream', '(', 'file', ')', ')', ';']",0
TestCounters.java,"['int', '[', ']', 'nos', '=', 'new', 'int', '[', '10', ']', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['nos', '[', 'i', ']', '=', '0', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'MAX', ';', 'i', '+', '+', ')', '{']",0
TestCounters.java,"['int', 'index', '=', 'r', '.', 'nextInt', '(', '10', ')', ';']",0
TestCounters.java,"['int', 'value', '=', 'r', '.', 'nextInt', '(', '100', ')', ';']",0
TestCounters.java,"['nos', '[', 'index', ']', '+', '=', 'value', ';']",0
TestCounters.java,"['pw', '.', 'println', '(', 'index', '+', '""', '\\', 't', '""', '+', 'value', ')', ';']",0
TestCounters.java,"['pw', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', '10', ';', 'i', '+', '+', ')']",0
TestCounters.java,"['if', '(', 'nos', '[', 'i', ']', '>', '0', ')']",0
TestCounters.java,"['count', '+', '+', ';']",0
TestCounters.java,"['File', 'out', '=', 'File', '.', 'createTempFile', '(', '""', 'output', '""', ',', '""', '.', 'txt', '""', ')', ';']",0
TestCounters.java,"['out', '.', 'delete', '(', ')', ';']",0
TestCounters.java,"['PigServer', 'pigServer', '=', 'new', 'PigServer', '(', '""', 'local', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'a', '=', 'load', ""'"", '""', '+', 'Util', '.', 'encodeEscape', '(', 'file', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'c', '=', 'group', 'b', 'by', '$', '0', ';', '""', ')', ';']",0
TestCounters.java,"['pigServer', '.', 'registerQuery', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'SUM', '(', 'b', '.', '$', '1', ')', ';', '""', ')', ';']",0
TestCounters.java,"['PigStats', 'pigStats', '=', 'pigServer', '.', 'store', '(', '""', 'd', '""', ',', 'out', '.', 'getAbsolutePath', '(', ')', ')', '.', 'getStatistics', '(', ')', ';']",0
TestCounters.java,"['InputStream', 'is', '=', 'FileLocalizer', '.', 'open', '(', 'FileLocalizer', '.', 'fullPath', '(', 'out', '.', 'getAbsolutePath', '(', ')', ',', 'pigServer', '.', 'getPigContext', '(', ')', ')', ',', 'ExecType', '.', 'MAPREDUCE', ',', 'pigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ')', ';']",0
TestCounters.java,"['long', 'filesize', '=', '0', ';']",0
TestCounters.java,"['while', '(', 'is', '.', 'read', '(', ')', '!', '=', '-', '1', ')', 'filesize', '+', '+', ';']",0
TestCounters.java,"['is', '.', 'close', '(', ')', ';']",0
TestCounters.java,"['out', '.', 'delete', '(', ')', ';']",0
TestCounters.java,"['/', '/', 'Map', '<', 'String', ',', 'Map', '<', 'String', ',', 'String', '>', '>', 'stats', '=', 'pigStats', '.', 'getPigStats', '(', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'count', ',', 'pigStats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
TestCounters.java,"['assertEquals', '(', 'filesize', ',', 'pigStats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Collections', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Comparator', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Hashtable', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'Stack', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
TypeCheckingVisitor.java,"['import', 'java', '.', 'util', '.', 'TreeMap', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'LoadFunc', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'Algebraic', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'ExpressionOperator', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOConst', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOUserFunc', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', '.', 'FieldSchema', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', '*', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', '.', 'Handle', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', '.', 'HandleSpec', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TypeCheckingVisitor.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TypeCheckingVisitor.java,"['public', 'class', 'TypeCheckingVisitor', 'extends', 'LOVisitor', '{']",0
TypeCheckingVisitor.java,"['private', 'static', 'final', 'int', 'INF', '=', '-', '1', ';']",0
TypeCheckingVisitor.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'TypeCheckingVisitor', '.', 'class', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'CompilationMessageCollector', 'msgCollector', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['private', 'boolean', 'strictMode', '=', 'false', ';']",0
TypeCheckingVisitor.java,"['public', 'static', 'MultiMap', '<', 'Byte', ',', 'Byte', '>', 'castLookup', '=', 'new', 'MultiMap', '<', 'Byte', ',', 'Byte', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Ordering', 'here', 'decides', 'the', 'score', 'for', 'the', 'best', 'fit', 'function', '.']",0
TypeCheckingVisitor.java,"['/', '/', 'Do', 'not', 'change', 'the', 'order', '.', 'Conversions', 'to', 'a', 'smaller', 'type', 'is', 'preferred']",0
TypeCheckingVisitor.java,"['/', '/', 'over', 'conversion', 'to', 'a', 'bigger', 'type', 'where', 'ordering', 'of', 'types', 'is', ':']",0
TypeCheckingVisitor.java,"['/', '/', 'INTEGER', ',', 'LONG', ',', 'FLOAT', ',', 'DOUBLE', ',', 'CHARARRAY', ',', 'TUPLE', ',', 'BAG', ',', 'MAP']",0
TypeCheckingVisitor.java,"['/', '/', 'from', 'small', 'to', 'big']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BOOLEAN', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BOOLEAN', ',', 'DataType', '.', 'LONG', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BOOLEAN', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BOOLEAN', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BOOLEAN', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'LONG', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'INTEGER', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'LONG', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'FLOAT', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'FLOAT', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'DOUBLE', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'INTEGER', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'LONG', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'FLOAT', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'CHARARRAY', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'TUPLE', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'BAG', ')', ';']",0
TypeCheckingVisitor.java,"['castLookup', '.', 'put', '(', 'DataType', '.', 'BYTEARRAY', ',', 'DataType', '.', 'MAP', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'TypeCheckingVisitor', '(', 'LogicalPlan', 'plan', ',']",0
TypeCheckingVisitor.java,"['CompilationMessageCollector', 'messageCollector', ')', '{']",0
TypeCheckingVisitor.java,"['super', '(', 'plan', ',', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'plan', ')', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '=', 'messageCollector', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Just', 'in', 'case', 'caller', 'is', 'lazy']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'ExpressionOperator', 'eOp', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'eOp', 'instanceof', 'BinaryExpressionOperator', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'BinaryExpressionOperator', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'UnaryExpressionOperator', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'UnaryExpressionOperator', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOConst', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOConst', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOBinCond', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOBinCond', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOCast', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOCast', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LORegexp', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LORegexp', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOUserFunc', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOUserFunc', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOProject', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOProject', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LONegative', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LONegative', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LONot', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LONot', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'eOp', 'instanceof', 'LOMapLookup', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOMapLookup', ')', 'eOp', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Check', 'that', 'all', 'operators', 'are', 'included', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'Just', 'in', 'case', 'caller', 'is', 'lazy']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LogicalOperator', 'lOp', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'lOp', 'instanceof', 'LOLoad', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOLoad', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LODistinct', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LODistinct', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOFilter', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOFilter', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOUnion', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOUnion', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOSplit', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOSplit', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOSplitOutput', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOSplitOutput', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOCogroup', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOCogroup', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOSort', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOSort', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOForEach', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOForEach', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOGenerate', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOGenerate', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'lOp', 'instanceof', 'LOCross', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOCross', ')', 'lOp', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Check', 'that', 'all', 'operators', 'are', 'included', 'here']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOProject', 'pj', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['resolveLOProjectType', '(', 'pj', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'resolveLOProjectType', '(', 'LOProject', 'pj', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['pj', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1035', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Error', 'getting', 'LOProject', ""'"", 's', 'input', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOConst', 'cs', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOMapLookup', 'map', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isAtomic', '(', 'DataType', '.', 'findType', '(', 'map', '.', 'getLookUpKey', '(', ')', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1036', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Map', 'key', 'should', 'be', 'a', 'basic', 'type', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['map', '.', 'setType', '(', 'map', '.', 'getValueType', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LORegexp', 'rg', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'allow', 'BYTEARRAY', 'to', 'be', 'converted', 'to', 'CHARARRAY']",0
TypeCheckingVisitor.java,"['if', '(', 'rg', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', '=', '=', 'DataType', '.', 'BYTEARRAY', ')']",0
TypeCheckingVisitor.java,"['insertCastForRegexp', '(', 'rg', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Other', 'than', 'that', 'if', 'it', ""'"", 's', 'not', 'CharArray', 'just', 'say', 'goodbye']",0
TypeCheckingVisitor.java,"['if', '(', 'rg', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', '!', '=', 'DataType', '.', 'CHARARRAY', ')']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1037', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Operand', 'of', 'Regex', 'can', 'be', 'CharArray', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertCastForRegexp', '(', 'LORegexp', 'rg', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'rg', ',', 'DataType', '.', 'CHARARRAY', ',', 'rg', '.', 'getOperand', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOAnd', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'lhs', 'or', 'rhs', 'is', 'null', 'constant', 'then', 'cast', 'it', 'to', 'boolean']",0
TypeCheckingVisitor.java,"['insertCastsForNullToBoolean', '(', 'binOp', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'lhsType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '|', '|']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1038', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Operands', 'of', 'AND', '/', 'OR', 'can', 'be', 'boolean', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertCastsForNullToBoolean', '(', 'BinaryExpressionOperator', 'binOp', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'binOp', '.', 'getLhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getLhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'binOp', '.', 'getRhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getRhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOOr', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'lhs', 'or', 'rhs', 'is', 'null', 'constant', 'then', 'cast', 'it', 'to', 'boolean']",0
TypeCheckingVisitor.java,"['insertCastsForNullToBoolean', '(', 'binOp', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'lhsType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '|', '|']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1038', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Operands', 'of', 'AND', '/', 'OR', 'can', 'be', 'boolean', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOMultiply', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'return', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'both', 'operands', 'to', 'double']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'Multiplication', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Multiply', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LODivide', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'return', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'both', 'operands', 'to', 'double']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'Division', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Divide', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOAdd', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'return', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'both', 'operands', 'to', 'double']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'Add', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Add', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOSubtract', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'return', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'both', 'operands', 'to', 'double']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'Subtract', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Subtract', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOGreaterThan', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'not', 'the', 'same', 'type', ',', 'we', 'cast', 'them', 'to', 'the', 'same']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'GreaterThan', 'operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOGreaterThanEqual', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'not', 'the', 'same', 'type', ',', 'we', 'cast', 'them', 'to', 'the', 'same']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'GreaterThanEqualTo', 'operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOLesserThan', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'not', 'the', 'same', 'type', ',', 'we', 'cast', 'them', 'to', 'the', 'same']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'LesserThan', 'operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOLesserThanEqual', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'not', 'the', 'same', 'type', ',', 'we', 'cast', 'them', 'to', 'the', 'same']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'LesserThanEqualTo', 'operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOEqual', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'TUPLE', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'TUPLE', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'MAP', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'MAP', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['/', '/', 'A', 'constant', 'null', 'is', 'always', 'bytearray', '-', 'so', 'cast', 'it']",0
TypeCheckingVisitor.java,"['/', '/', 'to', 'rhs', 'type']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'binOp', '.', 'getLhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getLhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'binOp', '.', 'getRhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getRhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'EqualTo', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')', '+', '""', 'right', 'hand', 'side', ':', '""']",0
TypeCheckingVisitor.java,"['+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LONotEqual', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&']",0
TypeCheckingVisitor.java,"['DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'rhsType', '!', '=', 'biggerType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', ')', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'TUPLE', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'TUPLE', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'MAP', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'MAP', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'good']",0
TypeCheckingVisitor.java,"['/', '/', 'A', 'constant', 'null', 'is', 'always', 'bytearray', '-', 'so', 'cast', 'it']",0
TypeCheckingVisitor.java,"['/', '/', 'to', 'rhs', 'type']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'binOp', '.', 'getLhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getLhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'binOp', '.', 'getRhsOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binOp', '.', 'getRhsOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'NotEqual', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOMod', 'binOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'lhs', '=', 'binOp', '.', 'getLhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'rhs', '=', 'binOp', '.', 'getRhsOperand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'lhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'rhs', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', 'rhsType', '=', '=', 'DataType', '.', 'INTEGER', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'do', 'nothing']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'LONG', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '|', '|', '(', 'rhsType', '=', '=', 'DataType', '.', 'LONG', ')', ')']",0
TypeCheckingVisitor.java,"['if', '(', 'rhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'LONG', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'LONG', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'lhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '|', '|', '(', 'lhsType', '=', '=', 'DataType', '.', 'LONG', ')', ')']",0
TypeCheckingVisitor.java,"['if', '(', 'lhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'DataType', '.', 'LONG', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '&', '&']",0
TypeCheckingVisitor.java,"['(', '(', 'rhsType', '=', '=', 'DataType', '.', 'INTEGER', ')', '|', '|', '(', 'rhsType', '=', '=', 'DataType', '.', 'LONG', ')', ')']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinaryOp', '(', 'binOp', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1039', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Incompatible', 'types', 'in', 'Mod', 'Operator', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Mod', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LONegative', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['byte', 'type', '=', 'uniOp', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'type', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'do', 'nothing']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['insertCastForUniOp', '(', 'uniOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1041', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'NEG', 'can', 'be', 'used', 'with', 'numbers', 'or', 'Bytearray', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['uniOp', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'Negative', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LONot', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'uniOp', '.', 'getOperand', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'uniOp', '.', 'getOperand', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertCastForUniOp', '(', 'uniOp', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'type', '=', 'uniOp', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'type', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1042', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'NOT', 'can', 'be', 'used', 'with', 'boolean', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['public', 'void', 'visit', '(', 'LOIsNull', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertLeftCastForBinaryOp', '(', 'BinaryExpressionOperator', 'binOp', ',']",0
TypeCheckingVisitor.java,"['byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'binOp', ',', 'toType', ',', 'binOp', '.', 'getLhsOperand', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertRightCastForBinaryOp', '(', 'BinaryExpressionOperator', 'binOp', ',']",0
TypeCheckingVisitor.java,"['byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'binOp', ',', 'toType', ',', 'binOp', '.', 'getRhsOperand', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertCast', '(', 'ExpressionOperator', 'node', ',']",0
TypeCheckingVisitor.java,"['byte', 'toType', ',', 'ExpressionOperator', 'predecessor', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'currentPlan', '=', '(', 'LogicalPlan', ')', 'mCurrentWalker', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['collectCastWarning', '(', 'node', ',', 'predecessor', '.', 'getType', '(', ')', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['OperatorKey', 'newKey', '=', 'genNewOperatorKey', '(', 'node', ')', ';']",0
TypeCheckingVisitor.java,"['LOCast', 'cast', '=', 'new', 'LOCast', '(', 'currentPlan', ',', 'newKey', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['currentPlan', '.', 'add', '(', 'cast', ')', ';']",1
TypeCheckingVisitor.java,"['currentPlan', '.', 'insertBetween', '(', 'predecessor', ',', 'cast', ',', 'node', ')', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'inserting', 'cast', 'operator', 'for', '""', '+', 'node', '+', '""', 'in', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'UnaryExpressionOperator', 'uniOp', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['byte', 'type', '=', 'uniOp', '.', 'getOperand', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'uniOp', 'instanceof', 'LONegative', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'type', ')', ')', '{']",0
TypeCheckingVisitor.java,"['uniOp', '.', 'setType', '(', 'type', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['insertCastForUniOp', '(', 'uniOp', ',', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['uniOp', '.', 'setType', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1041', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'NEG', 'can', 'be', 'used', 'with', 'numbers', 'or', 'Bytearray', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'uniOp', 'instanceof', 'LONot', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'type', '=', '=', 'DataType', '.', 'BOOLEAN', ')', '{']",0
TypeCheckingVisitor.java,"['uniOp', '.', 'setType', '(', 'DataType', '.', 'BOOLEAN', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1042', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'NOT', 'can', 'be', 'used', 'with', 'boolean', 'only', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'undefined', 'for', 'this', 'unknown', 'unary', 'operator']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1079', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Undefined', 'type', 'checking', 'logic', 'for', 'unary', 'operator', ':', '""', '+', 'uniOp', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertCastForUniOp', '(', 'UnaryExpressionOperator', 'uniOp', ',', 'byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'uniOp', ',', 'toType', ',', 'uniOp', '.', 'getOperand', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Currently', 'there', 'is', 'no', 'input', 'type', 'information', 'support', 'in', 'UserFunc']",0
TypeCheckingVisitor.java,"['/', '/', 'So', 'we', 'can', 'just', 'check', 'if', 'all', 'inputs', 'are', 'not', 'of', 'any', 'stupid', 'type']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'ExpressionOperator', '>', 'list', '=', 'func', '.', 'getArguments', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'the', 'dependency', 'graph', 'is', 'right', ',', 'all', 'the', 'inputs']",0
TypeCheckingVisitor.java,"['/', '/', 'must', 'already', 'know', 'the', 'types']",0
TypeCheckingVisitor.java,"['Schema', 's', '=', 'new', 'Schema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'ExpressionOperator', 'op', ':', 'list', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isUsableType', '(', 'op', '.', 'getType', '(', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1014', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'input', '""', '+', 'op', '+', '""', 'of', 'User', '-', 'defined', 'function', ':', '""', '+', 'func', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['s', '.', 'add', '(', 'op', '.', 'getFieldSchema', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'e', ')', '{']",1
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'field', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['EvalFunc', '<', '?', '>', 'ef', '=', '(', 'EvalFunc', '<', '?', '>', ')', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'func', '.', 'getFuncSpec', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'the', 'function', 'is', 'algebraic', 'and', 'the', 'project', 'is', 'just', 'sentinel']",0
TypeCheckingVisitor.java,"['/', '/', '(', 'special', 'case', 'when', 'we', 'apply', 'aggregate', 'on', 'flattened', 'members', ')']",0
TypeCheckingVisitor.java,"['/', '/', 'then', 'it', 'will', 'never', 'match', 'algebraic', 'functions', ""'"", 'schemas']",0
TypeCheckingVisitor.java,"['/', '/', 'without', 'this']",0
TypeCheckingVisitor.java,"['/', '/', 'Assuming', 'all', 'aggregates', 'has', 'only', 'one', 'argument', 'at', 'this', 'stage']",0
TypeCheckingVisitor.java,"['if', '(', 'func', '.', 'getArguments', '(', ')', '!', '=', 'null', '&', '&', 'func', '.', 'getArguments', '(', ')', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'tmpExp', '=', 'func', '.', 'getArguments', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'ef', 'instanceof', 'Algebraic', ')']",0
TypeCheckingVisitor.java,"['&', '&', '(', 'tmpExp', 'instanceof', 'LOProject', ')']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', '(', 'LOProject', ')', 'tmpExp', ')', '.', 'getSentinel', '(', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FieldSchema', 'tmpField', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'embed', 'the', 'schema', 'above', 'inside', 'a', 'bag']",0
TypeCheckingVisitor.java,"['tmpField', '=', 'new', 'FieldSchema', '(', 'null', ',', 's', ',', 'DataType', '.', 'BAG', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'e', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1023', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'create', 'new', 'field', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
TypeCheckingVisitor.java,"['s', '=', 'new', 'Schema', '(', 'tmpField', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'ask', 'the', 'EvalFunc', 'what', 'types', 'of', 'inputs', 'it', 'can', 'handle']",0
TypeCheckingVisitor.java,"['List', '<', 'FuncSpec', '>', 'funcSpecs', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['funcSpecs', '=', 'ef', '.', 'getArgToFuncMapping', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1044', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'get', 'list', 'of', 'overloaded', 'methods', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['FuncSpec', 'matchingSpec', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['boolean', 'notExactMatch', '=', 'false', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'funcSpecs', '!', '=', 'null', '&', '&', 'funcSpecs', '.', 'size', '(', ')', '!', '=', '0', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Some', 'function', 'mappings', 'found', '.', 'Trying', 'to', 'see']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'one', 'of', 'them', 'fits', 'the', 'input', 'schema']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'matchingSpec', '=', 'exactMatch', '(', 'funcSpecs', ',', 's', ',', 'func', ')', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Oops', ',', 'no', 'exact', 'match', 'found', '.', 'Trying', 'to', 'see', 'if', 'we']",0
TypeCheckingVisitor.java,"['/', '/', 'have', 'mappings', 'that', 'we', 'can', 'fit', 'using', 'casts', '.']",0
TypeCheckingVisitor.java,"['notExactMatch', '=', 'true', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'byteArrayFound', '(', 's', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'try', '""', 'exact', '""', 'matching', 'all', 'other', 'fields', 'except', 'the', 'byte', 'array']",0
TypeCheckingVisitor.java,"['/', '/', 'fields', 'and', 'if', 'they', 'all', 'exact', 'match', 'and', 'we', 'have', 'only', 'one', 'candidate']",0
TypeCheckingVisitor.java,"['/', '/', 'for', 'the', 'byte', 'array', 'cast', 'then', 'that', ""'"", 's', 'the', 'matching', 'one', '!']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'matchingSpec', '=', 'exactMatchWithByteArrays', '(', 'funcSpecs', ',', 's', ',', 'func', ')', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', '""', 'exact', '""', 'match', 'with', 'byte', 'arrays', 'did', 'not', 'work', '-', 'try', 'best', 'fit', 'match']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'matchingSpec', '=', 'bestFitMatchWithByteArrays', '(', 'funcSpecs', ',', 's', ',', 'func', ')', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1045', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'infer', 'the', 'matching', 'function', 'for', '""']",0
TypeCheckingVisitor.java,"['+', 'func', '.', 'getFuncSpec', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'as', 'multiple', 'or', 'none', 'of', 'them', 'fit', '.', 'Please', 'use', 'an', 'explicit', 'cast', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', '(', 'matchingSpec', '=', 'bestFitMatch', '(', 'funcSpecs', ',', 's', ')', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Either', 'no', 'byte', 'arrays', 'found', 'or', 'there', 'are', 'byte', 'arrays']",0
TypeCheckingVisitor.java,"['/', '/', 'but', 'only', 'one', 'mapping', 'exists', '.']",0
TypeCheckingVisitor.java,"['/', '/', 'However', ',', 'we', 'could', 'not', 'find', 'a', 'match', 'as', 'there', 'were', 'either']",0
TypeCheckingVisitor.java,"['/', '/', 'none', 'fitting', 'the', 'input', 'schema', 'or', 'it', 'was', 'ambiguous', '.']",0
TypeCheckingVisitor.java,"['/', '/', 'Throw', 'exception', 'that', 'we', 'can', ""'"", 't', 'infer', 'a', 'fit', '.']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1045', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'infer', 'the', 'matching', 'function', 'for', '""']",0
TypeCheckingVisitor.java,"['+', 'func', '.', 'getFuncSpec', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'as', 'multiple', 'or', 'none', 'of', 'them', 'fit', '.', 'Please', 'use', 'an', 'explicit', 'cast', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'matchingSpec', '!', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Voila', '!', 'We', 'have', 'a', 'fitting', 'match', '.', 'Lets', 'insert', 'casts', 'and', 'make']",0
TypeCheckingVisitor.java,"['/', '/', 'it', 'work', '.']",0
TypeCheckingVisitor.java,"['/', '/', 'notify', 'the', 'user', 'about', 'the', 'match', 'we', 'picked', 'if', 'it', 'was', 'not']",0
TypeCheckingVisitor.java,"['/', '/', 'an', 'exact', 'match']",0
TypeCheckingVisitor.java,"['if', '(', 'notExactMatch', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Function', '""', '+', 'func', '.', 'getFuncSpec', '(', ')', '.', 'getClassName', '(', ')', '+', '""', '(', ')', '""', '+']",0
TypeCheckingVisitor.java,"['""', 'will', 'be', 'called', 'with', 'following', 'argument', 'types', ':', '""', '+']",0
TypeCheckingVisitor.java,"['matchingSpec', '.', 'getInputArgsSchema', '(', ')', '+', '""', '.', 'If', 'you', 'want', 'to', 'use', '""', '+']",0
TypeCheckingVisitor.java,"['""', 'different', 'input', 'argument', 'types', ',', 'please', 'use', 'explicit', 'casts', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'USING_OVERLOADED_FUNCTION', ')', ';']",0
TypeCheckingVisitor.java,"['func', '.', 'setFuncSpec', '(', 'matchingSpec', ')', ';']",0
TypeCheckingVisitor.java,"['insertCastsForUDF', '(', 'func', ',', 's', ',', 'matchingSpec', '.', 'getInputArgsSchema', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Regenerate', 'schema', 'as', 'there', 'might', 'be', 'new', 'additions']",0
TypeCheckingVisitor.java,"['func', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'UserFunc', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'exactMatchWithByteArrays', '(', 'List', '<', 'FuncSpec', '>', 'funcSpecs', ',']",0
TypeCheckingVisitor.java,"['Schema', 's', ',', 'LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'exact', 'match', 'all', 'fields', 'except', 'byte', 'array', 'fields']",0
TypeCheckingVisitor.java,"['/', '/', 'ignore', 'byte', 'array', 'fields', 'for', 'matching']",0
TypeCheckingVisitor.java,"['return', 'exactMatchHelper', '(', 'funcSpecs', ',', 's', ',', 'func', ',', 'true', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'exactMatch', '(', 'List', '<', 'FuncSpec', '>', 'funcSpecs', ',', 'Schema', 's', ',']",0
TypeCheckingVisitor.java,"['LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'exact', 'match', 'all', 'fields', ',', 'don', ""'"", 't', 'ignore', 'byte', 'array', 'fields']",0
TypeCheckingVisitor.java,"['return', 'exactMatchHelper', '(', 'funcSpecs', ',', 's', ',', 'func', ',', 'false', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'bestFitMatch', '(', 'List', '<', 'FuncSpec', '>', 'funcSpecs', ',', 'Schema', 's', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'matchingSpec', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['long', 'score', '=', 'INF', ';']",0
TypeCheckingVisitor.java,"['long', 'prevBestScore', '=', 'Long', '.', 'MAX_VALUE', ';']",0
TypeCheckingVisitor.java,"['long', 'bestScore', '=', 'Long', '.', 'MAX_VALUE', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'Iterator', '<', 'FuncSpec', '>', 'iterator', '=', 'funcSpecs', '.', 'iterator', '(', ')', ';', 'iterator', '.', 'hasNext', '(', ')', ';', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'fs', '=', 'iterator', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['score', '=', 'fitPossible', '(', 's', ',', 'fs', '.', 'getInputArgsSchema', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'score', '!', '=', 'INF', '&', '&', 'score', '<', '=', 'bestScore', ')', '{']",0
TypeCheckingVisitor.java,"['matchingSpec', '=', 'fs', ';']",0
TypeCheckingVisitor.java,"['prevBestScore', '=', 'bestScore', ';']",0
TypeCheckingVisitor.java,"['bestScore', '=', 'score', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'matchingSpec', '!', '=', 'null', '&', '&', 'bestScore', '!', '=', 'prevBestScore', ')']",0
TypeCheckingVisitor.java,"['return', 'matchingSpec', ';']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['private', 'class', 'ScoreFuncSpecListComparator', 'implements', 'Comparator', '<', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', '>', '{']",0
TypeCheckingVisitor.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TypeCheckingVisitor.java,"['public', 'int', 'compare', '(', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', 'o1', ',', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', 'o2', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'o1', '.', 'first', '<', 'o2', '.', 'first', ')']",0
TypeCheckingVisitor.java,"['return', '-', '1', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'o1', '.', 'first', '>', 'o2', '.', 'first', ')']",0
TypeCheckingVisitor.java,"['return', '1', ';']",0
TypeCheckingVisitor.java,"['return', '0', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'bestFitMatchWithByteArrays', '(', 'List', '<', 'FuncSpec', '>', 'funcSpecs', ',']",0
TypeCheckingVisitor.java,"['Schema', 's', ',', 'LOUserFunc', 'func', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', '>', 'scoreFuncSpecList', '=', 'new', 'ArrayList', '<', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'Iterator', '<', 'FuncSpec', '>', 'iterator', '=', 'funcSpecs', '.', 'iterator', '(', ')', ';', 'iterator']",0
TypeCheckingVisitor.java,"['.', 'hasNext', '(', ')', ';', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'fs', '=', 'iterator', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['long', 'score', '=', 'fitPossible', '(', 's', ',', 'fs', '.', 'getInputArgsSchema', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'score', '!', '=', 'INF', ')', '{']",0
TypeCheckingVisitor.java,"['scoreFuncSpecList', '.', 'add', '(', 'new', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', '(', 'score', ',', 'fs', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'no', 'candidates', 'found', ',', 'return', 'null']",0
TypeCheckingVisitor.java,"['if', '(', 'scoreFuncSpecList', '.', 'size', '(', ')', '=', '=', '0', ')']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'scoreFuncSpecList', '.', 'size', '(', ')', '>', '1', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'sort', 'the', 'candidates', 'based', 'on', 'score']",0
TypeCheckingVisitor.java,"['Collections', '.', 'sort', '(', 'scoreFuncSpecList', ',', 'new', 'ScoreFuncSpecListComparator', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'there', 'are', 'two', '(', 'or', 'more', ')', 'candidates', 'with', 'the', 'same', '*', 'lowest', '*', 'score']",0
TypeCheckingVisitor.java,"['/', '/', 'we', 'cannot', 'choose', 'one', 'of', 'them', '-', 'notify', 'the', 'user']",0
TypeCheckingVisitor.java,"['if', '(', 'scoreFuncSpecList', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', 'scoreFuncSpecList', '.', 'get', '(', '1', ')', '.', 'first', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1046', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Multiple', 'matching', 'functions', 'for', '""']",0
TypeCheckingVisitor.java,"['+', 'func', '.', 'getFuncSpec', '(', ')', '+', '""', 'with', 'input', 'schemas', ':', '""', '+', '""', '(', '""']",0
TypeCheckingVisitor.java,"['+', 'scoreFuncSpecList', '.', 'get', '(', '0', ')', '.', 'second', '.', 'getInputArgsSchema', '(', ')', '+', '""', ',', '""']",0
TypeCheckingVisitor.java,"['+', 'scoreFuncSpecList', '.', 'get', '(', '1', ')', '.', 'second', '.', 'getInputArgsSchema', '(', ')', '+', '""', ')', '.', 'Please', 'use', 'an', 'explicit', 'cast', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'now', 'consider', 'the', 'bytearray', 'fields']",0
TypeCheckingVisitor.java,"['List', '<', 'Integer', '>', 'byteArrayPositions', '=', 'getByteArrayPositions', '(', 's', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'make', 'sure', 'there', 'is', 'only', 'one', 'type', 'to', '""', 'cast', 'to', '""', 'for', 'the', 'byte', 'array']",0
TypeCheckingVisitor.java,"['/', '/', 'positions', 'among', 'the', 'candidate', 'funcSpecs']",0
TypeCheckingVisitor.java,"['Map', '<', 'Integer', ',', 'Pair', '<', 'FuncSpec', ',', 'Byte', '>', '>', 'castToMap', '=', 'new', 'HashMap', '<', 'Integer', ',', 'Pair', '<', 'FuncSpec', ',', 'Byte', '>', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'Iterator', '<', 'Pair', '<', 'Long', ',', 'FuncSpec', '>', '>', 'it', '=', 'scoreFuncSpecList', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'funcSpec', '=', 'it', '.', 'next', '(', ')', '.', 'second', ';']",0
TypeCheckingVisitor.java,"['Schema', 'sch', '=', 'funcSpec', '.', 'getInputArgsSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'Iterator', '<', 'Integer', '>', 'iter', '=', 'byteArrayPositions', '.', 'iterator', '(', ')', ';', 'iter']",0
TypeCheckingVisitor.java,"['.', 'hasNext', '(', ')', ';', ')', '{']",0
TypeCheckingVisitor.java,"['Integer', 'i', '=', 'iter', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'castToMap', '.', 'containsKey', '(', 'i', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'first', 'candidate']",0
TypeCheckingVisitor.java,"['castToMap', '.', 'put', '(', 'i', ',', 'new', 'Pair', '<', 'FuncSpec', ',', 'Byte', '>', '(', 'funcSpec', ',', 'sch']",0
TypeCheckingVisitor.java,"['.', 'getField', '(', 'i', ')', '.', 'type', ')', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'make', 'sure', 'the', 'existing', 'type', 'from', 'an', 'earlier', 'candidate']",0
TypeCheckingVisitor.java,"['/', '/', 'matches']",0
TypeCheckingVisitor.java,"['Pair', '<', 'FuncSpec', ',', 'Byte', '>', 'existingPair', '=', 'castToMap', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'sch', '.', 'getField', '(', 'i', ')', '.', 'type', '!', '=', 'existingPair', '.', 'second', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1046', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Multiple', 'matching', 'functions', 'for', '""']",0
TypeCheckingVisitor.java,"['+', 'func', '.', 'getFuncSpec', '(', ')', '+', '""', 'with', 'input', 'schema', ':', '""']",0
TypeCheckingVisitor.java,"['+', '""', '(', '""', '+', 'existingPair', '.', 'first', '.', 'getInputArgsSchema', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', ',', '""', '+', 'funcSpec', '.', 'getInputArgsSchema', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', ')', '.', 'Please', 'use', 'an', 'explicit', 'cast', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1043', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1043', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unalbe', 'to', 'retrieve', 'field', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'we', 'reached', 'here', ',', 'it', 'means', 'we', 'have', '>', '=', '1', 'candidates', 'and', 'these', 'candidates']",0
TypeCheckingVisitor.java,"['/', '/', 'have', 'the', 'same', 'type', 'for', 'position', 'which', 'have', 'bytearray', 'in', 'the', 'input']",0
TypeCheckingVisitor.java,"['/', '/', 'Also', 'the', 'candidates', 'are', 'stored', 'sorted', 'by', 'score', 'in', 'a', 'list', '-', 'we', 'can', 'now']",0
TypeCheckingVisitor.java,"['/', '/', 'just', 'return', 'the', 'first', 'candidate', '(', 'the', 'one', 'with', 'the', 'lowest', 'score', ')']",0
TypeCheckingVisitor.java,"['return', 'scoreFuncSpecList', '.', 'get', '(', '0', ')', '.', 'second', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'boolean', 'byteArrayFound', '(', 'Schema', 's', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['FieldSchema', 'fs', '=', 's', '.', 'getField', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'fs', '.', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1043', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'field', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'List', '<', 'Integer', '>', 'getByteArrayPositions', '(', 'Schema', 's', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'Integer', '>', 'result', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['FieldSchema', 'fs', '=', 's', '.', 'getField', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'fs', '.', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['result', '.', 'add', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1043', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'field', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';', '}']",0
TypeCheckingVisitor.java,"['return', 'result', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'exactMatchHelper', '(', 'List', '<', 'FuncSpec', '>', 'funcSpecs', ',', 'Schema', 's', ',', 'LOUserFunc', 'func', ',', 'boolean', 'ignoreByteArrays', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'FuncSpec', '>', 'matchingSpecs', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'Iterator', '<', 'FuncSpec', '>', 'iterator', '=', 'funcSpecs', '.', 'iterator', '(', ')', ';', 'iterator', '.', 'hasNext', '(', ')', ';', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'fs', '=', 'iterator', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'schemaEqualsForMatching', '(', 's', ',', 'fs', '.', 'getInputArgsSchema', '(', ')', ',', 'ignoreByteArrays', ')', ')', '{']",0
TypeCheckingVisitor.java,"['matchingSpecs', '.', 'add', '(', 'fs', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'matchingSpecs', '.', 'size', '(', ')', '=', '=', '0', ')']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'matchingSpecs', '.', 'size', '(', ')', '>', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1046', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Multiple', 'matching', 'functions', 'for', '""']",0
TypeCheckingVisitor.java,"['+', 'func', '.', 'getFuncSpec', '(', ')', '+', '""', 'with', 'input', 'schema', ':', '""']",0
TypeCheckingVisitor.java,"['+', '""', '(', '""', '+', 'matchingSpecs', '.', 'get', '(', '0', ')', '.', 'getInputArgsSchema', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', ',', '""', '+', 'matchingSpecs', '.', 'get', '(', '1', ')', '.', 'getInputArgsSchema', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', ')', '.', 'Please', 'use', 'an', 'explicit', 'cast', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'exactly', 'one', 'matching', 'spec', '-', 'return', 'it']",0
TypeCheckingVisitor.java,"['return', 'matchingSpecs', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']",0
TypeCheckingVisitor.java,"['public', 'static', 'boolean', 'schemaEqualsForMatching', '(', 'Schema', 'inputSchema', ',']",0
TypeCheckingVisitor.java,"['Schema', 'udfSchema', ',', 'boolean', 'ignoreByteArrays', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'both', 'of', 'them', 'are', 'null', ',', 'they', 'are', 'equal']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'inputSchema', '=', '=', 'null', ')', '&', '&', '(', 'udfSchema', '=', '=', 'null', ')', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'true', ';']",0
TypeCheckingVisitor.java,"['return', 'true', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'otherwise']",0
TypeCheckingVisitor.java,"['if', '(', 'inputSchema', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'udfSchema', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'inputSchema', '.', 'size', '(', ')', '!', '=', 'udfSchema', '.', 'size', '(', ')', ')']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['Iterator', '<', 'FieldSchema', '>', 'i', '=', 'inputSchema', '.', 'getFields', '(', ')', '.', 'iterator', '(', ')', ';']",0
TypeCheckingVisitor.java,"['Iterator', '<', 'FieldSchema', '>', 'j', '=', 'udfSchema', '.', 'getFields', '(', ')', '.', 'iterator', '(', ')', ';']",0
TypeCheckingVisitor.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FieldSchema', 'inputFieldSchema', '=', 'i', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['FieldSchema', 'udfFieldSchema', '=', 'j', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'ignoreByteArrays', '&', '&', 'inputFieldSchema', '.', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'inputFieldSchema', '.', 'type', '!', '=', 'udfFieldSchema', '.', 'type', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'a', 'field', 'schema', 'in', 'the', 'udf', 'schema', 'is', 'for', 'a', 'complex']",0
TypeCheckingVisitor.java,"['/', '/', 'type', 'AND', 'if', 'the', 'inner', 'schema', 'is', 'NOT', 'null', ',', 'check', 'for', 'schema']",0
TypeCheckingVisitor.java,"['/', '/', 'equality', 'of', 'the', 'inner', 'schemas', 'of', 'the', 'UDF', 'field', 'schema', 'and']",0
TypeCheckingVisitor.java,"['/', '/', 'input', 'field', 'schema', '.', 'If', 'the', 'field', 'schema', 'in', 'the', 'udf', 'schema', 'is']",0
TypeCheckingVisitor.java,"['/', '/', 'for', 'a', 'complex', 'type', 'AND', 'if', 'the', 'inner', 'schema', 'IS', 'null', 'it', 'means']",0
TypeCheckingVisitor.java,"['/', '/', 'the', 'udf', 'is', 'applicable', 'for', 'all', 'input', 'which', 'has', 'the', 'same', 'type']",0
TypeCheckingVisitor.java,"['/', '/', 'for', 'that', 'field', '(', 'irrespective', 'of', 'inner', 'schema', ')']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'udfFieldSchema', '.', 'type', ')']",0
TypeCheckingVisitor.java,"['&', '&', 'udfFieldSchema', '.', 'schema', '!', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Compare', 'recursively', 'using', 'field', 'schema']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'FieldSchema', '.', 'equals', '(', 'inputFieldSchema', ',', 'udfFieldSchema', ',']",0
TypeCheckingVisitor.java,"['false', ',', 'true', ')', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'false', ';']",0
TypeCheckingVisitor.java,"['return', 'true', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'long', 'fitPossible', '(', 'Schema', 's1', ',', 'Schema', 's2', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 's1', '=', '=', 'null', '|', '|', 's2', '=', '=', 'null', ')', 'return', 'INF', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'FieldSchema', '>', 'sFields', '=', 's1', '.', 'getFields', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'FieldSchema', '>', 'fsFields', '=', 's2', '.', 'getFields', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'sFields', '.', 'size', '(', ')', '!', '=', 'fsFields', '.', 'size', '(', ')', ')']",0
TypeCheckingVisitor.java,"['return', 'INF', ';']",0
TypeCheckingVisitor.java,"['long', 'score', '=', '0', ';']",0
TypeCheckingVisitor.java,"['int', 'castCnt', '=', '0', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sFields', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['FieldSchema', 'sFS', '=', 'sFields', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'we', 'have', 'a', 'byte', 'array', 'do', 'not', 'include', 'it']",0
TypeCheckingVisitor.java,"['/', '/', 'in', 'the', 'computation', 'of', 'the', 'score', '-', 'bytearray']",0
TypeCheckingVisitor.java,"['/', '/', 'fields', 'will', 'be', 'looked', 'at', 'separately', 'outside']",0
TypeCheckingVisitor.java,"['/', '/', 'of', 'this', 'function']",0
TypeCheckingVisitor.java,"['if', '(', 'sFS', '.', 'type', '=', '=', 'DataType', '.', 'BYTEARRAY', ')']",0
TypeCheckingVisitor.java,"['FieldSchema', 'fsFS', '=', 'fsFields', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'sFS', '.', 'type', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'FieldSchema', '.', 'equals', '(', 'sFS', ',', 'fsFS', ',', 'false', ',', 'true', ')', ')']",0
TypeCheckingVisitor.java,"['return', 'INF', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'FieldSchema', '.', 'equals', '(', 'sFS', ',', 'fsFS', ',', 'true', ',', 'true', ')', ')', 'continue', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'castLookup', '.', 'containsKey', '(', 'sFS', '.', 'type', ')', ')']",0
TypeCheckingVisitor.java,"['return', 'INF', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', '(', 'castLookup', '.', 'get', '(', 'sFS', '.', 'type', ')', '.', 'contains', '(', 'fsFS', '.', 'type', ')', ')', ')']",0
TypeCheckingVisitor.java,"['return', 'INF', ';']",0
TypeCheckingVisitor.java,"['score', '+', '=', '(', '(', 'List', ')', 'castLookup', '.', 'get', '(', 'sFS', '.', 'type', ')', ')', '.', 'indexOf', '(', 'fsFS', '.', 'type', ')', '+', '1', ';']",0
TypeCheckingVisitor.java,"['+', '+', 'castCnt', ';']",0
TypeCheckingVisitor.java,"['return', 'score', '*', 'castCnt', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertCastsForUDF', '(', 'LOUserFunc', 'udf', ',', 'Schema', 'fromSch', ',', 'Schema', 'toSch', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'FieldSchema', '>', 'fsLst', '=', 'fromSch', '.', 'getFields', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'FieldSchema', '>', 'tsLst', '=', 'toSch', '.', 'getFields', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'ExpressionOperator', '>', 'args', '=', 'udf', '.', 'getArguments', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'ExpressionOperator', '>', 'newArgs', '=', 'new', 'ArrayList', '<', 'ExpressionOperator', '>', '(', 'args', '.', 'size', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'i', '=', '-', '1', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'FieldSchema', 'fFSch', ':', 'fsLst', ')', '{']",0
TypeCheckingVisitor.java,"['+', '+', 'i', ';']",0
TypeCheckingVisitor.java,"['FieldSchema', 'tFSch', '=', 'tsLst', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'fFSch', '.', 'type', '=', '=', 'tFSch', '.', 'type', ')', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'udf', ',', 'tFSch', '.', 'type', ',', 'args', '.', 'get', '(', 'i', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOBinCond', 'binCond', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'high', '-', 'level', 'type', 'checking']",0
TypeCheckingVisitor.java,"['if', '(', 'binCond', '.', 'getCond', '(', ')', '.', 'getType', '(', ')', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1047', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Condition', 'in', 'BinCond', 'must', 'be', 'boolean', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'lhsType', '=', 'binCond', '.', 'getLhsOp', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'rhsType', '=', 'binCond', '.', 'getRhsOp', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'If', 'both', 'sides', 'are', 'number', ',', 'we', 'can', 'convert', 'the', 'smaller', 'type', 'to', 'the', 'bigger', 'type']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isNumberType', '(', 'lhsType', ')', '&', '&', 'DataType', '.', 'isNumberType', '(', 'rhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['byte', 'biggerType', '=', 'lhsType', '>', 'rhsType', '?', 'lhsType', ':', 'rhsType', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'biggerType', '>', 'lhsType', ')', '{']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinCond', '(', 'binCond', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'biggerType', '>', 'rhsType', ')', '{']",0
TypeCheckingVisitor.java,"['insertRightCastForBinCond', '(', 'binCond', ',', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'setType', '(', 'biggerType', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType']",0
TypeCheckingVisitor.java,"['.', 'isNumberType', '(', 'rhsType', ')', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'rhs']",0
TypeCheckingVisitor.java,"['insertLeftCastForBinCond', '(', 'binCond', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'setType', '(', 'DataType', '.', 'mergeType', '(', 'lhsType', ',', 'rhsType', ')', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', '(', 'rhsType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'lhsType', '=', '=', 'DataType', '.', 'CHARARRAY', ')', '|', '|', '(', 'DataType']",0
TypeCheckingVisitor.java,"['.', 'isNumberType', '(', 'lhsType', ')', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Cast', 'byte', 'array', 'to', 'the', 'type', 'on', 'lhs']",0
TypeCheckingVisitor.java,"['insertRightCastForBinCond', '(', 'binCond', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'setType', '(', 'DataType', '.', 'mergeType', '(', 'lhsType', ',', 'rhsType', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'A', 'constant', 'null', 'is', 'always', 'bytearray', '-', 'so', 'cast', 'it']",0
TypeCheckingVisitor.java,"['/', '/', 'to', 'rhs', 'type']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'binCond', '.', 'getLhsOp', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binCond', '.', 'getLhsOp', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",1
TypeCheckingVisitor.java,"['insertLeftCastForBinCond', '(', 'binCond', ',', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'binCond', '.', 'getRhsOp', '(', ')', 'instanceof', 'LOConst']",0
TypeCheckingVisitor.java,"['&', '&', '(', '(', 'LOConst', ')', 'binCond', '.', 'getRhsOp', '(', ')', ')', '.', 'getValue', '(', ')', '=', '=', 'null', ')', '{']",1
TypeCheckingVisitor.java,"['insertRightCastForBinCond', '(', 'binCond', ',', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'lhsType', '=', '=', 'rhsType', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Matching', 'schemas', 'if', 'we', ""'"", 're', 'working', 'with', 'tuples']",0
TypeCheckingVisitor.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'lhsType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'Schema', '.', 'FieldSchema', '.', 'equals', '(', 'binCond', '.', 'getLhsOp', '(', ')', '.', 'getFieldSchema', '(', ')', ',', 'binCond', '.', 'getRhsOp', '(', ')', '.', 'getFieldSchema', '(', ')', ',', 'false', ',', 'true', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1048', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Two', 'inputs', 'of', 'BinCond', 'must', 'have', 'compatible', 'schemas', '.', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'left', 'hand', 'side', ':', '""', '+', 'binCond', '.', 'getLhsOp', '(', ')', '.', 'getFieldSchema', '(', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'right', 'hand', 'side', ':', '""', '+', 'binCond', '.', 'getRhsOp', '(', ')', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'We', 'may', 'have', 'to', 'merge', 'the', 'schema', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'the', 'previous', 'check', 'is', 'not', 'exact', 'match']",0
TypeCheckingVisitor.java,"['/', '/', 'Is', 'Schema', '.', 'reconcile', 'good', 'enough', '?']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1049', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'during', 'evaluaton', 'of', 'BinCond', 'output', 'type', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'setType', '(', 'lhsType', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1050', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unsupported', 'input', 'type', 'for', 'BinCond', ':', 'left', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'lhsType', ')', '+', '""', ';', 'right', 'hand', 'side', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'rhsType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['binCond', '.', 'regenerateFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1040', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Could', 'not', 'set', 'BinCond', 'field', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertLeftCastForBinCond', '(', 'LOBinCond', 'binCond', ',', 'byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'binCond', ',', 'toType', ',', 'binCond', '.', 'getLhsOp', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertRightCastForBinCond', '(', 'LOBinCond', 'binCond', ',', 'byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['insertCast', '(', 'binCond', ',', 'toType', ',', 'binCond', '.', 'getRhsOp', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOCast', 'cast', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['byte', 'inputType', '=', 'cast', '.', 'getExpression', '(', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'expectedType', '=', 'cast', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'expectedType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1051', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'cast', 'to', 'bytearray', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'castFs', ';']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'inputFs', ';']",0
TypeCheckingVisitor.java,"['castFs', '=', 'cast', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['inputFs', '=', 'cast', '.', 'getExpression', '(', ')', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1076', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', 'field', 'schema', 'of', 'cast', 'operator', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['boolean', 'castable', '=', 'Schema', '.', 'FieldSchema', '.', 'castable', '(', 'castFs', ',', 'inputFs', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'castable', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1052', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'cast', '""']",0
TypeCheckingVisitor.java,"['+', 'DataType', '.', 'findTypeName', '(', 'inputType', ')']",0
TypeCheckingVisitor.java,"['+', '(', '(', 'DataType', '.', 'isSchemaType', '(', 'inputType', ')', ')', '?', '""', 'with', 'schema', '""', '+', 'inputFs', ':', '""', '""', ')']",0
TypeCheckingVisitor.java,"['+', '""', 'to', '""']",0
TypeCheckingVisitor.java,"['+', 'DataType', '.', 'findTypeName', '(', 'expectedType', ')']",0
TypeCheckingVisitor.java,"['+', '(', '(', 'DataType', '.', 'isSchemaType', '(', 'expectedType', ')', ')', '?', '""', 'with', 'schema', '""', '+', 'castFs', ':', '""', '""', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'cast', '.', 'getType', '(', ')', 'already', 'returns', 'the', 'correct', 'type', 'so', 'don', ""'"", 't', 'have', 'to']",0
TypeCheckingVisitor.java,"['/', '/', 'set', 'here', '.', 'This', 'is', 'a', 'special', 'case', 'where', 'output', 'type', 'is', 'not']",0
TypeCheckingVisitor.java,"['/', '/', 'automatically', 'determined', '.']",0
TypeCheckingVisitor.java,"['if', '(', 'inputType', '=', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'loadFuncSpec', '=', 'getLoadFuncSpec', '(', 'cast', '.', 'getExpression', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['cast', '.', 'setLoadFuncSpec', '(', 'loadFuncSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1053', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'load', 'function', 'to', 'use', 'for', 'casting', 'from', '""', '+']",0
TypeCheckingVisitor.java,"['DataType', '.', 'findTypeName', '(', 'inputType', ')', '+', '""', 'to', '""', '+']",0
TypeCheckingVisitor.java,"['DataType', '.', 'findTypeName', '(', 'expectedType', ')', '+', '""', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '/']",0
TypeCheckingVisitor.java,"['/', '*', 'Relational', 'Operators', '*', '/']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '/']",0
TypeCheckingVisitor.java,"['All', 'the', 'getType', '(', ')', 'of', 'these', 'operators', 'always', 'return', 'BAG', '.']",0
TypeCheckingVisitor.java,"['We', 'just', 'have', 'to', ':', '-']",0
TypeCheckingVisitor.java,"['1', ')', 'Check', 'types', 'of', 'inputs', ',', 'inner', 'plans']",0
TypeCheckingVisitor.java,"['2', ')', 'Compute', 'output', 'schema', 'with', 'type', 'information']",0
TypeCheckingVisitor.java,"['(', 'At', 'the', 'moment', ',', 'the', 'parser', 'does', 'only', 'return', 'GetSchema', 'with', 'correct', 'aliases', ')']",0
TypeCheckingVisitor.java,"['3', ')', 'Insert', 'casting', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['The', 'output', 'schema', 'of', 'LOUnion', 'is', 'the', 'merge', 'of', 'all', 'input', 'schemas', '.']",0
TypeCheckingVisitor.java,"['Operands', 'on', 'left', 'side', 'always', 'take', 'precedance', 'on', 'aliases', '.']",0
TypeCheckingVisitor.java,"['We', 'allow', 'type', 'promotion', 'here']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOUnion', 'u', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['u', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Have', 'to', 'make', 'a', 'copy', ',', 'because', 'as', 'we', 'insert', 'operators', ',', 'this', 'list', 'will']",0
TypeCheckingVisitor.java,"['/', '/', 'change', 'under', 'us', '.']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=']",0
TypeCheckingVisitor.java,"['new', 'ArrayList', '<', 'LogicalOperator', '>', '(', 'u', '.', 'getInputs', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'There', 'is', 'no', 'point', 'to', 'union', 'only', 'one', 'operand']",0
TypeCheckingVisitor.java,"['/', '/', 'it', 'should', 'be', 'a', 'problem', 'in', 'the', 'parser']",0
TypeCheckingVisitor.java,"['if', '(', 'inputs', '.', 'size', '(', ')', '<', '2', ')', '{']",0
TypeCheckingVisitor.java,"['AssertionError', 'err', '=', 'new', 'AssertionError', '(', '""', 'Union', 'with', 'Count', '(', 'Operand', ')', '<', '2', '""', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', 'schema', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'strictMode', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Keep', 'merging', 'one', 'by', 'one', 'just', 'to', 'check', 'if', 'there', 'is']",0
TypeCheckingVisitor.java,"['/', '/', 'any', 'problem', 'with', 'types', 'in', 'strict', 'mode']",0
TypeCheckingVisitor.java,"['Schema', 'tmpSchema', '=', 'inputs', '.', 'get', '(', '0', ')', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Assume', 'the', 'first', 'input', ""'"", 's', 'aliases', 'take', 'precedance']",0
TypeCheckingVisitor.java,"['tmpSchema', '=', 'tmpSchema', '.', 'merge', '(', 'inputs', '.', 'get', '(', 'i', ')', '.', 'getSchema', '(', ')', ',', 'false', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'they', 'cannot', 'be', 'merged', ',', 'we', 'just', 'give', 'up']",0
TypeCheckingVisitor.java,"['if', '(', 'tmpSchema', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1054', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'merge', 'schemas', 'from', 'inputs', 'of', 'UNION', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['schema', '=', 'u', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', 'schemas', 'from', 'inputs', 'of', 'Union', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Do', 'cast', 'insertion', 'only', 'if', 'we', 'are', 'typed']",0
TypeCheckingVisitor.java,"['if', '(', 'schema', '!', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Insert', 'casting', 'to', 'inputs', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['=', 'insertCastForEachInBetweenIfNecessary', '(', 'inputs', '.', 'get', '(', 'i', ')', ',', 'u', ',', 'schema', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'may', 'have', 'to', 'compute', 'the', 'schema', 'of', 'the', 'input', 'again']",0
TypeCheckingVisitor.java,"['/', '/', 'because', 'we', 'have', 'just', 'inserted']",0
TypeCheckingVisitor.java,"['if', '(', 'insertedOp', '!', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'insertedOp', '.', 'getAlias', '(', ')', '=', '=', 'null', ')', '{']",0
TypeCheckingVisitor.java,"['insertedOp', '.', 'setAlias', '(', 'inputs', '.', 'get', '(', 'i', ')', '.', 'getAlias', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', 'insertedOp', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1056', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'casting', 'inputs', 'of', 'Union', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOSplitOutput', 'op', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['op', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'currentPlan', '=', 'mCurrentWalker', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'LOSplitOutput', 'can', 'only', 'have', '1', 'input']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'list', '=', 'currentPlan', '.', 'getPredecessors', '(', 'op', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'list', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2008', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'LOSplitOutput', 'cannot', 'have', 'more', 'than', 'one', 'input', '.', 'Found', ':', '""', '+', 'list', '.', 'size', '(', ')', '+', '""', 'input', '(', 's', ')', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'list', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'condPlan', '=', 'op', '.', 'getConditionPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'condPlan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Split', ""'"", 's', 'inner', 'plan', 'can', 'only', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'condPlan', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'innerCondType', '=', 'condPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerCondType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1058', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Split', ""'"", 's', 'condition', 'must', 'evaluate', 'to', 'boolean', '.', 'Found', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'innerCondType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['op', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'schemas', 'from', 'inputs', 'of', 'SplitOutput', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LODistinct', 'op', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['op', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'currentPlan', '=', 'mCurrentWalker', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'list', '=', 'currentPlan', '.', 'getPredecessors', '(', 'op', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['op', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'schemas', 'from', 'inputs', 'of', 'Distinct', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOLimit', 'op', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['op', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'schemas', 'from', 'inputs', 'of', 'Limit', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOCross', 'cs', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['cs', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'cs', '.', 'getInputs', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'FieldSchema', '>', 'fsList', '=', 'new', 'ArrayList', '<', 'FieldSchema', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['cs', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'schemas', 'from', 'inputs', 'of', 'Cross', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOSort', 's', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['s', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 's', '.', 'getInput', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Type', 'checking', 'internal', 'plans', '.']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'getSortColPlans', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'sortColPlan', '=', 's', '.', 'getSortColPlans', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'sortColPlan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Sort', ""'"", 's', 'inner', 'plan', 'can', 'only', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'sortColPlan', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'May', 'have', 'to', 'check', 'SortFunc', 'compatibility', 'here', 'in', 'the', 'future']",0
TypeCheckingVisitor.java,"['s', '.', 'setType', '(', 'input', '.', 'getType', '(', ')', ')', ';', '/', '/', 'This', 'should', 'be', 'bag', 'always', '.']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['s', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reconciling', 'output', 'schema', 'of', 'Sort', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOFilter', 'filter', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['filter', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'filter', '.', 'getInput', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'comparisonPlan', '=', 'filter', '.', 'getComparisonPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'comparisonPlan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Filter', ""'"", 's', 'cond', 'plan', 'can', 'only', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'comparisonPlan', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'innerCondType', '=', 'comparisonPlan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerCondType', '!', '=', 'DataType', '.', 'BOOLEAN', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1058', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Filter', ""'"", 's', 'condition', 'must', 'evaluate', 'to', 'boolean', '.', 'Found', ':', '""', '+', 'DataType', '.', 'findTypeName', '(', 'innerCondType', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['filter', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reconciling', 'output', 'schema', 'of', 'Filter', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOSplit', 'split', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Why', 'doesn', ""'"", 't', 'LOSplit', 'have', 'getInput', '(', ')', '?', '?', '?']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputList', '=', 'mPlan', '.', 'getPredecessors', '(', 'split', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'inputList', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2008', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'LOSplit', 'cannot', 'have', 'more', 'than', 'one', 'input', '.', 'Found', ':', '""', '+', 'inputList', '.', 'size', '(', ')', '+', '""', 'input', '(', 's', ')', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputList', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compute', 'the', 'schema']",0
TypeCheckingVisitor.java,"['split', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reconciling', 'output', 'schema', 'of', 'Split', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOFRJoin', 'frj', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['frj', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'Fragment', 'Replicate', 'Join', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'joinColPlans']",0
TypeCheckingVisitor.java,"['=', 'frj', '.', 'getJoinColPlans', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'frj', '.', 'getInputs', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Type', 'checking', 'internal', 'plans', '.']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'joinColPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'innerPlan', '=', 'innerPlans', '.', 'get', '(', 'j', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'innerPlan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Fragment', 'Replicate', 'Join', ""'"", 's', 'inner', 'plans', 'can', 'only', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'innerPlans', '.', 'get', '(', 'j', ')', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'frj', '.', 'isTupleJoinCol', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
TypeCheckingVisitor.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Don', ""'"", 't', 'recompute', 'schema', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'byte', 'groupType', '=', 'schema', '.', 'getField', '(', '0', ')', '.', 'type', ';']",0
TypeCheckingVisitor.java,"['byte', 'groupType', '=', 'frj', '.', 'getAtomicJoinColType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'go', 'through', 'all', 'inputs', 'again', 'to', 'add', 'cast', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'joinColPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Checking', 'innerPlan', 'size', 'already', 'done', 'above']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', '0', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerType', '!', '=', 'groupType', ')', '{']",0
TypeCheckingVisitor.java,"['insertAtomicCastForFRJInnerPlan', '(', 'innerPlans', '.', 'get', '(', '0', ')', ',']",0
TypeCheckingVisitor.java,"['groupType', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Don', ""'"", 't', 'recompute', 'schema', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'Schema', 'groupBySchema', '=', 'schema', '.', 'getField', '(', '0', ')', '.', 'schema', ';']",0
TypeCheckingVisitor.java,"['Schema', 'groupBySchema', '=', 'frj', '.', 'getTupleJoinColSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'go', 'through', 'all', 'inputs', 'again', 'to', 'add', 'cast', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'joinColPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'innerPlan', '=', 'innerPlans', '.', 'get', '(', 'j', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlan', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'expectedType', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isAtomic', '(', 'innerType', ')', '&', '&', '(', 'DataType', '.', 'TUPLE', '!', '=', 'innerType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Fragment', 'Replicate', 'Join', ""'"", 's', 'inner', 'plans', 'can', 'only', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['expectedType', '=', 'groupBySchema', '.', 'getField', '(', 'j', ')', '.', 'type', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'Fragment', 'Replicate', 'Join', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerType', '!', '=', 'expectedType', ')', '{']",0
TypeCheckingVisitor.java,"['insertAtomicCastForFRJInnerPlan', '(', 'innerPlan', ',']",0
TypeCheckingVisitor.java,"['expectedType', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'Fragment', 'Replicate', 'Join', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', 'outputSchema', '=', 'frj', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'Fragment', 'Replicate', 'Join', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOCogroup', 'cg', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['cg', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'COGroup', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'groupByPlans']",0
TypeCheckingVisitor.java,"['=', 'cg', '.', 'getGroupByPlans', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'inputs', '=', 'cg', '.', 'getInputs', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Type', 'checking', 'internal', 'plans', '.']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'groupByPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'innerPlan', '=', 'innerPlans', '.', 'get', '(', 'j', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'innerPlan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'COGroup', ""'"", 's', 'inner', 'plans', 'can', 'only', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'innerPlans', '.', 'get', '(', 'j', ')', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'cg', '.', 'isTupleGroupCol', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
TypeCheckingVisitor.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Don', ""'"", 't', 'recompute', 'schema', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'byte', 'groupType', '=', 'schema', '.', 'getField', '(', '0', ')', '.', 'type', ';']",0
TypeCheckingVisitor.java,"['byte', 'groupType', '=', 'cg', '.', 'getAtomicGroupByType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'go', 'through', 'all', 'inputs', 'again', 'to', 'add', 'cast', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'groupByPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Checking', 'innerPlan', 'size', 'already', 'done', 'above']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', '0', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerType', '!', '=', 'groupType', ')', '{']",0
TypeCheckingVisitor.java,"['insertAtomicCastForCOGroupInnerPlan', '(', 'innerPlans', '.', 'get', '(', '0', ')', ',']",0
TypeCheckingVisitor.java,"['groupType', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Don', ""'"", 't', 'recompute', 'schema', 'here']",0
TypeCheckingVisitor.java,"['/', '/', 'Schema', 'groupBySchema', '=', 'schema', '.', 'getField', '(', '0', ')', '.', 'schema', ';']",0
TypeCheckingVisitor.java,"['Schema', 'groupBySchema', '=', 'cg', '.', 'getTupleGroupBySchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'go', 'through', 'all', 'inputs', 'again', 'to', 'add', 'cast', 'if', 'necessary']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'inputs', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'groupByPlans', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'innerPlan', '=', 'innerPlans', '.', 'get', '(', 'j', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlan', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'expectedType', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isAtomic', '(', 'innerType', ')', '&', '&', '(', 'DataType', '.', 'TUPLE', '!', '=', 'innerType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1061', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Sorry', ',', 'group', 'by', 'complex', 'types', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'will', 'be', 'supported', 'soon', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['expectedType', '=', 'groupBySchema', '.', 'getField', '(', 'j', ')', '.', 'type', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'COGroup', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerType', '!', '=', 'expectedType', ')', '{']",0
TypeCheckingVisitor.java,"['insertAtomicCastForCOGroupInnerPlan', '(', 'innerPlan', ',']",0
TypeCheckingVisitor.java,"['expectedType', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'COGroup', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Don', ""'"", 't', 'recompute', 'schema', 'here', '.', 'Remove', 'all', 'from', 'here', '!']",0
TypeCheckingVisitor.java,"['/', '/', 'Generate', 'output', 'schema', 'based', 'on', 'the', 'schema', 'generated', 'from']",0
TypeCheckingVisitor.java,"['/', '/', 'COGroup', 'itself']",0
TypeCheckingVisitor.java,"['Schema', 'outputSchema', '=', 'cg', '.', 'regenerateSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'COGroup', 'output', 'schema', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertAtomicCastForFRJInnerPlan', '(', 'LogicalPlan', 'innerPlan', ',']",0
TypeCheckingVisitor.java,"['LOFRJoin', 'frj', ',', 'byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isUsableType', '(', 'toType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1051', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'cast', 'to', '""']",0
TypeCheckingVisitor.java,"['+', 'DataType', '.', 'findTypeName', '(', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'innerPlan', '.', 'getLeaves', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '>', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Expected', 'one', 'leaf', '.', 'Found', '""', '+', 'leaves', '.', 'size', '(', ')', '+', '""', 'leaves', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'currentOutput', '=', '(', 'ExpressionOperator', ')', 'leaves', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['collectCastWarning', '(', 'frj', ',', 'currentOutput', '.', 'getType', '(', ')', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['OperatorKey', 'newKey', '=', 'genNewOperatorKey', '(', 'currentOutput', ')', ';']",0
TypeCheckingVisitor.java,"['LOCast', 'cast', '=', 'new', 'LOCast', '(', 'innerPlan', ',', 'newKey', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['innerPlan', '.', 'add', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['innerPlan', '.', 'connect', '(', 'currentOutput', ',', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'PlanException', 'pe', ')', '{']",1
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2059', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'inserting', 'cast', 'operator', 'for', 'fragment', 'replicate', 'join', 'in', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'This', 'helps', 'insert', 'casting', 'to', 'atomic', 'types', 'in', 'COGroup', ""'"", 's', 'inner', 'plans']",0
TypeCheckingVisitor.java,"['/', '/', 'as', 'a', 'new', 'leave', 'of', 'the', 'plan']",0
TypeCheckingVisitor.java,"['private', 'void', 'insertAtomicCastForCOGroupInnerPlan', '(', 'LogicalPlan', 'innerPlan', ',']",0
TypeCheckingVisitor.java,"['LOCogroup', 'cg', ',']",0
TypeCheckingVisitor.java,"['byte', 'toType', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'DataType', '.', 'isUsableType', '(', 'toType', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1051', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'cast', 'to', '""']",0
TypeCheckingVisitor.java,"['+', 'DataType', '.', 'findTypeName', '(', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'innerPlan', '.', 'getLeaves', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '>', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Expected', 'one', 'leaf', '.', 'Found', '""', '+', 'leaves', '.', 'size', '(', ')', '+', '""', 'leaves', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['ExpressionOperator', 'currentOutput', '=', '(', 'ExpressionOperator', ')', 'leaves', '.', 'get', '(', '0', ')', ';']",0
TypeCheckingVisitor.java,"['collectCastWarning', '(', 'cg', ',', 'currentOutput', '.', 'getType', '(', ')', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['OperatorKey', 'newKey', '=', 'genNewOperatorKey', '(', 'currentOutput', ')', ';']",0
TypeCheckingVisitor.java,"['LOCast', 'cast', '=', 'new', 'LOCast', '(', 'innerPlan', ',', 'newKey', ',', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['innerPlan', '.', 'add', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['innerPlan', '.', 'connect', '(', 'currentOutput', ',', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'PlanException', 'pe', ')', '{']",0
TypeCheckingVisitor.java,"['catch', '(', 'PlanException', 'pe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'inserting', 'cast', 'operator', 'for', 'cogroup', 'in', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*']",0
TypeCheckingVisitor.java,"['public', 'byte', 'getAtomicGroupByType', '(', 'LOCogroup', 'cg', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'cg', '.', 'isTupleGroupCol', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2061', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Expected', 'single', 'group', 'by', 'element', 'but', 'found', 'multiple', 'elements', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'groupType', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
TypeCheckingVisitor.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'cg', '.', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'cg', '.', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'cg', '.', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'innerPlans', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2062', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Each', 'COGroup', 'input', 'has', 'to', 'have', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'the', 'same', 'number', 'of', 'inner', 'plans', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', '0', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['groupType', '=', 'DataType', '.', 'mergeType', '(', 'groupType', ',', 'innerType', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'groupType', '=', '=', 'DataType', '.', 'ERROR', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'just', 'warn', 'about', 'mismatch', 'type', 'in', 'non', '-', 'strict', 'mode']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'strictMode', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'COGroup', 'by', 'incompatible', 'types', 'results', 'in', 'ByteArray', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'GROUP_BY_INCOMPATIBLE_TYPES', ')', ';']",0
TypeCheckingVisitor.java,"['groupType', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'just', 'die', 'if', 'in', 'strict', 'mode']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1062', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'COGroup', 'by', 'incompatible', 'types', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'groupType', ';']",0
TypeCheckingVisitor.java,"['This', 'implementation', 'is', 'based', 'on', 'the', 'assumption', 'that', 'all', 'the']",0
TypeCheckingVisitor.java,"['inputs', 'have', 'the', 'same', 'group', 'col', 'tuple', 'arity', '.']",0
TypeCheckingVisitor.java,"['TODO', ':', 'This', 'doesn', ""'"", 't', 'work', 'with', 'group', 'by', 'complex', 'type']",0
TypeCheckingVisitor.java,"['public', 'Schema', 'getTupleGroupBySchema', '(', 'LOCogroup', 'cg', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'cg', '.', 'isTupleGroupCol', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2063', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Expected', 'multiple', 'group', 'by', 'element', 'but', 'found', 'single', 'element', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'this', 'fsList', 'represents', 'all', 'the', 'columns', 'in', 'group', 'tuple']",0
TypeCheckingVisitor.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fsList', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'outputSchemaSize', '=', 'cg', '.', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'cg', '.', 'getInputs', '(', ')', '.', 'get', '(', '0', ')', ')', '.', 'size', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'by', 'default', ',', 'they', 'are', 'all', 'bytearray']",0
TypeCheckingVisitor.java,"['/', '/', 'for', 'type', 'checking', ',', 'we', 'don', ""'"", 't', 'care', 'about', 'aliases']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'outputSchemaSize', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['fsList', '.', 'add', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'merge', 'all', 'the', 'inner', 'plan', 'outputs', 'so', 'we', 'know', 'what', 'type']",0
TypeCheckingVisitor.java,"['/', '/', 'our', 'group', 'column', 'should', 'be']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'cg', '.', 'getInputs', '(', ')', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'input', '=', 'cg', '.', 'getInputs', '(', ')', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'innerPlans']",0
TypeCheckingVisitor.java,"['=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 'cg', '.', 'getGroupByPlans', '(', ')', '.', 'get', '(', 'input', ')', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerPlans', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['byte', 'innerType', '=', 'innerPlans', '.', 'get', '(', 'j', ')', '.', 'getSingleLeafPlanOutputType', '(', ')', ';']",0
TypeCheckingVisitor.java,"['fsList', '.', 'get', '(', 'j', ')', '.', 'type', '=', 'DataType', '.', 'mergeType', '(', 'fsList', '.', 'get', '(', 'j', ')', '.', 'type', ',']",0
TypeCheckingVisitor.java,"['innerType', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'fsList', '.', 'get', '(', 'j', ')', '.', 'type', '=', '=', 'DataType', '.', 'ERROR', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'just', 'warn', 'about', 'mismatch', 'type', 'in', 'non', '-', 'strict', 'mode']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'strictMode', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'COGroup', 'by', 'incompatible', 'types', 'results', 'in', 'ByteArray', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Warning', ',', 'PigWarning', '.', 'GROUP_BY_INCOMPATIBLE_TYPES', ')', ';']",0
TypeCheckingVisitor.java,"['fsList', '.', 'get', '(', 'j', ')', '.', 'type', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'We', 'just', 'die', 'if', 'in', 'strict', 'mode']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1062', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'COGroup', 'by', 'incompatible', 'types', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'new', 'Schema', '(', 'fsList', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOForEach', 'f', ')', 'throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalPlan', '>', 'plans', '=', 'f', '.', 'getForEachPlans', '(', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'Boolean', '>', 'flattens', '=', 'f', '.', 'getFlatten', '(', ')', ';']",0
TypeCheckingVisitor.java,"['f', '.', 'unsetSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Have', 'to', 'resolve', 'all', 'inner', 'plans', 'before', 'calling', 'getSchema']",0
TypeCheckingVisitor.java,"['int', 'outputSchemaIdx', '=', '0', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'plans', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'plan', '=', 'plans', '.', 'get', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'that', 'the', 'inner', 'plan', 'has', 'only', '1', 'output', 'port']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'plan', '.', 'isSingleLeafPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1057', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Generate', ""'"", 's', 'expression', 'plan', 'can', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'only', 'have', 'one', 'output', '(', 'leaf', ')', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'rootList', '=', 'plan', '.', 'getRoots', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'rootList', '.', 'size', '(', ')', ';', 'j', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'innerRoot', '=', 'rootList', '.', 'get', '(', 'j', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Support', 'MAP', 'dereference']",0
TypeCheckingVisitor.java,"['if', '(', 'innerRoot', 'instanceof', 'LOProject', ')', '{']",0
TypeCheckingVisitor.java,"['resolveLOProjectType', '(', '(', 'LOProject', ')', 'innerRoot', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'innerRoot', 'instanceof', 'LOConst', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'it', ""'"", 's', 'ok', 'because', 'LOConst', 'always', 'has']",0
TypeCheckingVisitor.java,"['/', '/', 'the', 'right', 'type', 'information']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2064', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unsupported', 'root', 'type', 'in', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'LOForEach', ':', '""', '+', 'innerRoot', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['checkInnerPlan', '(', 'plan', ')', ';']",0
TypeCheckingVisitor.java,"['f', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",1
TypeCheckingVisitor.java,"['throw', 've', ';']",1
TypeCheckingVisitor.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1060', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'resolve', 'ForEach', 'output', 'schema', '.', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'void', 'checkInnerPlan', '(', 'LogicalPlan', 'innerPlan', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Preparation']",0
TypeCheckingVisitor.java,"['int', 'errorCount', '=', '0', ';']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'rootList', '=', 'innerPlan', '.', 'getRoots', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'rootList', '.', 'size', '(', ')', '<', '1', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2065', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'roots', 'of', 'the', 'inner', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', 'inputSchema', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['inputSchema', '=', 'srcOuterOp', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Cannot', 'not', 'get', 'schema', 'out', 'of', '""']",0
TypeCheckingVisitor.java,"['+', 'srcOuterOp', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'VisitorException', '(', 'msg', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Actual', 'checking']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'rootList', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Support', 'map', 'dereference']",0
TypeCheckingVisitor.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
TypeCheckingVisitor.java,"['resolveLOProjectType', '(', '(', 'LOProject', ')', 'op', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'I', 'think', 'we', 'better', 'need', 'a', 'sentinel', 'connecting', 'to', 'LOForEach']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'op', 'instanceof', 'LOForEach', ')', '{']",0
TypeCheckingVisitor.java,"['op', '.', 'setType', '(', 'DataType', '.', 'TUPLE', ')', ';']",0
TypeCheckingVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'walker']",0
TypeCheckingVisitor.java,"['=', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'innerPlan', ')', ';']",0
TypeCheckingVisitor.java,"['pushWalker', '(', 'walker', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', '(', 'LOForEach', ')', 'op', ')', ';']",0
TypeCheckingVisitor.java,"['popWalker', '(', ')', ';']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'op', 'instanceof', 'LOConst', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'don', ""'"", 't', 'have', 'to', 'do', 'anything']",0
TypeCheckingVisitor.java,"['else', 'if', '(', 'op', 'instanceof', 'LOUserFunc', ')', '{']",0
TypeCheckingVisitor.java,"['visit', '(', '(', 'LOUserFunc', ')', 'op', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2066', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Unsupported', 'root', 'operator', 'in', 'inner', 'plan', ':', '""']",0
TypeCheckingVisitor.java,"['+', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Throw', 'an', 'exception', 'if', 'we', 'found', 'errors']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'add', 'it', 'back']",0
TypeCheckingVisitor.java,"['if', '(', 'errorCount', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'TODO', ':', 'Should', 'indicate', 'the', 'field', 'names', 'or', 'indexes', 'here']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Some', 'required', 'fields', 'in', 'inner', 'plan', 'cannot', 'be', 'found', 'in', 'input', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['VisitorException', 'vse', '=', 'new', 'VisitorException', '(', 'msg', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'vse', ';']",0
TypeCheckingVisitor.java,"['}', '*', '/']",0
TypeCheckingVisitor.java,"['/', '/', 'Check', 'typing', 'of', 'the', 'inner', 'plan', 'by', 'visiting', 'it']",0
TypeCheckingVisitor.java,"['PlanWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'walker']",0
TypeCheckingVisitor.java,"['=', 'new', 'DependencyOrderWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'innerPlan', ')', ';']",0
TypeCheckingVisitor.java,"['pushWalker', '(', 'walker', ')', ';']",0
TypeCheckingVisitor.java,"['this', '.', 'visit', '(', ')', ';']",0
TypeCheckingVisitor.java,"['popWalker', '(', ')', ';']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOLoad', 'load', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'do', 'nothing']",0
TypeCheckingVisitor.java,"['protected', 'void', 'visit', '(', 'LOStore', 'store', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'do', 'nothing']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'LOForEach', 'insertCastForEachInBetweenIfNecessary', '(', 'LogicalOperator', 'fromOp', ',']",0
TypeCheckingVisitor.java,"['LogicalOperator', 'toOp', ',']",0
TypeCheckingVisitor.java,"['Schema', 'targetSchema', ')']",0
TypeCheckingVisitor.java,"['throws', 'VisitorException', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'currentPlan', '=', 'mCurrentWalker', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Make', 'sure', 'that', 'two', 'operators', 'are', 'in', 'the', 'same', 'plan']",0
TypeCheckingVisitor.java,"['if', '(', 'fromOp', '.', 'getPlan', '(', ')', '!', '=', 'toOp', '.', 'getPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['throw', 'new', 'AssertionError', '(', '""', 'Two', 'operators', 'have', 'toOp', 'be', 'in', 'the', 'same', 'plan', '""', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Mare', 'sure', 'that', 'they', 'are', 'in', 'the', 'plan', 'we', ""'"", 're', 'looking', 'at']",0
TypeCheckingVisitor.java,"['if', '(', 'fromOp', '.', 'getPlan', '(', ')', '!', '=', 'toOp', '.', 'getPlan', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['throw', 'new', 'AssertionError', '(', '""', 'Cannot', 'manipulate', 'any', 'other', 'plan', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'than', 'the', 'current', 'one', '""', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Make', 'sure', 'that', 'they', 'are', 'adjacent', 'and', 'the', 'direction']",0
TypeCheckingVisitor.java,"['/', '/', 'is', 'from', '""', 'fromOp', '""', 'to', '""', 'toOp', '""']",0
TypeCheckingVisitor.java,"['List', '<', 'LogicalOperator', '>', 'preList', '=', 'currentPlan', '.', 'getPredecessors', '(', 'toOp', ')', ';']",0
TypeCheckingVisitor.java,"['boolean', 'found', '=', 'false', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'tmpOp', ':', 'preList', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'compare', 'by', 'reference']",0
TypeCheckingVisitor.java,"['if', '(', 'tmpOp', '=', '=', 'fromOp', ')', '{']",0
TypeCheckingVisitor.java,"['found', '=', 'true', ';']",0
TypeCheckingVisitor.java,"['if', '(', '!', 'found', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1077', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Two', 'operators', 'that', 'require', 'a', 'cast', 'in', 'between', 'are', 'not', 'adjacent', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'retrieve', 'input', 'schema', 'to', 'be', 'casted']",0
TypeCheckingVisitor.java,"['/', '/', 'this', 'will', 'be', 'used', 'later']",0
TypeCheckingVisitor.java,"['Schema', 'fromSchema', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['fromSchema', '=', 'fromOp', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1055', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', 'schema', 'from', 'input', 'of', '""', '+', 'fromOp', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'fe', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'make', 'sure', 'the', 'supplied', 'targetSchema', 'has', 'the', 'same', 'number', 'of', 'members']",0
TypeCheckingVisitor.java,"['/', '/', 'as', 'number', 'of', 'output', 'fields', 'from', '""', 'fromOp', '""']",0
TypeCheckingVisitor.java,"['if', '(', 'fromSchema', '.', 'size', '(', ')', '!', '=', 'targetSchema', '.', 'size', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1078', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Schema', 'size', 'mismatch', 'for', 'casting', '.', 'Input', 'schema', 'size', ':', '""', '+', 'fromSchema', '.', 'size', '(', ')', '+', '""', '.', 'Target', 'schema', 'size', ':', '""', '+', 'targetSchema', '.', 'size', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Compose', 'the', 'new', 'inner', 'plan', 'to', 'be', 'used', 'in', 'ForEach']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'foreachPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Plans', 'inside', 'Generate', '.', 'Fields', 'that', 'do', 'not', 'need', 'casting', 'will', 'only']",0
TypeCheckingVisitor.java,"['/', '/', 'have', 'Project', '.', 'Fields', 'that', 'need', 'casting', 'will', 'have', 'Project', '+', 'Cast']",0
TypeCheckingVisitor.java,"['ArrayList', '<', 'LogicalPlan', '>', 'generatePlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'castNeededCounter', '=', '0', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'fromSchema', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'genPlan', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['LOProject', 'project', '=', 'new', 'LOProject', '(', 'genPlan', ',']",0
TypeCheckingVisitor.java,"['genNewOperatorKey', '(', 'fromOp', ')', ',']",0
TypeCheckingVisitor.java,"['i', ')', ';']",0
TypeCheckingVisitor.java,"['project', '.', 'setSentinel', '(', 'true', ')', ';']",0
TypeCheckingVisitor.java,"['genPlan', '.', 'add', '(', 'project', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'add', 'casting', 'if', 'necessary', 'by', 'comparing', 'target', 'types']",0
TypeCheckingVisitor.java,"['/', '/', 'to', 'the', 'input', 'schema']",0
TypeCheckingVisitor.java,"['FieldSchema', 'fs', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['fs', '=', 'fromSchema', '.', 'getField', '(', 'i', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1063', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'while', 'reading', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'field', 'schema', 'from', 'input', 'while', '""']",0
TypeCheckingVisitor.java,"['+', '""', 'inserting', 'cast', '""', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'msg', ',', 'MessageType', '.', 'Error', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'This', 'only', 'does', '""', 'shallow', 'checking', '""']",0
TypeCheckingVisitor.java,"['byte', 'inputFieldType', ';']",0
TypeCheckingVisitor.java,"['inputFieldType', '=', 'targetSchema', '.', 'getField', '(', 'i', ')', '.', 'type', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'FrontendException', 'fee', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1064', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'reading', 'column', '""', '+', 'i', '+', '""', 'from', 'schema', ':', '""', '+', 'targetSchema', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'fee', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'inputFieldType', '!', '=', 'fs', '.', 'type', ')', '{']",0
TypeCheckingVisitor.java,"['castNeededCounter', '+', '+', ';']",0
TypeCheckingVisitor.java,"['LOCast', 'cast', '=', 'new', 'LOCast', '(', 'genPlan', ',']",0
TypeCheckingVisitor.java,"['genNewOperatorKey', '(', 'fromOp', ')', ',']",0
TypeCheckingVisitor.java,"['inputFieldType', ')', ';']",0
TypeCheckingVisitor.java,"['genPlan', '.', 'add', '(', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['genPlan', '.', 'connect', '(', 'project', ',', 'cast', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'PlanException', 'pe', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'This', 'should', 'never', 'happen']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'inserting', 'cast', 'operator', 'for', 'project', 'in', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
TypeCheckingVisitor.java,"['generatePlans', '.', 'add', '(', 'genPlan', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'if', 'we', 'really', 'need', 'casting']",0
TypeCheckingVisitor.java,"['if', '(', 'castNeededCounter', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['/', '/', 'Flatten', 'List']",0
TypeCheckingVisitor.java,"['/', '/', 'This', 'is', 'just', 'cast', 'insertion', 'so', 'we', 'don', ""'"", 't', 'have', 'any', 'flatten']",0
TypeCheckingVisitor.java,"['ArrayList', '<', 'Boolean', '>', 'flattenList', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'targetSchema', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCheckingVisitor.java,"['flattenList', '.', 'add', '(', 'new', 'Boolean', '(', 'false', ')', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Create', 'ForEach', 'to', 'be', 'inserted']",0
TypeCheckingVisitor.java,"['LOForEach', 'foreach', '=', 'new', 'LOForEach', '(', 'currentPlan', ',', 'genNewOperatorKey', '(', 'fromOp', ')', ',', 'generatePlans', ',', 'flattenList', ')', ';']",0
TypeCheckingVisitor.java,"['/', '/', 'Manipulate', 'the', 'plan', 'structure']",0
TypeCheckingVisitor.java,"['currentPlan', '.', 'add', '(', 'foreach', ')', ';']",0
TypeCheckingVisitor.java,"['currentPlan', '.', 'disconnect', '(', 'fromOp', ',', 'toOp', ')', ';']",0
TypeCheckingVisitor.java,"['currentPlan', '.', 'connect', '(', 'fromOp', ',', 'foreach', ')', ';']",0
TypeCheckingVisitor.java,"['currentPlan', '.', 'connect', '(', 'foreach', ',', 'toOp', ')', ';']",0
TypeCheckingVisitor.java,"['catch', '(', 'PlanException', 'pe', ')', '{']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '2059', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Problem', 'with', 'inserting', 'foeach', 'operator', 'for', '""', '+', 'toOp', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', '+', '""', 'in', 'plan', '.', '""', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'TypeCheckerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'pe', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'foreach', ';']",0
TypeCheckingVisitor.java,"['log', '.', 'debug', '(', '""', 'Tried', 'to', 'insert', 'relational', 'casting', 'when', 'not', 'necessary', '""', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'void', 'collectCastWarning', '(', 'LogicalOperator', 'op', ',']",0
TypeCheckingVisitor.java,"['byte', 'originalType', ',']",0
TypeCheckingVisitor.java,"['byte', 'toType', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'originalTypeName', '=', 'DataType', '.', 'findTypeName', '(', 'originalType', ')', ';']",0
TypeCheckingVisitor.java,"['String', 'toTypeName', '=', 'DataType', '.', 'findTypeName', '(', 'toType', ')', ';']",0
TypeCheckingVisitor.java,"['String', 'opName', '=', 'op', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCheckingVisitor.java,"['Enum', 'kind', '=', 'null', ';']",0
TypeCheckingVisitor.java,"['switch', '(', 'toType', ')', '{']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'BAG', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_BAG', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_CHARARRAY', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_DOUBLE', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_FLOAT', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_INT', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'LONG', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_LONG', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'MAP', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_MAP', ';']",0
TypeCheckingVisitor.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
TypeCheckingVisitor.java,"['kind', '=', 'PigWarning', '.', 'IMPLICIT_CAST_TO_TUPLE', ';']",0
TypeCheckingVisitor.java,"['msgCollector', '.', 'collect', '(', 'originalTypeName', '+', '""', 'is', 'implicitly', 'cast', 'to', '""']",0
TypeCheckingVisitor.java,"['+', 'toTypeName', '+', '""', 'under', '""', '+', 'opName', '+', '""', 'Operator', '""', ',']",0
TypeCheckingVisitor.java,"['MessageType', '.', 'Warning', ',', 'kind', ')', ';']",0
TypeCheckingVisitor.java,"['/', '*', '*', '*']",0
TypeCheckingVisitor.java,"['private', 'OperatorKey', 'genNewOperatorKey', '(', 'LogicalOperator', 'neighbor', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'scope', '=', 'neighbor', '.', 'getOperatorKey', '(', ')', '.', 'getScope', '(', ')', ';']",0
TypeCheckingVisitor.java,"['long', 'newId', '=', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'scope', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'new', 'OperatorKey', '(', 'scope', ',', 'newId', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'getLoadFuncSpec', '(', 'ExpressionOperator', 'exOp', ')', 'throws', 'FrontendException', '{']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'fs', '=', '(', '(', 'ExpressionOperator', ')', 'exOp', ')', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '=', '=', 'fs', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'canonicalMap', '=', 'fs', '.', 'getCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'LogicalOperator', ',', 'String', '>', 'reverseCanonicalMap', '=', 'fs', '.', 'getReverseCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'String', ',', 'FuncSpec', '>', 'loadFuncSpecMap', '=', 'new', 'MultiMap', '<', 'String', ',', 'FuncSpec', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'canonicalMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'parentCanonicalName', ':', 'canonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'exOp', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'reverseCanonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'parentCanonicalName', ':', 'reverseCanonicalMap', '.', 'get', '(', 'op', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'op', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'lfString', '=', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'loadFuncSpecMap', '.', 'get', '(', 'lfString', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1065', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Found', 'more', 'than', 'one', 'load', 'function', 'to', 'use', ':', '""', '+', 'loadFuncSpecMap', '.', 'keySet', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'getLoadFuncSpec', '(', 'LogicalOperator', 'op', ',', 'String', 'parentCanonicalName', ')', 'throws', 'FrontendException', '{']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'String', ',', 'FuncSpec', '>', 'loadFuncSpecMap', '=', 'new', 'MultiMap', '<', 'String', ',', 'FuncSpec', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'op', 'instanceof', 'ExpressionOperator', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'op', 'instanceof', 'LOUserFunc', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['Schema', '.', 'FieldSchema', 'fs', '=', '(', '(', 'ExpressionOperator', ')', 'op', ')', '.', 'getFieldSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'canonicalMap', '=', 'fs', '.', 'getCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'LogicalOperator', ',', 'String', '>', 'reverseCanonicalMap', '=', 'fs', '.', 'getReverseCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'canonicalMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'canonicalName', ':', 'canonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'fs', ',', 'canonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'lop', ':', 'reverseCanonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'canonicalName', ':', 'reverseCanonicalMap', '.', 'get', '(', 'lop', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'fs', ',', 'canonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'op', 'instanceof', 'LOLoad', ')', '{']",0
TypeCheckingVisitor.java,"['return', '(', '(', 'LOLoad', ')', 'op', ')', '.', 'getInputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'op', 'instanceof', 'LOStream', ')', '{']",0
TypeCheckingVisitor.java,"['StreamingCommand', 'command', '=', '(', '(', 'LOStream', ')', 'op', ')', '.', 'getStreamingCommand', '(', ')', ';']",0
TypeCheckingVisitor.java,"['HandleSpec', 'streamOutputSpec', '=', 'command', '.', 'getOutputSpec', '(', ')', ';']",0
TypeCheckingVisitor.java,"['FuncSpec', 'streamLoaderSpec', '=', 'new', 'FuncSpec', '(', 'streamOutputSpec', '.', 'getSpec', '(', ')', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'streamLoaderSpec', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', '(', 'op', 'instanceof', 'LOFilter', ')']",0
TypeCheckingVisitor.java,"['|', '|', '(', 'op', 'instanceof', 'LODistinct', ')']",0
TypeCheckingVisitor.java,"['|', '|', '(', 'op', 'instanceof', 'LOSort', ')']",0
TypeCheckingVisitor.java,"['|', '|', '(', 'op', 'instanceof', 'LOSplit', ')']",0
TypeCheckingVisitor.java,"['|', '|', '(', 'op', 'instanceof', 'LOSplitOutput', ')']",0
TypeCheckingVisitor.java,"['|', '|', '(', 'op', 'instanceof', 'LOLimit', ')', ')', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'getLoadFuncSpec', '(', 'lp', '.', 'getPredecessors', '(', 'op', ')', '.', 'get', '(', '0', ')', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['Schema', 's', '=', 'op', '.', 'getSchema', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 's', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'fs', ':', 's', '.', 'getFields', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'parentCanonicalName', '&', '&', '(', 'parentCanonicalName', '.', 'equals', '(', 'fs', '.', 'canonicalName', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'fs', '.', 'getCanonicalMap', '(', ')', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'canonicalName', ':', 'fs', '.', 'getCanonicalMap', '(', ')', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'fs', ',', 'canonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'fs', ',', 'null', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', 'if', '(', 'null', '=', '=', 'parentCanonicalName', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'fs', ',', 'null', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['LogicalPlan', 'lp', '=', 'op', '.', 'getPlan', '(', ')', ';']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'pred', ':', 'lp', '.', 'getPredecessors', '(', 'op', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'pred', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'lfString', '=', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'loadFuncSpecMap', '.', 'get', '(', 'lfString', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1065', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Found', 'more', 'than', 'one', 'load', 'function', 'to', 'use', ':', '""', '+', 'loadFuncSpecMap', '.', 'keySet', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCheckingVisitor.java,"['private', 'FuncSpec', 'getLoadFuncSpec', '(', 'Schema', '.', 'FieldSchema', 'fs', ',', 'String', 'parentCanonicalName', ')', 'throws', 'FrontendException', '{']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '=', '=', 'fs', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'canonicalMap', '=', 'fs', '.', 'getCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'LogicalOperator', ',', 'String', '>', 'reverseCanonicalMap', '=', 'fs', '.', 'getReverseCanonicalMap', '(', ')', ';']",0
TypeCheckingVisitor.java,"['MultiMap', '<', 'String', ',', 'FuncSpec', '>', 'loadFuncSpecMap', '=', 'new', 'MultiMap', '<', 'String', ',', 'FuncSpec', '>', '(', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'canonicalMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '>', '0', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'canonicalName', ':', 'canonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'null', '=', '=', 'parentCanonicalName', ')', '|', '|', '(', 'parentCanonicalName', '.', 'equals', '(', 'canonicalName', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'canonicalMap', '.', 'get', '(', 'canonicalName', ')', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['}', 'else', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'LogicalOperator', 'op', ':', 'reverseCanonicalMap', '.', 'keySet', '(', ')', ')', '{']",0
TypeCheckingVisitor.java,"['for', '(', 'String', 'canonicalName', ':', 'reverseCanonicalMap', '.', 'get', '(', 'op', ')', ')', '{']",0
TypeCheckingVisitor.java,"['if', '(', '(', 'null', '=', '=', 'parentCanonicalName', ')', '|', '|', '(', 'parentCanonicalName', '.', 'equals', '(', 'canonicalName', ')', ')', ')', '{']",0
TypeCheckingVisitor.java,"['FuncSpec', 'lfSpec', '=', 'getLoadFuncSpec', '(', 'op', ',', 'parentCanonicalName', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'null', '!', '=', 'lfSpec', ')', 'loadFuncSpecMap', '.', 'put', '(', 'lfSpec', '.', 'getClassName', '(', ')', ',', 'lfSpec', ')', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
TypeCheckingVisitor.java,"['return', 'null', ';']",0
TypeCheckingVisitor.java,"['if', '(', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
TypeCheckingVisitor.java,"['String', 'lfString', '=', 'loadFuncSpecMap', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['return', 'loadFuncSpecMap', '.', 'get', '(', 'lfString', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';']",0
TypeCheckingVisitor.java,"['int', 'errCode', '=', '1065', ';']",0
TypeCheckingVisitor.java,"['String', 'msg', '=', '""', 'Found', 'more', 'than', 'one', 'load', 'function', 'to', 'use', ':', '""', '+', 'loadFuncSpecMap', '.', 'keySet', '(', ')', ';']",0
TypeCheckingVisitor.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
LOGreaterThanEqual.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOGreaterThanEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOGreaterThanEqual.java,"['public', 'class', 'LOGreaterThanEqual', 'extends', 'BinaryExpressionOperator', '{']",0
LOGreaterThanEqual.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOGreaterThanEqual.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOGreaterThanEqual', '.', 'class', ')', ';']",0
LOGreaterThanEqual.java,"['/', '*', '*']",1
LOGreaterThanEqual.java,"['public', 'LOGreaterThanEqual', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOGreaterThanEqual.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOGreaterThanEqual.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOGreaterThanEqual.java,"['return', 'mSchema', ';']",0
LOGreaterThanEqual.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOGreaterThanEqual.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOGreaterThanEqual.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOGreaterThanEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOGreaterThanEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOGreaterThanEqual.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOGreaterThanEqual.java,"['return', 'mFieldSchema', ';']",0
LOGreaterThanEqual.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOGreaterThanEqual.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOGreaterThanEqual.java,"['public', 'String', 'name', '(', ')', '{']",0
LOGreaterThanEqual.java,"['return', '""', 'GreaterThanEqual', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
Main.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
Main.java,"['import', 'java', '.', 'io', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'util', '.', 'jar', '.', '*', ';']",0
Main.java,"['import', 'java', '.', 'text', '.', 'ParseException', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
Main.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
Main.java,"['import', 'jline', '.', 'History', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'Level', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'log4j', '.', 'PropertyConfigurator', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'JarManager', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'cmdline', '.', 'CmdLineParser', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'timer', '.', 'PerformanceTimerFactory', ';']",0
Main.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
Main.java,"['public', 'class', 'Main']",0
Main.java,"['private', 'final', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'LOG4J_CONF', '=', '""', 'log4jconf', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'BRIEF', '=', '""', 'brief', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'DEBUG', '=', '""', 'debug', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'JAR', '=', '""', 'jar', '""', ';']",0
Main.java,"['private', 'static', 'final', 'String', 'VERBOSE', '=', '""', 'verbose', '""', ';']",0
Main.java,"['private', 'enum', 'ExecMode', '{', 'STRING', ',', 'FILE', ',', 'SHELL', ',', 'UNKNOWN', '}', ';']",0
Main.java,"['/', '*', '*']",0
Main.java,"['/', '*', '*']",0
Main.java,"['public', 'static', 'void', 'main', '(', 'String', 'args', '[', ']', ')']",0
Main.java,"['int', 'rc', '=', '1', ';']",0
Main.java,"['Properties', 'properties', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['PropertiesUtil', '.', 'loadPropertiesFromFile', '(', 'properties', ')', ';']",0
Main.java,"['boolean', 'verbose', '=', 'false', ';']",0
Main.java,"['boolean', 'gruntCalled', '=', 'false', ';']",0
Main.java,"['String', 'logFileName', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'pin', '=', 'null', ';']",0
Main.java,"['boolean', 'debug', '=', 'false', ';']",0
Main.java,"['boolean', 'dryrun', '=', 'false', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'params', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['HashSet', '<', 'String', '>', 'optimizerRules', '=', 'new', 'HashSet', '<', 'String', '>', '(', ')', ';']",0
Main.java,"['CmdLineParser', 'opts', '=', 'new', 'CmdLineParser', '(', 'args', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", '4', ""'"", ',', '""', 'log4jconf', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'b', ""'"", ',', '""', 'brief', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'c', ""'"", ',', '""', 'cluster', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'd', ""'"", ',', '""', 'debug', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'e', ""'"", ',', '""', 'execute', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'f', ""'"", ',', '""', 'file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'h', ""'"", ',', '""', 'help', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'i', ""'"", ',', '""', 'version', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'j', ""'"", ',', '""', 'jar', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'j', ""'"", ',', '""', 'jar', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'l', ""'"", ',', '""', 'logfile', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'l', ""'"", ',', '""', 'logfile', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'm', ""'"", ',', '""', 'param_file', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'o', ""'"", ',', '""', 'hod', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'o', ""'"", ',', '""', 'hod', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'p', ""'"", ',', '""', 'param', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'p', ""'"", ',', '""', 'param', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'OPTIONAL', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'r', ""'"", ',', '""', 'dryrun', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 't', ""'"", ',', '""', 'optimizer_off', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'v', ""'"", ',', '""', 'verbose', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'v', ""'"", ',', '""', 'verbose', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'w', ""'"", ',', '""', 'warning', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'x', ""'"", ',', '""', 'exectype', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'x', ""'"", ',', '""', 'exectype', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'REQUIRED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'F', ""'"", ',', '""', 'stop_on_failure', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['opts', '.', 'registerOpt', '(', ""'"", 'M', ""'"", ',', '""', 'no_multiquery', '""', ',', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', ')', ';']",0
Main.java,"['ExecMode', 'mode', '=', 'ExecMode', '.', 'UNKNOWN', ';']",0
Main.java,"['String', 'file', '=', 'null', ';']",0
Main.java,"['ExecType', 'execType', '=', 'ExecType', '.', 'MAPREDUCE', ';']",0
Main.java,"['String', 'execTypeString', '=', 'properties', '.', 'getProperty', '(', '""', 'exectype', '""', ')', ';']",0
Main.java,"['if', '(', 'execTypeString', '!', '=', 'null', '&', '&', 'execTypeString', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'execTypeString', ')', ';']",0
Main.java,"['String', 'cluster', '=', '""', 'local', '""', ';']",0
Main.java,"['String', 'clusterConfigured', '=', 'properties', '.', 'getProperty', '(', '""', 'cluster', '""', ')', ';']",0
Main.java,"['if', '(', 'clusterConfigured', '!', '=', 'null', '&', '&', 'clusterConfigured', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterConfigured', ';']",0
Main.java,"['/', '/', 'by', 'default', 'warning', 'aggregation', 'is', 'on']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['/', '/', 'by', 'default', 'multiquery', 'optimization', 'is', 'on']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['/', '/', 'by', 'default', 'we', 'keep', 'going', 'on', 'error', 'on', 'the', 'backend']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['char', 'opt', ';']",0
Main.java,"['while', '(', '(', 'opt', '=', 'opts', '.', 'getNextOpt', '(', ')', ')', '!', '=', 'CmdLineParser', '.', 'EndOfOpts', ')', '{']",0
Main.java,"['switch', '(', 'opt', ')', '{']",0
Main.java,"['case', ""'"", '4', ""'"", ':']",0
Main.java,"['String', 'log4jconf', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'LOG4J_CONF', ',', 'log4jconf', ')', ';']",0
Main.java,"['case', ""'"", 'b', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'BRIEF', ',', '""', 'true', '""', ')', ';']",0
Main.java,"['case', ""'"", 'c', ""'"", ':']",0
Main.java,"['/', '/', 'Needed', 'away', 'to', 'specify', 'the', 'cluster', 'to', 'run', 'the', 'MR', 'job', 'on']",0
Main.java,"['/', '/', 'Bug', '831708', '-', 'fixed']",0
Main.java,"['String', 'clusterParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'clusterParameter', '!', '=', 'null', '&', '&', 'clusterParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['cluster', '=', 'clusterParameter', ';']",0
Main.java,"['case', ""'"", 'd', ""'"", ':']",0
Main.java,"['String', 'logLevel', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logLevel', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'DEBUG', ',', 'logLevel', ')', ';']",0
Main.java,"['debug', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'e', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'STRING', ';']",0
Main.java,"['case', ""'"", 'f', ""'"", ':']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['file', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['case', ""'"", 'F', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['case', ""'"", 'h', ""'"", ':']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['case', ""'"", 'i', ""'"", ':']",0
Main.java,"['case', ""'"", 'i', ""'"", ':']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', 'getVersionString', '(', ')', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', 'getVersionString', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'j', ""'"", ':']",0
Main.java,"['String', 'jarsString', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'jarsString', '!', '=', 'null', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', 'JAR', ',', 'jarsString', ')', ';']",0
Main.java,"['case', ""'"", 'l', ""'"", ':']",0
Main.java,"['/', '/', 'call', 'to', 'method', 'that', 'validates', 'the', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'and', 'sets', 'up', 'the', 'file', 'to', 'store', 'the', 'client', 'side', 'log', 'file']",0
Main.java,"['String', 'logFileParameter', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['if', '(', 'logFileParameter', '!', '=', 'null', '&', '&', 'logFileParameter', '.', 'length', '(', ')', '>', '0', ')', '{']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileParameter', ',', 'null', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'null', ')', ';']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['case', ""'"", 'm', ""'"", ':']",0
Main.java,"['paramFiles', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'M', ""'"", ':']",0
Main.java,"['/', '/', 'turns', 'off', 'multiquery', 'optimization']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['case', ""'"", 'o', ""'"", ':']",0
Main.java,"['/', '/', 'TODO', 'sgroschupf', 'using', 'system', 'properties', 'is', 'always', 'a', 'very', 'bad', 'idea']",0
Main.java,"['String', 'gateway', '=', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['if', '(', 'gateway', '=', '=', 'null', '|', '|', 'gateway', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', '""', 'local', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'hod', '.', 'server', '""', ',', 'System', '.', 'getProperty', '(', '""', 'ssh', '.', 'gateway', '""', ')', ')', ';']",0
Main.java,"['case', ""'"", 'p', ""'"", ':']",0
Main.java,"['String', 'val', '=', 'opts', '.', 'getValStr', '(', ')', ';']",0
Main.java,"['params', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'r', ""'"", ':']",0
Main.java,"['/', '/', 'currently', 'only', 'used', 'for', 'parameter', 'substitution']",0
Main.java,"['/', '/', 'will', 'be', 'extended', 'in', 'the', 'future']",0
Main.java,"['dryrun', '=', 'true', ';']",0
Main.java,"['case', ""'"", 't', ""'"", ':']",0
Main.java,"['optimizerRules', '.', 'add', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['case', ""'"", 'v', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', 'VERBOSE', ',', '""', '""', '+', 'true', ')', ';']",0
Main.java,"['verbose', '=', 'true', ';']",0
Main.java,"['case', ""'"", 'w', ""'"", ':']",0
Main.java,"['properties', '.', 'setProperty', '(', '""', 'aggregate', '.', 'warning', '""', ',', '""', '""', '+', 'false', ')', ';']",0
Main.java,"['case', ""'"", 'x', ""'"", ':']",0
Main.java,"['execType', '=', 'PigServer', '.', 'parseExecType', '(', 'opts', '.', 'getValStr', '(', ')', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'ERROR', ':', 'Unrecognized', 'exectype', '.', '""', ',', 'e', ')', ';']",0
Main.java,"['default', ':', '{']",0
Main.java,"['Character', 'cc', '=', 'new', 'Character', '(', 'opt', ')', ';']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Unhandled', 'option', '""', '+', 'cc', '.', 'toString', '(', ')', ')', ';']",0
Main.java,"['/', '/', 'configure', 'logging']",0
Main.java,"['configureLog4J', '(', 'properties', ')', ';']",0
Main.java,"['/', '/', 'create', 'the', 'context', 'with', 'the', 'parameter']",0
Main.java,"['PigContext', 'pigContext', '=', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ';']",0
Main.java,"['if', '(', 'logFileName', '=', '=', 'null', ')', '{']",0
Main.java,"['if', '(', 'logFileName', '=', '=', 'null', ')', '{']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'null', ',', 'null', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['if', '(', 'optimizerRules', '.', 'size', '(', ')', '>', '0', ')', '{']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'optimizer', '.', 'rules', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'optimizerRules', ')', ')', ';']",0
Main.java,"['LogicalPlanBuilder', '.', 'classloader', '=', 'pigContext', '.', 'createCl', '(', 'null', ')', ';']",0
Main.java,"['/', '/', 'construct', 'the', 'parameter', 'substitution', 'preprocessor']",0
Main.java,"['Grunt', 'grunt', '=', 'null', ';']",0
Main.java,"['BufferedReader', 'in', ';']",0
Main.java,"['String', 'substFile', '=', 'null', ';']",0
Main.java,"['switch', '(', 'mode', ')', '{']",0
Main.java,"['case', 'FILE', ':', '{']",0
Main.java,"['/', '/', 'Run', ',', 'using', 'the', 'provided', 'file', 'as', 'a', 'pig', 'file']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'file', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'file', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'file', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'file', ')', '.', 'getName', '(', ')']",0
Main.java,"['if', '(', '!', 'debug', ')', '{']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', 'results', '[', ']', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['case', 'STRING', ':', '{']",0
Main.java,"['/', '/', 'Gather', 'up', 'all', 'the', 'remaining', 'arguments', 'into', 'a', 'string', 'and', 'pass', 'them', 'into']",0
Main.java,"['/', '/', 'grunt', '.']",0
Main.java,"['StringBuffer', 'sb', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'remainders', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Main.java,"['if', '(', 'i', '!', '=', '0', ')', 'sb', '.', 'append', '(', ""'"", ""'"", ')', ';']",0
Main.java,"['sb', '.', 'append', '(', 'remainders', '[', 'i', ']', ')', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'sb', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'in', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', 'results', '[', ']', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['/', '/', 'If', 'we', ""'"", 're', 'here', ',', 'we', 'don', ""'"", 't', 'know', 'yet', 'what', 'they', 'want', '.', 'They', 'may', 'have', 'just']",0
Main.java,"['/', '/', 'given', 'us', 'a', 'jar', 'to', 'execute', ',', 'they', 'might', 'have', 'given', 'us', 'a', 'pig', 'script', 'to']",0
Main.java,"['/', '/', 'execute', ',', 'or', 'they', 'might', 'have', 'given', 'us', 'a', 'dash', '(', 'or', 'nothing', ')', 'which', 'means', 'to']",0
Main.java,"['/', '/', 'run', 'grunt', 'interactive', '.']",0
Main.java,"['String', 'remainders', '[', ']', '=', 'opts', '.', 'getRemainingArgs', '(', ')', ';']",0
Main.java,"['if', '(', 'remainders', '=', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'Interactive']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'SHELL', ';']",0
Main.java,"['ConsoleReader', 'reader', '=', 'new', 'ConsoleReader', '(', 'System', '.', 'in', ',', 'new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
Main.java,"['reader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
Main.java,"['final', 'String', 'HISTORYFILE', '=', '""', '.', 'pig_history', '""', ';']",0
Main.java,"['String', 'historyFile', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'home', '""', ')', '+', 'File', '.', 'separator', '+', 'HISTORYFILE', ';']",0
Main.java,"['reader', '.', 'setHistory', '(', 'new', 'History', '(', 'new', 'File', '(', 'historyFile', ')', ')', ')', ';']",0
Main.java,"['ConsoleReaderInputStream', 'inputStream', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'inputStream', ')', ')', ',', 'pigContext', ')', ';']",0
Main.java,"['grunt', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['grunt', '.', 'run', '(', ')', ';']",0
Main.java,"['rc', '=', '0', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'They', 'have', 'a', 'pig', 'script', 'they', 'want', 'us', 'to', 'run', '.']",0
Main.java,"['if', '(', 'remainders', '.', 'length', '>', '1', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'You', 'can', 'only', 'run', 'one', 'pig', 'script', '""']",0
Main.java,"['+', '""', 'at', 'a', 'time', 'from', 'the', 'command', 'line', '.', '""', ')', ';']",0
Main.java,"['mode', '=', 'ExecMode', '.', 'FILE', ';']",0
Main.java,"['in', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'remainders', '[', '0', ']', ')', ')', ';']",0
Main.java,"['/', '/', 'run', 'parameter', 'substitution', 'preprocessor', 'first']",0
Main.java,"['substFile', '=', 'remainders', '[', '0', ']', '+', '""', '.', 'substituted', '""', ';']",0
Main.java,"['pin', '=', 'runParamPreprocessor', '(', 'in', ',', 'params', ',', 'paramFiles', ',', 'substFile', ',', 'debug', '|', '|', 'dryrun', ')', ';']",0
Main.java,"['if', '(', 'dryrun', ')', '{']",0
Main.java,"['log', '.', 'info', '(', '""', 'Dry', 'run', 'completed', '.', 'Substituted', 'pig', 'script', 'is', 'at', '""', '+', 'substFile', ')', ';']",0
Main.java,"['logFileName', '=', 'validateLogFile', '(', 'logFileName', ',', 'remainders', '[', '0', ']', ')', ';']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'pig', '.', 'logfile', '""', ',', 'logFileName', ')', ';']",0
Main.java,"['if', '(', '!', 'debug', ')', '{']",0
Main.java,"['new', 'File', '(', 'substFile', ')', '.', 'deleteOnExit', '(', ')', ';']",0
Main.java,"['/', '/', 'Set', 'job', 'name', 'based', 'on', 'name', 'of', 'the', 'script']",0
Main.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
Main.java,"['""', 'PigLatin', ':', '""', '+', 'new', 'File', '(', 'remainders', '[', '0', ']', ')', '.', 'getName', '(', ')']",0
Main.java,"['grunt', '=', 'new', 'Grunt', '(', 'pin', ',', 'pigContext', ')', ';']",0
Main.java,"['gruntCalled', '=', 'true', ';']",0
Main.java,"['int', '[', ']', 'results', '=', 'grunt', '.', 'exec', '(', ')', ';']",0
Main.java,"['rc', '=', 'getReturnCodeForStats', '(', 'results', ')', ';']",0
Main.java,"['/', '/', 'Per', 'Utkarsh', 'and', 'Chris', 'invocation', 'of', 'jar', 'file', 'via', 'pig', 'depricated', '.']",0
Main.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'NumberFormatException', 'e', ')', '{']",0
Main.java,"['usage', '(', ')', ';']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['}', 'catch', '(', 'PigException', 'pe', ')', '{']",0
Main.java,"['if', '(', 'pe', '.', 'retriable', '(', ')', ')', '{']",0
Main.java,"['rc', '=', '1', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'pe', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'catch', '(', 'Throwable', 'e', ')', '{']",0
Main.java,"['rc', '=', '2', ';']",0
Main.java,"['if', '(', '!', 'gruntCalled', ')', '{']",0
Main.java,"['LogUtils', '.', 'writeLog', '(', 'e', ',', 'logFileName', ',', 'log', ',', 'verbose', ')', ';']",0
Main.java,"['}', 'finally', '{']",0
Main.java,"['/', '/', 'clear', 'temp', 'files']",0
Main.java,"['FileLocalizer', '.', 'deleteTempFiles', '(', ')', ';']",0
Main.java,"['PerformanceTimerFactory', '.', 'getPerfTimerFactory', '(', ')', '.', 'dumpTimers', '(', ')', ';']",0
Main.java,"['System', '.', 'exit', '(', 'rc', ')', ';']",0
Main.java,"['private', 'static', 'int', 'getReturnCodeForStats', '(', 'int', '[', ']', 'stats', ')', '{']",0
Main.java,"['if', '(', 'stats', '[', '1', ']', '=', '=', '0', ')', '{']",0
Main.java,"['/', '/', 'no', 'failed', 'jobs']",0
Main.java,"['return', '0', ';']",0
Main.java,"['if', '(', 'stats', '[', '0', ']', '=', '=', '0', ')', '{']",0
Main.java,"['/', '/', 'no', 'succeeded', 'jobs']",0
Main.java,"['return', '2', ';']",0
Main.java,"['/', '/', 'some', 'jobs', 'have', 'failed']",0
Main.java,"['return', '3', ';']",0
Main.java,"['/', '/', 'TODO', 'jz', ':', 'log4j', '.', 'properties', 'should', 'be', 'used', 'instead']",0
Main.java,"['private', 'static', 'void', 'configureLog4J', '(', 'Properties', 'properties', ')', '{']",0
Main.java,"['/', '/', 'TODO', 'Add', 'a', 'file', 'appender', 'for', 'the', 'logs']",0
Main.java,"['/', '/', 'TODO', 'Need', 'to', 'create', 'a', 'property', 'in', 'the', 'properties', 'file', 'for', 'it', '.']",0
Main.java,"['/', '/', 'sgroschupf', ',', '25Feb2008', ':', 'this', 'method', 'will', 'be', 'obsolete', 'with', 'PIG', '-', '115', '.']",0
Main.java,"['String', 'log4jconf', '=', 'properties', '.', 'getProperty', '(', 'LOG4J_CONF', ')', ';']",0
Main.java,"['String', 'trueString', '=', '""', 'true', '""', ';']",0
Main.java,"['boolean', 'brief', '=', 'trueString', '.', 'equalsIgnoreCase', '(', 'properties', '.', 'getProperty', '(', 'BRIEF', ')', ')', ';']",0
Main.java,"['Level', 'logLevel', '=', 'Level', '.', 'INFO', ';']",0
Main.java,"['String', 'logLevelString', '=', 'properties', '.', 'getProperty', '(', 'DEBUG', ')', ';']",0
Main.java,"['if', '(', 'logLevelString', '!', '=', 'null', ')', '{']",0
Main.java,"['logLevel', '=', 'Level', '.', 'toLevel', '(', 'logLevelString', ',', 'Level', '.', 'INFO', ')', ';']",0
Main.java,"['if', '(', 'log4jconf', '!', '=', 'null', ')', '{']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'log4jconf', ')', ';']",0
Main.java,"['}', 'else', 'if', '(', '!', 'brief', ')', '{']",0
Main.java,"['/', '/', 'non', '-', 'brief', 'logging', '-', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'd', '[', '%', 't', ']', '%', '-', '5p', '%', 'c', '-', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'brief', 'logging', '-', 'no', 'timestamps']",0
Main.java,"['Properties', 'props', '=', 'new', 'Properties', '(', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'rootLogger', '""', ',', '""', 'INFO', ',', 'PIGCONSOLE', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'ConsoleAppender', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '""', ',']",0
Main.java,"['""', 'org', '.', 'apache', '.', 'log4j', '.', 'PatternLayout', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'layout', '.', 'ConversionPattern', '""', ',']",0
Main.java,"['""', '%', 'm', '%', 'n', '""', ')', ';']",0
Main.java,"['props', '.', 'setProperty', '(', '""', 'log4j', '.', 'appender', '.', 'PIGCONSOLE', '.', 'target', '""', ',']",0
Main.java,"['""', 'System', '.', 'err', '""', ')', ';']",0
Main.java,"['PropertyConfigurator', '.', 'configure', '(', 'props', ')', ';']",0
Main.java,"['/', '/', 'returns', 'the', 'stream', 'of', 'final', 'pig', 'script', 'to', 'be', 'passed', 'to', 'Grunt']",0
Main.java,"['private', 'static', 'BufferedReader', 'runParamPreprocessor', '(', 'BufferedReader', 'origPigScript', ',', 'ArrayList', '<', 'String', '>', 'params', ',']",0
Main.java,"['ArrayList', '<', 'String', '>', 'paramFiles', ',', 'String', 'scriptFile', ',', 'boolean', 'createFile', ')']",0
Main.java,"['throws', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', ',', 'IOException', '{']",0
Main.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
Main.java,"['String', '[', ']', 'type1', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['String', '[', ']', 'type2', '=', 'new', 'String', '[', '1', ']', ';']",0
Main.java,"['if', '(', 'createFile', ')', '{']",0
Main.java,"['BufferedWriter', 'fw', '=', 'new', 'BufferedWriter', '(', 'new', 'FileWriter', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'fw', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'scriptFile', ')', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
Main.java,"['psp', '.', 'genSubstitutedFile', '(', 'origPigScript', ',', 'writer', ',', 'params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'type1', ')', ':', 'null', ',']",0
Main.java,"['paramFiles', '.', 'size', '(', ')', '>', '0', '?', 'paramFiles', '.', 'toArray', '(', 'type2', ')', ':', 'null', ')', ';']",0
Main.java,"['return', 'new', 'BufferedReader', '(', 'new', 'StringReader', '(', 'writer', '.', 'toString', '(', ')', ')', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getVersionString', '(', ')', '{']",0
Main.java,"['String', 'findContainingJar', '=', 'JarManager', '.', 'findContainingJar', '(', 'Main', '.', 'class', ')', ';']",0
Main.java,"['StringBuffer', 'buffer', '=', 'new', 'StringBuffer', '(', ')', ';']",0
Main.java,"['JarFile', 'jar', '=', 'new', 'JarFile', '(', 'findContainingJar', ')', ';']",0
Main.java,"['final', 'Manifest', 'manifest', '=', 'jar', '.', 'getManifest', '(', ')', ';']",0
Main.java,"['final', 'Map', '<', 'String', ',', 'Attributes', '>', 'attrs', '=', 'manifest', '.', 'getEntries', '(', ')', ';']",0
Main.java,"['Attributes', 'attr', '=', 'attrs', '.', 'get', '(', '""', 'org', '/', 'apache', '/', 'pig', '""', ')', ';']",0
Main.java,"['String', 'version', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Implementation', '-', 'Version', '""', ')', ';']",0
Main.java,"['String', 'svnRevision', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Svn', '-', 'Revision', '""', ')', ';']",0
Main.java,"['String', 'buildTime', '=', '(', 'String', ')', 'attr', '.', 'getValue', '(', '""', 'Build', '-', 'TimeStamp', '""', ')', ';']",0
Main.java,"['/', '/', 'we', 'use', 'a', 'version', 'string', 'similar', 'to', 'svn']",0
Main.java,"['/', '/', 'svn', ',', 'version', '1', '.', '4', '.', '4', '(', 'r25188', ')']",0
Main.java,"['/', '/', 'compiled', 'Sep', '23', '2007', ',', '22', ':', '32', ':', '34']",0
Main.java,"['return', '""', 'Apache', 'Pig', 'version', '""', '+', 'version', '+', '""', '(', 'r', '""', '+', 'svnRevision', '+', '""', ')', '\\', 'ncompiled', '""', '+', 'buildTime', ';']",0
Main.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'unable', 'to', 'read', 'pigs', 'manifest', 'file', '""', ',', 'e', ')', ';']",0
Main.java,"['public', 'static', 'void', 'usage', '(', ')']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '\\', 'n', '""', '+', 'getVersionString', '(', ')', '+', '""', '\\', 'n', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'USAGE', ':', 'Pig', '[', 'options', ']', '[', '-', ']', ':', 'Run', 'interactively', 'in', 'grunt', 'shell', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '-', 'e', '[', 'xecute', ']', 'cmd', '[', 'cmd', '.', '.', '.', ']', ':', 'Run', 'cmd', '(', 's', ')', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Pig', '[', 'options', ']', '[', '-', 'f', '[', 'ile', ']', ']', 'file', ':', 'Run', 'cmds', 'found', 'in', 'file', '.', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', 'options', 'include', ':', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', '4', ',', '-', 'log4jconf', 'log4j', 'configuration', 'file', ',', 'overrides', 'log', 'conf', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'b', ',', '-', 'brief', 'brief', 'logging', '(', 'no', 'timestamps', ')', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'c', ',', '-', 'cluster', 'clustername', ',', 'kryptonite', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'd', ',', '-', 'debug', 'debug', 'level', ',', 'INFO', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'e', ',', '-', 'execute', 'commands', 'to', 'execute', '(', 'within', 'quotes', ')', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'f', ',', '-', 'file', 'path', 'to', 'the', 'script', 'to', 'execute', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'h', ',', '-', 'help', 'display', 'this', 'message', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'i', ',', '-', 'version', 'display', 'version', 'information', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'j', ',', '-', 'jar', 'jarfile', 'load', 'jarfile', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'l', ',', '-', 'logfile', 'path', 'to', 'client', 'side', 'log', 'file', ';', 'current', 'working', 'directory', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'm', ',', '-', 'param_file', 'path', 'to', 'the', 'parameter', 'file', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'o', ',', '-', 'hod', 'read', 'hod', 'server', 'from', 'system', 'property', 'ssh', '.', 'gateway', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'p', ',', '-', 'param', 'key', 'value', 'pair', 'of', 'the', 'form', 'param', '=', 'val', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'r', ',', '-', 'dryrun', 'CmdLineParser', '.', 'ValueExpected', '.', 'NOT_ACCEPTED', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 't', ',', '-', 'optimizer_off', 'optimizer', 'rule', 'name', ',', 'turn', 'optimizer', 'off', 'for', 'this', 'rule', ';', 'use', 'all', 'to', 'turn', 'all', 'rules', 'off', ',', 'optimizer', 'is', 'turned', 'on', 'by', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'v', ',', '-', 'verbose', 'print', 'all', 'error', 'messages', 'to', 'screen', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'w', ',', '-', 'warning', 'turn', 'warning', 'on', ';', 'also', 'turns', 'warning', 'aggregation', 'off', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'x', ',', '-', 'exectype', 'local', '|', 'mapreduce', ',', 'mapreduce', 'is', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'F', ',', '-', 'stop_on_failure', 'aborts', 'execution', 'on', 'the', 'first', 'failed', 'job', ';', 'off', 'by', 'default', '""', ')', ';']",0
Main.java,"['System', '.', 'out', '.', 'println', '(', '""', '-', 'M', ',', '-', 'no_multiquery', 'turn', 'multiquery', 'optimization', 'off', ';', 'Multiquery', 'is', 'on', 'by', 'default', '""', ')', ';']",0
Main.java,"['private', 'static', 'String', 'validateLogFile', '(', 'String', 'logFileName', ',', 'String', 'scriptName', ')', '{']",0
Main.java,"['String', 'strippedDownScriptName', '=', 'null', ';']",0
Main.java,"['if', '(', 'scriptName', '!', '=', 'null', ')', '{']",0
Main.java,"['File', 'scriptFile', '=', 'new', 'File', '(', 'scriptName', ')', ';']",0
Main.java,"['if', '(', '!', 'scriptFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['String', 'scriptFileAbsPath', ';']",0
Main.java,"['scriptFileAbsPath', '=', 'scriptFile', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'script', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['strippedDownScriptName', '=', 'getFileFromCanonicalPath', '(', 'scriptFileAbsPath', ')', ';']",0
Main.java,"['String', 'defaultLogFileName', '=', '(', 'strippedDownScriptName', '=', '=', 'null', '?', '""', 'pig_', '""', ':', 'strippedDownScriptName', ')', '+', 'new', 'Date', '(', ')', '.', 'getTime', '(', ')', '+', '""', '.', 'log', '""', ';']",0
Main.java,"['File', 'logFile', ';']",0
Main.java,"['if', '(', 'logFileName', '!', '=', 'null', ')', '{']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'logFileName', ')', ';']",0
Main.java,"['/', '/', 'Check', 'if', 'the', 'file', 'name', 'is', 'a', 'directory']",0
Main.java,"['/', '/', 'append', 'the', 'default', 'file', 'name', 'to', 'the', 'file']",0
Main.java,"['if', '(', 'logFile', '.', 'isDirectory', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'logFile', '.', 'getCanonicalPath', '(', ')', '+', 'File', '.', 'separator', '+', 'defaultLogFileName', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFileName', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'we', 'have', 'a', 'relative', 'path', 'or', 'an', 'absolute', 'path', 'to', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'check', 'if', 'we', 'can', 'write', 'to', 'the', 'directory', 'where', 'this', 'file', 'is', '/', 'will', 'be', 'stored']",0
Main.java,"['if', '(', 'logFile', '.', 'exists', '(', ')', ')', '{']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['/', '/', 'do', 'not', 'have', 'write', 'permissions', 'for', 'the', 'log', 'file']",0
Main.java,"['/', '/', 'bail', 'out', 'with', 'an', 'error', 'message']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Cannot', 'write', 'to', 'file', ':', '""', '+', 'logFileName', '+', '""', '.', 'Need', 'write', 'permission', '.', '""', ')', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['logFile', '=', 'logFile', '.', 'getParentFile', '(', ')', ';']",0
Main.java,"['if', '(', 'logFile', '!', '=', 'null', ')', '{']",0
Main.java,"['/', '/', 'if', 'the', 'directory', 'is', 'writable', 'we', 'are', 'good', 'to', 'go']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['logFileName', '=', 'new', 'File', '(', 'logFileName', ')', '.', 'getCanonicalPath', '(', ')', ';']",0
Main.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Could', 'not', 'compute', 'canonical', 'path', 'to', 'the', 'log', 'file', '""', '+', 'ioe', '.', 'getMessage', '(', ')', ')', ';']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['}', 'else', '{']",0
Main.java,"['throw', 'new', 'AssertionError', '(', '""', 'Need', 'write', 'permission', 'in', 'the', 'directory', ':', '""', '+', 'logFile', '+', '""', 'to', 'create', 'log', 'file', '.', '""', ')', ';']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFile', '!', '=', 'null', 'else', 'is', 'the', 'default', 'in', 'fall', 'through']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'exists', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'else', 'part', 'of', 'logFile', '.', 'isDirectory', '(', ')']",0
Main.java,"['}', '/', '/', 'end', 'if', 'logFileName', '!', '=', 'null']",0
Main.java,"['/', '/', 'file', 'name', 'is', 'null', 'or', 'its', 'in', 'the', 'current', 'working', 'directory']",0
Main.java,"['/', '/', 'revert', 'to', 'the', 'current', 'working', 'directory']",0
Main.java,"['String', 'currDir', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'dir', '""', ')', ';']",0
Main.java,"['logFile', '=', 'new', 'File', '(', 'currDir', ')', ';']",0
Main.java,"['logFileName', '=', 'currDir', '+', 'File', '.', 'separator', '+', '(', 'logFileName', '=', '=', 'null', '?', 'defaultLogFileName', ':', 'logFileName', ')', ';']",0
Main.java,"['if', '(', 'logFile', '.', 'canWrite', '(', ')', ')', '{']",0
Main.java,"['return', 'logFileName', ';']",0
Main.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Cannot', 'write', 'to', 'log', 'file', ':', '""', '+', 'logFileName', ')', ';']",0
Main.java,"['private', 'static', 'String', 'getFileFromCanonicalPath', '(', 'String', 'canonicalPath', ')', '{']",0
Main.java,"['return', 'canonicalPath', '.', 'substring', '(', 'canonicalPath', '.', 'lastIndexOf', '(', 'File', '.', 'separator', ')', ')', ';']",0
DataReaderWriter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataInput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'DataOutput', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
DataReaderWriter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
DataReaderWriter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
DataReaderWriter.java,"['/', '*', '*']",0
DataReaderWriter.java,"['public', 'class', 'DataReaderWriter', '{']",0
DataReaderWriter.java,"['private', 'static', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['private', 'static', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
DataReaderWriter.java,"['static', 'final', 'int', 'UNSIGNED_SHORT_MAX', '=', '65535', ';']",0
DataReaderWriter.java,"['static', 'final', 'String', 'UTF8', '=', '""', 'UTF', '-', '8', '""', ';']",0
DataReaderWriter.java,"['public', 'static', 'Tuple', 'bytesToTuple', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['/', '/', 'Don', ""'"", 't', 'use', 'Tuple', '.', 'readFields', ',', 'because', 'it', 'requires', 'you', 'to']",0
DataReaderWriter.java,"['/', '/', 'Don', ""'"", 't', 'use', 'Tuple', '.', 'readFields', ',', 'because', 'it', 'requires', 'you', 'to']",0
DataReaderWriter.java,"['/', '/', 'create', 'a', 'tuple', 'with', 'no', 'size', 'and', 'then', 'append', 'fields', '.']",0
DataReaderWriter.java,"['/', '/', 'create', 'a', 'tuple', 'with', 'no', 'size', 'and', 'then', 'append', 'fields', '.']",0
DataReaderWriter.java,"['/', '/', 'That', ""'"", 's', 'less', 'efficient', 'than', 'allocating', 'the', 'tuple', 'size', 'up']",0
DataReaderWriter.java,"['/', '/', 'That', ""'"", 's', 'less', 'efficient', 'than', 'allocating', 'the', 'tuple', 'size', 'up']",0
DataReaderWriter.java,"['/', '/', 'front', 'and', 'then', 'filling', 'in', 'the', 'spaces', '.']",0
DataReaderWriter.java,"['/', '/', 'front', 'and', 'then', 'filling', 'in', 'the', 'spaces', '.']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'size', '.']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'size', '.']",0
DataReaderWriter.java,"['int', 'sz', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['int', 'sz', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['/', '/', 'if', 'sz', '=', '=', '0', ',', 'we', 'construct', 'an', '""', 'empty', '""', 'tuple', '-']",0
DataReaderWriter.java,"['/', '/', 'if', 'sz', '=', '=', '0', ',', 'we', 'construct', 'an', '""', 'empty', '""', 'tuple', '-']",0
DataReaderWriter.java,"['/', '/', 'presumably', 'the', 'writer', 'wrote', 'an', 'empty', 'tuple', '!']",0
DataReaderWriter.java,"['/', '/', 'presumably', 'the', 'writer', 'wrote', 'an', 'empty', 'tuple', '!']",0
DataReaderWriter.java,"['if', '(', 'sz', '<', '0', ')', '{']",0
DataReaderWriter.java,"['if', '(', 'sz', '<', '0', ')', '{']",0
DataReaderWriter.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'size', '""', '+', 'sz', '+', '""', 'for', 'a', 'tuple', '""', ')', ';']",0
DataReaderWriter.java,"['Tuple', 't', '=', 'mTupleFactory', '.', 'newTuple', '(', 'sz', ')', ';']",0
DataReaderWriter.java,"['Tuple', 't', '=', 'mTupleFactory', '.', 'newTuple', '(', 'sz', ')', ';']",0
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sz', ';', 'i', '+', '+', ')', '{']",0
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'sz', ';', 'i', '+', '+', ')', '{']",0
DataReaderWriter.java,"['t', '.', 'set', '(', 'i', ',', 'readDatum', '(', 'in', ')', ')', ';']",0
DataReaderWriter.java,"['t', '.', 'set', '(', 'i', ',', 'readDatum', '(', 'in', ')', ')', ';']",0
DataReaderWriter.java,"['return', 't', ';']",0
DataReaderWriter.java,"['return', 't', ';']",0
DataReaderWriter.java,"['public', 'static', 'DataBag', 'bytesToBag', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['DataBag', 'bag', '=', 'mBagFactory', '.', 'newDefaultBag', '(', ')', ';']",0
DataReaderWriter.java,"['DataBag', 'bag', '=', 'mBagFactory', '.', 'newDefaultBag', '(', ')', ';']",0
DataReaderWriter.java,"['bag', '.', 'readFields', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['bag', '.', 'readFields', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['return', 'bag', ';']",0
DataReaderWriter.java,"['return', 'bag', ';']",0
DataReaderWriter.java,"['public', 'static', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', 'new', 'HashMap', '<', 'Object', ',', 'Object', '>', '(', 'size', ')', ';']",0
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', 'new', 'HashMap', '<', 'Object', ',', 'Object', '>', '(', 'size', ')', ';']",0
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'size', ';', 'i', '+', '+', ')', '{']",0
DataReaderWriter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'size', ';', 'i', '+', '+', ')', '{']",0
DataReaderWriter.java,"['Object', 'key', '=', 'readDatum', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['Object', 'key', '=', 'readDatum', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['m', '.', 'put', '(', 'key', ',', 'readDatum', '(', 'in', ')', ')', ';']",0
DataReaderWriter.java,"['m', '.', 'put', '(', 'key', ',', 'readDatum', '(', 'in', ')', ')', ';']",0
DataReaderWriter.java,"['return', 'm', ';']",0
DataReaderWriter.java,"['return', 'm', ';']",0
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readUnsignedShort', '(', ')', ';']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readUnsignedShort', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'String', 'bytesToBigCharArray', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'String', '(', 'ba', ',', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'Object', 'readDatum', '(', 'DataInput', 'in', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'b', '=', 'in', '.', 'readByte', '(', ')', ';']",0
DataReaderWriter.java,"['return', 'readDatum', '(', 'in', ',', 'b', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'Object', 'readDatum', '(', 'DataInput', 'in', ',', 'byte', 'type', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
DataReaderWriter.java,"['switch', '(', 'type', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['return', 'bytesToTuple', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['return', 'bytesToBag', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':']",0
DataReaderWriter.java,"['return', 'bytesToMap', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['return', 'new', 'Integer', '(', 'in', '.', 'readInt', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['return', 'new', 'Long', '(', 'in', '.', 'readLong', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['return', 'new', 'Float', '(', 'in', '.', 'readFloat', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Double', '(', 'in', '.', 'readDouble', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['return', 'new', 'Boolean', '(', 'in', '.', 'readBoolean', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['return', 'new', 'Byte', '(', 'in', '.', 'readByte', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['int', 'size', '=', 'in', '.', 'readInt', '(', ')', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'ba', '=', 'new', 'byte', '[', 'size', ']', ';']",0
DataReaderWriter.java,"['in', '.', 'readFully', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['return', 'new', 'DataByteArray', '(', 'ba', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BIGCHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToBigCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
DataReaderWriter.java,"['return', 'bytesToCharArray', '(', 'in', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['return', 'null', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'type', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
DataReaderWriter.java,"['public', 'static', 'void', 'writeDatum', '(']",0
DataReaderWriter.java,"['DataOutput', 'out', ',']",0
DataReaderWriter.java,"['Object', 'val', ')', 'throws', 'IOException', '{']",0
DataReaderWriter.java,"['/', '/', 'Read', 'the', 'data', 'type']",0
DataReaderWriter.java,"['byte', 'type', '=', 'DataType', '.', 'findType', '(', 'val', ')', ';']",0
DataReaderWriter.java,"['switch', '(', 'type', ')', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
DataReaderWriter.java,"['/', '/', 'Because', 'tuples', 'are', 'written', 'directly', 'by', 'hadoop', ',', 'the']",0
DataReaderWriter.java,"['/', '/', 'tuple', ""'"", 's', 'write', 'method', 'needs', 'to', 'write', 'the', 'indicator', 'byte', '.']",0
DataReaderWriter.java,"['/', '/', 'So', 'don', ""'"", 't', 'write', 'the', 'indicator', 'byte', 'here', 'as', 'it', 'is', 'for']",0
DataReaderWriter.java,"['/', '/', 'everyone', 'else', '.']",0
DataReaderWriter.java,"['(', '(', 'Tuple', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BAG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BAG', ')', ';']",0
DataReaderWriter.java,"['(', '(', 'DataBag', ')', 'val', ')', '.', 'write', '(', 'out', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'MAP', ':', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'MAP', ')', ';']",0
DataReaderWriter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'm', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'm', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['Iterator', '<', 'Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', '>', 'i', '=']",0
DataReaderWriter.java,"['m', '.', 'entrySet', '(', ')', '.', 'iterator', '(', ')', ';']",0
DataReaderWriter.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', '{']",0
DataReaderWriter.java,"['Map', '.', 'Entry', '<', 'Object', ',', 'Object', '>', 'entry', '=', 'i', '.', 'next', '(', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getKey', '(', ')', ')', ';']",0
DataReaderWriter.java,"['writeDatum', '(', 'out', ',', 'entry', '.', 'getValue', '(', ')', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'INTEGER', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', '(', 'Integer', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'LONG', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'LONG', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeLong', '(', '(', 'Long', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'FLOAT', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeFloat', '(', '(', 'Float', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'DOUBLE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeDouble', '(', '(', 'Double', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BOOLEAN', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BOOLEAN', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeBoolean', '(', '(', 'Boolean', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTE', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTE', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', '(', 'Byte', ')', 'val', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'BYTEARRAY', ':', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
DataReaderWriter.java,"['DataByteArray', 'bytes', '=', '(', 'DataByteArray', ')', 'val', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'bytes', '.', 'size', '(', ')', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'bytes', '.', 'mData', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':', '{']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'CHARARRAY', ':', '{']",0
DataReaderWriter.java,"['String', 's', '=', '(', 'String', ')', 'val', ';']",0
DataReaderWriter.java,"['byte', '[', ']', 'utfBytes', '=', 's', '.', 'getBytes', '(', 'DataReaderWriter', '.', 'UTF8', ')', ';']",0
DataReaderWriter.java,"['int', 'length', '=', 'utfBytes', '.', 'length', ';']",0
DataReaderWriter.java,"['if', '(', 'length', '<', 'DataReaderWriter', '.', 'UNSIGNED_SHORT_MAX', ')', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'CHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeShort', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['}', 'else', '{']",0
DataReaderWriter.java,"['}', 'else', '{']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'BIGCHARARRAY', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'writeInt', '(', 'length', ')', ';']",0
DataReaderWriter.java,"['out', '.', 'write', '(', 'utfBytes', ')', ';']",0
DataReaderWriter.java,"['case', 'DataType', '.', 'NULL', ':']",0
DataReaderWriter.java,"['out', '.', 'writeByte', '(', 'DataType', '.', 'NULL', ')', ';']",0
DataReaderWriter.java,"['throw', 'new', 'RuntimeException', '(', '""', 'Unexpected', 'data', 'type', '""', '+', 'type', '+']",0
DataReaderWriter.java,"['""', 'found', 'in', 'stream', '.', '""', ')', ';']",0
MapReduceLauncher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
MapReduceLauncher.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Counters', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MRCompiler', '.', 'LastInputStreamingOptimizer', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRPrinter', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'DotMRPrinter', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MRStreamHandler', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'POPackageAnnotator', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POJoinPackage', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'Message', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ConfigurationValidator', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
MapReduceLauncher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['public', 'class', 'MapReduceLauncher', 'extends', 'Launcher', '{']",0
MapReduceLauncher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'MapReduceLauncher', '.', 'class', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'used', 'to', 'track', 'the', 'exception', 'thrown', 'by', 'the', 'job', 'control', 'which', 'is', 'run', 'in', 'a', 'separate', 'thread']",0
MapReduceLauncher.java,"['private', 'Exception', 'jobControlException', '=', 'null', ';']",0
MapReduceLauncher.java,"['private', 'boolean', 'aggregateWarning', '=', 'false', ';']",0
MapReduceLauncher.java,"['private', 'Map', '<', 'FileSpec', ',', 'Exception', '>', 'failureMap', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['public', 'Exception', 'getError', '(', 'FileSpec', 'spec', ')', '{']",0
MapReduceLauncher.java,"['return', 'failureMap', '.', 'get', '(', 'spec', ')', ';']",0
MapReduceLauncher.java,"['public', 'void', 'reset', '(', ')', '{']",0
MapReduceLauncher.java,"['failureMap', '=', 'new', 'HashMap', '<', 'FileSpec', ',', 'Exception', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['super', '.', 'reset', '(', ')', ';']",0
MapReduceLauncher.java,"['public', 'PigStats', 'launchPig', '(', 'PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['String', 'grpName', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',']",0
MapReduceLauncher.java,"['long', 'sleepTime', '=', '500', ';']",0
MapReduceLauncher.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['PigStats', 'stats', '=', 'new', 'PigStats', '(', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setMROperatorPlan', '(', 'mrp', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setExecType', '(', 'pc', '.', 'getExecType', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setPhysicalPlan', '(', 'php', ')', ';']",0
MapReduceLauncher.java,"['ExecutionEngine', 'exe', '=', 'pc', '.', 'getExecutionEngine', '(', ')', ';']",0
MapReduceLauncher.java,"['ConfigurationValidator', '.', 'validatePigProperties', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['Configuration', 'conf', '=', 'ConfigurationUtil', '.', 'toConfiguration', '(', 'exe', '.', 'getConfiguration', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['JobClient', 'jobClient', '=', '(', '(', 'HExecutionEngine', ')', 'exe', ')', '.', 'getJobClient', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControlCompiler', 'jcc', '=', 'new', 'JobControlCompiler', '(', 'pc', ',', 'conf', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'failedJobs', '=', 'new', 'LinkedList', '<', 'Job', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'succJobs', '=', 'new', 'LinkedList', '<', 'Job', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['JobControl', 'jc', ';']",0
MapReduceLauncher.java,"['int', 'totalMRJobs', '=', 'mrp', '.', 'size', '(', ')', ';']",0
MapReduceLauncher.java,"['int', 'numMRJobsCompl', '=', '0', ';']",0
MapReduceLauncher.java,"['int', 'numMRJobsCurrent', '=', '0', ';']",0
MapReduceLauncher.java,"['double', 'lastProg', '=', '-', '1', ';']",0
MapReduceLauncher.java,"['/', '/', 'create', 'the', 'exception', 'handler', 'for', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['/', '/', 'and', 'register', 'the', 'handler', 'with', 'the', 'job', 'control', 'thread']",0
MapReduceLauncher.java,"['JobControlThreadExceptionHandler', 'jctExceptionHandler', '=', 'new', 'JobControlThreadExceptionHandler', '(', ')', ';']",0
MapReduceLauncher.java,"['while', '(', '(', 'jc', '=', 'jcc', '.', 'compile', '(', 'mrp', ',', 'grpName', ')', ')', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['numMRJobsCurrent', '=', 'jc', '.', 'getWaitingJobs', '(', ')', '.', 'size', '(', ')', ';']",0
MapReduceLauncher.java,"['Thread', 'jcThread', '=', 'new', 'Thread', '(', 'jc', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'setUncaughtExceptionHandler', '(', 'jctExceptionHandler', ')', ';']",0
MapReduceLauncher.java,"['jcThread', '.', 'start', '(', ')', ';']",0
MapReduceLauncher.java,"['while', '(', '!', 'jc', '.', 'allFinished', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['Thread', '.', 'sleep', '(', 'sleepTime', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'InterruptedException', 'e', ')', '{', '}']",0
MapReduceLauncher.java,"['double', 'prog', '=', '(', 'numMRJobsCompl', '+', 'calculateProgress', '(', 'jc', ',', 'jobClient', ')', ')', '/', 'totalMRJobs', ';']",0
MapReduceLauncher.java,"['if', '(', 'prog', '>', '=', '(', 'lastProg', '+', '0', '.', '01', ')', ')', '{']",0
MapReduceLauncher.java,"['int', 'perCom', '=', '(', 'int', ')', '(', 'prog', '*', '100', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'perCom', '!', '=', '100', ')']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', 'perCom', '+', '""', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['lastProg', '=', 'prog', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'for', 'the', 'jobControlException', 'first']",0
MapReduceLauncher.java,"['/', '/', 'if', 'the', 'job', 'controller', 'fails', 'before', 'launching', 'the', 'jobs', 'then', 'there', 'are']",0
MapReduceLauncher.java,"['/', '/', 'no', 'jobs', 'to', 'check', 'for', 'failure']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['if', '(', 'jobControlException', 'instanceof', 'PigException', ')', '{']",0
MapReduceLauncher.java,"['throw', 'jobControlException', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['int', 'errCode', '=', '2117', ';']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'jobControlException', ')', ';']",0
MapReduceLauncher.java,"['numMRJobsCompl', '+', '=', 'numMRJobsCurrent', ';']",0
MapReduceLauncher.java,"['failedJobs', '.', 'addAll', '(', 'jc', '.', 'getFailedJobs', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', 'failedJobs', '.', 'isEmpty', '(', ')']",0
MapReduceLauncher.java,"['&', '&', '""', 'true', '""', '.', 'equalsIgnoreCase', '(']",0
MapReduceLauncher.java,"['pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', 'false', '""', ')', ')', ')', '{']",0
MapReduceLauncher.java,"['int', 'errCode', '=', '6017', ';']",0
MapReduceLauncher.java,"['StringBuilder', 'msg', '=', 'new', 'StringBuilder', '(', '""', 'Execution', 'failed', ',', 'while', 'processing', '""', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'j', ':', 'failedJobs', ')', '{']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'j', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['msg', '.', 'append', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['msg', '.', 'append', '(', '""', ',', '""', ')', ';']",0
MapReduceLauncher.java,"['throw', 'new', 'ExecException', '(', 'msg', '.', 'substring', '(', '0', ',', 'msg', '.', 'length', '(', ')', '-', '2', ')', ',']",0
MapReduceLauncher.java,"['errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ')', ';']",0
MapReduceLauncher.java,"['List', '<', 'Job', '>', 'jobs', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', ';']",0
MapReduceLauncher.java,"['jcc', '.', 'moveResults', '(', 'jobs', ')', ';']",0
MapReduceLauncher.java,"['succJobs', '.', 'addAll', '(', 'jobs', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setJobClient', '(', 'jobClient', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'setJobControl', '(', 'jc', ')', ';']",0
MapReduceLauncher.java,"['stats', '.', 'accumulateStats', '(', ')', ';']",0
MapReduceLauncher.java,"['jc', '.', 'stop', '(', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', '100', '%', 'complete', '""', ')', ';']",0
MapReduceLauncher.java,"['boolean', 'failed', '=', 'false', ';']",0
MapReduceLauncher.java,"['int', 'finalStores', '=', '0', ';']",0
MapReduceLauncher.java,"['/', '/', 'Look', 'to', 'see', 'if', 'any', 'jobs', 'failed', '.', 'If', 'so', ',', 'we', 'need', 'to', 'report', 'that', '.']",0
MapReduceLauncher.java,"['if', '(', 'failedJobs', '!', '=', 'null', '&', '&', 'failedJobs', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'error', '(', 'failedJobs', '.', 'size', '(', ')', '+', '""', 'map', 'reduce', 'job', '(', 's', ')', 'failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['Exception', 'backendException', '=', 'null', ';']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'fj', ':', 'failedJobs', ')', '{']",0
MapReduceLauncher.java,"['getStats', '(', 'fj', ',', 'jobClient', ',', 'true', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MapReduceLauncher.java,"['backendException', '=', 'e', ';']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'fj', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['if', '(', '!', 'st', '.', 'isTmpStore', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['failedStores', '.', 'add', '(', 'st', '.', 'getSFile', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['failureMap', '.', 'put', '(', 'st', '.', 'getSFile', '(', ')', ',', 'backendException', ')', ';']",0
MapReduceLauncher.java,"['finalStores', '+', '+', ';']",0
MapReduceLauncher.java,"['FileLocalizer', '.', 'registerDeleteOnFail', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'error', '(', '""', 'Failed', 'to', 'produce', 'result', 'in', ':', '\\', '""', '""', '+', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', '+', '""', '\\', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['failed', '=', 'true', ';']",0
MapReduceLauncher.java,"['Map', '<', 'Enum', ',', 'Long', '>', 'warningAggMap', '=', 'new', 'HashMap', '<', 'Enum', ',', 'Long', '>', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'succJobs', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['for', '(', 'Job', 'job', ':', 'succJobs', ')', '{']",0
MapReduceLauncher.java,"['List', '<', 'POStore', '>', 'sts', '=', 'jcc', '.', 'getStores', '(', 'job', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'POStore', 'st', ':', 'sts', ')', '{']",0
MapReduceLauncher.java,"['if', '(', '!', 'st', '.', 'isTmpStore', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['succeededStores', '.', 'add', '(', 'st', '.', 'getSFile', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['finalStores', '+', '+', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Successfully', 'stored', 'result', 'in', ':', '\\', '""', '""', '+', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', '+', '""', '\\', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['getStats', '(', 'job', ',', 'jobClient', ',', 'false', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['computeWarningAggregate', '(', 'job', ',', 'jobClient', ',', 'warningAggMap', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'aggregateWarning', ')', '{']",0
MapReduceLauncher.java,"['CompilationMessageCollector', '.', 'logAggregate', '(', 'warningAggMap', ',', 'MessageType', '.', 'Warning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'Report', 'records', 'and', 'bytes', 'written', '.', 'Only', 'do', 'this', 'in', 'the', 'single', 'store', 'case', '.', 'Multi', '-', 'store']",0
MapReduceLauncher.java,"['/', '/', 'scripts', 'mess', 'up', 'the', 'stats', 'reporting', 'from', 'hadoop', '.']",0
MapReduceLauncher.java,"['List', '<', 'String', '>', 'rji', '=', 'stats', '.', 'getRootJobIDs', '(', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'rji', '!', '=', 'null', '&', '&', 'rji', '.', 'size', '(', ')', '=', '=', '1', '&', '&', 'finalStores', '=', '=', '1', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Records', 'written', ':', '""', '+', 'stats', '.', 'getRecordsWritten', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Bytes', 'written', ':', '""', '+', 'stats', '.', 'getBytesWritten', '(', ')', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', 'failed', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Success', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['if', '(', 'succJobs', '!', '=', 'null', '&', '&', 'succJobs', '.', 'size', '(', ')', '>', '0', ')', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Some', 'jobs', 'have', 'failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['log', '.', 'info', '(', '""', 'Failed', '!', '""', ')', ';']",0
MapReduceLauncher.java,"['jcc', '.', 'reset', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'stats', ';']",0
MapReduceLauncher.java,"['public', 'void', 'explain', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ',']",0
MapReduceLauncher.java,"['PrintStream', 'ps', ',']",0
MapReduceLauncher.java,"['String', 'format', ',']",0
MapReduceLauncher.java,"['boolean', 'verbose', ')', 'throws', 'PlanException', ',', 'VisitorException', ',']",0
MapReduceLauncher.java,"['log', '.', 'trace', '(', '""', 'Entering', 'MapReduceLauncher', '.', 'explain', '""', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'mrp', '=', 'compile', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'format', '.', 'equals', '(', '""', 'text', '""', ')', ')', '{']",0
MapReduceLauncher.java,"['MRPrinter', 'printer', '=', 'new', 'MRPrinter', '(', 'ps', ',', 'mrp', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'setVerbose', '(', 'verbose', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['}', 'else', '{']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', 'Map', 'Reduce', 'Plan', '""', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '""', ')', ';']",0
MapReduceLauncher.java,"['DotMRPrinter', 'printer', '=', 'new', 'DotMRPrinter', '(', 'mrp', ',', 'ps', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'setVerbose', '(', 'verbose', ')', ';']",0
MapReduceLauncher.java,"['printer', '.', 'dump', '(', ')', ';']",0
MapReduceLauncher.java,"['ps', '.', 'println', '(', '""', '""', ')', ';']",0
MapReduceLauncher.java,"['private', 'MROperPlan', 'compile', '(']",0
MapReduceLauncher.java,"['PhysicalPlan', 'php', ',']",0
MapReduceLauncher.java,"['PigContext', 'pc', ')', 'throws', 'PlanException', ',', 'IOException', ',', 'VisitorException', '{']",0
MapReduceLauncher.java,"['MRCompiler', 'comp', '=', 'new', 'MRCompiler', '(', 'php', ',', 'pc', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'randomizeFileLocalizer', '(', ')', ';']",0
MapReduceLauncher.java,"['comp', '.', 'compile', '(', ')', ';']",0
MapReduceLauncher.java,"['MROperPlan', 'plan', '=', 'comp', '.', 'getMRPlan', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'MRCompiler']",0
MapReduceLauncher.java,"['comp', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['String', 'lastInputChunkSize', '=']",0
MapReduceLauncher.java,"['pc', '.', 'getProperties', '(', ')', '.', 'getProperty', '(']",0
MapReduceLauncher.java,"['""', 'last', '.', 'input', '.', 'chunksize', '""', ',', 'POJoinPackage', '.', 'DEFAULT_CHUNK_SIZE', ')', ';']",0
MapReduceLauncher.java,"['String', 'prop', '=', 'System', '.', 'getProperty', '(', '""', 'pig', '.', 'exec', '.', 'nocombiner', '""', ')', ';']",0
MapReduceLauncher.java,"['if', '(', '!', '(', '""', 'true', '""', '.', 'equals', '(', 'prop', ')', ')', ')', '{']",0
MapReduceLauncher.java,"['CombinerOptimizer', 'co', '=', 'new', 'CombinerOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['co', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'display', 'the', 'warning', 'message', '(', 's', ')', 'from', 'the', 'CombinerOptimizer']",0
MapReduceLauncher.java,"['co', '.', 'getMessageCollector', '(', ')', '.', 'logMessages', '(', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'key', '-', 'value', 'handling', 'in', 'package']",0
MapReduceLauncher.java,"['POPackageAnnotator', 'pkgAnnotator', '=', 'new', 'POPackageAnnotator', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['pkgAnnotator', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'optimize', 'joins']",0
MapReduceLauncher.java,"['LastInputStreamingOptimizer', 'liso', '=']",0
MapReduceLauncher.java,"['new', 'MRCompiler', '.', 'LastInputStreamingOptimizer', '(', 'plan', ',', 'lastInputChunkSize', ')', ';']",0
MapReduceLauncher.java,"['liso', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'figure', 'out', 'the', 'type', 'of', 'the', 'key', 'for', 'the', 'map', 'plan']",0
MapReduceLauncher.java,"['/', '/', 'this', 'is', 'needed', 'when', 'the', 'key', 'is', 'null', 'to', 'create']",0
MapReduceLauncher.java,"['/', '/', 'an', 'appropriate', 'NullableXXXWritable', 'object']",0
MapReduceLauncher.java,"['KeyTypeDiscoveryVisitor', 'kdv', '=', 'new', 'KeyTypeDiscoveryVisitor', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['kdv', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'removes', 'the', 'filter', '(', 'constant', '(', 'true', ')', ')', 'operators', 'introduced', 'by']",0
MapReduceLauncher.java,"['/', '/', 'splits', '.']",0
MapReduceLauncher.java,"['NoopFilterRemover', 'fRem', '=', 'new', 'NoopFilterRemover', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['fRem', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'reduces', 'the', 'number', 'of', 'MROpers', 'in', 'the', 'MR', 'plan', 'generated']",0
MapReduceLauncher.java,"['/', '/', 'by', 'multi', '-', 'query', '(', 'multi', '-', 'store', ')', 'script', '.']",0
MapReduceLauncher.java,"['MultiQueryOptimizer', 'mqOptimizer', '=', 'new', 'MultiQueryOptimizer', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['mqOptimizer', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'removes', 'unnecessary', 'stores', '(', 'as', 'can', 'happen', 'with', 'splits', 'in']",0
MapReduceLauncher.java,"['/', '/', 'some', 'cases', '.', ')', '.', 'This', 'has', 'to', 'run', 'after', 'the', 'MultiQuery', 'and']",0
MapReduceLauncher.java,"['/', '/', 'NoopFilterRemover', '.']",0
MapReduceLauncher.java,"['NoopStoreRemover', 'sRem', '=', 'new', 'NoopStoreRemover', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['sRem', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['/', '/', 'check', 'whether', 'stream', 'operator', 'is', 'present']",0
MapReduceLauncher.java,"['/', '/', 'after', 'MultiQueryOptimizer', 'because', 'it', 'can', 'shift', 'streams', 'from']",0
MapReduceLauncher.java,"['/', '/', 'map', 'to', 'reduce', ',', 'etc', '.']",0
MapReduceLauncher.java,"['MRStreamHandler', 'checker', '=', 'new', 'MRStreamHandler', '(', 'plan', ')', ';']",0
MapReduceLauncher.java,"['checker', '.', 'visit', '(', ')', ';']",0
MapReduceLauncher.java,"['return', 'plan', ';']",0
MapReduceLauncher.java,"['/', '*', '*']",0
MapReduceLauncher.java,"['class', 'JobControlThreadExceptionHandler', 'implements', 'Thread', '.', 'UncaughtExceptionHandler', '{']",0
MapReduceLauncher.java,"['public', 'void', 'uncaughtException', '(', 'Thread', 'thread', ',', 'Throwable', 'throwable', ')', '{']",0
MapReduceLauncher.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
MapReduceLauncher.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'baos', ')', ';']",0
MapReduceLauncher.java,"['throwable', '.', 'printStackTrace', '(', 'ps', ')', ';']",0
MapReduceLauncher.java,"['String', 'exceptionString', '=', 'baos', '.', 'toString', '(', ')', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'getExceptionFromString', '(', 'exceptionString', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
MapReduceLauncher.java,"['String', 'errMsg', '=', '""', 'Could', 'not', 'resolve', 'error', 'that', 'occured', 'when', 'launching', 'map', 'reduce', 'job', '.', '""', ';']",0
MapReduceLauncher.java,"['jobControlException', '=', 'new', 'RuntimeException', '(', 'errMsg', ',', 'e', ')', ';']",0
MapReduceLauncher.java,"['void', 'computeWarningAggregate', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'Map', '<', 'Enum', ',', 'Long', '>', 'aggMap', ')', '{']",0
MapReduceLauncher.java,"['JobID', 'mapRedJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
MapReduceLauncher.java,"['RunningJob', 'runningJob', '=', 'null', ';']",0
MapReduceLauncher.java,"['runningJob', '=', 'jobClient', '.', 'getJob', '(', 'mapRedJobID', ')', ';']",0
MapReduceLauncher.java,"['if', '(', 'runningJob', '!', '=', 'null', ')', '{']",0
MapReduceLauncher.java,"['Counters', 'counters', '=', 'runningJob', '.', 'getCounters', '(', ')', ';']",0
MapReduceLauncher.java,"['for', '(', 'Enum', 'e', ':', 'PigWarning', '.', 'values', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['for', '(', 'Enum', 'e', ':', 'PigWarning', '.', 'values', '(', ')', ')', '{']",0
MapReduceLauncher.java,"['Long', 'currentCount', '=', 'aggMap', '.', 'get', '(', 'e', ')', ';']",0
MapReduceLauncher.java,"['Long', 'currentCount', '=', 'aggMap', '.', 'get', '(', 'e', ')', ';']",0
MapReduceLauncher.java,"['currentCount', '=', '(', 'currentCount', '=', '=', 'null', '?', '0', ':', 'currentCount', ')', ';']",0
MapReduceLauncher.java,"['currentCount', '=', '(', 'currentCount', '=', '=', 'null', '?', '0', ':', 'currentCount', ')', ';']",0
MapReduceLauncher.java,"['currentCount', '+', '=', 'counters', '.', 'getCounter', '(', 'e', ')', ';']",0
MapReduceLauncher.java,"['currentCount', '+', '=', 'counters', '.', 'getCounter', '(', 'e', ')', ';']",0
MapReduceLauncher.java,"['aggMap', '.', 'put', '(', 'e', ',', 'currentCount', ')', ';']",0
MapReduceLauncher.java,"['aggMap', '.', 'put', '(', 'e', ',', 'currentCount', ')', ';']",0
MapReduceLauncher.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
MapReduceLauncher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'retrieve', 'job', 'to', 'compute', 'warning', 'aggregation', '.', '""', ';']",0
MapReduceLauncher.java,"['log', '.', 'warn', '(', 'msg', ')', ';']",0
LONegative.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LONegative.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LONegative.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LONegative.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LONegative.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LONegative.java,"['public', 'class', 'LONegative', 'extends', 'UnaryExpressionOperator', '{']",0
LONegative.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LONegative.java,"['/', '*', '*']",1
LONegative.java,"['public', 'LONegative', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LONegative.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LONegative.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LONegative.java,"['return', 'mSchema', ';']",0
LONegative.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LONegative.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LONegative.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'getOperand', '(', ')', '.', 'getType', '(', ')', ')', ';']",0
LONegative.java,"['mFieldSchema', '.', 'setParent', '(', 'getOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getOperand', '(', ')', ')', ';']",0
LONegative.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LONegative.java,"['return', 'mFieldSchema', ';']",0
LONegative.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LONegative.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LONegative.java,"['public', 'String', 'name', '(', ')', '{']",0
LONegative.java,"['return', '""', 'Negative', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOGreaterThan.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOGreaterThan.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOGreaterThan.java,"['public', 'class', 'LOGreaterThan', 'extends', 'BinaryExpressionOperator', '{']",0
LOGreaterThan.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOGreaterThan.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOGreaterThan', '.', 'class', ')', ';']",0
LOGreaterThan.java,"['/', '*', '*']",1
LOGreaterThan.java,"['public', 'LOGreaterThan', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOGreaterThan.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOGreaterThan.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOGreaterThan.java,"['return', 'mSchema', ';']",0
LOGreaterThan.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOGreaterThan.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOGreaterThan.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOGreaterThan.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOGreaterThan.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOGreaterThan.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOGreaterThan.java,"['return', 'mFieldSchema', ';']",0
LOGreaterThan.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOGreaterThan.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOGreaterThan.java,"['public', 'String', 'name', '(', ')', '{']",0
LOGreaterThan.java,"['return', '""', 'GreaterThan', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOEqual.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOEqual.java,"['public', 'class', 'LOEqual', 'extends', 'BinaryExpressionOperator', '{']",0
LOEqual.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOEqual.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOEqual', '.', 'class', ')', ';']",0
LOEqual.java,"['/', '*', '*']",1
LOEqual.java,"['public', 'LOEqual', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOEqual.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOEqual.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOEqual.java,"['return', 'mSchema', ';']",0
LOEqual.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOEqual.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOEqual.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOEqual.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOEqual.java,"['return', 'mFieldSchema', ';']",0
LOEqual.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOEqual.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOEqual.java,"['public', 'String', 'name', '(', ')', '{']",0
LOEqual.java,"['return', '""', 'Equal', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
TestBestFitCast.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Arrays', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
TestBestFitCast.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'EvalFunc', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestBestFitCast.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestBestFitCast.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestBestFitCast.java,"['public', 'class', 'TestBestFitCast', 'extends', 'TestCase', '{']",0
TestBestFitCast.java,"['private', 'PigServer', 'pigServer', ';']",0
TestBestFitCast.java,"['private', 'MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestBestFitCast.java,"['private', 'File', 'tmpFile', ',', 'tmpFile2', ';']",0
TestBestFitCast.java,"['int', 'LOOP_SIZE', '=', '20', ';']",0
TestBestFitCast.java,"['public', 'TestBestFitCast', '(', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
TestBestFitCast.java,"['pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'pigServer', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ')', ';']",0
TestBestFitCast.java,"['tmpFile', '=', 'File', '.', 'createTempFile', '(', '""', 'test', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['PrintStream', 'ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile', ')', ')', ';']",0
TestBestFitCast.java,"['long', 'l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['tmpFile2', '=', 'File', '.', 'createTempFile', '(', '""', 'test2', '""', ',', '""', 'txt', '""', ')', ';']",0
TestBestFitCast.java,"['ps', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'tmpFile2', ')', ')', ';']",0
TestBestFitCast.java,"['l', '=', '0', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '=', 'LOOP_SIZE', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['ps', '.', 'println', '(', 'l', '+', '""', '\\', 't', '""', '+', 'i', '+', '""', '\\', 't', '""', '+', 'i', ')', ';']",0
TestBestFitCast.java,"['ps', '.', 'close', '(', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF1', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '*', 'funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'DoubleMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'FloatMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'FLOAT', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'IntMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'LongMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'LONG', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'StringMax', '.', 'class', '.', 'getName', '(', ')', ',', 'Schema', '.', 'generateNestedSchema', '(', 'DataType', '.', 'BAG', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ';', '*', '/']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF2', 'extends', 'EvalFunc', '<', 'String', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'String', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['String', 'str', '=', '(', 'String', ')', 'input', '.', 'get', '(', '0', ')', ';']",0
TestBestFitCast.java,"['return', 'str', '.', 'toUpperCase', '(', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['return', 'null', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', 'new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'CHARARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'static', 'class', 'UDF3', 'extends', 'EvalFunc', '<', 'Tuple', '>', '{']",0
TestBestFitCast.java,"['/', '*', '*']",0
TestBestFitCast.java,"['public', 'Tuple', 'exec', '(', 'Tuple', 'input', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['return', 'input', ';']",0
TestBestFitCast.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
TestBestFitCast.java,"['public', 'List', '<', 'FuncSpec', '>', 'getArgToFuncMapping', '(', ')', 'throws', 'FrontendException', '{']",0
TestBestFitCast.java,"['List', '<', 'FuncSpec', '>', 'funcList', '=', 'new', 'ArrayList', '<', 'FuncSpec', '>', '(', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'bytearray', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'the', 'following', 'schema', 'should', 'match', 'when', 'the', 'input', 'is']",0
TestBestFitCast.java,"['/', '/', 'just', 'a', '{', 'int', '}', '-', 'exact', 'match']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'INTEGER', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'is', '{', 'float', ',', 'bytearray', '}', 'since', 'bytearray', 'can', 'be', 'casted', 'either', 'to', 'long']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', '.', 'However', 'when', 'input', 'schema', 'is', '{', 'bytearray', ',', 'int', '}', ',', 'it', 'should', 'work']",0
TestBestFitCast.java,"['/', '/', 'since', 'bytearray', 'should', 'get', 'casted', 'to', 'float', 'and', 'int', 'to', 'long', '.', 'Likewise', 'if']",0
TestBestFitCast.java,"['/', '/', 'input', 'schema', 'is', '{', 'bytearray', ',', 'long', '}', 'or', '{', 'bytearray', ',', 'double', '}', 'it', 'should', 'work']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['/', '/', 'The', 'following', 'two', 'schemas', 'will', 'cause', 'conflict', 'when', 'input', 'schema', 'is']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'int', ',', 'int', '}', 'since', 'the', 'two', 'ints', 'could', 'be', 'casted', 'to', 'long', ',', 'double']",0
TestBestFitCast.java,"['/', '/', 'or', 'double', ',', 'long', '.', 'Likewise', 'input', 'schema', 'of', 'either', '{', 'bytearray', ',', 'long', ',', 'long', '}']",0
TestBestFitCast.java,"['/', '/', 'or', '{', 'bytearray', ',', 'double', ',', 'double', '}', 'would', 'cause', 'conflict', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'double', '}', 'or', '{', 'bytearray', ',', 'double', ',', 'long', '}', 'should', 'not', 'cause']",0
TestBestFitCast.java,"['/', '/', 'conflict', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', 'to', 'float', '.', 'Input', 'schema']",0
TestBestFitCast.java,"['/', '/', 'of', '{', 'float', ',', 'bytearray', ',', 'long', '}', 'or', '{', 'float', ',', 'long', ',', 'bytearray', '}', 'should', 'also']",0
TestBestFitCast.java,"['/', '/', 'work', 'since', 'only', 'the', 'bytearray', 'needs', 'to', 'be', 'casted', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'float', ',', 'bytearray', ',', 'int', '}', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.', 'Input', 'schema', 'of']",0
TestBestFitCast.java,"['/', '/', '{', 'bytearray', ',', 'long', ',', 'int', '}', 'should', 'work', 'and', 'should', 'match', 'the', 'first', 'schema', 'below', 'for']",0
TestBestFitCast.java,"['/', '/', 'matching', 'wherein', 'the', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the', 'int', 'to', 'double', '.']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['funcList', '.', 'add', '(', 'new', 'FuncSpec', '(', 'this', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '(', 'Arrays', '.', 'asList', '(', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'FLOAT', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'LONG', ')', ',']",0
TestBestFitCast.java,"['new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'DOUBLE', ')', ')', ')', ')', ')', ';']",0
TestBestFitCast.java,"['return', 'funcList', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast1', '(', ')', 'throws', 'IOException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '{', 'float', ',', 'double', '}', ',', '{', 'float', ',', 'long', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast2', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'in', 'both', 'cases', 'bytearray', 'is', 'cast', 'to', 'float', 'and', 'the']",0
TestBestFitCast.java,"['/', '/', 'cost', 'of', 'casting', 'int', 'to', 'long', '<', 'int', 'to', 'double']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast3', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast4', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ')', ',', '(', 'float', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast5', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'ints', 'cannot', 'be', 'unambiguously']",0
TestBestFitCast.java,"['/', '/', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast6', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'longs', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'unambiguously', 'casted']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', ')', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast7', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'bytearray', 'can', 'be', 'casted', 'to', 'float', 'but', 'the', 'two', 'doubles', 'cannot', 'be']",0
TestBestFitCast.java,"['/', '/', 'casted', 'with', 'a', 'permissible', 'cast']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Could', 'not', 'infer', 'the', 'matching', 'function', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast8', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast9', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast10', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'long', ',', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ':', 'long', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast11', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'double', ',', 'long', ')', 'since', 'that', 'is', 'the', 'only', 'exact', 'match', 'without', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast12', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'float', ',', 'bytearray', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Ambiguous', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'will', 'cause', 'conflict', 'since', 'we', 'could', 'cast', 'int', 'to']",0
TestBestFitCast.java,"['/', '/', 'long', 'or', 'double', 'and', 'bytearray', 'to', 'long', 'or', 'double', '.']",0
TestBestFitCast.java,"['boolean', 'exceptionCaused', '=', 'false', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'float', ',', 'y', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['exceptionCaused', '=', 'true', ';']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', '(', '{', 'float', ',', 'double', ',', 'long', '}', ',', '{', 'float', ',', 'long', ',', 'double', '}', '""', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 'exceptionCaused', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast13', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ',', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'long', ',', 'double', ')', ',', '(', 'float', ',', 'double', ',', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'long', ',', 'double', ')', 'since', 'for', 'the', 'bytearray', 'there', 'is', 'a']",0
TestBestFitCast.java,"['/', '/', 'single', 'unambiguous', 'cast', 'to', 'float', '.', 'For', 'the', 'other', 'two', 'args', ',', 'it', 'is']",0
TestBestFitCast.java,"['/', '/', 'less', '""', 'costlier', '""', 'to', 'cast', 'the', 'last', 'int', 'to', 'double', 'than', 'cast', 'the', 'long']",0
TestBestFitCast.java,"['/', '/', 'to', 'double', 'and', 'int', 'to', 'long']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile2', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ',', 'z', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ',', 'z', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Float', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', ',', '0', '.', '0f', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Long', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', ',', 'new', 'Long', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '(', 'Double', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '2', ')', ',', 'new', 'Double', '(', 'cnt', '+', '1', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast14', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'bytearray', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'bytearray', ')', '}', 'because', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast15', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bytearray', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'bytearray', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'DataByteArray', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'expected', '=', 'Integer', '.', 'toString', '(', 'cnt', '+', '1', ')', '.', 'getBytes', '(', ')', ';']",0
TestBestFitCast.java,"['byte', '[', ']', 'actual', '=', '(', '(', 'DataByteArray', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '.', 'length', ',', 'actual', '.', 'length', ')', ';']",0
TestBestFitCast.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'expected', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
TestBestFitCast.java,"['assertEquals', '(', 'expected', '[', 'i', ']', ',', 'actual', '[', 'i', ']', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testByteArrayCast16', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'bytearray', ')', ',', '(', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'int', ')', 'because', 'that', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '""', '+', 'UDF3', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Integer', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Integer', '(', 'cnt', '+', '1', ')', ',', '(', 'Integer', ')', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '0', ')', ')', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'LOOP_SIZE', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testIntSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'int', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'int', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testLongSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'long', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'long', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'long', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Long', '(', '210', ')', ',', '(', 'Long', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testFloatSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'float', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'float', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'float', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'testDoubleSum', '(', ')', 'throws', 'IOException', ',', 'ExecException', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'bag', '{', '(', 'double', ')', '}', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', 'bag', '{', '(', 'bytearray', ')', '}', ',', 'bag', '{', '(', 'int', ')', '}', ',', 'bag', '{', '(', 'long', ')', '}', ',', 'bag', '{', '(', 'float', ')', '}', ',', 'bag', '{', '(', 'double', ')', '}']",0
TestBestFitCast.java,"['/', '/', 'Chooses', 'bag', '{', '(', 'double', ')', '}', 'since', 'it', 'is', 'an', 'exact', 'match']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ',', 'y', ':', 'double', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'group', 'A', 'all', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'C', '=', 'FOREACH', 'B', 'generate', 'SUM', '(', 'A', '.', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'C', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertTrue', '(', 't', '.', 'get', '(', '0', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'new', 'Double', '(', '210', ')', ',', '(', 'Double', ')', 't', '.', 'get', '(', '0', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test1', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'long', ',', 'double', ')', 'as', 'it', 'has', 'only', 'one', 'cast', 'compared', 'to', 'two', 'for', '(', 'float', ',', 'float', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Long', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Double', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test2', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'Exception', 'as', 'ambiguous', 'definitions', 'found']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'y', ',', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'as', 'multiple', 'or', 'none', 'of', 'them', 'fit', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test3', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'int', ',', 'int', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ',', 'float', ')', 'as', 'both', 'options', 'lead', 'to', 'same', 'score', 'and', '(', 'float', ',', 'float', ')', 'occurs', 'first', '.']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '(', 'float', ')', 'y', ',', '(', 'float', ')', 'y', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '1', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test4', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', '(', 'long', ')']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ')', ',', '(', 'integer', ')', ',', '(', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Chooses', '(', 'float', ')', 'as', 'it', 'leads', 'to', 'a', 'better', 'score', 'that', 'to', '(', 'double', ')']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", 'as', '(', 'x', ':', 'long', ',', 'y', ':', 'int', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', 'x', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', 'x', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['int', 'cnt', '=', '0', ';']",0
TestBestFitCast.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', '(', '(', 'Tuple', ')', 't', '.', 'get', '(', '1', ')', ')', '.', 'get', '(', '0', ')', 'instanceof', 'Float', ')', ';']",0
TestBestFitCast.java,"['+', '+', 'cnt', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '20', ',', 'cnt', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test5', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'Passing', 'bytearrays']",0
TestBestFitCast.java,"['/', '/', 'Possible', 'matches', ':', '(', 'float', ',', 'float', ')', ',', '(', 'long', ',', 'double', ')']",0
TestBestFitCast.java,"['/', '/', 'Throws', 'exception', 'since', 'more', 'than', 'one', 'funcSpec', 'and', 'inp', 'is', 'bytearray']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'tmpFile', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'generate', '$', '0', ',', '""', '+', 'UDF1', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '1', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestBestFitCast.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestBestFitCast.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', 'true', ',', 'msg', '.', 'contains', '(', '""', 'Multiple', 'matching', 'functions', '""', ')', ')', ';']",0
TestBestFitCast.java,"['public', 'void', 'test6', '(', ')', 'throws', 'Exception', '{']",0
TestBestFitCast.java,"['/', '/', 'test', 'UDF', 'with', 'single', 'mapping', 'function']",0
TestBestFitCast.java,"['/', '/', 'where', 'bytearray', 'is', 'passed', 'in', 'as', 'input', 'parameter']",0
TestBestFitCast.java,"['File', 'input', '=', 'Util', '.', 'createInputFile', '(', '""', 'tmp', '""', ',', '""', '""', ',', 'new', 'String', '[', ']', '{', '""', 'abc', '""', '}', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'A', '=', 'LOAD', ""'"", '""', '+', 'Util', '.', 'generateURI', '(', 'input', '.', 'toString', '(', ')', ')', '+', '""', ""'"", ';', '""', ')', ';']",0
TestBestFitCast.java,"['pigServer', '.', 'registerQuery', '(', '""', 'B', '=', 'FOREACH', 'A', 'GENERATE', '""', '+', 'UDF2', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', '$', '0', ')', ';', '""', ')', ';']",0
TestBestFitCast.java,"['Iterator', '<', 'Tuple', '>', 'iter', '=', 'pigServer', '.', 'openIterator', '(', '""', 'B', '""', ')', ';']",0
TestBestFitCast.java,"['if', '(', '!', 'iter', '.', 'hasNext', '(', ')', ')', 'fail', '(', '""', 'No', 'Output', 'received', '""', ')', ';']",0
TestBestFitCast.java,"['Tuple', 't', '=', 'iter', '.', 'next', '(', ')', ';']",0
TestBestFitCast.java,"['assertEquals', '(', '""', 'ABC', '""', ',', 't', '.', 'get', '(', '0', ')', ')', ';']",0
LogicalOperator.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LogicalOperator.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LogicalOperator.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LogicalOperator.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LogicalOperator.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LogicalOperator.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LogicalOperator.java,"['abstract', 'public', 'class', 'LogicalOperator', 'extends', 'Operator', '<', 'LOVisitor', '>', '{']",0
LogicalOperator.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'Schema', 'mSchema', '=', 'null', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'boolean', 'mIsSchemaComputed', '=', 'false', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'byte', 'mType', '=', 'DataType', '.', 'UNKNOWN', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'int', 'mRequestedParallelism', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'String', 'mAlias', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'LogicalPlan', 'mPlan', ';']",0
LogicalOperator.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LogicalOperator', '.', 'class', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'LogicalOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LogicalOperator.java,"['this', '(', 'plan', ',', 'k', ',', '-', '1', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'LogicalOperator', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
LogicalOperator.java,"['super', '(', 'k', ')', ';']",0
LogicalOperator.java,"['mPlan', '=', 'plan', ';']",0
LogicalOperator.java,"['mRequestedParallelism', '=', 'rp', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'OperatorKey', 'getOperatorKey', '(', ')', '{']",0
LogicalOperator.java,"['return', 'mKey', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'setSchema', '(', 'Schema', 'schema', ')', 'throws', 'FrontendException', '{']",0
LogicalOperator.java,"['/', '/', 'In', 'general', ',', 'operators', 'don', ""'"", 't', 'generate', 'their', 'schema', 'until', 'they', ""'"", 're']",0
LogicalOperator.java,"['/', '/', 'asked', ',', 'so', 'ask', 'them', 'to', 'do', 'it', '.']",0
LogicalOperator.java,"['getSchema', '(', ')', ';']",0
LogicalOperator.java,"['}', 'catch', '(', 'FrontendException', 'ioe', ')', '{']",1
LogicalOperator.java,"['/', '/', 'It', ""'"", 's', 'fine', ',', 'it', 'just', 'means', 'we', 'don', ""'"", 't', 'have', 'a', 'schema', 'yet', '.']",0
LogicalOperator.java,"['if', '(', 'mSchema', '=', '=', 'null', ')', '{']",0
LogicalOperator.java,"['mSchema', '=', 'schema', ';']",0
LogicalOperator.java,"['}', 'else', '{']",1
LogicalOperator.java,"['mSchema', '.', 'reconcile', '(', 'schema', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'forceSchema', '(', 'Schema', 'schema', ')', '{']",0
LogicalOperator.java,"['this', '.', 'mSchema', '=', 'schema', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'unsetSchema', '(', ')', 'throws', 'VisitorException', '{']",0
LogicalOperator.java,"['mIsSchemaComputed', '=', 'false', ';']",1
LogicalOperator.java,"['mSchema', '=', 'null', ';']",1
LogicalOperator.java,"['public', 'Schema', 'regenerateSchema', '(', ')', 'throws', 'FrontendException', ',', 'VisitorException', '{']",0
LogicalOperator.java,"['unsetSchema', '(', ')', ';']",0
LogicalOperator.java,"['return', 'getSchema', '(', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'setCanonicalNames', '(', ')', '{']",0
LogicalOperator.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'fs', ':', 'mSchema', '.', 'getFields', '(', ')', ')', '{']",0
LogicalOperator.java,"['fs', '.', 'canonicalName', '=', 'CanonicalNamer', '.', 'getNewName', '(', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'abstract', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['final', 'public', 'void', 'setType', '(', 'byte', 't', ')', '{']",0
LogicalOperator.java,"['mType', '=', 't', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'byte', 'getType', '(', ')', '{']",0
LogicalOperator.java,"['return', 'mType', ';']",0
LogicalOperator.java,"['public', 'String', 'getAlias', '(', ')', '{']",0
LogicalOperator.java,"['return', 'mAlias', ';']",0
LogicalOperator.java,"['public', 'void', 'setAlias', '(', 'String', 'newAlias', ')', '{']",0
LogicalOperator.java,"['mAlias', '=', 'newAlias', ';']",0
LogicalOperator.java,"['public', 'int', 'getRequestedParallelism', '(', ')', '{']",0
LogicalOperator.java,"['return', 'mRequestedParallelism', ';']",0
LogicalOperator.java,"['public', 'void', 'setRequestedParallelism', '(', 'int', 'newRequestedParallelism', ')', '{']",0
LogicalOperator.java,"['mRequestedParallelism', '=', 'newRequestedParallelism', ';']",0
LogicalOperator.java,"['public', 'String', 'toString', '(', ')', '{']",0
LogicalOperator.java,"['StringBuffer', 'msg', '=', 'new', 'StringBuffer', '(', ')', ';']",0
LogicalOperator.java,"['msg', '.', 'append', '(', '""', '(', 'Name', ':', '""', '+', 'name', '(', ')', '+', '""', 'Operator', 'Key', ':', '""', '+', 'mKey', '+', '""', ')', '""', ')', ';']",0
LogicalOperator.java,"['return', 'msg', '.', 'toString', '(', ')', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'void', 'reconcileSchema', '(', 'Schema', 'schema', ')', 'throws', 'ParseException', '{']",0
LogicalOperator.java,"['if', '(', 'mSchema', '=', '=', 'null', ')', '{']",0
LogicalOperator.java,"['mSchema', '=', 'schema', ';']",0
LogicalOperator.java,"['/', '/', 'TODO']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'abstract', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', ';']",0
LogicalOperator.java,"['public', 'LogicalPlan', 'getPlan', '(', ')', '{']",0
LogicalOperator.java,"['return', 'mPlan', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'setPlan', '(', 'LogicalPlan', 'plan', ')', '{']",0
LogicalOperator.java,"['mPlan', '=', 'plan', ';']",0
LogicalOperator.java,"['/', '*', '*', '*']",0
LogicalOperator.java,"['public', 'void', 'setSchemaComputed', '(', 'boolean', 'computed', ')', '{']",0
LogicalOperator.java,"['mIsSchemaComputed', '=', 'computed', ';']",0
LogicalOperator.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
LogicalOperator.java,"['return', 'true', ';']",1
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LogicalOperator.java,"['LogicalOperator', 'loClone', '=', '(', 'LogicalOperator', ')', 'super', '.', 'clone', '(', ')', ';']",0
LogicalOperator.java,"['if', '(', 'mSchema', '!', '=', 'null', ')']",0
LogicalOperator.java,"['loClone', '.', 'mSchema', '=', 'this', '.', 'mSchema', '.', 'clone', '(', ')', ';']",0
LogicalOperator.java,"['return', 'loClone', ';']",0
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LogicalOperator.java,"['/', '*', '*']",0
LogicalOperator.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LogicalOperator.java,"['return', 'null', ';']",0
LogicalOperator.java,"['return', 'null', ';']",0
PigInputFormat.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
PigInputFormat.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PigInputFormat.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PigInputFormat.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileStatus', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileSystem', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'Path', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'PathFilter', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'Text', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'compress', '.', 'CompressionCodecFactory', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'FileInputFormat', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'InputFormat', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'InputSplit', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConfigurable', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Mapper', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RecordReader', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'Reporter', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TargetedTuple', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'Slice', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'PigSlicer', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'ConfigurationUtil', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HDataStorage', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'SliceWrapper', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'ValidatingInputFileSpec', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
PigInputFormat.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
PigInputFormat.java,"['public', 'class', 'PigInputFormat', 'implements', 'InputFormat', '<', 'Text', ',', 'Tuple', '>', ',']",0
PigInputFormat.java,"['public', 'static', 'final', 'Log', 'LOG', '=', 'LogFactory']",0
PigInputFormat.java,"['.', 'getLog', '(', 'PigInputFormat', '.', 'class', ')', ';']",0
PigInputFormat.java,"['private', 'static', 'final', 'PathFilter', 'hiddenFileFilter', '=', 'new', 'PathFilter', '(', ')', '{']",0
PigInputFormat.java,"['public', 'boolean', 'accept', '(', 'Path', 'p', ')', '{']",0
PigInputFormat.java,"['String', 'name', '=', 'p', '.', 'getName', '(', ')', ';']",0
PigInputFormat.java,"['return', '!', 'name', '.', 'startsWith', '(', '""', '_', '""', ')', '&', '&', '!', 'name', '.', 'startsWith', '(', '""', '.', '""', ')', ';']",0
PigInputFormat.java,"['public', 'static', 'JobConf', 'sJob', ';']",0
PigInputFormat.java,"['/', '*', '*']",0
PigInputFormat.java,"['protected', 'boolean', 'isSplitable', '(', 'FileSystem', 'fs', ',', 'Path', 'filename', ')', '{']",0
PigInputFormat.java,"['return', '!', 'filename', '.', 'getName', '(', ')', '.', 'endsWith', '(', '""', '.', 'gz', '""', ')', ';']",0
PigInputFormat.java,"['/', '*', '*']",0
PigInputFormat.java,"['protected', 'Path', '[', ']', 'listPaths', '(', 'JobConf', 'job', ')', 'throws', 'IOException', '{']",0
PigInputFormat.java,"['Path', '[', ']', 'dirs', '=', 'FileInputFormat', '.', 'getInputPaths', '(', 'job', ')', ';']",0
PigInputFormat.java,"['if', '(', 'dirs', '.', 'length', '=', '=', '0', ')', '{']",0
PigInputFormat.java,"['int', 'errCode', '=', '2092', ';']",0
PigInputFormat.java,"['String', 'msg', '=', '""', 'No', 'input', 'paths', 'specified', 'in', 'job', '.', '""', ';']",0
PigInputFormat.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigInputFormat.java,"['List', '<', 'Path', '>', 'result', '=', 'new', 'ArrayList', '<', 'Path', '>', '(', ')', ';']",0
PigInputFormat.java,"['for', '(', 'Path', 'p', ':', 'dirs', ')', '{']",0
PigInputFormat.java,"['FileSystem', 'fs', '=', 'p', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['FileStatus', '[', ']', 'matches', '=', 'fs', '.', 'globStatus', '(', 'p', ',', 'hiddenFileFilter', ')', ';']",0
PigInputFormat.java,"['for', '(', 'FileStatus', 'match', ':', 'matches', ')', '{']",0
PigInputFormat.java,"['result', '.', 'add', '(', 'fs', '.', 'makeQualified', '(', 'match', '.', 'getPath', '(', ')', ')', ')', ';']",0
PigInputFormat.java,"['return', 'result', '.', 'toArray', '(', 'new', 'Path', '[', 'result', '.', 'size', '(', ')', ']', ')', ';']",0
PigInputFormat.java,"['public', 'void', 'validateInput', '(', 'JobConf', 'job', ')', 'throws', 'IOException', '{']",0
PigInputFormat.java,"['/', '*', 'ArrayList', '<', 'FileSpec', '>', 'inputs', '=', '(', 'ArrayList', '<', 'FileSpec', '>', ')', 'ObjectSerializer']",0
PigInputFormat.java,"['.', 'deserialize', '(', 'job', '.', 'get', '(', '""', 'pig', '.', 'inputs', '""', ')', ')', ';']",0
PigInputFormat.java,"['Path', '[', ']', 'inputDirs', '=', 'new', 'Path', '[', 'inputs', '.', 'size', '(', ')', ']', ';']",0
PigInputFormat.java,"['int', 'i', '=', '0', ';']",0
PigInputFormat.java,"['for', '(', 'FileSpec', 'spec', ':', 'inputs', ')', '{']",0
PigInputFormat.java,"['inputDirs', '[', 'i', '+', '+', ']', '=', 'new', 'Path', '(', 'spec', '.', 'getFileName', '(', ')', ')', ';']",0
PigInputFormat.java,"['if', '(', 'inputDirs', '.', 'length', '=', '=', '0', ')', '{']",0
PigInputFormat.java,"['throw', 'new', 'IOException', '(', '""', 'No', 'input', 'paths', 'specified', 'in', 'input', '""', ')', ';']",0
PigInputFormat.java,"['List', '<', 'IOException', '>', 'result', '=', 'new', 'ArrayList', '<', 'IOException', '>', '(', ')', ';']",0
PigInputFormat.java,"['int', 'totalFiles', '=', '0', ';']",0
PigInputFormat.java,"['for', '(', 'Path', 'p', ':', 'inputDirs', ')', '{']",0
PigInputFormat.java,"['FileSystem', 'fs', '=', 'p', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['if', '(', 'fs', '.', 'exists', '(', 'p', ')', ')', '{']",0
PigInputFormat.java,"['/', '/', 'make', 'sure', 'all', 'paths', 'are', 'files', 'to', 'avoid', 'exception']",0
PigInputFormat.java,"['/', '/', 'while', 'generating', 'splits']",0
PigInputFormat.java,"['for', '(', 'Path', 'subPath', ':', 'fs', '.', 'listPaths', '(', 'p', ',', 'hiddenFileFilter', ')', ')', '{']",0
PigInputFormat.java,"['FileSystem', 'subFS', '=', 'subPath', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['if', '(', '!', 'subFS', '.', 'exists', '(', 'subPath', ')', ')', '{']",0
PigInputFormat.java,"['result', '.', 'add', '(', 'new', 'IOException', '(']",0
PigInputFormat.java,"['""', 'Input', 'path', 'does', 'not', 'exist', ':', '""', '+', 'subPath', ')', ')', ';']",0
PigInputFormat.java,"['}', 'else', '{']",0
PigInputFormat.java,"['totalFiles', '+', '+', ';']",0
PigInputFormat.java,"['}', 'else', '{']",0
PigInputFormat.java,"['Path', '[', ']', 'paths', '=', 'fs', '.', 'globPaths', '(', 'p', ',', 'hiddenFileFilter', ')', ';']",0
PigInputFormat.java,"['if', '(', 'paths', '.', 'length', '=', '=', '0', ')', '{']",0
PigInputFormat.java,"['result', '.', 'add', '(', 'new', 'IOException', '(', '""', 'Input', 'Pattern', '""', '+', 'p']",0
PigInputFormat.java,"['+', '""', 'matches', '0', 'files', '""', ')', ')', ';']",0
PigInputFormat.java,"['}', 'else', '{']",0
PigInputFormat.java,"['/', '/', 'validate', 'globbed', 'paths']",0
PigInputFormat.java,"['for', '(', 'Path', 'gPath', ':', 'paths', ')', '{']",0
PigInputFormat.java,"['FileSystem', 'gPathFS', '=', 'gPath', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['if', '(', '!', 'gPathFS', '.', 'exists', '(', 'gPath', ')', ')', '{']",0
PigInputFormat.java,"['result', '.', 'add', '(', 'new', 'FileNotFoundException', '(']",0
PigInputFormat.java,"['""', 'Input', 'path', 'doesnt', 'exist', ':', '""', '+', 'gPath', ')', ')', ';']",0
PigInputFormat.java,"['totalFiles', '+', '=', 'paths', '.', 'length', ';']",0
PigInputFormat.java,"['if', '(', '!', 'result', '.', 'isEmpty', '(', ')', ')', '{']",0
PigInputFormat.java,"['throw', 'new', 'InvalidInputException', '(', 'result', ')', ';']",0
PigInputFormat.java,"['/', '/', 'send', 'output', 'to', 'client', '.']",0
PigInputFormat.java,"['LOG', '.', 'info', '(', '""', 'Total', 'input', 'paths', 'to', 'process', ':', '""', '+', 'totalFiles', ')', ';', '*', '/']",0
PigInputFormat.java,"['/', '*', '*']",0
PigInputFormat.java,"['public', 'InputSplit', '[', ']', 'getSplits', '(', 'JobConf', 'job', ',', 'int', 'numSplits', ')']",0
PigInputFormat.java,"['throws', 'IOException', '{']",0
PigInputFormat.java,"['ArrayList', '<', 'Pair', '<', 'FileSpec', ',', 'Boolean', '>', '>', 'inputs', ';']",0
PigInputFormat.java,"['ArrayList', '<', 'ArrayList', '<', 'OperatorKey', '>', '>', 'inpTargets', ';']",0
PigInputFormat.java,"['PigContext', 'pigContext', ';']",0
PigInputFormat.java,"['inputs', '=', '(', 'ArrayList', '<', 'Pair', '<', 'FileSpec', ',', 'Boolean', '>', '>', ')', 'ObjectSerializer']",0
PigInputFormat.java,"['.', 'deserialize', '(', 'job', '.', 'get', '(', '""', 'pig', '.', 'inputs', '""', ')', ')', ';']",0
PigInputFormat.java,"['inpTargets', '=', '(', 'ArrayList', '<', 'ArrayList', '<', 'OperatorKey', '>', '>', ')', 'ObjectSerializer']",0
PigInputFormat.java,"['.', 'deserialize', '(', 'job', '.', 'get', '(', '""', 'pig', '.', 'inpTargets', '""', ')', ')', ';']",0
PigInputFormat.java,"['pigContext', '=', '(', 'PigContext', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'job']",0
PigInputFormat.java,"['.', 'get', '(', '""', 'pig', '.', 'pigContext', '""', ')', ')', ';']",0
PigInputFormat.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigInputFormat.java,"['int', 'errCode', '=', '2094', ';']",0
PigInputFormat.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'deserialize', 'object', '.', '""', ';']",0
PigInputFormat.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
PigInputFormat.java,"['ArrayList', '<', 'InputSplit', '>', 'splits', '=', 'new', 'ArrayList', '<', 'InputSplit', '>', '(', ')', ';']",0
PigInputFormat.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputs', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
PigInputFormat.java,"['Path', 'path', '=', 'new', 'Path', '(', 'inputs', '.', 'get', '(', 'i', ')', '.', 'first', '.', 'getFileName', '(', ')', ')', ';']",0
PigInputFormat.java,"['FileSystem', 'fs', ';']",0
PigInputFormat.java,"['fs', '=', 'path', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigInputFormat.java,"['/', '/', 'If', 'an', 'application', 'specific']",0
PigInputFormat.java,"['/', '/', 'scheme', 'was', 'used']",0
PigInputFormat.java,"['/', '/', '(', 'e', '.', 'g', '.', ':', '""', 'hbase', ':', '/', '/', 'table', '""', ')', 'we', 'will', 'fail']",0
PigInputFormat.java,"['/', '/', 'getting', 'the', 'file', 'system', '.', 'That', ""'"", 's']",0
PigInputFormat.java,"['/', '/', 'ok', ',', 'we', 'just', 'use', 'the', 'dfs', 'in', 'that', 'case', '.']",0
PigInputFormat.java,"['fs', '=', 'new', 'Path', '(', '""', '/', '""', ')', '.', 'getFileSystem', '(', 'job', ')', ';']",0
PigInputFormat.java,"['/', '/', 'if', 'the', 'execution', 'is', 'against', 'Mapred', 'DFS', ',', 'set']",0
PigInputFormat.java,"['/', '/', 'working', 'dir', 'to', '/', 'user', '/', '<', 'userid', '>']",0
PigInputFormat.java,"['if', '(', 'pigContext', '.', 'getExecType', '(', ')', '=', '=', 'ExecType', '.', 'MAPREDUCE', ')', '{']",0
PigInputFormat.java,"['fs', '.', 'setWorkingDirectory', '(', 'new', 'Path', '(', '""', '/', 'user', '""', ',', 'job', '.', 'getUser', '(', ')', ')', ')', ';']",0
PigInputFormat.java,"['DataStorage', 'store', '=', 'new', 'HDataStorage', '(', 'ConfigurationUtil', '.', 'toProperties', '(', 'job', ')', ')', ';']",0
PigInputFormat.java,"['ValidatingInputFileSpec', 'spec', ';']",0
PigInputFormat.java,"['if', '(', 'inputs', '.', 'get', '(', 'i', ')', '.', 'first', 'instanceof', 'ValidatingInputFileSpec', ')', '{']",0
PigInputFormat.java,"['spec', '=', '(', 'ValidatingInputFileSpec', ')', 'inputs', '.', 'get', '(', 'i', ')', '.', 'first', ';']",0
PigInputFormat.java,"['}', 'else', '{']",0
PigInputFormat.java,"['spec', '=', 'new', 'ValidatingInputFileSpec', '(', 'inputs', '.', 'get', '(', 'i', ')', '.', 'first', ',', 'store', ')', ';']",0
PigInputFormat.java,"['boolean', 'isSplittable', '=', 'inputs', '.', 'get', '(', 'i', ')', '.', 'second', ';']",0
PigInputFormat.java,"['if', '(', '(', 'spec', '.', 'getSlicer', '(', ')', 'instanceof', 'PigSlicer', ')', ')', '{']",0
PigInputFormat.java,"['(', '(', 'PigSlicer', ')', 'spec', '.', 'getSlicer', '(', ')', ')', '.', 'setSplittable', '(', 'isSplittable', ')', ';']",0
PigInputFormat.java,"['Slice', '[', ']', 'pigs', '=', 'spec', '.', 'getSlicer', '(', ')', '.', 'slice', '(', 'store', ',', 'spec', '.', 'getFileName', '(', ')', ')', ';']",0
PigInputFormat.java,"['for', '(', 'Slice', 'split', ':', 'pigs', ')', '{']",0
PigInputFormat.java,"['splits', '.', 'add', '(', 'new', 'SliceWrapper', '(', 'split', ',', 'pigContext', '.', 'getExecType', '(', ')', ',', 'i', ',', 'fs', ',', 'inpTargets', '.', 'get', '(', 'i', ')', ')', ')', ';']",0
PigInputFormat.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
PigInputFormat.java,"['throw', 'ee', ';']",0
PigInputFormat.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigInputFormat.java,"['int', 'errCode', '=', '2118', ';']",0
PigInputFormat.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'create', 'input', 'slice', 'for', ':', '""', '+', 'inputs', '.', 'get', '(', 'i', ')', '.', 'first', '.', 'getFileName', '(', ')', ';']",0
PigInputFormat.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
PigInputFormat.java,"['return', 'splits', '.', 'toArray', '(', 'new', 'SliceWrapper', '[', 'splits', '.', 'size', '(', ')', ']', ')', ';']",0
PigInputFormat.java,"['public', 'RecordReader', '<', 'Text', ',', 'Tuple', '>', 'getRecordReader', '(', 'InputSplit', 'split', ',']",0
PigInputFormat.java,"['JobConf', 'job', ',', 'Reporter', 'reporter', ')', 'throws', 'IOException', '{']",0
PigInputFormat.java,"['PigInputFormat', '.', 'sJob', '=', 'job', ';']",0
PigInputFormat.java,"['activeSplit', '=', '(', 'SliceWrapper', ')', 'split', ';']",0
PigInputFormat.java,"['return', '(', '(', 'SliceWrapper', ')', 'split', ')', '.', 'makeReader', '(', 'job', ')', ';']",0
PigInputFormat.java,"['public', 'void', 'configure', '(', 'JobConf', 'conf', ')', '{']",0
PigInputFormat.java,"['public', 'static', 'SliceWrapper', 'getActiveSplit', '(', ')', '{']",0
PigInputFormat.java,"['return', 'activeSplit', ';']",0
PigInputFormat.java,"['private', 'static', 'SliceWrapper', 'activeSplit', ';']",0
LOBinCond.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOBinCond.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOBinCond.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOBinCond.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOBinCond.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOBinCond.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOBinCond.java,"['public', 'class', 'LOBinCond', 'extends', 'ExpressionOperator', '{']",0
LOBinCond.java,"['/', '/', 'BinCond', 'has', 'a', 'conditional', 'expression', 'and', 'two', 'nested', 'queries', '.']",0
LOBinCond.java,"['/', '/', 'If', 'the', 'conditional', 'expression', 'evaluates', 'to', 'true', 'the', 'first', 'nested', 'query']",0
LOBinCond.java,"['/', '/', 'is', 'executed', 'else', 'the', 'second', 'nested', 'query', 'is', 'executed']",0
LOBinCond.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOBinCond.java,"['public', 'LOBinCond', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOBinCond.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOBinCond.java,"['}', '/', '/', 'End', 'Constructor', 'LOBinCond']",0
LOBinCond.java,"['public', 'ExpressionOperator', 'getCond', '(', ')', '{']",0
LOBinCond.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOBinCond.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOBinCond.java,"['return', 'null', ';']",0
LOBinCond.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '0', ')', ';']",0
LOBinCond.java,"['public', 'ExpressionOperator', 'getLhsOp', '(', ')', '{']",0
LOBinCond.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOBinCond.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOBinCond.java,"['return', 'null', ';']",0
LOBinCond.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '1', ')', ';']",0
LOBinCond.java,"['public', 'ExpressionOperator', 'getRhsOp', '(', ')', '{']",0
LOBinCond.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOBinCond.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOBinCond.java,"['return', 'null', ';']",0
LOBinCond.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '2', ')', ';']",0
LOBinCond.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOBinCond.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOBinCond.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOBinCond.java,"['return', 'mSchema', ';']",0
LOBinCond.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOBinCond.java,"['/', '/', 'We', 'need', 'a', 'check', 'of', 'LHS', 'and', 'RHS', 'schemas']",0
LOBinCond.java,"['/', '/', 'The', 'type', 'checker', 'perform', 'this', 'task']",0
LOBinCond.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOBinCond.java,"['mFieldSchema', '=', 'getLhsOp', '(', ')', '.', 'getFieldSchema', '(', ')', ';']",0
LOBinCond.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOBinCond.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOBinCond.java,"['mFieldSchema', '=', 'null', ';']",0
LOBinCond.java,"['mIsFieldSchemaComputed', '=', 'false', ';']",0
LOBinCond.java,"['throw', 'fee', ';']",0
LOBinCond.java,"['return', 'mFieldSchema', ';']",0
LOBinCond.java,"['public', 'String', 'name', '(', ')', '{']",0
LOBinCond.java,"['return', '""', 'BinCond', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOBinCond.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
LOBinCond.java,"['return', 'true', ';']",1
LOBinCond.java,"['/', '*', '*']",0
LOBinCond.java,"['/', '*', '*']",0
LOBinCond.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOBinCond.java,"['LOBinCond', 'clone', '=', '(', 'LOBinCond', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOBinCond.java,"['return', 'clone', ';']",0
MapRedUtil.java,"['/', '*', '*']",0
MapRedUtil.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'util', ';']",0
MapRedUtil.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileSystem', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'util', '.', 'Progressable', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreConfig', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreFunc', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'JobControlCompiler', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
MapRedUtil.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
MapRedUtil.java,"['/', '*', '*']",0
MapRedUtil.java,"['public', 'class', 'MapRedUtil', '{']",0
MapRedUtil.java,"['/', '*', '*']",0
MapRedUtil.java,"['String', 'name', ',', 'Progressable', 'progress', ')', '}']",0
MapRedUtil.java,"['public', 'static', 'StoreFunc', 'getStoreFunc', '(', 'JobConf', 'conf', ')', 'throws', 'ExecException', '{']",0
MapRedUtil.java,"['StoreFunc', 'store', ';']",0
MapRedUtil.java,"['String', 'storeFunc', '=', 'conf', '.', 'get', '(', '""', 'pig', '.', 'storeFunc', '""', ',', '""', '""', ')', ';']",1
MapRedUtil.java,"['if', '(', 'storeFunc', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",1
MapRedUtil.java,"['store', '=', 'new', 'PigStorage', '(', ')', ';']",1
MapRedUtil.java,"['}', 'else', '{']",1
MapRedUtil.java,"['storeFunc', '=', '(', 'String', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'storeFunc', ')', ';']",0
MapRedUtil.java,"['store', '=', '(', 'StoreFunc', ')', 'PigContext']",0
MapRedUtil.java,"['.', 'instantiateFuncFromSpec', '(', 'storeFunc', ')', ';']",0
MapRedUtil.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",1
MapRedUtil.java,"['int', 'errCode', '=', '2081', ';']",1
MapRedUtil.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'setup', 'the', 'store', 'function', '.', '""', ';']",1
MapRedUtil.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",1
MapRedUtil.java,"['return', 'store', ';']",0
MapRedUtil.java,"['/', '*', '*']",0
MapRedUtil.java,"['String', 'name', ',', 'Progressable', 'progress', ')', '}']",0
MapRedUtil.java,"['public', 'static', 'StoreConfig', 'getStoreConfig', '(', 'JobConf', 'conf', ')', 'throws', 'IOException', '{']",0
MapRedUtil.java,"['return', '(', 'StoreConfig', ')', 'ObjectSerializer', '.', 'deserialize', '(', 'conf', '.', 'get', '(', 'JobControlCompiler', '.', 'PIG_STORE_CONFIG', ')', ')', ';']",0
TestProjectionMap.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestProjectionMap.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TestProjectionMap.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
TestProjectionMap.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'LogicalPlanTester', ';']",0
TestProjectionMap.java,"['public', 'class', 'TestProjectionMap', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestProjectionMap.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestProjectionMap.java,"['LogicalPlanTester', 'planTester', '=', 'new', 'LogicalPlanTester', '(', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestProjectionMap.java,"['planTester', '.', 'reset', '(', ')', ';']",0
TestProjectionMap.java,"['private', 'static', 'final', 'String', 'simpleEchoStreamingCommand', ';']",0
TestProjectionMap.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')']",0
TestProjectionMap.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '\\', '\\', '""', '$', '_', '\\', '\\', '\\', '""', ""'"", '""', ';']",0
TestProjectionMap.java,"['simpleEchoStreamingCommand', '=', '""', 'perl', '-', 'ne', ""'"", 'print', '\\', '""', '$', '_', '\\', '""', ""'"", '""', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryForeach1', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '$', '1', ',', '$', '2', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['/', '/', 'and', 'null', 'removed', 'fields', 'since', 'the', 'input', 'schema', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryForeach2', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", 'using', '""', '+', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ""'"", ':', ""'"", ')', ')', 'generate', '$', '1', ',', ""'"", 'aoeuaoeu', ""'"", ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['/', '/', 'and', 'null', 'removed', 'fields', 'since', 'the', 'input', 'schema', 'is', 'null']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '0', ',', '1', ']']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '0', ',', '1', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '1', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '1', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryCogroup1', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '1', ')', 'generate', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', '$', '1', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'columns', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",0
TestProjectionMap.java,"['int', 'expectedColumn', '=', '0', ';']",0
TestProjectionMap.java,"['for', '(', 'Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', ':', 'foreachRemovedFields', ')', '{']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', 'expectedColumn', '+', '+', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '0', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryGroupAll', '(', ')', 'throws', 'Exception', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'ALL', ')', 'generate', '$', '1', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '0', ',', '1', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMappedFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'foreachMappedFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMappedFields', '.', 'get', '(', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'columns', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryGroup2', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '1', ')', 'generate', 'group', ',', ""'"", '1', ""'"", ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '0', ',', '1', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'columns', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '1', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryCogroup2', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'cogroup', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '1', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '(', '$', '1', ')', ')', 'generate', '$', '1', '.', '$', '1', ',', '$', '2', '.', '$', '1', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryGroup3', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'group', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '(', '$', '6', ',', '$', '7', ')', ')', 'generate', 'flatten', '(', 'group', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '6', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '7', ')', ';']",1
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryFilterNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'filter', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'filterProjectionMap', '=', 'filter', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'filterProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['public', 'void', 'testQuerySplitNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', '$', '0', '=', '=', ""'"", '3', ""'"", ',', 'c', 'if', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'split', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOSplit', 'split', '=', '(', 'LOSplit', ')', 'lp', '.', 'getSuccessors', '(', 'load', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitProjectionMap', '=', 'split', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['LOSplitOutput', 'splitb', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitbProjectionMap', '=', 'splitb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitbProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['LOSplitOutput', 'splitc', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitcProjectionMap', '=', 'splitc', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitcProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['public', 'void', 'testQueryOrderByNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'order', 'by', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'sortProjectionMap', '=', 'sort', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryLimitNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'limit', 'b', '10', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'order', 'by', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'load', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'sortProjectionMap', '=', 'sort', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'limit', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLimit', 'limit', '=', '(', 'LOLimit', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'limitProjectionMap', '=', 'limit', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'limitProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['public', 'void', 'testQueryDistinctNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'distinct', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LODistinct', 'distinct', '=', '(', 'LODistinct', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'distinctProjectionMap', '=', 'distinct', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'distinctProjectionMap', '=', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['public', 'void', 'testQueryStreamingNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'stream', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'streamProjectionMap', '=', 'stream', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryStreamingNoSchema1', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'stream', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'streamProjectionMap', '=', 'stream', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryForeach3', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', '(', 'load', ""'"", 'a', ""'"", ')', 'generate', '(', '$', '1', '=', '=', ""'"", '3', ""'"", '?', '$', '2', ':', '$', '3', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['/', '/', 'and', 'null', 'removed', 'fields', 'since', 'the', 'input', 'schema', 'is', 'null']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '0', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryForeach4', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'foreach', '(', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ')', 'generate', 'A', ',', 'flatten', '(', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', '4', ';', '+', '+', 'i', ')', '{']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', 'i', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testForeach5', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'A', '=', 'load', ""'"", 'a', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'B', '=', 'load', ""'"", 'b', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'C', '=', 'cogroup', 'A', 'by', '(', '$', '1', ')', ',', 'B', 'by', '(', '$', '1', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'foreach', 'C', '{', '""', '+']",0
TestProjectionMap.java,"['""', 'B', '=', 'order', 'B', 'by', '$', '0', ';', '""', '+']",0
TestProjectionMap.java,"['""', 'generate', 'FLATTEN', '(', 'A', ')', ',', 'B', '.', '(', '$', '1', ',', '$', '2', ',', '$', '3', ')', ';', '""', '+']",0
TestProjectionMap.java,"['""', '}', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'columns', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'contain', '[', '0', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryCrossNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'crossProjectionMap', '=', 'cross', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryUnionNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'union', 'projection', 'map']",0
TestProjectionMap.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'unionProjectionMap', '=', 'union', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryFRJoinNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['ProjectionMap', 'frjoinProjectionMap', '=', 'frjoin', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryJoinNoSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'the', 'cogroup', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryFilterWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'filter', 'a', 'by', '$', '1', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'filter', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LOFilter', 'filter', '=', '(', 'LOFilter', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'filterProjectionMap', '=', 'filter', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'filterProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'filterProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQuerySplitWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'split', 'a', 'into', 'b', 'if', 'url', '=', '=', ""'"", '3', ""'"", ',', 'c', 'if', 'hitCount', '=', '=', ""'"", '3', ""'"", ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'split', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOSplit', 'split', '=', '(', 'LOSplit', ')', 'lp', '.', 'getSuccessors', '(', 'load', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitProjectionMap', '=', 'split', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['LOSplitOutput', 'splitb', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitbProjectionMap', '=', 'splitb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitbProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['LOSplitOutput', 'splitc', '=', '(', 'LOSplitOutput', ')', 'lp', '.', 'getSuccessors', '(', 'split', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'splitcProjectionMap', '=', 'splitc', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'splitcProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryOrderByWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'order', 'by', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'sortProjectionMap', '=', 'sort', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryLimitWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '1', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'limit', 'b', '10', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'order', 'by', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LOSort', 'sort', '=', '(', 'LOSort', ')', 'lp', '.', 'getSuccessors', '(', 'load', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'sortProjectionMap', '=', 'sort', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'sortProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'limit', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LOLimit', 'limit', '=', '(', 'LOLimit', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'limitProjectionMap', '=', 'limit', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'limitProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'limitProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryDistinctWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'distinct', 'projection', 'map', 'is', 'not', 'null']",0
TestProjectionMap.java,"['LODistinct', 'distinct', '=', '(', 'LODistinct', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'distinctProjectionMap', '=', 'distinct', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'distinctProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'distinctProjectionMap', '.', 'changes', '(', ')', '=', '=', 'false', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryStreamingWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'x', ',', 'y', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'stream', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'streamProjectionMap', '=', 'stream', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '.', 'getRemovedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'streamAddedFields', '=', 'streamProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'get', '(', '1', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryStreamingWithSchema1', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'stream', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ')', 'through', '`', '""', '+', 'simpleEchoStreamingCommand', '+', '""', '`', 'as', '(', 'x', ',', 'y', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'load', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadProjectionMap', '=', 'load', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'stream', 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOStream', 'stream', '=', '(', 'LOStream', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'streamProjectionMap', '=', 'stream', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamProjectionMap', '.', 'getMappedFields', '(', ')', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'columns', 'from', 'the', 'input', 'load']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'streamRemovedFields', '=', 'streamProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamRemovedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'streamRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['removedField', '=', 'streamRemovedFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'streamAddedFields', '=', 'streamProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'get', '(', '0', ')', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'streamAddedFields', '.', 'get', '(', '1', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryImplicitJoinWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitCount', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'cogroup', 'a', 'by', 'url', ',', 'b', 'by', 'url', ';', '""', ')', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'group', ',', 'flatten', '(', 'a', ')', ',', 'flatten', '(', 'b', ')', ';', '""', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '0', ')', ';']",1
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'hitCount', 'from', 'a', 'and', 'rank', 'from', 'b']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupRemovedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'cogroupRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['removedField', '=', 'cogroupRemovedFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['lp', '=', 'planTester', '.', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'd', 'generate', 'group', ',', 'a', ':', ':', 'url', ',', 'b', ':', ':', 'url', ',', 'b', ':', ':', 'rank', ',', 'rank', ';', '""', ')', ';']",0
TestProjectionMap.java,"['foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '2', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '3', ')', ';']",1
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '3', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '3', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '4', ')', ';']",0
TestProjectionMap.java,"['foreachMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '4', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '4', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '4', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryCrossWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'crossProjectionMap', '=', 'cross', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'crossMapFields', '=', 'crossProjectionMap', '.', 'getMappedFields', '(', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'crossMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'crossMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'crossMapFields', '.', 'get', '(', '0', ')', ';']",1
TestProjectionMap.java,"['crossMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'crossMapFields', '.', 'get', '(', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['crossMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'crossMapFields', '.', 'get', '(', '2', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['crossMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'crossMapFields', '.', 'get', '(', '3', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'crossRemovedFields', '=', 'crossProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossRemovedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'crossAddedFields', '=', 'crossProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryUnionWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'union', 'projection', 'map']",0
TestProjectionMap.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'unionProjectionMap', '=', 'union', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'unionMapFields', '=', 'unionProjectionMap', '.', 'getMappedFields', '(', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'unionMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'unionMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'unionMapFields', '.', 'get', '(', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '0', ')', ';']",1
TestProjectionMap.java,"['unionMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'unionMapFields', '.', 'get', '(', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionMapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '1', ')', ';']",1
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'unionRemovedFields', '=', 'unionProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionRemovedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'unionAddedFields', '=', 'unionProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryFRJoinWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'frjoinProjectionMap', '=', 'frjoin', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinProjectionMap', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'frjoinMapFields', '=', 'frjoinProjectionMap', '.', 'getMappedFields', '(', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'frjoinMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'frjoinMapFields', '.', 'get', '(', '0', ')', ';']",1
TestProjectionMap.java,"['frjoinMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'frjoinMapFields', '.', 'get', '(', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['frjoinMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'frjoinMapFields', '.', 'get', '(', '2', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['frjoinMapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'frjoinMapFields', '.', 'get', '(', '3', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinMapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'frjoinRemovedFields', '=', 'frjoinProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinRemovedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'frjoinAddedFields', '=', 'frjoinProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryJoinWithSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", 'as', '(', 'url', ',', 'rank', ')', ')', 'by', '$', '0', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupRemovedFields', '=', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupRemovedFields', '=', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupRemovedFields', '!', '=', 'null', ')', ';']",1
TestProjectionMap.java,"['removedFields', '=', 'cogroupRemovedFields', '.', 'get', '(', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'first', '=', '=', '1', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '3', ')', ';']",1
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryCrossWithMixedSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'cross', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['LOCross', 'cross', '=', '(', 'LOCross', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'crossProjectionMap', '=', 'cross', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'crossProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryUnionWithMixedSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'union', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', ',', '(', 'load', ""'"", 'b', ""'"", ')', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'union', 'projection', 'map']",0
TestProjectionMap.java,"['LOUnion', 'union', '=', '(', 'LOUnion', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'unionProjectionMap', '=', 'union', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'unionProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryFRJoinWithMixedSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', 'using', '\\', '""', 'replicated', '\\', '""', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cross', 'projection', 'map']",0
TestProjectionMap.java,"['LOFRJoin', 'frjoin', '=', '(', 'LOFRJoin', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'frjoinProjectionMap', '=', 'frjoin', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'frjoinProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['public', 'void', 'testQueryJoinWithMixedSchema', '(', ')', '{']",0
TestProjectionMap.java,"['String', 'query', '=', '""', 'c', '=', 'join', '(', 'load', ""'"", 'a', ""'"", 'as', '(', 'url', ',', 'hitcount', ')', ')', 'by', '$', '0', ',', '(', 'load', ""'"", 'b', ""'"", ')', 'by', '$', '0', ';', '""', ';']",0
TestProjectionMap.java,"['LogicalPlan', 'lp', '=', 'planTester', '.', 'buildPlan', '(', 'query', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'loads', ""'"", 'projection', 'map', 'is', 'null']",0
TestProjectionMap.java,"['LOLoad', 'loada', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadaProjectionMap', '=', 'loada', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadaProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['LOLoad', 'loadb', '=', '(', 'LOLoad', ')', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'loadbProjectionMap', '=', 'loadb', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'loadbProjectionMap', '=', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'cogroup', 'projection', 'map']",0
TestProjectionMap.java,"['LOCogroup', 'cogroup', '=', '(', 'LOCogroup', ')', 'lp', '.', 'getSuccessors', '(', 'loada', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'cogroupProjectionMap', '=', 'cogroup', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupMapFields', '=', 'cogroupProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupMapFields', '!', '=', 'null', ')', ';']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'cogroupMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'first', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '1', ')', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'not', 'null']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'is', 'not', 'null']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'cogroupRemovedFields', '=', 'cogroupProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",1
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedFields', '=', 'cogroupRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedFields', '=', 'cogroupRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedFields', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'cogroup', 'added', 'fields', 'contain', '[', '1', ',', '2', ']']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'cogroupAddedFields', '=', 'cogroupProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'size', '(', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '0', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'cogroupAddedFields', '.', 'get', '(', '1', ')', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'the', 'foreach', 'projection', 'map', 'has', 'non', '-', 'null', 'mappedFields']",0
TestProjectionMap.java,"['LOForEach', 'foreach', '=', '(', 'LOForEach', ')', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['ProjectionMap', 'foreachProjectionMap', '=', 'foreach', '.', 'getProjectionMap', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachProjectionMap', '.', 'changes', '(', ')', '=', '=', 'true', ')', ';']",0
TestProjectionMap.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachMapFields', '=', 'foreachProjectionMap', '.', 'getMappedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachMapFields', '.', 'size', '(', ')', '=', '=', '3', ')', ';']",1
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '1', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '2', ')', ';']",0
TestProjectionMap.java,"['mapValues', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'foreachMapFields', '.', 'get', '(', '2', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'mapValues', '.', 'get', '(', '0', ')', '.', 'second', '=', '=', '2', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'removed', 'fields', 'has', 'all', 'the', 'group', 'column', 'from', 'the', 'input', 'cogroup']",0
TestProjectionMap.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'foreachRemovedFields', '=', 'foreachProjectionMap', '.', 'getRemovedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachRemovedFields', '.', 'size', '(', ')', '=', '=', '1', ')', ';']",0
TestProjectionMap.java,"['Pair', '<', 'Integer', ',', 'Integer', '>', 'removedField', '=', 'foreachRemovedFields', '.', 'get', '(', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'first', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'removedField', '.', 'second', '=', '=', '0', ')', ';']",0
TestProjectionMap.java,"['/', '/', 'check', 'that', 'added', 'fields', 'is', 'null']",0
TestProjectionMap.java,"['List', '<', 'Integer', '>', 'foreachAddedFields', '=', 'foreachProjectionMap', '.', 'getAddedFields', '(', ')', ';']",0
TestProjectionMap.java,"['assertTrue', '(', 'foreachAddedFields', '=', '=', 'null', ')', ';']",0
PODistinct.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', ';']",0
PODistinct.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
PODistinct.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhyPlanVisitor', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'NodeIdGenerator', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
PODistinct.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
PODistinct.java,"['/', '*', '*']",0
PODistinct.java,"['public', 'class', 'PODistinct', 'extends', 'PhysicalOperator', 'implements', 'Cloneable', '{']",0
PODistinct.java,"['private', 'boolean', 'inputsAccumulated', '=', 'false', ';']",0
PODistinct.java,"['private', 'DataBag', 'distinctBag', '=', 'null', ';']",0
PODistinct.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
PODistinct.java,"['transient', 'Iterator', '<', 'Tuple', '>', 'it', ';']",0
PODistinct.java,"['public', 'PODistinct', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ',', 'List', '<', 'PhysicalOperator', '>', 'inp', ')', '{']",0
PODistinct.java,"['super', '(', 'k', ',', 'rp', ',', 'inp', ')', ';']",0
PODistinct.java,"['public', 'PODistinct', '(', 'OperatorKey', 'k', ',', 'int', 'rp', ')', '{']",0
PODistinct.java,"['super', '(', 'k', ',', 'rp', ')', ';']",0
PODistinct.java,"['public', 'PODistinct', '(', 'OperatorKey', 'k', ',', 'List', '<', 'PhysicalOperator', '>', 'inp', ')', '{']",0
PODistinct.java,"['super', '(', 'k', ',', 'inp', ')', ';']",0
PODistinct.java,"['public', 'PODistinct', '(', 'OperatorKey', 'k', ')', '{']",0
PODistinct.java,"['super', '(', 'k', ')', ';']",0
PODistinct.java,"['public', 'boolean', 'isBlocking', '(', ')', '{']",0
PODistinct.java,"['return', 'true', ';']",0
PODistinct.java,"['public', 'Result', 'getNext', '(', 'Tuple', 't', ')', 'throws', 'ExecException', '{']",0
PODistinct.java,"['if', '(', '!', 'inputsAccumulated', ')', '{']",0
PODistinct.java,"['Result', 'in', '=', 'processInput', '(', ')', ';']",0
PODistinct.java,"['distinctBag', '=', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDistinctBag', '(', ')', ';']",0
PODistinct.java,"['while', '(', 'in', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_EOP', ')', '{']",0
PODistinct.java,"['if', '(', 'in', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_ERR', ')', '{']",0
PODistinct.java,"['log', '.', 'error', '(', '""', 'Error', 'in', 'reading', 'from', 'inputs', '""', ')', ';']",0
PODistinct.java,"['return', 'in', ';']",0
PODistinct.java,"['/', '/', 'continue', ';']",0
PODistinct.java,"['}', 'else', 'if', '(', 'in', '.', 'returnStatus', '=', '=', 'POStatus', '.', 'STATUS_NULL', ')', '{']",0
PODistinct.java,"['/', '/', 'Ignore', 'the', 'null', ',', 'read', 'the', 'next', 'tuple', '.', 'It', ""'"", 's', 'not', 'clear']",0
PODistinct.java,"['/', '/', 'to', 'me', 'that', 'we', 'should', 'ever', 'get', 'this', ',', 'or', 'if', 'we', 'should', ',']",0
PODistinct.java,"['/', '/', 'how', 'it', 'differs', 'from', 'EOP', '.', 'But', 'ignoring', 'it', 'here', 'seems']",0
PODistinct.java,"['/', '/', 'to', 'work', '.']",0
PODistinct.java,"['in', '=', 'processInput', '(', ')', ';']",0
PODistinct.java,"['distinctBag', '.', 'add', '(', '(', 'Tuple', ')', 'in', '.', 'result', ')', ';']",0
PODistinct.java,"['in', '=', 'processInput', '(', ')', ';']",0
PODistinct.java,"['inputsAccumulated', '=', 'true', ';']",0
PODistinct.java,"['if', '(', 'it', '=', '=', 'null', ')', '{']",0
PODistinct.java,"['it', '=', 'distinctBag', '.', 'iterator', '(', ')', ';']",0
PODistinct.java,"['res', '.', 'result', '=', 'it', '.', 'next', '(', ')', ';']",0
PODistinct.java,"['if', '(', 'res', '.', 'result', '=', '=', 'null', ')', '{']",0
PODistinct.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_EOP', ';']",0
PODistinct.java,"['reset', '(', ')', ';']",0
PODistinct.java,"['}', 'else', '{']",0
PODistinct.java,"['res', '.', 'returnStatus', '=', 'POStatus', '.', 'STATUS_OK', ';']",0
PODistinct.java,"['return', 'res', ';']",0
PODistinct.java,"['public', 'String', 'name', '(', ')', '{']",0
PODistinct.java,"['return', '""', 'PODistinct', '""', '+', '""', '[', '""', '+', 'DataType', '.', 'findTypeName', '(', 'resultType', ')', '+', '""', ']', '""', '+', '""', '-', '""', '+', 'mKey', '.', 'toString', '(', ')', ';']",0
PODistinct.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
PODistinct.java,"['return', 'false', ';']",0
PODistinct.java,"['public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{']",0
PODistinct.java,"['return', 'false', ';']",0
PODistinct.java,"['public', 'void', 'reset', '(', ')', '{']",0
PODistinct.java,"['inputsAccumulated', '=', 'false', ';']",0
PODistinct.java,"['distinctBag', '=', 'null', ';']",0
PODistinct.java,"['it', '=', 'null', ';']",0
PODistinct.java,"['public', 'void', 'visit', '(', 'PhyPlanVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
PODistinct.java,"['v', '.', 'visitDistinct', '(', 'this', ')', ';']",0
PODistinct.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
PODistinct.java,"['public', 'PODistinct', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
PODistinct.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
PODistinct.java,"['return', 'new', 'PODistinct', '(', 'new', 'OperatorKey', '(', 'this', '.', 'mKey', '.', 'scope', ',', 'NodeIdGenerator', '.', 'getGenerator', '(', ')', '.', 'getNextNodeId', '(', 'this', '.', 'mKey', '.', 'scope', ')', ')', ',', 'this', '.', 'requestedParallelism', ',', 'this', '.', 'inputs', ')', ';']",0
TestLoad.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestLoad.java,"['import', 'java', '.', 'util', '.', '*', ';']",0
TestLoad.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
TestLoad.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
TestLoad.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
TestLoad.java,"['import', 'junit', '.', 'framework', '.', 'Assert', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataByteArray', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DefaultBagFactory', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DefaultTuple', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'POStatus', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'Result', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLoad', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'GenPhyOp', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TestHelper', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorageException', ';']",0
TestLoad.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
TestLoad.java,"['import', 'org', '.', 'junit', '.', 'After', ';']",0
TestLoad.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestLoad.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestLoad.java,"['public', 'class', 'TestLoad', 'extends', 'junit', '.', 'framework', '.', 'TestCase', '{']",0
TestLoad.java,"['FileSpec', 'inpFSpec', ';']",0
TestLoad.java,"['POLoad', 'ld', ';']",0
TestLoad.java,"['PigContext', 'pc', ';']",0
TestLoad.java,"['DataBag', 'inpDB', ';']",0
TestLoad.java,"['String', 'curDir', ';']",0
TestLoad.java,"['String', 'inpDir', ';']",0
TestLoad.java,"['PigServer', 'pig', ';']",0
TestLoad.java,"['static', 'MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestLoad.java,"['public', 'void', 'setUp', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['curDir', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'dir', '""', ')', ';']",0
TestLoad.java,"['inpDir', '=', 'curDir', '+', 'File', '.', 'separatorChar', '+', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'InputFiles', '/', '""', ';']",0
TestLoad.java,"['if', '(', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')', ')']",0
TestLoad.java,"['inpDir', '=', '""', '/', '""', '+', 'FileLocalizer', '.', 'parseCygPath', '(', 'inpDir', ',', 'FileLocalizer', '.', 'STYLE_WINDOWS', ')', ';']",0
TestLoad.java,"['inpFSpec', '=', 'new', 'FileSpec', '(', '""', 'file', ':', '""', '+', 'inpDir', '+', '""', 'passwd', '""', ',', 'new', 'FuncSpec', '(', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', ',', 'new', 'String', '[', ']', '{', '""', ':', '""', '}', ')', ')', ';']",0
TestLoad.java,"['FileLocalizer', '.', 'deleteTempFiles', '(', ')', ';']",0
TestLoad.java,"['pig', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestLoad.java,"['pc', '=', 'pig', '.', 'getPigContext', '(', ')', ';']",0
TestLoad.java,"['ld', '=', 'GenPhyOp', '.', 'topLoadOp', '(', ')', ';']",0
TestLoad.java,"['ld', '.', 'setLFile', '(', 'inpFSpec', ')', ';']",0
TestLoad.java,"['ld', '.', 'setPc', '(', 'pc', ')', ';']",0
TestLoad.java,"['inpDB', '=', 'DefaultBagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', ';']",0
TestLoad.java,"['BufferedReader', 'br', '=', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'InputFiles', '/', 'passwd', '""', ')', ')', ';']",0
TestLoad.java,"['for', '(', 'String', 'line', '=', 'br', '.', 'readLine', '(', ')', ';', 'line', '!', '=', 'null', ';', 'line', '=', 'br', '.', 'readLine', '(', ')', ')', '{']",0
TestLoad.java,"['String', '[', ']', 'flds', '=', 'line', '.', 'split', '(', '""', ':', '""', ',', '-', '1', ')', ';']",0
TestLoad.java,"['Tuple', 't', '=', 'new', 'DefaultTuple', '(', ')', ';']",0
TestLoad.java,"['for', '(', 'String', 'fld', ':', 'flds', ')', '{']",0
TestLoad.java,"['t', '.', 'append', '(', '(', 'fld', '.', 'compareTo', '(', '""', '""', ')', '!', '=', '0', '?', 'new', 'DataByteArray', '(', 'fld', '.', 'getBytes', '(', ')', ')', ':', 'null', ')', ')', ';']",0
TestLoad.java,"['inpDB', '.', 'add', '(', 't', ')', ';']",0
TestLoad.java,"['public', 'void', 'tearDown', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['public', 'void', 'testGetNextTuple', '(', ')', 'throws', 'ExecException', '{']",0
TestLoad.java,"['Tuple', 't', '=', 'null', ';']",0
TestLoad.java,"['int', 'size', '=', '0', ';']",0
TestLoad.java,"['for', '(', 'Result', 'res', '=', 'ld', '.', 'getNext', '(', 't', ')', ';', 'res', '.', 'returnStatus', '!', '=', 'POStatus', '.', 'STATUS_EOP', ';', 'res', '=', 'ld', '.', 'getNext', '(', 't', ')', ')', '{']",0
TestLoad.java,"['assertEquals', '(', 'true', ',', 'TestHelper', '.', 'bagContains', '(', 'inpDB', ',', '(', 'Tuple', ')', 'res', '.', 'result', ')', ')', ';']",0
TestLoad.java,"['+', '+', 'size', ';']",0
TestLoad.java,"['assertEquals', '(', 'true', ',', 'size', '=', '=', 'inpDB', '.', 'size', '(', ')', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadLocalRel', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', '""', ',', '""', '""', ',', 'true', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadLocalAbs', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['String', 'filename', '=', 'curDir', '+', 'File', '.', 'separatorChar', '+', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', '""', ';']",0
TestLoad.java,"['if', '(', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')', ')']",0
TestLoad.java,"['filename', '=', '""', '/', '""', '+', 'FileLocalizer', '.', 'parseCygPath', '(', 'filename', ',', 'FileLocalizer', '.', 'STYLE_WINDOWS', ')', ';']",0
TestLoad.java,"['filename', '=', 'Util', '.', 'encodeEscape', '(', 'filename', ')', ';']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'file', ':', '""', '+', 'filename', ',', '""', '""', ',', 'true', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteRel', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'test', '""', ',', '""', '/', 'tmp', '/', 'test', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteAbs', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', '/', 'tmp', '/', 'test', '""', ',', '""', '/', 'tmp', '/', 'test', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteRelScheme', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'test', '""', ',', '""', '/', 'tmp', '/', 'test', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteAbsScheme', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'hdfs', ':', '/', 'tmp', '/', 'test', '""', ',', '""', '/', 'tmp', '/', 'test', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteAbsAuth', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 'hdfs', ':', '/', '/', 'localhost', ':', '9000', '/', 'test', '""', ',', '""', '/', 'test', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testLoadRemoteNormalize', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', '/', 'tmp', '/', 'foo', '/', '.', '.', '/', '.', '/', '.', '/', '""', ',', '""', '/', 'tmp', '""', ')', ';']",0
TestLoad.java,"['public', 'void', 'testGlobChars', '(', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', '""', 't', '?', 's', '*', '""', ',', '""', '/', 'tmp', '/', 't', '?', 's', '*', '""', ')', ';']",0
TestLoad.java,"['private', 'void', 'checkLoadPath', '(', 'String', 'orig', ',', 'String', 'expected', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['checkLoadPath', '(', 'orig', ',', 'expected', ',', 'false', ')', ';']",0
TestLoad.java,"['private', 'void', 'checkLoadPath', '(', 'String', 'orig', ',', 'String', 'expected', ',', 'boolean', 'isTmp', ')', 'throws', 'Exception', '{']",0
TestLoad.java,"['pc', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', '""', '+', 'true', ')', ';']",0
TestLoad.java,"['DataStorage', 'dfs', '=', 'pc', '.', 'getDfs', '(', ')', ';']",0
TestLoad.java,"['dfs', '.', 'setActiveContainer', '(', 'dfs', '.', 'asContainer', '(', '""', '/', 'tmp', '""', ')', ')', ';']",0
TestLoad.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
TestLoad.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'logicalOpTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLoad.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
TestLoad.java,"['Map', '<', 'String', ',', 'String', '>', 'fileNameMap', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
TestLoad.java,"['LogicalPlanBuilder', 'builder', '=', 'new', 'LogicalPlanBuilder', '(', 'pc', ')', ';']",0
TestLoad.java,"['String', 'query', '=', '""', 'a', '=', 'load', ""'"", '""', '+', 'orig', '+', '""', ""'"", ';', '""', ';']",0
TestLoad.java,"['LogicalPlan', 'lp', '=', 'builder', '.', 'parse', '(', '""', 'Test', '-', 'Load', '""', ',']",0
TestLoad.java,"['fileNameMap', ')', ';']",0
TestLoad.java,"['Assert', '.', 'assertTrue', '(', 'lp', '.', 'size', '(', ')', '>', '0', ')', ';']",0
TestLoad.java,"['LogicalOperator', 'op', '=', 'lp', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
TestLoad.java,"['Assert', '.', 'assertTrue', '(', 'op', 'instanceof', 'LOLoad', ')', ';']",0
TestLoad.java,"['LOLoad', 'load', '=', '(', 'LOLoad', ')', 'op', ';']",0
TestLoad.java,"['String', 'p', '=', 'load', '.', 'getInputFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
TestLoad.java,"['p', '=', 'p', '.', 'replaceAll', '(', '""', 'hdfs', ':', '/', '/', '[', '0', '-', '9a', '-', 'zA', '-', 'Z', ':', '\\', '\\', '.', ']', '*', '/', '""', ',', '""', '/', '""', ')', ';']",0
TestLoad.java,"['if', '(', 'isTmp', ')', '{']",0
TestLoad.java,"['Assert', '.', 'assertTrue', '(', 'p', '.', 'matches', '(', '""', '/', 'tmp', '.', '*', '""', ')', ')', ';']",0
TestLoad.java,"['}', 'else', '{']",0
TestLoad.java,"['Assert', '.', 'assertEquals', '(', 'p', ',', 'expected', ')', ';']",0
PigServer.java,"['package', 'org', '.', 'apache', '.', 'pig', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PigServer.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PigServer.java,"['import', 'java', '.', 'net', '.', 'URL', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Date', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Enumeration', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
PigServer.java,"['import', 'java', '.', 'util', '.', 'Stack', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', '.', 'JOB_STATUS', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'BinStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'PigStorage', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOCogroup', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOFRJoin', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlanBuilder', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'PlanSetter', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'LogicalOptimizer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'QueryParser', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'validators', '.', 'LogicalPlanValidationExecutor', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'CompilationMessageCollector', '.', 'MessageType', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'PropertiesUtil', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LODefine', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStore', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'pen', '.', 'ExampleGenerator', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
PigServer.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'GruntParser', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'class', 'PigServer', '{']",0
PigServer.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
PigServer.java,"['public', 'static', 'ExecType', 'parseExecType', '(', 'String', 'str', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['String', 'normStr', '=', 'str', '.', 'toLowerCase', '(', ')', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'local', '""', ')', ')', 'return', 'ExecType', '.', 'LOCAL', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapreduce', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'mapred', '""', ')', ')', 'return', 'ExecType', '.', 'MAPREDUCE', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pig', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['if', '(', 'normStr', '.', 'equals', '(', '""', 'pigbody', '""', ')', ')', 'return', 'ExecType', '.', 'PIG', ';']",0
PigServer.java,"['int', 'errCode', '=', '2040', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unknown', 'exec', 'type', ':', '""', '+', 'str', ';']",0
PigServer.java,"['throw', 'new', 'PigException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigServer.java,"['private', 'Stack', '<', 'Graph', '>', 'graphs', '=', 'new', 'Stack', '<', 'Graph', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Graph', 'currDAG', ';']",0
PigServer.java,"['private', 'PigContext', 'pigContext', ';']",0
PigServer.java,"['private', 'static', 'int', 'scopeCounter', '=', '0', ';']",0
PigServer.java,"['private', 'String', 'scope', '=', 'constructScope', '(', ')', ';']",0
PigServer.java,"['private', 'ArrayList', '<', 'String', '>', 'cachedScript', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['private', 'boolean', 'aggregateWarning', '=', 'true', ';']",0
PigServer.java,"['private', 'boolean', 'isMultiQuery', '=', 'true', ';']",0
PigServer.java,"['private', 'String', 'constructScope', '(', ')', '{']",0
PigServer.java,"['/', '/', 'scope', 'servers', 'for', 'now', 'as', 'a', 'session', 'id']",0
PigServer.java,"['/', '/', 'String', 'user', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ',', '""', 'DEFAULT_USER_ID', '""', ')', ';']",0
PigServer.java,"['/', '/', 'String', 'date', '=', '(', 'new', 'Date', '(', ')', ')', '.', 'toString', '(', ')', ';']",0
PigServer.java,"['/', '/', 'scope', 'is', 'not', 'really', 'used', 'in', 'the', 'system', 'right', 'now', '.', 'It', 'will']",0
PigServer.java,"['/', '/', 'however', 'make', 'your', 'explain', 'statements', 'look', 'lengthy', 'if', 'set', 'to']",0
PigServer.java,"['/', '/', 'username', '-', 'date', '.', 'For', 'now', 'let', ""'"", 's', 'simplify', 'the', 'scope', ',', 'if', 'a', 'real']",0
PigServer.java,"['/', '/', 'scope', 'is', 'needed', 'again', ',', 'we', 'might', 'need', 'to', 'update', 'all', 'the']",0
PigServer.java,"['/', '/', 'operators', 'to', 'not', 'include', 'scope', 'in', 'their', 'name', '(', ')', '.']",0
PigServer.java,"['return', '""', '""', '+', '(', '+', '+', 'scopeCounter', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'String', 'execTypeString', ')', 'throws', 'ExecException', ',', 'IOException', '{']",0
PigServer.java,"['this', '(', 'parseExecType', '(', 'execTypeString', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'execType', ',', 'PropertiesUtil', '.', 'loadPropertiesFromFile', '(', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'ExecType', 'execType', ',', 'Properties', 'properties', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'new', 'PigContext', '(', 'execType', ',', 'properties', ')', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '(', 'context', ',', 'true', ')', ';']",0
PigServer.java,"['public', 'PigServer', '(', 'PigContext', 'context', ',', 'boolean', 'connect', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['this', '.', 'pigContext', '=', 'context', ';']",0
PigServer.java,"['currDAG', '=', 'new', 'Graph', '(', 'false', ')', ';']",0
PigServer.java,"['aggregateWarning', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'aggregate', '.', 'warning', '""', ')', ')', ';']",0
PigServer.java,"['isMultiQuery', '=', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ')', ';']",0
PigServer.java,"['if', '(', 'connect', ')', '{']",0
PigServer.java,"['pigContext', '.', 'connect', '(', ')', ';']",0
PigServer.java,"['public', 'PigContext', 'getPigContext', '(', ')', '{']",0
PigServer.java,"['return', 'pigContext', ';']",0
PigServer.java,"['public', 'void', 'debugOn', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'true', ';']",0
PigServer.java,"['public', 'void', 'debugOff', '(', ')', '{']",0
PigServer.java,"['pigContext', '.', 'debug', '=', 'false', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'setBatchOn', '(', ')', '{']",0
PigServer.java,"['log', '.', 'debug', '(', '""', 'Create', 'a', 'new', 'graph', '.', '""', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '!', '=', 'null', ')', '{']",0
PigServer.java,"['graphs', '.', 'push', '(', 'currDAG', ')', ';']",0
PigServer.java,"['currDAG', '=', 'new', 'Graph', '(', 'isMultiQuery', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'boolean', 'isBatchOn', '(', ')', '{']",0
PigServer.java,"['/', '/', 'Batch', 'is', 'on', 'when', 'there', 'are', 'multiple', 'graphs', 'on', 'the']",0
PigServer.java,"['/', '/', 'stack', '.', 'That', 'gives', 'the', 'right', 'response', 'even', 'if', 'multiquery', 'was']",0
PigServer.java,"['/', '/', 'turned', 'off', '.']",0
PigServer.java,"['return', 'graphs', '.', 'size', '(', ')', '>', '0', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'boolean', 'isBatchEmpty', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['return', 'currDAG', '.', 'isBatchEmpty', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'List', '<', 'ExecJob', '>', 'executeBatch', '(', ')', 'throws', 'FrontendException', ',', 'ExecException', '{']",0
PigServer.java,"['if', '(', '!', 'isMultiQuery', ')', '{']",0
PigServer.java,"['/', '/', 'ignore', 'if', 'multiquery', 'is', 'off']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', '|', '|', '!', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['return', 'currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'discardBatch', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['if', '(', 'currDAG', '=', '=', 'null', '|', '|', '!', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1083', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'setBatchOn', '(', ')', 'must', 'be', 'called', 'first', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['currDAG', '=', 'graphs', '.', 'pop', '(', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'addPathToSkip', '(', 'String', 'path', ')', '{']",0
PigServer.java,"['pigContext', '.', 'addPathToSkip', '(', 'path', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'String', 'functionSpec', ')', '{']",0
PigServer.java,"['registerFunction', '(', 'function', ',', 'new', 'FuncSpec', '(', 'functionSpec', ')', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerFunction', '(', 'String', 'function', ',', 'FuncSpec', 'funcSpec', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerFunction', '(', 'function', ',', 'funcSpec', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerStreamingCommand', '(', 'String', 'commandAlias', ',', 'StreamingCommand', 'command', ')', '{']",0
PigServer.java,"['pigContext', '.', 'registerStreamCmd', '(', 'commandAlias', ',', 'command', ')', ';']",0
PigServer.java,"['private', 'URL', 'locateJarFromResources', '(', 'String', 'jarName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Enumeration', '<', 'URL', '>', 'urls', '=', 'ClassLoader', '.', 'getSystemResources', '(', 'jarName', ')', ';']",0
PigServer.java,"['URL', 'resourceLocation', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['resourceLocation', '=', 'urls', '.', 'nextElement', '(', ')', ';']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'debug', '&', '&', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['String', 'logMessage', '=', '""', 'Found', 'multiple', 'resources', 'that', 'match', '""']",0
PigServer.java,"['+', 'jarName', '+', '""', ':', '""', '+', 'resourceLocation', ';']",0
PigServer.java,"['while', '(', 'urls', '.', 'hasMoreElements', '(', ')', ')', '{']",0
PigServer.java,"['logMessage', '+', '=', '(', 'logMessage', '+', 'urls', '.', 'nextElement', '(', ')', '+', '""', ';', '""', ')', ';']",0
PigServer.java,"['log', '.', 'debug', '(', 'logMessage', ')', ';']",0
PigServer.java,"['return', 'resourceLocation', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerJar', '(', 'String', 'name', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'first', 'try', 'to', 'locate', 'jar', 'via', 'system', 'resources']",0
PigServer.java,"['/', '/', 'if', 'this', 'fails', ',', 'try', 'by', 'using', '""', 'name', '""', 'as', 'File', '(', 'this', 'preserves']",0
PigServer.java,"['/', '/', 'compatibility', 'with', 'case', 'when', 'user', 'passes', 'absolute', 'path', 'or', 'path']",0
PigServer.java,"['/', '/', 'relative', 'to', 'current', 'working', 'directory', '.', ')']",0
PigServer.java,"['if', '(', 'name', '!', '=', 'null', ')', '{']",0
PigServer.java,"['URL', 'resource', '=', 'locateJarFromResources', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', 'resource', '=', '=', 'null', ')', '{']",0
PigServer.java,"['File', 'f', '=', 'new', 'File', '(', 'name', ')', ';']",0
PigServer.java,"['if', '(', '!', 'f', '.', 'canRead', '(', ')', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '4002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Can', ""'"", 't', 'read', 'jar', 'file', ':', '""', '+', 'name', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
PigServer.java,"['resource', '=', 'f', '.', 'toURI', '(', ')', '.', 'toURL', '(', ')', ';']",0
PigServer.java,"['pigContext', '.', 'addJar', '(', 'resource', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['currDAG', '.', 'registerQuery', '(', 'query', ',', 'startLine', ')', ';']",0
PigServer.java,"['public', 'LogicalPlan', 'clonePlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Graph', 'graph', '=', 'currDAG', '.', 'clone', '(', ')', ';']",0
PigServer.java,"['if', '(', 'graph', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2127', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Cloning', 'of', 'plan', 'failed', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
PigServer.java,"['return', 'graph', '.', 'getPlan', '(', 'alias', ')', ';']",0
PigServer.java,"['public', 'void', 'registerQuery', '(', 'String', 'query', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['registerQuery', '(', 'query', ',', '1', ')', ';']",0
PigServer.java,"['public', 'void', 'registerScript', '(', 'String', 'fileName', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['GruntParser', 'grunt', '=', 'new', 'GruntParser', '(', 'new', 'FileReader', '(', 'new', 'File', '(', 'fileName', ')', ')', ')', ';']",0
PigServer.java,"['grunt', '.', 'setInteractive', '(', 'false', ')', ';']",0
PigServer.java,"['grunt', '.', 'setParams', '(', 'this', ')', ';']",0
PigServer.java,"['grunt', '.', 'parseStopOnError', '(', 'true', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FileNotFoundException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'IOException', '(', 'e', '.', 'getCause', '(', ')', ')', ';']",0
PigServer.java,"['public', 'void', 'printAliases', '(', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['System', '.', 'out', '.', 'println', '(', '""', 'aliases', ':', '""', '+', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'keySet', '(', ')', ')', ';']",0
PigServer.java,"['public', 'Schema', 'dumpSchema', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'getPlanFromAlias', '(', 'alias', ',', '""', 'describe', '""', ')', ';']",0
PigServer.java,"['lp', '=', 'compileLp', '(', 'alias', ',', 'false', ')', ';']",0
PigServer.java,"['Schema', 'schema', '=', 'lp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', '.', 'getSchema', '(', ')', ';']",0
PigServer.java,"['if', '(', 'schema', '!', '=', 'null', ')', 'System', '.', 'out', '.', 'println', '(', 'alias', '+', '""', ':', '""', '+', 'schema', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['else', 'System', '.', 'out', '.', 'println', '(', '""', 'Schema', 'for', '""', '+', 'alias', '+', '""', 'unknown', '.', '""', ')', ';']",0
PigServer.java,"['return', 'schema', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'describe', 'schema', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'fee', ')', ';']",0
PigServer.java,"['public', 'void', 'setJobName', '(', 'String', 'name', ')', '{']",0
PigServer.java,"['currDAG', '.', 'setJobName', '(', 'name', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'Iterator', '<', 'Tuple', '>', 'openIterator', '(', 'String', 'id', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'get', '(', 'id', ')', ';']",0
PigServer.java,"['if', '(', 'null', '=', '=', 'op', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['if', '(', 'currDAG', '.', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['ExecJob', 'job', '=', 'store', '(', 'id', ',', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ',', 'BinStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';']",0
PigServer.java,"['/', '/', 'invocation', 'of', '""', 'execute', '""', 'is', 'synchronous', '!']",0
PigServer.java,"['if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'JOB_STATUS', '.', 'COMPLETED', ')', '{']",0
PigServer.java,"['return', 'job', '.', 'getResults', '(', ')', ';']",0
PigServer.java,"['}', 'else', 'if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'JOB_STATUS', '.', 'FAILED']",0
PigServer.java,"['&', '&', 'job', '.', 'getException', '(', ')', '!', '=', 'null', ')', '{']",0
PigServer.java,"['/', '/', 'throw', 'the', 'backend', 'exception', 'in', 'the', 'failed', 'case']",0
PigServer.java,"['throw', 'job', '.', 'getException', '(', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Job', 'terminated', 'with', 'anomalous', 'status', '""']",0
PigServer.java,"['+', 'job', '.', 'getStatus', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1066', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'open', 'iterator', 'for', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(', 'String', 'id', ',', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['return', 'store', '(', 'id', ',', 'filename', ',', 'PigStorage', '.', 'class', '.', 'getName', '(', ')', '+', '""', '(', ')', '""', ')', ';', '/', '/', 'SFPig', 'is', 'the', 'default', 'store', 'function']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'ExecJob', 'store', '(']",0
PigServer.java,"['public', 'ExecJob', 'store', '(']",0
PigServer.java,"['String', 'id', ',']",0
PigServer.java,"['String', 'id', ',']",0
PigServer.java,"['String', 'filename', ',']",0
PigServer.java,"['String', 'filename', ',']",0
PigServer.java,"['String', 'func', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['String', 'func', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', '!', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'containsKey', '(', 'id', ')', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'alias', ':', '""', '+', 'id', ')', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'id', ')', ';']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaf', 'to', 'which', 'the', 'store', 'needs', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'id', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['LogicalPlan', 'storePlan', '=', 'QueryParser', '.', 'generateStorePlan', '(', 'scope', ',', 'lp', ',', 'filename', ',', 'func', ',', 'leaf', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'executeCompiledLogicalPlan', '(', 'storePlan', ')', ';']",0
PigServer.java,"['if', '(', 'jobs', '.', 'size', '(', ')', '<', '1', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Couldn', ""'"", 't', 'retrieve', 'job', '.', '""', ')', ';']",0
PigServer.java,"['return', 'jobs', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""', '+', 'id', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'explain', '(', 'String', 'alias', ',']",0
PigServer.java,"['PrintStream', 'stream', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['explain', '(', 'alias', ',', '""', 'text', '""', ',', 'true', ',', 'false', ',', 'stream', ',', 'stream', ',', 'stream', ')', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'void', 'explain', '(', 'String', 'alias', ',']",0
PigServer.java,"['String', 'format', ',']",0
PigServer.java,"['boolean', 'verbose', ',']",0
PigServer.java,"['boolean', 'markAsExecute', ',']",0
PigServer.java,"['PrintStream', 'lps', ',']",0
PigServer.java,"['PrintStream', 'pps', ',']",0
PigServer.java,"['PrintStream', 'eps', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['pigContext', '.', 'inExplain', '=', 'true', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'getStorePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['lps', '.', 'println', '(', '""', 'Logical', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['pps', '.', 'println', '(', '""', 'Physical', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['eps', '.', 'println', '(', '""', 'Execution', 'plan', 'is', 'empty', '.', '""', ')', ';']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'lp', ')', ';']",0
PigServer.java,"['lp', '.', 'explain', '(', 'lps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['pp', '.', 'explain', '(', 'pps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'explain', '(', 'pp', ',', 'eps', ',', 'format', ',', 'verbose', ')', ';']",0
PigServer.java,"['if', '(', 'markAsExecute', ')', '{']",0
PigServer.java,"['currDAG', '.', 'markAsExecuted', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1067', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'explain', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['}', 'finally', '{']",0
PigServer.java,"['pigContext', '.', 'inExplain', '=', 'false', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'capacity', '(', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'pigContext', '.', 'getExecType', '(', ')', '=', '=', 'ExecType', '.', 'LOCAL', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'capacity', 'only', 'supported', 'for', 'non', '-', 'local', 'execution', '""', ')', ';']",0
PigServer.java,"['DataStorage', 'dds', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'dds', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['String', 'rawCapacityStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_CAPACITY_KEY', ')', ';']",0
PigServer.java,"['String', 'rawUsedStr', '=', '(', 'String', ')', 'stats', '.', 'get', '(', 'DataStorage', '.', 'RAW_USED_KEY', ')', ';']",0
PigServer.java,"['if', '(', '(', 'rawCapacityStr', '=', '=', 'null', ')', '|', '|', '(', 'rawUsedStr', '=', '=', 'null', ')', ')', '{']",0
PigServer.java,"['throw', 'new', 'IOException', '(', '""', 'Failed', 'to', 'retrieve', 'capacity', 'stats', '""', ')', ';']",0
PigServer.java,"['long', 'rawCapacityBytes', '=', 'new', 'Long', '(', 'rawCapacityStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['long', 'rawUsedBytes', '=', 'new', 'Long', '(', 'rawUsedStr', ')', '.', 'longValue', '(', ')', ';']",0
PigServer.java,"['return', 'rawCapacityBytes', '-', 'rawUsedBytes', ';']",0
PigServer.java,"['/', '*', '*']",0
PigServer.java,"['public', 'long', 'fileSize', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['DataStorage', 'dfs', '=', 'pigContext', '.', 'getDfs', '(', ')', ';']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'dfs', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
PigServer.java,"['long', 'length', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
PigServer.java,"['int', 'replication', '=', '(', 'Short', ')', 'stats']",0
PigServer.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
PigServer.java,"['return', 'length', '*', 'replication', ';']",0
PigServer.java,"['public', 'boolean', 'existsFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['return', 'elem', '.', 'exists', '(', ')', ';']",0
PigServer.java,"['public', 'boolean', 'deleteFile', '(', 'String', 'filename', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asElement', '(', 'filename', ')', ';']",0
PigServer.java,"['elem', '.', 'delete', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'renameFile', '(', 'String', 'source', ',', 'String', 'target', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['pigContext', '.', 'rename', '(', 'source', ',', 'target', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'boolean', 'mkdirs', '(', 'String', 'dirs', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dirs', ')', ';']",0
PigServer.java,"['container', '.', 'create', '(', ')', ';']",0
PigServer.java,"['return', 'true', ';']",0
PigServer.java,"['public', 'String', '[', ']', 'listPaths', '(', 'String', 'dir', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['Collection', '<', 'String', '>', 'allPaths', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['ContainerDescriptor', 'container', '=', 'pigContext', '.', 'getDfs', '(', ')', '.', 'asContainer', '(', 'dir', ')', ';']",0
PigServer.java,"['Iterator', '<', 'ElementDescriptor', '>', 'iter', '=', 'container', '.', 'iterator', '(', ')', ';']",0
PigServer.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
PigServer.java,"['ElementDescriptor', 'elem', '=', 'iter', '.', 'next', '(', ')', ';']",0
PigServer.java,"['allPaths', '.', 'add', '(', 'elem', '.', 'toString', '(', ')', ')', ';']",0
PigServer.java,"['return', '(', 'String', '[', ']', ')', '(', 'allPaths', '.', 'toArray', '(', ')', ')', ';']",0
PigServer.java,"['public', 'long', 'totalHadoopTimeSpent', '(', ')', '{']",0
PigServer.java,"['/', '/', 'TODO', 'FIX', 'Need', 'to', 'uncomment', 'this', 'with', 'the', 'right', 'logic']",0
PigServer.java,"['/', '/', 'return', 'MapReduceLauncher', '.', 'totalHadoopTimeSpent', ';']",0
PigServer.java,"['return', '0L', ';']",0
PigServer.java,"['public', 'Map', '<', 'String', ',', 'LogicalPlan', '>', 'getAliases', '(', ')', '{']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalPlan', '>', 'aliasPlans', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'op', ':', 'currDAG', '.', 'getAliases', '(', ')', '.', 'keySet', '(', ')', ')', '{']",0
PigServer.java,"['String', 'alias', '=', 'op', '.', 'getAlias', '(', ')', ';']",0
PigServer.java,"['if', '(', 'null', '!', '=', 'alias', ')', '{']",0
PigServer.java,"['aliasPlans', '.', 'put', '(', 'alias', ',', 'currDAG', '.', 'getAliases', '(', ')', '.', 'get', '(', 'op', ')', ')', ';']",0
PigServer.java,"['return', 'aliasPlans', ';']",0
PigServer.java,"['public', 'void', 'shutdown', '(', ')', '{']",0
PigServer.java,"['/', '/', 'clean', '-', 'up', 'activities']",0
PigServer.java,"['/', '/', 'TODO', ':', 'reclaim', 'scope', 'to', 'free', 'up', 'resources', '.', 'Currently']",0
PigServer.java,"['/', '/', 'this', 'is', 'not', 'implemented', 'and', 'throws', 'an', 'exception']",0
PigServer.java,"['/', '/', 'hence', ',', 'for', 'now', ',', 'we', 'won', ""'"", 't', 'call', 'it', '.']",0
PigServer.java,"['/', '/', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'reclaimScope', '(', 'this', '.', 'scope', ')', ';']",0
PigServer.java,"['public', 'Set', '<', 'String', '>', 'getAliasKeySet', '(', ')', '{']",0
PigServer.java,"['return', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'keySet', '(', ')', ';']",0
PigServer.java,"['public', 'Map', '<', 'LogicalOperator', ',', 'DataBag', '>', 'getExamples', '(', 'String', 'alias', ')', '{']",0
PigServer.java,"['LogicalPlan', 'plan', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'currDAG', '.', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['currDAG', '.', 'execute', '(', ')', ';']",0
PigServer.java,"['plan', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['/', '/', 'Since', 'the', 'original', 'script', 'is', 'parsed', 'anyway', ',', 'there', 'should', 'not', 'be', 'an']",0
PigServer.java,"['/', '/', 'error', 'in', 'this', 'parsing', '.', 'The', 'only', 'reason', 'there', 'can', 'be', 'an', 'error', 'is', 'when']",0
PigServer.java,"['/', '/', 'the', 'files', 'being', 'loaded', 'in', 'load', 'don', ""'"", 't', 'exist', 'anymore', '.']",0
PigServer.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
PigServer.java,"['ExampleGenerator', 'exgen', '=', 'new', 'ExampleGenerator', '(', 'plan', ',', 'pigContext', ')', ';']",0
PigServer.java,"['return', 'exgen', '.', 'getExamples', '(', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'getStorePlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', '!', 'isBatchOn', '(', ')', '|', '|', 'alias', '!', '=', 'null', ')', '{']",0
PigServer.java,"['/', '/', 'MRCompiler', 'needs', 'a', 'store', 'to', 'be', 'the', 'leaf', '-', 'hence']",0
PigServer.java,"['/', '/', 'add', 'a', 'store', 'to', 'the', 'plan', 'to', 'explain']",0
PigServer.java,"['/', '/', 'figure', 'out', 'the', 'leaves', 'to', 'which', 'stores', 'need', 'to', 'be', 'added']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'lp', '.', 'getLeaves', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'leaf', '=', 'null', ';']",0
PigServer.java,"['if', '(', 'leaves', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['leaf', '=', 'leaves', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'LogicalOperator', '>', 'it', '=', 'leaves', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
PigServer.java,"['LogicalOperator', 'leafOp', '=', 'it', '.', 'next', '(', ')', ';']",0
PigServer.java,"['if', '(', 'leafOp', '.', 'getAlias', '(', ')', '.', 'equals', '(', 'alias', ')', ')']",0
PigServer.java,"['leaf', '=', 'leafOp', ';']",0
PigServer.java,"['lp', '=', 'QueryParser', '.', 'generateStorePlan', '(', 'scope', ',', 'lp', ',', '""', 'fakefile', '""', ',']",0
PigServer.java,"['PigStorage', '.', 'class', '.', 'getName', '(', ')', ',', 'leaf', ')', ';']",0
PigServer.java,"['return', 'lp', ';']",0
PigServer.java,"['private', 'List', '<', 'ExecJob', '>', 'execute', '(', 'String', 'alias', ')', 'throws', 'FrontendException', ',', 'ExecException', '{']",0
PigServer.java,"['LogicalPlan', 'typeCheckedLp', '=', 'compileLp', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'typeCheckedLp', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'typeCheckedLp', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LODefine', ')', '{']",0
PigServer.java,"['log', '.', 'info', '(', '""', 'Skip', 'execution', 'of', 'DEFINE', 'only', 'logical', 'plan', '.', '""', ')', ';']",0
PigServer.java,"['return', 'new', 'LinkedList', '<', 'ExecJob', '>', '(', ')', ';']",0
PigServer.java,"['return', 'executeCompiledLogicalPlan', '(', 'typeCheckedLp', ')', ';']",0
PigServer.java,"['private', 'List', '<', 'ExecJob', '>', 'executeCompiledLogicalPlan', '(', 'LogicalPlan', 'compiledLp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'compilePp', '(', 'compiledLp', ')', ';']",0
PigServer.java,"['/', '/', 'execute', 'using', 'appropriate', 'engine']",0
PigServer.java,"['FileLocalizer', '.', 'clearDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'execJobs', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'execute', '(', 'pp', ',', '""', 'execute', '""', ')', ';']",0
PigServer.java,"['for', '(', 'ExecJob', 'execJob', ':', 'execJobs', ')', '{']",0
PigServer.java,"['if', '(', 'execJob', '.', 'getStatus', '(', ')', '=', '=', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ')', '{']",0
PigServer.java,"['FileLocalizer', '.', 'triggerDeleteOnFail', '(', ')', ';']",0
PigServer.java,"['return', 'execJobs', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['return', 'compileLp', '(', 'alias', ',', 'true', ')', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'compileLp', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['boolean', 'optimize', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['/', '/', 'create', 'a', 'clone', 'of', 'the', 'logical', 'plan', 'and', 'give', 'it']",0
PigServer.java,"['/', '/', 'to', 'the', 'operations', 'below']",0
PigServer.java,"['LogicalPlan', 'lpClone', ';']",0
PigServer.java,"['lpClone', '=', 'clonePlan', '(', 'alias', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2001', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'clone', 'plan', 'before', 'compiling', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
PigServer.java,"['/', '/', 'Set', 'the', 'logical', 'plan', 'values', 'correctly', 'in', 'all', 'the', 'operators']",0
PigServer.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'lpClone', ')', ';']",0
PigServer.java,"['ps', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['/', '/', 'run', 'through', 'validator']",0
PigServer.java,"['CompilationMessageCollector', 'collector', '=', 'new', 'CompilationMessageCollector', '(', ')', ';']",0
PigServer.java,"['FrontendException', 'caught', '=', 'null', ';']",0
PigServer.java,"['LogicalPlanValidationExecutor', 'validator', '=']",0
PigServer.java,"['new', 'LogicalPlanValidationExecutor', '(', 'lpClone', ',', 'pigContext', ')', ';']",0
PigServer.java,"['validator', '.', 'validate', '(', 'lpClone', ',', 'collector', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
PigServer.java,"['}', 'catch', '(', 'FrontendException', 'fe', ')', '{']",0
PigServer.java,"['/', '/', 'Need', 'to', 'go', 'through', 'and', 'see', 'what', 'the', 'collector', 'has', 'in', 'it', '.', 'But']",0
PigServer.java,"['/', '/', 'remember', 'what', 'we', ""'"", 've', 'caught', 'so', 'we', 'can', 'wrap', 'it', 'into', 'what', 'we']",0
PigServer.java,"['/', '/', 'throw', '.']",0
PigServer.java,"['caught', '=', 'fe', ';']",0
PigServer.java,"['if', '(', 'aggregateWarning', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logMessages', '(', 'collector', ',', 'MessageType', '.', 'Warning', ',', 'aggregateWarning', ',', 'log', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['for', '(', 'Enum', 'type', ':', 'MessageType', '.', 'values', '(', ')', ')', '{']",0
PigServer.java,"['CompilationMessageCollector', '.', 'logAllMessages', '(', 'collector', ',', 'log', ')', ';']",0
PigServer.java,"['if', '(', 'caught', '!', '=', 'null', ')', '{']",0
PigServer.java,"['throw', 'caught', ';']",0
PigServer.java,"['/', '/', 'optimize']",0
PigServer.java,"['if', '(', 'optimize', ')', '{']",0
PigServer.java,"['HashSet', '<', 'String', '>', 'optimizerRules', '=', 'null', ';']",0
PigServer.java,"['optimizerRules', '=', '(', 'HashSet', '<', 'String', '>', ')', 'ObjectSerializer']",0
PigServer.java,"['.', 'deserialize', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(']",0
PigServer.java,"['""', 'pig', '.', 'optimizer', '.', 'rules', '""', ')', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2110', ';']",0
PigServer.java,"['int', 'errCode', '=', '2110', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'deserialize', 'optimizer', 'rules', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ioe', ')', ';']",0
PigServer.java,"['LogicalOptimizer', 'optimizer', '=', 'new', 'LogicalOptimizer', '(', 'lpClone', ',', 'pigContext', '.', 'getExecType', '(', ')', ',', 'optimizerRules', ')', ';']",0
PigServer.java,"['optimizer', '.', 'optimize', '(', ')', ';']",0
PigServer.java,"['return', 'lpClone', ';']",0
PigServer.java,"['private', 'PhysicalPlan', 'compilePp', '(', 'LogicalPlan', 'lp', ')', 'throws', 'ExecException', '{']",0
PigServer.java,"['/', '/', 'translate', 'lp', 'to', 'physical', 'plan']",0
PigServer.java,"['PhysicalPlan', 'pp', '=', 'pigContext', '.', 'getExecutionEngine', '(', ')', '.', 'compile', '(', 'lp', ',', 'null', ')', ';']",0
PigServer.java,"['/', '/', 'TODO', 'optimize']",0
PigServer.java,"['return', 'pp', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'getPlanFromAlias', '(']",0
PigServer.java,"['String', 'alias', ',']",0
PigServer.java,"['String', 'operation', ')', 'throws', 'FrontendException', '{']",0
PigServer.java,"['LogicalOperator', 'lo', '=', 'currDAG', '.', 'getAliasOp', '(', ')', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'lo', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1004', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'alias', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['LogicalPlan', 'lp', '=', 'currDAG', '.', 'getAliases', '(', ')', '.', 'get', '(', 'lo', ')', ';']",0
PigServer.java,"['if', '(', 'lp', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1005', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'No', 'plan', 'for', '""', '+', 'alias', '+', '""', 'to', '""', '+', 'operation', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
PigServer.java,"['return', 'lp', ';']",0
PigServer.java,"['private', 'class', 'Graph', '{']",0
PigServer.java,"['private', 'Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'aliases', '=', 'new', 'HashMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'opTable', '=', 'new', 'HashMap', '<', 'OperatorKey', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'String', ',', 'LogicalOperator', '>', 'aliasOp', '=', 'new', 'HashMap', '<', 'String', ',', 'LogicalOperator', '>', '(', ')', ';']",0
PigServer.java,"['private', 'List', '<', 'String', '>', 'scriptCache', '=', 'new', 'ArrayList', '<', 'String', '>', '(', ')', ';']",0
PigServer.java,"['/', '/', 'the', 'fileNameMap', 'contains', 'filename', 'to', 'canonical', 'filename']",0
PigServer.java,"['/', '/', 'mappings', '.', 'This', 'is', 'done', 'so', 'we', 'can', 'reparse', 'the', 'cached', 'script']",0
PigServer.java,"['/', '/', 'and', 'remember', 'the', 'translation', '(', 'current', 'directory', 'might', 'only']",0
PigServer.java,"['/', '/', 'be', 'correct', 'during', 'the', 'first', 'parse']",0
PigServer.java,"['private', 'Map', '<', 'String', ',', 'String', '>', 'fileNameMap', '=', 'new', 'HashMap', '<', 'String', ',', 'String', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Map', '<', 'LOStore', ',', 'LogicalPlan', '>', 'storeOpTable', '=', 'new', 'HashMap', '<', 'LOStore', ',', 'LogicalPlan', '>', '(', ')', ';']",0
PigServer.java,"['private', 'Set', '<', 'LOLoad', '>', 'loadOps', '=', 'new', 'HashSet', '<', 'LOLoad', '>', '(', ')', ';']",0
PigServer.java,"['private', 'String', 'jobName', ';']",0
PigServer.java,"['private', 'boolean', 'batchMode', ';']",0
PigServer.java,"['private', 'int', 'processedStores', ';']",0
PigServer.java,"['private', 'int', 'ignoreNumStores', ';']",0
PigServer.java,"['private', 'LogicalPlan', 'lp', ';']",0
PigServer.java,"['Graph', '(', 'boolean', 'batchMode', ')', '{']",0
PigServer.java,"['this', '.', 'batchMode', '=', 'batchMode', ';']",0
PigServer.java,"['this', '.', 'processedStores', '=', '0', ';']",0
PigServer.java,"['this', '.', 'ignoreNumStores', '=', '0', ';']",0
PigServer.java,"['this', '.', 'jobName', '=', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', 'PigContext', '.', 'JOB_NAME', ',']",0
PigServer.java,"['PigContext', '.', 'JOB_NAME_PREFIX', '+', '""', ':', 'DefaultJobName', '""', ')', ';']",0
PigServer.java,"['this', '.', 'lp', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
PigServer.java,"['Map', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'getAliases', '(', ')', '{', 'return', 'aliases', ';', '}']",0
PigServer.java,"['Map', '<', 'OperatorKey', ',', 'LogicalOperator', '>', 'getOpTable', '(', ')', '{', 'return', 'opTable', ';', '}']",0
PigServer.java,"['Map', '<', 'String', ',', 'LogicalOperator', '>', 'getAliasOp', '(', ')', '{', 'return', 'aliasOp', ';', '}']",0
PigServer.java,"['List', '<', 'String', '>', 'getScriptCache', '(', ')', '{', 'return', 'scriptCache', ';', '}']",0
PigServer.java,"['boolean', 'isBatchOn', '(', ')', '{', 'return', 'batchMode', ';', '}', ';']",0
PigServer.java,"['boolean', 'isBatchEmpty', '(', ')', '{', 'return', 'processedStores', '=', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';', '}']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'execute', '(', ')', 'throws', 'ExecException', ',', 'FrontendException', '{']",0
PigServer.java,"['pigContext', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', 'PigContext', '.', 'JOB_NAME', ',', 'jobName', ')', ';']",0
PigServer.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'PigServer', '.', 'this', '.', 'execute', '(', 'null', ')', ';']",0
PigServer.java,"['processedStores', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';']",0
PigServer.java,"['return', 'jobs', ';']",0
PigServer.java,"['void', 'markAsExecuted', '(', ')', '{']",0
PigServer.java,"['processedStores', '=', 'storeOpTable', '.', 'keySet', '(', ')', '.', 'size', '(', ')', ';']",0
PigServer.java,"['void', 'setJobName', '(', 'String', 'name', ')', '{']",0
PigServer.java,"['jobName', '=', 'PigContext', '.', 'JOB_NAME_PREFIX', '+', '""', ':', '""', '+', 'name', ';']",0
PigServer.java,"['LogicalPlan', 'getPlan', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'plan', '=', 'lp', ';']",0
PigServer.java,"['if', '(', 'alias', '!', '=', 'null', ')', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'aliasOp', '.', 'get', '(', 'alias', ')', ';']",0
PigServer.java,"['if', '(', 'op', '=', '=', 'null', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1003', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'find', 'an', 'operator', 'for', 'alias', '""', '+', 'alias', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['plan', '=', 'aliases', '.', 'get', '(', 'op', ')', ';']",0
PigServer.java,"['return', 'plan', ';']",0
PigServer.java,"['void', 'registerQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['LogicalPlan', 'tmpLp', '=', 'parseQuery', '(', 'query', ',', 'startLine', ')', ';']",0
PigServer.java,"['/', '/', 'store', 'away', 'the', 'query', 'for', 'use', 'in', 'cloning', 'later']",0
PigServer.java,"['scriptCache', '.', 'add', '(', 'query', ')', ';']",0
PigServer.java,"['if', '(', 'tmpLp', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
PigServer.java,"['LogicalOperator', 'op', '=', 'tmpLp', '.', 'getSingleLeafPlanOutputOp', '(', ')', ';']",0
PigServer.java,"['/', '/', 'Check', 'if', 'we', 'just', 'processed', 'a', 'LOStore', 'i', '.', 'e', '.', 'STORE']",0
PigServer.java,"['if', '(', 'op', 'instanceof', 'LOStore', ')', '{']",0
PigServer.java,"['if', '(', '!', 'batchMode', ')', '{']",0
PigServer.java,"['lp', '=', 'tmpLp', ';']",0
PigServer.java,"['execute', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1002', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'store', 'alias', '""']",0
PigServer.java,"['+', 'op', '.', 'getOperatorKey', '(', ')', '.', 'getId', '(', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',']",0
PigServer.java,"['PigException', '.', 'INPUT', ',', 'e', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['if', '(', '0', '=', '=', 'ignoreNumStores', ')', '{']",0
PigServer.java,"['storeOpTable', '.', 'put', '(', '(', 'LOStore', ')', 'op', ',', 'tmpLp', ')', ';']",0
PigServer.java,"['lp', '.', 'mergeSharedPlan', '(', 'tmpLp', ')', ';']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'roots', '=', 'tmpLp', '.', 'getRoots', '(', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'root', ':', 'roots', ')', '{']",0
PigServer.java,"['if', '(', 'root', 'instanceof', 'LOLoad', ')', '{']",0
PigServer.java,"['loadOps', '.', 'add', '(', '(', 'LOLoad', ')', 'root', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['-', '-', 'ignoreNumStores', ';']",0
PigServer.java,"['LogicalPlan', 'parseQuery', '(', 'String', 'query', ',', 'int', 'startLine', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['if', '(', 'query', '=', '=', 'null', '|', '|', 'query', '.', 'length', '(', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '1084', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Invalid', 'Query', ':', 'Query', 'is', 'null', 'or', 'of', 'size', '0', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
PigServer.java,"['query', '=', 'query', '.', 'trim', '(', ')', ';']",0
PigServer.java,"['return', 'new', 'LogicalPlanBuilder', '(', 'PigServer', '.', 'this', '.', 'pigContext', ')', '.', 'parse', '(', 'scope', ',', 'query', ',']",0
PigServer.java,"['aliases', ',', 'opTable', ',', 'aliasOp', ',', 'startLine', ',', 'fileNameMap', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
PigServer.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
PigServer.java,"['int', 'errCode', '=', '1000', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Error', 'during', 'parsing', '.', '""', '+', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'e', ')', ';']",0
PigServer.java,"['protected', 'Graph', 'clone', '(', ')', '{']",0
PigServer.java,"['/', '/', 'There', 'are', 'two', 'choices', 'on', 'how', 'we', 'clone', 'the', 'logical', 'plan']",0
PigServer.java,"['/', '/', '1', '-', 'we', 'really', 'clone', 'each', 'operator', 'and', 'connect', 'up', 'the', 'cloned', 'operators']",0
PigServer.java,"['/', '/', '2', '-', 'we', 'cache', 'away', 'the', 'script', 'till', 'the', 'point', 'we', 'need', 'to', 'clone']",0
PigServer.java,"['/', '/', 'and', 'then', 'simply', 're', '-', 'parse', 'the', 'script', '.']",0
PigServer.java,"['/', '/', 'The', 'latter', 'approach', 'is', 'used', 'here']",0
PigServer.java,"['/', '/', 'FIXME', ':', 'There', 'is', 'one', 'open', 'issue', 'with', 'this', 'now', ':']",0
PigServer.java,"['/', '/', 'Consider', 'the', 'following', 'script', ':']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'B', '=', 'filter', 'A', 'by', '$', '0', '>', '10', ';']",0
PigServer.java,"['/', '/', 'store', 'B', 'into', ""'"", 'bla', ""'"", ';']",0
PigServer.java,"['/', '/', 'rm', ""'"", 'file', ':', '/', 'somefile', ""'"", ';']",0
PigServer.java,"['/', '/', 'A', '=', 'load', ""'"", 'file', ':', '/', 'someotherfile', ""'""]",0
PigServer.java,"['/', '/', 'when', 'we', 'try', 'to', 'clone', '-', 'we', 'try', 'to', 'reparse']",0
PigServer.java,"['/', '/', 'from', 'the', 'beginning', 'and', 'currently', 'the', 'parser']",0
PigServer.java,"['/', '/', 'checks', 'for', 'file', 'existence', 'of', 'files', 'in', 'the', 'load']",0
PigServer.java,"['/', '/', 'in', 'the', 'case', 'where', 'the', 'file', 'is', 'a', 'local', 'one', '-', 'i', '.', 'e', '.', 'with', 'file', ':', 'prefix']",0
PigServer.java,"['/', '/', 'This', 'will', 'be', 'a', 'known', 'issue', 'now', 'and', 'we', 'will', 'need', 'to', 'revisit', 'later']",0
PigServer.java,"['/', '/', 'parse', 'each', 'line', 'of', 'the', 'cached', 'script']",0
PigServer.java,"['int', 'lineNumber', '=', '1', ';']",0
PigServer.java,"['/', '/', 'create', 'data', 'structures', 'needed', 'for', 'parsing']",0
PigServer.java,"['Graph', 'graph', '=', 'new', 'Graph', '(', 'isBatchOn', '(', ')', ')', ';']",0
PigServer.java,"['graph', '.', 'ignoreNumStores', '=', 'processedStores', ';']",0
PigServer.java,"['graph', '.', 'processedStores', '=', 'processedStores', ';']",0
PigServer.java,"['graph', '.', 'fileNameMap', '=', 'fileNameMap', ';']",0
PigServer.java,"['for', '(', 'Iterator', '<', 'String', '>', 'it', '=', 'getScriptCache', '(', ')', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', 'lineNumber', '+', '+', ')', '{']",0
PigServer.java,"['if', '(', 'isBatchOn', '(', ')', ')', '{']",0
PigServer.java,"['graph', '.', 'registerQuery', '(', 'it', '.', 'next', '(', ')', ',', 'lineNumber', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['graph', '.', 'lp', '=', 'graph', '.', 'parseQuery', '(', 'it', '.', 'next', '(', ')', ',', 'lineNumber', ')', ';']",0
PigServer.java,"['graph', '.', 'postProcess', '(', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PigServer.java,"['graph', '=', 'null', ';']",0
PigServer.java,"['return', 'graph', ';']",0
PigServer.java,"['private', 'void', 'postProcess', '(', ')', 'throws', 'IOException', '{']",0
PigServer.java,"['/', '/', 'Set', 'the', 'logical', 'plan', 'values', 'correctly', 'in', 'all', 'the', 'operators']",0
PigServer.java,"['PlanSetter', 'ps', '=', 'new', 'PlanSetter', '(', 'lp', ')', ';']",0
PigServer.java,"['ps', '.', 'visit', '(', ')', ';']",0
PigServer.java,"['/', '/', 'The', 'following', 'code', 'deals', 'with', 'store', '/', 'load', 'combination', 'of']",0
PigServer.java,"['/', '/', 'intermediate', 'files', '.', 'In', 'this', 'case', 'we', 'will', 'replace', 'the', 'load', 'operator']",0
PigServer.java,"['/', '/', 'with', 'a', '(', 'implicit', ')', 'split', 'operator', ',', 'iff', 'the', 'load', '/', 'store']",0
PigServer.java,"['/', '/', 'func', 'is', 'reversible', '(', 'because', 'that', ""'"", 's', 'when', 'we', 'can', 'safely']",0
PigServer.java,"['/', '/', 'skip', 'the', 'load', 'and', 'keep', 'going', 'with', 'the', 'split', 'output', ')', '.', 'If']",0
PigServer.java,"['/', '/', 'the', 'load', '/', 'store', 'func', 'is', 'not', 'reversible', '(', 'or', 'they', 'are']",0
PigServer.java,"['/', '/', 'different', 'functions', ')', ',', 'we', 'connect', 'the', 'store', 'and', 'the', 'load']",0
PigServer.java,"['/', '/', 'to', 'remember', 'the', 'dependency', '.']",0
PigServer.java,"['for', '(', 'LOLoad', 'load', ':', 'loadOps', ')', '{']",0
PigServer.java,"['for', '(', 'LOStore', 'store', ':', 'storeOpTable', '.', 'keySet', '(', ')', ')', '{']",0
PigServer.java,"['String', 'ifile', '=', 'load', '.', 'getInputFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
PigServer.java,"['String', 'ofile', '=', 'store', '.', 'getOutputFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
PigServer.java,"['if', '(', 'ofile', '.', 'compareTo', '(', 'ifile', ')', '=', '=', '0', ')', '{']",0
PigServer.java,"['LoadFunc', 'lFunc', '=', '(', 'LoadFunc', ')', 'pigContext', '.', 'instantiateFuncFromSpec', '(', 'load', '.', 'getInputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ')', ';']",0
PigServer.java,"['StoreFunc', 'sFunc', '=', '(', 'StoreFunc', ')', 'pigContext', '.', 'instantiateFuncFromSpec', '(', 'store', '.', 'getOutputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ')', ';']",0
PigServer.java,"['if', '(', 'lFunc', '.', 'getClass', '(', ')', '=', '=', 'sFunc', '.', 'getClass', '(', ')', '&', '&', 'lFunc', 'instanceof', 'ReversibleLoadStoreFunc', ')', '{']",0
PigServer.java,"['log', '.', 'info', '(', '""', 'Removing', 'unnecessary', 'load', 'operation', 'from', 'location', ':', '""', '+', 'ifile', ')', ';']",0
PigServer.java,"['/', '/', 'In', 'this', 'case', 'we', 'remember', 'the', 'input', 'file']",0
PigServer.java,"['/', '/', 'spec', 'in', 'the', 'store', '.', 'We', 'might', 'have', 'to', 'use', 'it']",0
PigServer.java,"['/', '/', 'in', 'the', 'MR', 'compiler', 'to', 'recreate', 'the', 'load', ',', 'if']",0
PigServer.java,"['/', '/', 'the', 'store', 'happens', 'on', 'a', 'job', 'boundary', '.']",0
PigServer.java,"['store', '.', 'setInputSpec', '(', 'load', '.', 'getInputFile', '(', ')', ')', ';']",0
PigServer.java,"['LogicalOperator', 'storePred', '=', 'lp', '.', 'getPredecessors', '(', 'store', ')', '.', 'get', '(', '0', ')', ';']",0
PigServer.java,"['/', '/', 'In', 'this', 'case', 'we', 'remember', 'the', 'input', 'file']",0
PigServer.java,"['/', '/', 'spec', 'in', 'the', 'store', '.', 'We', 'might', 'have', 'to', 'use', 'it']",0
PigServer.java,"['/', '/', 'in', 'the', 'MR', 'compiler', 'to', 'recreate', 'the', 'load', ',', 'if']",0
PigServer.java,"['/', '/', 'the', 'store', 'happens', 'on', 'a', 'job', 'boundary', '.']",0
PigServer.java,"['store', '.', 'setInputSpec', '(', 'load', '.', 'getInputFile', '(', ')', ')', ';']",0
PigServer.java,"['lp', '.', 'disconnect', '(', 'store', ',', 'load', ')', ';']",0
PigServer.java,"['lp', '.', 'replace', '(', 'load', ',', 'storePred', ')', ';']",0
PigServer.java,"['List', '<', 'LogicalOperator', '>', 'succs', '=', 'lp', '.', 'getSuccessors', '(', 'storePred', ')', ';']",0
PigServer.java,"['for', '(', 'LogicalOperator', 'succ', ':', 'succs', ')', '{']",0
PigServer.java,"['MultiMap', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', 'innerPls', '=', 'null', ';']",0
PigServer.java,"['/', '/', 'fix', 'inner', 'plans', 'for', 'cogroup', 'and', 'frjoin', 'operators']",0
PigServer.java,"['if', '(', 'succ', 'instanceof', 'LOCogroup', ')', '{']",0
PigServer.java,"['innerPls', '=', '(', '(', 'LOCogroup', ')', 'succ', ')', '.', 'getGroupByPlans', '(', ')', ';']",0
PigServer.java,"['}', 'else', 'if', '(', 'succ', 'instanceof', 'LOFRJoin', ')', '{']",0
PigServer.java,"['innerPls', '=', '(', '(', 'LOFRJoin', ')', 'succ', ')', '.', 'getJoinColPlans', '(', ')', ';']",0
PigServer.java,"['if', '(', 'innerPls', '!', '=', 'null', ')', '{']",0
PigServer.java,"['if', '(', 'innerPls', '.', 'containsKey', '(', 'load', ')', ')', '{']",0
PigServer.java,"['Collection', '<', 'LogicalPlan', '>', 'pls', '=', 'innerPls', '.', 'get', '(', 'load', ')', ';']",0
PigServer.java,"['innerPls', '.', 'removeKey', '(', 'load', ')', ';']",0
PigServer.java,"['innerPls', '.', 'put', '(', 'storePred', ',', 'pls', ')', ';']",0
PigServer.java,"['}', 'else', '{']",0
PigServer.java,"['store', '.', 'getPlan', '(', ')', '.', 'connect', '(', 'store', ',', 'load', ')', ';']",0
PigServer.java,"['}', 'catch', '(', 'PlanException', 'ex', ')', '{']",0
PigServer.java,"['int', 'errCode', '=', '2128', ';']",0
PigServer.java,"['String', 'msg', '=', '""', 'Failed', 'to', 'connect', 'store', 'with', 'dependent', 'load', '.', '""', ';']",0
PigServer.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'ex', ')', ';']",0
DataByteArray.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
DataByteArray.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
DataByteArray.java,"['import', 'java', '.', 'io', '.', 'Serializable', ';']",0
DataByteArray.java,"['import', 'java', '.', 'io', '.', 'UnsupportedEncodingException', ';']",0
DataByteArray.java,"['import', 'java', '.', 'lang', '.', 'StringBuilder', ';']",0
DataByteArray.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
DataByteArray.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'class', 'DataByteArray', 'implements', 'Comparable', ',', 'Serializable', '{']",0
DataByteArray.java,"['byte', '[', ']', 'mData', '=', 'null', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'DataByteArray', '(', ')', '{']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'DataByteArray', '(', 'byte', '[', ']', 'b', ')', '{']",0
DataByteArray.java,"['mData', '=', 'b', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'DataByteArray', '(', 'DataByteArray', 'b', ',', 'DataByteArray', 'c', ')', '{']",0
DataByteArray.java,"['byte', '[', ']', 'ba', '=', '(', 'b', '=', '=', 'null', ')', '?', 'null', ':', 'b', '.', 'get', '(', ')', ';']",0
DataByteArray.java,"['byte', '[', ']', 'ca', '=', '(', 'c', '=', '=', 'null', ')', '?', 'null', ':', 'c', '.', 'get', '(', ')', ';']",0
DataByteArray.java,"['int', 'baLength', '=', '(', 'ba', '=', '=', 'null', ')', '?', '0', ':', 'ba', '.', 'length', ';']",0
DataByteArray.java,"['int', 'caLength', '=', '(', 'ca', '=', '=', 'null', ')', '?', '0', ':', 'ca', '.', 'length', ';']",0
DataByteArray.java,"['int', 'totalSize', '=', 'baLength', '+', 'caLength', ';']",0
DataByteArray.java,"['if', '(', 'totalSize', '=', '=', '0', ')', '{']",0
DataByteArray.java,"['mData', '=', 'new', 'byte', '[', 'totalSize', ']', ';']",0
DataByteArray.java,"['int', 'i', '=', '0', ';']",0
DataByteArray.java,"['for', '(', ';', 'i', '<', 'baLength', ';', 'i', '+', '+', ')', '{']",0
DataByteArray.java,"['mData', '[', 'i', ']', '=', 'ba', '[', 'i', ']', ';']",0
DataByteArray.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'caLength', ';', 'j', '+', '+', ',', 'i', '+', '+', ')', '{']",0
DataByteArray.java,"['mData', '[', 'i', ']', '=', 'ca', '[', 'j', ']', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'DataByteArray', '(', 'byte', '[', ']', 'b', ',', 'int', 'start', ',', 'int', 'end', ')', '{']",0
DataByteArray.java,"['mData', '=', 'new', 'byte', '[', 'end', '-', 'start', ']', ';']",0
DataByteArray.java,"['for', '(', 'int', 'i', '=', 'start', ';', 'i', '<', 'end', ';', 'i', '+', '+', ')', '{']",0
DataByteArray.java,"['mData', '[', 'i', '-', 'start', ']', '=', 'b', '[', 'i', ']', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'DataByteArray', '(', 'String', 's', ')', '{']",0
DataByteArray.java,"['mData', '=', 's', '.', 'getBytes', '(', '""', 'UTF8', '""', ')', ';']",0
DataByteArray.java,"['}', 'catch', '(', 'UnsupportedEncodingException', 'e', ')', '{']",0
DataByteArray.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'catch', 'block']",0
DataByteArray.java,"['e', '.', 'printStackTrace', '(', ')', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'int', 'size', '(', ')', '{']",0
DataByteArray.java,"['return', 'mData', '.', 'length', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'byte', '[', ']', 'get', '(', ')', '{']",0
DataByteArray.java,"['return', 'mData', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'void', 'set', '(', 'byte', '[', ']', 'b', ')', '{']",0
DataByteArray.java,"['mData', '=', 'b', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'void', 'set', '(', 'String', 's', ')', '{']",0
DataByteArray.java,"['mData', '=', 's', '.', 'getBytes', '(', ')', ';']",1
DataByteArray.java,"['public', 'String', 'toString', '(', ')', '{']",0
DataByteArray.java,"['String', 'r', '=', 'null', ';']",0
DataByteArray.java,"['r', '=', 'new', 'String', '(', 'mData', ',', '""', 'UTF8', '""', ')', ';']",0
DataByteArray.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
DataByteArray.java,"['/', '/', 'TODO', ':', 'handle', 'exception']",0
DataByteArray.java,"['return', 'r', ';']",0
DataByteArray.java,"['/', '*', '*']",0
DataByteArray.java,"['public', 'int', 'compareTo', '(', 'Object', 'other', ')', '{']",0
DataByteArray.java,"['if', '(', 'other', 'instanceof', 'DataByteArray', ')', '{']",0
DataByteArray.java,"['DataByteArray', 'dba', '=', '(', 'DataByteArray', ')', 'other', ';']",0
DataByteArray.java,"['int', 'mySz', '=', 'mData', '.', 'length', ';']",0
DataByteArray.java,"['int', 'tSz', '=', 'dba', '.', 'mData', '.', 'length', ';']",0
DataByteArray.java,"['int', 'i', ';']",0
DataByteArray.java,"['for', '(', 'i', '=', '0', ';', 'i', '<', 'mySz', ';', 'i', '+', '+', ')', '{']",0
DataByteArray.java,"['/', '/', 'If', 'the', 'other', 'has', 'run', 'out', 'of', 'characters', ',', 'we', ""'"", 're', 'bigger', '.']",0
DataByteArray.java,"['if', '(', 'i', '>', '=', 'tSz', ')', 'return', '1', ';']",0
DataByteArray.java,"['if', '(', 'mData', '[', 'i', ']', '<', 'dba', '.', 'mData', '[', 'i', ']', ')', 'return', '-', '1', ';']",0
DataByteArray.java,"['else', 'if', '(', 'mData', '[', 'i', ']', '>', 'dba', '.', 'mData', '[', 'i', ']', ')', 'return', '1', ';']",0
DataByteArray.java,"['/', '/', 'If', 'the', 'other', 'still', 'has', 'characters', 'left', ',', 'it', ""'"", 's', 'greater']",0
DataByteArray.java,"['if', '(', 'i', '<', 'tSz', ')', 'return', '-', '1', ';']",0
DataByteArray.java,"['return', '0', ';']",0
DataByteArray.java,"['}', 'else', '{']",0
DataByteArray.java,"['return', 'DataType', '.', 'compare', '(', 'this', ',', 'other', ')', ';']",0
DataByteArray.java,"['public', 'boolean', 'equals', '(', 'Object', 'other', ')', '{']",0
DataByteArray.java,"['return', '(', 'compareTo', '(', 'other', ')', '=', '=', '0', ')', ';']",0
DataByteArray.java,"['public', 'int', 'hashCode', '(', ')', '{']",0
DataByteArray.java,"['int', 'hash', '=', '1', ';']",0
DataByteArray.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'mData', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
DataByteArray.java,"['/', '/', '29', 'chosen', 'because', 'hash', 'uses', '31', 'and', 'bag', '37', ',', 'and', 'a', 'I', 'want', 'a']",0
DataByteArray.java,"['/', '/', 'prime', '.']",0
DataByteArray.java,"['hash', '=', '29', '*', 'hash', '+', 'mData', '[', 'i', ']', ';']",0
DataByteArray.java,"['return', 'hash', ';']",0
TypeCastInserter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', ';']",0
TypeCastInserter.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
TypeCastInserter.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
TypeCastInserter.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
TypeCastInserter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'FrontendException', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOCast', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOForEach', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOLoad', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOProject', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LOStream', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalOperator', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'LogicalPlan', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DepthFirstWalker', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', '.', 'OptimizerException', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', ';']",0
TypeCastInserter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'streaming', '.', 'StreamingCommand', '.', 'HandleSpec', ';']",0
TypeCastInserter.java,"['/', '*', '*']",1
TypeCastInserter.java,"['public', 'class', 'TypeCastInserter', 'extends', 'LogicalTransformer', '{']",0
TypeCastInserter.java,"['private', 'String', 'operatorClassName', ';']",0
TypeCastInserter.java,"['public', 'TypeCastInserter', '(', 'LogicalPlan', 'plan', ',', 'String', 'operatorClassName', ')', '{']",0
TypeCastInserter.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'LogicalOperator', ',', 'LogicalPlan', '>', '(', 'plan', ')', ')', ';']",0
TypeCastInserter.java,"['this', '.', 'operatorClassName', '=', 'operatorClassName', ';']",0
TypeCastInserter.java,"['public', 'boolean', 'check', '(', 'List', '<', 'LogicalOperator', '>', 'nodes', ')', 'throws', 'OptimizerException', '{']",1
TypeCastInserter.java,"['LogicalOperator', 'op', '=', 'getOperator', '(', 'nodes', ')', ';']",0
TypeCastInserter.java,"['Schema', 's', '=', 'op', '.', 'getSchema', '(', ')', ';']",0
TypeCastInserter.java,"['if', '(', 's', '=', '=', 'null', ')', 'return', 'false', ';']",0
TypeCastInserter.java,"['boolean', 'sawOne', '=', 'false', ';']",0
TypeCastInserter.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 's', '.', 'getFields', '(', ')', ';']",0
TypeCastInserter.java,"['List', '<', 'Byte', '>', 'types', '=', 'new', 'ArrayList', '<', 'Byte', '>', '(', 's', '.', 'size', '(', ')', ')', ';']",0
TypeCastInserter.java,"['Schema', 'determinedSchema', '=', 'null', ';']",0
TypeCastInserter.java,"['if', '(', 'LOLoad', '.', 'class', '.', 'getName', '(', ')', '.', 'equals', '(', 'operatorClassName', ')', ')', '{']",0
TypeCastInserter.java,"['determinedSchema', '=', '(', '(', 'LOLoad', ')', 'op', ')', '.', 'getDeterminedSchema', '(', ')', ';']",0
TypeCastInserter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'fss', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCastInserter.java,"['if', '(', 'fss', '.', 'get', '(', 'i', ')', '.', 'type', '!', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCastInserter.java,"['if', '(', 'determinedSchema', '=', '=', 'null', '|', '|']",0
TypeCastInserter.java,"['(', 'fss', '.', 'get', '(', 'i', ')', '.', 'type', '!', '=', 'determinedSchema', '.', 'getField', '(', 'i', ')', '.', 'type', ')', ')', '{']",0
TypeCastInserter.java,"['/', '/', 'Either', 'no', 'schema', 'was', 'determined', 'by', 'loader', 'OR', 'the', 'type']",0
TypeCastInserter.java,"['/', '/', 'from', 'the', '""', 'determinedSchema', '""', 'is', 'different']",0
TypeCastInserter.java,"['/', '/', 'from', 'the', 'type', 'specified', '-', 'so', 'we', 'need', 'to', 'cast']",0
TypeCastInserter.java,"['sawOne', '=', 'true', ';']",0
TypeCastInserter.java,"['types', '.', 'add', '(', 'fss', '.', 'get', '(', 'i', ')', '.', 'type', ')', ';']",0
TypeCastInserter.java,"['/', '/', 'If', 'all', 'we', ""'"", 've', 'found', 'are', 'byte', 'arrays', ',', 'we', 'don', ""'"", 't', 'need', 'a', 'projection', '.']",0
TypeCastInserter.java,"['return', 'sawOne', ';']",0
TypeCastInserter.java,"['}', 'catch', '(', 'OptimizerException', 'oe', ')', '{']",0
TypeCastInserter.java,"['throw', 'oe', ';']",0
TypeCastInserter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2004', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'Internal', 'error', 'while', 'trying', 'to', 'check', 'if', 'type', 'casts', 'are', 'needed', '""', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
TypeCastInserter.java,"['private', 'LogicalOperator', 'getOperator', '(', 'List', '<', 'LogicalOperator', '>', 'nodes', ')', 'throws', 'FrontendException', '{']",0
TypeCastInserter.java,"['if', '(', '(', 'nodes', '=', '=', 'null', ')', '|', '|', '(', 'nodes', '.', 'size', '(', ')', '<', '=', '0', ')', ')', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2052', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Cannot', 'retrieve', 'operator', 'from', 'null', 'or', 'empty', 'list', '.', '""', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCastInserter.java,"['LogicalOperator', 'lo', '=', 'nodes', '.', 'get', '(', '0', ')', ';']",0
TypeCastInserter.java,"['if', '(', 'LOLoad', '.', 'class', '.', 'getName', '(', ')', '.', 'equals', '(', 'operatorClassName', ')', ')', '{']",0
TypeCastInserter.java,"['if', '(', 'lo', '=', '=', 'null', '|', '|', '!', '(', 'lo', 'instanceof', 'LOLoad', ')', ')', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2005', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'Expected', '""', '+', 'LOLoad', '.', 'class', '.', 'getSimpleName', '(', ')', '+', '""', ',', 'got', '""', '+', 'lo', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCastInserter.java,"['return', 'lo', ';']",0
TypeCastInserter.java,"['}', 'else', 'if', '(', 'LOStream', '.', 'class', '.', 'getName', '(', ')', '.', 'equals', '(', 'operatorClassName', ')', ')', '{']",0
TypeCastInserter.java,"['if', '(', 'lo', '=', '=', 'null', '|', '|', '!', '(', 'lo', 'instanceof', 'LOStream', ')', ')', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2005', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'Expected', '""', '+', 'LOStream', '.', 'class', '.', 'getSimpleName', '(', ')', '+', '""', ',', 'got', '""', '+', 'lo', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCastInserter.java,"['return', 'lo', ';']",0
TypeCastInserter.java,"['/', '/', 'we', 'should', 'never', 'be', 'called', 'with', 'any', 'other', 'operator', 'class', 'name']",0
TypeCastInserter.java,"['int', 'errCode', '=', '1034', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'TypeCastInserter', 'invoked', 'with', 'an', 'invalid', 'operator', 'class', 'name', ':', '""', '+', 'operatorClassName', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
TypeCastInserter.java,"['public', 'void', 'transform', '(', 'List', '<', 'LogicalOperator', '>', 'nodes', ')', 'throws', 'OptimizerException', '{']",0
TypeCastInserter.java,"['LogicalOperator', 'lo', '=', 'getOperator', '(', 'nodes', ')', ';']",0
TypeCastInserter.java,"['Schema', 's', '=', 'lo', '.', 'getSchema', '(', ')', ';']",0
TypeCastInserter.java,"['String', 'scope', '=', 'lo', '.', 'getOperatorKey', '(', ')', '.', 'scope', ';']",0
TypeCastInserter.java,"['/', '/', 'For', 'every', 'field', ',', 'build', 'a', 'logical', 'plan', '.', 'If', 'the', 'field', 'has', 'a', 'type']",0
TypeCastInserter.java,"['/', '/', 'other', 'than', 'byte', 'array', ',', 'then', 'the', 'plan', 'will', 'be', 'cast', '(', 'project', ')', '.', 'Else']",0
TypeCastInserter.java,"['/', '/', 'it', 'will', 'just', 'be', 'project', '.']",0
TypeCastInserter.java,"['ArrayList', '<', 'LogicalPlan', '>', 'genPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', 's', '.', 'size', '(', ')', ')', ';']",0
TypeCastInserter.java,"['ArrayList', '<', 'Boolean', '>', 'flattens', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', 's', '.', 'size', '(', ')', ')', ';']",0
TypeCastInserter.java,"['Map', '<', 'String', ',', 'Byte', '>', 'typeChanges', '=', 'new', 'HashMap', '<', 'String', ',', 'Byte', '>', '(', ')', ';']",0
TypeCastInserter.java,"['/', '/', 'if', 'we', 'are', 'inserting', 'casts', 'in', 'a', 'load', 'and', 'if', 'the', 'loader']",0
TypeCastInserter.java,"['/', '/', 'implements', 'determineSchema', '(', ')', ',', 'insert', 'casts', 'only', 'where', 'necessary']",0
TypeCastInserter.java,"['/', '/', 'Note', 'that', 'in', 'this', 'case', ',', 'the', 'data', 'coming', 'out', 'of', 'the', 'loader', 'is', 'not']",0
TypeCastInserter.java,"['/', '/', 'a', 'BYTEARRAY', 'but', 'is', 'whatever', 'determineSchema', '(', ')', 'says', 'it', 'is', '.']",0
TypeCastInserter.java,"['Schema', 'determinedSchema', '=', 'null', ';']",0
TypeCastInserter.java,"['if', '(', 'LOLoad', '.', 'class', '.', 'getName', '(', ')', '.', 'equals', '(', 'operatorClassName', ')', ')', '{']",0
TypeCastInserter.java,"['determinedSchema', '=', '(', '(', 'LOLoad', ')', 'lo', ')', '.', 'getDeterminedSchema', '(', ')', ';']",0
TypeCastInserter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{']",0
TypeCastInserter.java,"['LogicalPlan', 'p', '=', 'new', 'LogicalPlan', '(', ')', ';']",0
TypeCastInserter.java,"['genPlans', '.', 'add', '(', 'p', ')', ';']",0
TypeCastInserter.java,"['flattens', '.', 'add', '(', 'false', ')', ';']",0
TypeCastInserter.java,"['List', '<', 'Integer', '>', 'toProject', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', '1', ')', ';']",0
TypeCastInserter.java,"['toProject', '.', 'add', '(', 'i', ')', ';']",0
TypeCastInserter.java,"['LOProject', 'proj', '=', 'new', 'LOProject', '(', 'p', ',', 'OperatorKey', '.', 'genOpKey', '(', 'scope', ')', ',']",0
TypeCastInserter.java,"['lo', ',', 'toProject', ')', ';']",0
TypeCastInserter.java,"['p', '.', 'add', '(', 'proj', ')', ';']",0
TypeCastInserter.java,"['Schema', '.', 'FieldSchema', 'fs', '=', 's', '.', 'getField', '(', 'i', ')', ';']",0
TypeCastInserter.java,"['if', '(', 'fs', '.', 'type', '!', '=', 'DataType', '.', 'BYTEARRAY', ')', '{']",0
TypeCastInserter.java,"['if', '(', 'determinedSchema', '=', '=', 'null', '|', '|', '(', 'fs', '.', 'type', '!', '=', 'determinedSchema', '.', 'getField', '(', 'i', ')', '.', 'type', ')', ')', '{']",0
TypeCastInserter.java,"['/', '/', 'Either', 'no', 'schema', 'was', 'determined', 'by', 'loader', 'OR', 'the', 'type']",0
TypeCastInserter.java,"['/', '/', 'from', 'the', '""', 'determinedSchema', '""', 'is', 'different']",0
TypeCastInserter.java,"['/', '/', 'from', 'the', 'type', 'specified', '-', 'so', 'we', 'need', 'to', 'cast']",0
TypeCastInserter.java,"['LOCast', 'cast', '=', 'new', 'LOCast', '(', 'p', ',']",0
TypeCastInserter.java,"['OperatorKey', '.', 'genOpKey', '(', 'scope', ')', ',', 'fs', '.', 'type', ')', ';']",0
TypeCastInserter.java,"['p', '.', 'add', '(', 'cast', ')', ';']",0
TypeCastInserter.java,"['p', '.', 'connect', '(', 'proj', ',', 'cast', ')', ';']",0
TypeCastInserter.java,"['cast', '.', 'setFieldSchema', '(', 'fs', '.', 'clone', '(', ')', ')', ';']",0
TypeCastInserter.java,"['FuncSpec', 'loadFuncSpec', '=', 'null', ';']",0
TypeCastInserter.java,"['if', '(', 'lo', 'instanceof', 'LOLoad', ')', '{']",0
TypeCastInserter.java,"['loadFuncSpec', '=', '(', '(', 'LOLoad', ')', 'lo', ')', '.', 'getInputFile', '(', ')', '.', 'getFuncSpec', '(', ')', ';']",0
TypeCastInserter.java,"['}', 'else', 'if', '(', 'lo', 'instanceof', 'LOStream', ')', '{']",0
TypeCastInserter.java,"['StreamingCommand', 'command', '=', '(', '(', 'LOStream', ')', 'lo', ')', '.', 'getStreamingCommand', '(', ')', ';']",0
TypeCastInserter.java,"['HandleSpec', 'streamOutputSpec', '=', 'command', '.', 'getOutputSpec', '(', ')', ';']",0
TypeCastInserter.java,"['loadFuncSpec', '=', 'new', 'FuncSpec', '(', 'streamOutputSpec', '.', 'getSpec', '(', ')', ')', ';']",0
TypeCastInserter.java,"['}', 'else', '{']",0
TypeCastInserter.java,"['}', 'else', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2006', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'TypeCastInserter', 'invoked', 'with', 'an', 'invalid', 'operator', 'class', 'name', ':', '""', '+', 'lo', '.', 'getClass', '(', ')', '.', 'getSimpleName', '(', ')', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
TypeCastInserter.java,"['cast', '.', 'setLoadFuncSpec', '(', 'loadFuncSpec', ')', ';']",0
TypeCastInserter.java,"['typeChanges', '.', 'put', '(', 'fs', '.', 'canonicalName', ',', 'fs', '.', 'type', ')', ';']",0
TypeCastInserter.java,"['if', '(', 'determinedSchema', '=', '=', 'null', ')', '{']",0
TypeCastInserter.java,"['/', '/', 'Reset', 'the', 'loads', 'field', 'schema', 'to', 'byte', 'array', 'so', 'that', 'it']",0
TypeCastInserter.java,"['/', '/', 'will', 'reflect', 'reality', '.']",0
TypeCastInserter.java,"['fs', '.', 'type', '=', 'DataType', '.', 'BYTEARRAY', ';']",0
TypeCastInserter.java,"['}', 'else', '{']",0
TypeCastInserter.java,"['/', '/', 'Reset', 'the', 'type', 'to', 'what', 'determinedSchema', 'says', 'it', 'is']",0
TypeCastInserter.java,"['fs', '.', 'type', '=', 'determinedSchema', '.', 'getField', '(', 'i', ')', '.', 'type', ';']",0
TypeCastInserter.java,"['/', '/', 'Build', 'a', 'foreach', 'to', 'insert', 'after', 'the', 'load', ',', 'giving', 'it', 'a', 'cast', 'for', 'each']",0
TypeCastInserter.java,"['/', '/', 'position', 'that', 'has', 'a', 'type', 'other', 'than', 'byte', 'array', '.']",0
TypeCastInserter.java,"['LOForEach', 'foreach', '=', 'new', 'LOForEach', '(', 'mPlan', ',']",0
TypeCastInserter.java,"['OperatorKey', '.', 'genOpKey', '(', 'scope', ')', ',', 'genPlans', ',', 'flattens', ')', ';']",0
TypeCastInserter.java,"['foreach', '.', 'setAlias', '(', 'lo', '.', 'getAlias', '(', ')', ')', ';']",0
TypeCastInserter.java,"['/', '/', 'Insert', 'the', 'foreach', 'into', 'the', 'plan', 'and', 'patch', 'up', 'the', 'plan', '.']",0
TypeCastInserter.java,"['insertAfter', '(', 'lo', ',', 'foreach', ',', 'null', ')', ';']",0
TypeCastInserter.java,"['rebuildSchemas', '(', ')', ';']",0
TypeCastInserter.java,"['}', 'catch', '(', 'OptimizerException', 'oe', ')', '{']",0
TypeCastInserter.java,"['throw', 'oe', ';']",0
TypeCastInserter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TypeCastInserter.java,"['int', 'errCode', '=', '2007', ';']",0
TypeCastInserter.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'insert', 'type', 'casts', 'into', 'plan', '""', ';']",0
TypeCastInserter.java,"['throw', 'new', 'OptimizerException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
GruntParser.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'Reader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'OutputStreamWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'BufferedWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'FileNotFoundException', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringReader', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'StringWriter', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Properties', ';']",0
GruntParser.java,"['import', 'java', '.', 'util', '.', 'Date', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
GruntParser.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReader', ';']",0
GruntParser.java,"['import', 'jline', '.', 'ConsoleReaderInputStream', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ContainerDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorage', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'DataStorageException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'datastorage', '.', 'ElementDescriptor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecJob', '.', 'JOB_STATUS', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'WrappedIOException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParser', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'PigScriptParserTokenManager', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParameterSubstitutionPreprocessor', ';']",0
GruntParser.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
GruntParser.java,"['public', 'class', 'GruntParser', 'extends', 'PigScriptParser', '{']",0
GruntParser.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'Reader', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ',', 'String', 'encoding', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ',', 'encoding', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'InputStream', 'stream', ')', '{']",0
GruntParser.java,"['super', '(', 'stream', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['public', 'GruntParser', '(', 'PigScriptParserTokenManager', 'tm', ')', '{']",0
GruntParser.java,"['super', '(', 'tm', ')', ';']",0
GruntParser.java,"['init', '(', ')', ';']",0
GruntParser.java,"['private', 'void', 'init', '(', ')', '{']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['mLoadOnly', '=', 'false', ';']",0
GruntParser.java,"['mExplain', '=', 'null', ';']",0
GruntParser.java,"['private', 'void', 'setBatchOn', '(', ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'setBatchOn', '(', ')', ';']",0
GruntParser.java,"['private', 'void', 'executeBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchOn', '(', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'mExplain', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['explainCurrentBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mLoadOnly', ')', '{']",0
GruntParser.java,"['List', '<', 'ExecJob', '>', 'jobs', '=', 'mPigServer', '.', 'executeBatch', '(', ')', ';']",0
GruntParser.java,"['for', '(', 'ExecJob', 'job', ':', 'jobs', ')', '{']",0
GruntParser.java,"['if', '(', 'job', '.', 'getStatus', '(', ')', '=', '=', 'ExecJob', '.', 'JOB_STATUS', '.', 'FAILED', ')', '{']",0
GruntParser.java,"['mNumFailedJobs', '+', '+', ';']",0
GruntParser.java,"['if', '(', 'job', '.', 'getException', '(', ')', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['LogUtils', '.', 'writeLog', '(']",0
GruntParser.java,"['job', '.', 'getException', '(', ')', ',']",0
GruntParser.java,"['mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
GruntParser.java,"['""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'verbose', '""', ')', ')', ')', ';']",0
GruntParser.java,"['mNumSucceededJobs', '+', '+', ';']",0
GruntParser.java,"['private', 'void', 'discardBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchOn', '(', ')', ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'discardBatch', '(', ')', ';']",0
GruntParser.java,"['public', 'int', '[', ']', 'parseStopOnError', '(', ')', 'throws', 'IOException', ',', 'ParseException']",0
GruntParser.java,"['return', 'parseStopOnError', '(', 'false', ')', ';']",0
GruntParser.java,"['/', '*', '*']",0
GruntParser.java,"['public', 'int', '[', ']', 'parseStopOnError', '(', 'boolean', 'sameBatch', ')', 'throws', 'IOException', ',', 'ParseException']",0
GruntParser.java,"['if', '(', 'mPigServer', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IllegalStateException', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mInteractive', '&', '&', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['prompt', '(', ')', ';']",0
GruntParser.java,"['mDone', '=', 'false', ';']",0
GruntParser.java,"['while', '(', '!', 'mDone', ')', '{']",0
GruntParser.java,"['parse', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'sameBatch', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['int', '[', ']', 'res', '=', '{', 'mNumSucceededJobs', ',', 'mNumFailedJobs', '}', ';']",0
GruntParser.java,"['return', 'res', ';']",0
GruntParser.java,"['public', 'void', 'setLoadOnly', '(', 'boolean', 'loadOnly', ')']",0
GruntParser.java,"['mLoadOnly', '=', 'loadOnly', ';']",0
GruntParser.java,"['public', 'void', 'setParams', '(', 'PigServer', 'pigServer', ')']",0
GruntParser.java,"['mPigServer', '=', 'pigServer', ';']",0
GruntParser.java,"['mDfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getDfs', '(', ')', ';']",0
GruntParser.java,"['mLfs', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLfs', '(', ')', ';']",0
GruntParser.java,"['mConf', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getProperties', '(', ')', ';']",0
GruntParser.java,"['/', '/', 'TODO', ':', 'this', 'violates', 'the', 'abstraction', 'layer', 'decoupling', 'between']",0
GruntParser.java,"['/', '/', 'front', 'end', 'and', 'back', 'end', 'and', 'needs', 'to', 'be', 'changed', '.']",0
GruntParser.java,"['/', '/', 'Right', 'now', 'I', 'am', 'not', 'clear', 'on', 'how', 'the', 'Job', 'Id', 'comes', 'from', 'to', 'tell']",0
GruntParser.java,"['/', '/', 'the', 'back', 'end', 'to', 'kill', 'a', 'given', 'job', '(', 'mJobClient', 'is', 'used', 'only', 'in']",0
GruntParser.java,"['/', '/', 'processKill', ')']",0
GruntParser.java,"['ExecutionEngine', 'execEngine', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getExecutionEngine', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'execEngine', 'instanceof', 'HExecutionEngine', ')', '{']",0
GruntParser.java,"['mJobClient', '=', '(', '(', 'HExecutionEngine', ')', 'execEngine', ')', '.', 'getJobClient', '(', ')', ';']",0
GruntParser.java,"['mJobClient', '=', 'null', ';']",0
GruntParser.java,"['public', 'void', 'prompt', '(', ')']",0
GruntParser.java,"['if', '(', 'mInteractive', ')', '{']",0
GruntParser.java,"['mConsoleReader', '.', 'setDefaultPrompt', '(', '""', 'grunt', '>', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'quit', '(', ')']",0
GruntParser.java,"['mDone', '=', 'true', ';']",0
GruntParser.java,"['public', 'boolean', 'isDone', '(', ')', '{']",0
GruntParser.java,"['return', 'mDone', ';']",0
GruntParser.java,"['protected', 'void', 'processDescribe', '(', 'String', 'alias', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['if', '(', 'alias', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['alias', '=', 'mPigServer', '.', 'getPigContext', '(', ')', '.', 'getLastAlias', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'dumpSchema', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processExplain', '(', 'String', 'alias', ',', 'String', 'script', ',', 'boolean', 'isVerbose', ',']",0
GruntParser.java,"['String', 'format', ',', 'String', 'target', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'null', '!', '=', 'mExplain', ')', '{']",0
GruntParser.java,"['mExplain', '=', 'new', 'ExplainState', '(', 'alias', ',', 'target', ',', 'script', ',', 'isVerbose', ',', 'format', ')', ';']",0
GruntParser.java,"['if', '(', 'script', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['if', '(', '!', '""', 'true', '""', '.', 'equalsIgnoreCase', '(', 'mPigServer', '.']",0
GruntParser.java,"['getPigContext', '(', ')']",0
GruntParser.java,"['.', 'getProperties', '(', ')', '.']",0
GruntParser.java,"['getProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Cannot', 'explain', 'script', 'if', 'multiquery', 'is', 'disabled', '.', '""', ')', ';']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'true', ',', 'true', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['throw', 'e', ';']",0
GruntParser.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['throw', 'e', ';']",0
GruntParser.java,"['mExplain', '.', 'mLast', '=', 'true', ';']",0
GruntParser.java,"['explainCurrentBatch', '(', ')', ';']",0
GruntParser.java,"['}', 'finally', '{']",0
GruntParser.java,"['if', '(', 'script', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['mExplain', '=', 'null', ';']",0
GruntParser.java,"['protected', 'void', 'explainCurrentBatch', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['PrintStream', 'lp', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['PrintStream', 'pp', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['PrintStream', 'ep', '=', 'System', '.', 'out', ';']",0
GruntParser.java,"['if', '(', '!', '(', 'mExplain', '.', 'mLast', '&', '&', 'mExplain', '.', 'mCount', '=', '=', '0', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'mPigServer', '.', 'isBatchEmpty', '(', ')', ')', '{']",0
GruntParser.java,"['mExplain', '.', 'mCount', '+', '+', ';']",0
GruntParser.java,"['boolean', 'markAsExecuted', '=', '(', 'mExplain', '.', 'mScript', '!', '=', 'null', ')', ';']",0
GruntParser.java,"['if', '(', 'mExplain', '.', 'mTarget', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['File', 'file', '=', 'new', 'File', '(', 'mExplain', '.', 'mTarget', ')', ';']",0
GruntParser.java,"['if', '(', 'file', '.', 'isDirectory', '(', ')', ')', '{']",0
GruntParser.java,"['String', 'sCount', '=', '(', 'mExplain', '.', 'mLast', '&', '&', 'mExplain', '.', 'mCount', '=', '=', '1', ')', '?', '""', '""', ':', '""', '_', '""', '+', 'mExplain', '.', 'mCount', ';']",0
GruntParser.java,"['lp', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'logical_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['pp', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'physical_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['ep', '=', 'new', 'PrintStream', '(', 'new', 'File', '(', 'file', ',', '""', 'exec_plan', '-', '""', '+', 'mExplain', '.', 'mTime', '+', 'sCount', '+', '""', '.', '""', '+', 'mExplain', '.', 'mFormat', ')', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['lp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['pp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['ep', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['boolean', 'append', '=', '!', '(', 'mExplain', '.', 'mCount', '=', '=', '1', ')', ';']",0
GruntParser.java,"['lp', '=', 'pp', '=', 'ep', '=', 'new', 'PrintStream', '(', 'new', 'FileOutputStream', '(', 'mExplain', '.', 'mTarget', ',', 'append', ')', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['lp', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'explain', '(', 'mExplain', '.', 'mAlias', ',', 'mExplain', '.', 'mFormat', ',']",0
GruntParser.java,"['mExplain', '.', 'mVerbose', ',', 'markAsExecuted', ',', 'lp', ',', 'pp', ',', 'ep', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printAliases', '(', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'printAliases', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRegister', '(', 'String', 'jar', ')', 'throws', 'IOException', '{']",0
GruntParser.java,"['mPigServer', '.', 'registerJar', '(', 'jar', ')', ';']",0
GruntParser.java,"['private', 'String', 'runPreprocessor', '(', 'String', 'script', ',', 'List', '<', 'String', '>', 'params', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['ParameterSubstitutionPreprocessor', 'psp', '=', 'new', 'ParameterSubstitutionPreprocessor', '(', '50', ')', ';']",0
GruntParser.java,"['StringWriter', 'writer', '=', 'new', 'StringWriter', '(', ')', ';']",0
GruntParser.java,"['psp', '.', 'genSubstitutedFile', '(', 'new', 'BufferedReader', '(', 'new', 'FileReader', '(', 'script', ')', ')', ',']",0
GruntParser.java,"['params', '.', 'size', '(', ')', '>', '0', '?', 'params', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ',']",0
GruntParser.java,"['files', '.', 'size', '(', ')', '>', '0', '?', 'files', '.', 'toArray', '(', 'new', 'String', '[', '0', ']', ')', ':', 'null', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'parameters', '.', 'ParseException', 'pex', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', 'pex', '.', 'getMessage', '(', ')', ')', ';']",0
GruntParser.java,"['return', 'writer', '.', 'toString', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processScript', '(', 'String', 'script', ',', 'boolean', 'batch', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'script', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'batch', ')', '{']",0
GruntParser.java,"['setBatchOn', '(', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'setJobName', '(', 'script', ')', ';']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'true', ',', 'mLoadOnly', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['}', 'finally', '{']",0
GruntParser.java,"['discardBatch', '(', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['loadScript', '(', 'script', ',', 'false', ',', 'mLoadOnly', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['private', 'void', 'loadScript', '(', 'String', 'script', ',', 'boolean', 'batch', ',', 'boolean', 'loadOnly', ',']",0
GruntParser.java,"['List', '<', 'String', '>', 'params', ',', 'List', '<', 'String', '>', 'files', ')']",0
GruntParser.java,"['throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['Reader', 'inputReader', ';']",0
GruntParser.java,"['ConsoleReader', 'reader', ';']",0
GruntParser.java,"['boolean', 'interactive', ';']",0
GruntParser.java,"['String', 'cmds', '=', 'runPreprocessor', '(', 'script', ',', 'params', ',', 'files', ')', ';']",0
GruntParser.java,"['if', '(', 'mInteractive', '&', '&', '!', 'batch', ')', '{', '/', '/', 'Write', 'prompt', 'and', 'echo', 'commands']",0
GruntParser.java,"['/', '/', 'Console', 'reader', 'treats', 'tabs', 'in', 'a', 'special', 'way']",0
GruntParser.java,"['cmds', '=', 'cmds', '.', 'replaceAll', '(', '""', '\\', 't', '""', ',', '""', '""', ')', ';']",0
GruntParser.java,"['reader', '=', 'new', 'ConsoleReader', '(', 'new', 'ByteArrayInputStream', '(', 'cmds', '.', 'getBytes', '(', ')', ')', ',']",0
GruntParser.java,"['new', 'OutputStreamWriter', '(', 'System', '.', 'out', ')', ')', ';']",0
GruntParser.java,"['reader', '.', 'setHistory', '(', 'mConsoleReader', '.', 'getHistory', '(', ')', ')', ';']",0
GruntParser.java,"['InputStream', 'in', '=', 'new', 'ConsoleReaderInputStream', '(', 'reader', ')', ';']",0
GruntParser.java,"['inputReader', '=', 'new', 'BufferedReader', '(', 'new', 'InputStreamReader', '(', 'in', ')', ')', ';']",0
GruntParser.java,"['interactive', '=', 'true', ';']",0
GruntParser.java,"['}', 'else', '{', '/', '/', 'Quietly', 'parse', 'the', 'statements']",0
GruntParser.java,"['inputReader', '=', 'new', 'StringReader', '(', 'cmds', ')', ';']",0
GruntParser.java,"['reader', '=', 'null', ';']",0
GruntParser.java,"['interactive', '=', 'false', ';']",0
GruntParser.java,"['}', 'catch', '(', 'FileNotFoundException', 'fnfe', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'File', 'not', 'found', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['}', 'catch', '(', 'SecurityException', 'se', ')', '{']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Cannot', 'access', 'file', ':', '""', '+', 'script', ')', ';']",0
GruntParser.java,"['GruntParser', 'parser', '=', 'new', 'GruntParser', '(', 'inputReader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setParams', '(', 'mPigServer', ')', ';']",0
GruntParser.java,"['parser', '.', 'setConsoleReader', '(', 'reader', ')', ';']",0
GruntParser.java,"['parser', '.', 'setInteractive', '(', 'interactive', ')', ';']",0
GruntParser.java,"['parser', '.', 'setLoadOnly', '(', 'loadOnly', ')', ';']",0
GruntParser.java,"['parser', '.', 'mExplain', '=', 'mExplain', ';']",0
GruntParser.java,"['parser', '.', 'prompt', '(', ')', ';']",0
GruntParser.java,"['while', '(', '!', 'parser', '.', 'isDone', '(', ')', ')', '{']",0
GruntParser.java,"['parser', '.', 'parse', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'interactive', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processSet', '(', 'String', 'key', ',', 'String', 'value', ')', 'throws', 'IOException', ',', 'ParseException', '{']",0
GruntParser.java,"['if', '(', 'key', '.', 'equals', '(', '""', 'debug', '""', ')', ')']",0
GruntParser.java,"['if', '(', 'value', '.', 'equals', '(', '""', 'on', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'on', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOn', '(', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'value', '.', 'equals', '(', '""', 'off', '""', ')', '|', '|', 'value', '.', 'equals', '(', '""', ""'"", 'off', ""'"", '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'debugOff', '(', ')', ';']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Invalid', 'value', '""', '+', 'value', '+', '""', 'provided', 'for', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'job', '.', 'name', '""', ')', ')']",0
GruntParser.java,"['mPigServer', '.', 'setJobName', '(', 'value', ')', ';']",0
GruntParser.java,"['else', 'if', '(', 'key', '.', 'equals', '(', '""', 'stream', '.', 'skippath', '""', ')', ')', '{']",0
GruntParser.java,"['/', '/', 'Validate']",0
GruntParser.java,"['File', 'file', '=', 'new', 'File', '(', 'value', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'file', '.', 'exists', '(', ')', '|', '|', 'file', '.', 'isDirectory', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Invalid', 'value', 'for', 'stream', '.', 'skippath', ':', '""', '+']",0
GruntParser.java,"['value', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'addPathToSkip', '(', 'value', ')', ';']",0
GruntParser.java,"['/', '/', 'other', 'key', '-', 'value', 'pairs', 'can', 'go', 'there']",0
GruntParser.java,"['/', '/', 'for', 'now', 'just', 'throw', 'exception', 'since', 'we', 'don', ""'"", 't', 'support']",0
GruntParser.java,"['/', '/', 'anything', 'else']",0
GruntParser.java,"['throw', 'new', 'ParseException', '(', '""', 'Unrecognized', 'set', 'key', ':', '""', '+', 'key', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCat', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['byte', 'buffer', '[', ']', '=', 'new', 'byte', '[', '65536', ']', ';']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['int', 'rc', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'dfsDir', '=', '(', 'ContainerDescriptor', ')', 'dfsPath', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'paths', '=', 'dfsDir', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'paths', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'paths', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['InputStream', 'is', '=', 'curElem', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['InputStream', 'is', '=', 'dfsPath', '.', 'open', '(', ')', ';']",0
GruntParser.java,"['while', '(', '(', 'rc', '=', 'is', '.', 'read', '(', 'buffer', ')', ')', '>', '0', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'write', '(', 'buffer', ',', '0', ',', 'rc', ')', ';']",0
GruntParser.java,"['is', '.', 'close', '(', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'Cat', ':', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCD', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'container', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['container', '=', 'mDfs', '.', 'asContainer', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'container', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'Directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'mDfs', '.', 'isContainer', '(', 'path', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', 'path', '+', '""', 'is', 'not', 'a', 'directory', '.', '""', ')', ';']",0
GruntParser.java,"['mDfs', '.', 'setActiveContainer', '(', 'container', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'change', 'working', 'directory', 'to', '""', '+']",0
GruntParser.java,"['(', '(', 'path', '=', '=', 'null', ')', '?', '(', '""', '/', 'user', '/', '""', '+', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ')']",0
GruntParser.java,"[':', '(', 'path', ')', ')', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processDump', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['Iterator', '<', 'Tuple', '>', 'result', '=', 'mPigServer', '.', 'openIterator', '(', 'alias', ')', ';']",0
GruntParser.java,"['while', '(', 'result', '.', 'hasNext', '(', ')', ')']",0
GruntParser.java,"['Tuple', 't', '=', 'result', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 't', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processIllustrate', '(', 'String', 'alias', ')', 'throws', 'IOException']",0
GruntParser.java,"['mPigServer', '.', 'getExamples', '(', 'alias', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processKill', '(', 'String', 'jobid', ')', 'throws', 'IOException']",0
GruntParser.java,"['if', '(', 'mJobClient', '!', '=', 'null', ')', '{']",0
GruntParser.java,"['JobID', 'id', '=', 'JobID', '.', 'forName', '(', 'jobid', ')', ';']",0
GruntParser.java,"['RunningJob', 'job', '=', 'mJobClient', '.', 'getJob', '(', 'id', ')', ';']",0
GruntParser.java,"['if', '(', 'job', '=', '=', 'null', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Job', 'with', 'id', '""', '+', 'jobid', '+', '""', 'is', 'not', 'active', '""', ')', ';']",0
GruntParser.java,"['job', '.', 'killJob', '(', ')', ';']",0
GruntParser.java,"['log', '.', 'error', '(', '""', 'kill', 'submitted', '.', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processLS', '(', 'String', 'path', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'pathDescriptor', ';']",0
GruntParser.java,"['if', '(', 'path', '=', '=', 'null', ')', '{']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'getActiveContainer', '(', ')', ';']",0
GruntParser.java,"['pathDescriptor', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'pathDescriptor', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'pathDescriptor', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['ContainerDescriptor', 'container', '=', '(', 'ContainerDescriptor', ')', 'pathDescriptor', ';']",0
GruntParser.java,"['Iterator', '<', 'ElementDescriptor', '>', 'elems', '=', 'container', '.', 'iterator', '(', ')', ';']",0
GruntParser.java,"['while', '(', 'elems', '.', 'hasNext', '(', ')', ')', '{']",0
GruntParser.java,"['ElementDescriptor', 'curElem', '=', 'elems', '.', 'next', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'mDfs', '.', 'isContainer', '(', 'curElem', '.', 'toString', '(', ')', ')', ')', '{']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'curElem', '.', 'toString', '(', ')', '+', '""', '\\', 't', '<', 'dir', '>', '""', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['printLengthAndReplication', '(', 'curElem', ')', ';']",0
GruntParser.java,"['}', 'else', '{']",0
GruntParser.java,"['printLengthAndReplication', '(', 'pathDescriptor', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'LS', 'on', '""', '+', 'path', ',', 'e', ')', ';']",0
GruntParser.java,"['private', 'void', 'printLengthAndReplication', '(', 'ElementDescriptor', 'elem', ')']",0
GruntParser.java,"['throws', 'IOException', '{']",0
GruntParser.java,"['Map', '<', 'String', ',', 'Object', '>', 'stats', '=', 'elem', '.', 'getStatistics', '(', ')', ';']",0
GruntParser.java,"['long', 'replication', '=', '(', 'Short', ')', 'stats']",0
GruntParser.java,"['.', 'get', '(', 'ElementDescriptor', '.', 'BLOCK_REPLICATION_KEY', ')', ';']",0
GruntParser.java,"['long', 'len', '=', '(', 'Long', ')', 'stats', '.', 'get', '(', 'ElementDescriptor', '.', 'LENGTH_KEY', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'elem', '.', 'toString', '(', ')', '+', '""', '<', 'r', '""', '+', 'replication', '+', '""', '>', '\\', 't', '""', '+', 'len', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPWD', '(', ')', 'throws', 'IOException']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', 'mDfs', '.', 'getActiveContainer', '(', ')', '.', 'toString', '(', ')', ')', ';']",0
GruntParser.java,"['protected', 'void', 'printHelp', '(', ')']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'Commands', ':', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', '<', 'pig', 'latin', 'statement', '>', ';', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'store', '<', 'alias', '>', 'into', '<', 'filename', '>', '[', 'using', '<', 'functionSpec', '>', ']', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'dump', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'describe', '<', 'alias', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'kill', '<', 'job_id', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'ls', '<', 'path', '>', '\\', 'r', '\\', 'ndu', '<', 'path', '>', '\\', 'r', '\\', 'nmv', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncp', '<', 'src', '>', '<', 'dst', '>', '\\', 'r', '\\', 'nrm', '<', 'src', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'copyFromLocal', '<', 'localsrc', '>', '<', 'dst', '>', '\\', 'r', '\\', 'ncd', '<', 'dir', '>', '\\', 'r', '\\', 'npwd', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cat', '<', 'src', '>', '\\', 'r', '\\', 'ncopyToLocal', '<', 'src', '>', '<', 'localdst', '>', '\\', 'r', '\\', 'nmkdir', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'cd', '<', 'path', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'define', '<', 'functionAlias', '>', '<', 'functionSpec', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'register', '<', 'udfJar', '>', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'set', 'key', 'value', '""', ')', ';']",0
GruntParser.java,"['System', '.', 'out', '.', 'println', '(', '""', 'quit', '""', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMove', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'srcPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'src', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'rename', '(', 'dstPath', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'move', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopy', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'mConf', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyToLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mDfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mLfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '""', '+', 'src', '+', '""', 'to', '(', 'locally', ')', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processCopyFromLocal', '(', 'String', 'src', ',', 'String', 'dst', ')', 'throws', 'IOException']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'srcPath', '=', 'mLfs', '.', 'asElement', '(', 'src', ')', ';']",0
GruntParser.java,"['ElementDescriptor', 'dstPath', '=', 'mDfs', '.', 'asElement', '(', 'dst', ')', ';']",0
GruntParser.java,"['srcPath', '.', 'copy', '(', 'dstPath', ',', 'false', ')', ';']",0
GruntParser.java,"['catch', '(', 'DataStorageException', 'e', ')', '{']",0
GruntParser.java,"['throw', 'WrappedIOException', '.', 'wrap', '(', '""', 'Failed', 'to', 'copy', '(', 'loally', ')', '""', '+', 'src', '+', '""', 'to', '""', '+', 'dst', ',', 'e', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processMkdir', '(', 'String', 'dir', ')', 'throws', 'IOException']",0
GruntParser.java,"['ContainerDescriptor', 'dirDescriptor', '=', 'mDfs', '.', 'asContainer', '(', 'dir', ')', ';']",0
GruntParser.java,"['dirDescriptor', '.', 'create', '(', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processPig', '(', 'String', 'cmd', ')', 'throws', 'IOException']",0
GruntParser.java,"['int', 'start', '=', '1', ';']",0
GruntParser.java,"['if', '(', '!', 'mInteractive', ')', '{']",0
GruntParser.java,"['start', '=', 'getLineNumber', '(', ')', ';']",0
GruntParser.java,"['if', '(', 'cmd', '.', 'charAt', '(', 'cmd', '.', 'length', '(', ')', '-', '1', ')', '!', '=', ""'"", ';', ""'"", ')', '{']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', '+', '""', ';', '""', ',', 'start', ')', ';']",0
GruntParser.java,"['mPigServer', '.', 'registerQuery', '(', 'cmd', ',', 'start', ')', ';']",0
GruntParser.java,"['protected', 'void', 'processRemove', '(', 'String', 'path', ',', 'String', 'options', ')', 'throws', 'IOException']",0
GruntParser.java,"['ElementDescriptor', 'dfsPath', '=', 'mDfs', '.', 'asElement', '(', 'path', ')', ';']",0
GruntParser.java,"['executeBatch', '(', ')', ';']",0
GruntParser.java,"['if', '(', '!', 'dfsPath', '.', 'exists', '(', ')', ')', '{']",0
GruntParser.java,"['if', '(', 'options', '=', '=', 'null', '|', '|', '!', 'options', '.', 'equalsIgnoreCase', '(', '""', 'force', '""', ')', ')', '{']",0
GruntParser.java,"['throw', 'new', 'IOException', '(', '""', 'File', 'or', 'directory', '""', '+', 'path', '+', '""', 'does', 'not', 'exist', '.', '""', ')', ';']",0
GruntParser.java,"['dfsPath', '.', 'delete', '(', ')', ';']",0
GruntParser.java,"['private', 'class', 'ExplainState', '{']",0
GruntParser.java,"['public', 'long', 'mTime', ';']",0
GruntParser.java,"['public', 'int', 'mCount', ';']",0
GruntParser.java,"['public', 'String', 'mAlias', ';']",0
GruntParser.java,"['public', 'String', 'mTarget', ';']",0
GruntParser.java,"['public', 'String', 'mScript', ';']",0
GruntParser.java,"['public', 'boolean', 'mVerbose', ';']",0
GruntParser.java,"['public', 'String', 'mFormat', ';']",0
GruntParser.java,"['public', 'boolean', 'mLast', ';']",0
GruntParser.java,"['public', 'ExplainState', '(', 'String', 'alias', ',', 'String', 'target', ',', 'String', 'script', ',']",0
GruntParser.java,"['boolean', 'verbose', ',', 'String', 'format', ')', '{']",0
GruntParser.java,"['mTime', '=', 'new', 'Date', '(', ')', '.', 'getTime', '(', ')', ';']",0
GruntParser.java,"['mCount', '=', '0', ';']",0
GruntParser.java,"['mAlias', '=', 'alias', ';']",0
GruntParser.java,"['mTarget', '=', 'target', ';']",0
GruntParser.java,"['mScript', '=', 'script', ';']",0
GruntParser.java,"['mVerbose', '=', 'verbose', ';']",0
GruntParser.java,"['mFormat', '=', 'format', ';']",0
GruntParser.java,"['mLast', '=', 'false', ';']",0
GruntParser.java,"['private', 'PigServer', 'mPigServer', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mDfs', ';']",0
GruntParser.java,"['private', 'DataStorage', 'mLfs', ';']",0
GruntParser.java,"['private', 'Properties', 'mConf', ';']",0
GruntParser.java,"['private', 'JobClient', 'mJobClient', ';']",0
GruntParser.java,"['private', 'boolean', 'mDone', ';']",0
GruntParser.java,"['private', 'boolean', 'mLoadOnly', ';']",0
GruntParser.java,"['private', 'ExplainState', 'mExplain', ';']",0
GruntParser.java,"['private', 'int', 'mNumFailedJobs', ';']",0
GruntParser.java,"['private', 'int', 'mNumSucceededJobs', ';']",0
LOIsNull.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOIsNull.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOIsNull.java,"['public', 'class', 'LOIsNull', 'extends', 'UnaryExpressionOperator', '{']",0
LOIsNull.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOIsNull.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOIsNull', '.', 'class', ')', ';']",0
LOIsNull.java,"['/', '*', '*']",1
LOIsNull.java,"['public', 'LOIsNull', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOIsNull.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOIsNull.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOIsNull.java,"['return', 'mSchema', ';']",0
LOIsNull.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOIsNull.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOIsNull.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LOIsNull.java,"['mFieldSchema', '.', 'setParent', '(', 'getOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getOperand', '(', ')', ')', ';']",0
LOIsNull.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOIsNull.java,"['return', 'mFieldSchema', ';']",0
LOIsNull.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOIsNull.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOIsNull.java,"['public', 'String', 'name', '(', ')', '{']",0
LOIsNull.java,"['return', '""', 'IsNull', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
DotPOPrinter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
DotPOPrinter.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DotPlanDumper', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
DotPOPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', '*', ';']",0
DotPOPrinter.java,"['/', '*', '*']",0
DotPOPrinter.java,"['public', 'class', 'DotPOPrinter', 'extends', 'DotPlanDumper', '<', 'PhysicalOperator', ',', 'PhysicalPlan', ',']",0
DotPOPrinter.java,"['PhysicalOperator', ',', 'PhysicalPlan', '>', '{']",0
DotPOPrinter.java,"['public', 'DotPOPrinter', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotPOPrinter.java,"['this', '(', 'plan', ',', 'ps', ',', 'false', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',']",0
DotPOPrinter.java,"['new', 'HashSet', '<', 'Operator', '>', '(', ')', ')', ';']",0
DotPOPrinter.java,"['public', 'DotPOPrinter', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'ps', ',', 'boolean', 'isSubGraph', ',']",0
DotPOPrinter.java,"['Set', '<', 'Operator', '>', 'subgraphs', ',']",0
DotPOPrinter.java,"['Set', '<', 'Operator', '>', 'multiInputSubgraphs', ',']",0
DotPOPrinter.java,"['Set', '<', 'Operator', '>', 'multiOutputSubgraphs', ')', '{']",0
DotPOPrinter.java,"['super', '(', 'plan', ',', 'ps', ',', 'isSubGraph', ',', 'subgraphs', ',', 'multiInputSubgraphs', ',']",0
DotPOPrinter.java,"['multiOutputSubgraphs', ')', ';']",0
DotPOPrinter.java,"['protected', 'DotPlanDumper', 'makeDumper', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotPOPrinter.java,"['DotPOPrinter', 'dumper', '=', 'new', 'DotPOPrinter', '(', 'plan', ',', 'ps', ',', 'true', ',', 'mSubgraphs', ',']",0
DotPOPrinter.java,"['mMultiOutputSubgraphs', ')', ';']",0
DotPOPrinter.java,"['dumper', '.', 'setVerbose', '(', 'this', '.', 'isVerbose', '(', ')', ')', ';']",0
DotPOPrinter.java,"['return', 'dumper', ';']",0
DotPOPrinter.java,"['protected', 'String', 'getName', '(', 'PhysicalOperator', 'op', ')', '{']",0
DotPOPrinter.java,"['return', '(', 'op', '.', 'name', '(', ')', '.', 'split', '(', '""', '-', '""', ')', ')', '[', '0', ']', ';']",0
DotPOPrinter.java,"['protected', 'String', '[', ']', 'getAttributes', '(', 'PhysicalOperator', 'op', ')', '{']",0
DotPOPrinter.java,"['if', '(', 'op', 'instanceof', 'POStore', '|', '|', 'op', 'instanceof', 'POLoad', ')', '{']",0
DotPOPrinter.java,"['String', '[', ']', 'attributes', '=', 'new', 'String', '[', '3', ']', ';']",0
DotPOPrinter.java,"['String', 'name', '=', 'getName', '(', 'op', ')', ';']",0
DotPOPrinter.java,"['int', 'idx', '=', 'name', '.', 'lastIndexOf', '(', '""', ':', '""', ')', ';']",0
DotPOPrinter.java,"['if', '(', 'idx', '!', '=', '-', '1', ')', '{']",0
DotPOPrinter.java,"['String', 'part1', '=', 'name', '.', 'substring', '(', '0', ',', 'idx', ')', ';']",0
DotPOPrinter.java,"['String', 'part2', '=', 'name', '.', 'substring', '(', 'idx', '+', '1', ',', 'name', '.', 'length', '(', ')', ')', ';']",0
DotPOPrinter.java,"['name', '=', 'part1', '+', '""', ',', '\\', '\\', 'n', '""', '+', 'part2', ';']",0
DotPOPrinter.java,"['attributes', '[', '0', ']', '=', '""', 'label', '=', '\\', '""', '""', '+', 'name', '+', '""', '\\', '""', '""', ';']",0
DotPOPrinter.java,"['attributes', '[', '1', ']', '=', '""', 'style', '=', '\\', '""', 'filled', '\\', '""', '""', ';']",0
DotPOPrinter.java,"['attributes', '[', '2', ']', '=', '""', 'fillcolor', '=', '\\', '""', 'gray', '\\', '""', '""', ';']",0
DotPOPrinter.java,"['return', 'attributes', ';']",0
DotPOPrinter.java,"['return', 'super', '.', 'getAttributes', '(', 'op', ')', ';']",0
DotPOPrinter.java,"['protected', 'Collection', '<', 'PhysicalPlan', '>', 'getMultiOutputNestedPlans', '(', 'PhysicalOperator', 'op', ')', '{']",0
DotPOPrinter.java,"['Collection', '<', 'PhysicalPlan', '>', 'plans', '=', 'new', 'LinkedList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
DotPOPrinter.java,"['if', '(', 'op', 'instanceof', 'POSplit', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'POSplit', ')', 'op', ')', '.', 'getPlans', '(', ')', ')', ';']",1
DotPOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'PODemux', ')', '{']",0
DotPOPrinter.java,"['Set', '<', 'PhysicalPlan', '>', 'pl', '=', 'new', 'HashSet', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
DotPOPrinter.java,"['pl', '.', 'addAll', '(', '(', '(', 'PODemux', ')', 'op', ')', '.', 'getPlans', '(', ')', ')', ';']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', 'pl', ')', ';']",0
DotPOPrinter.java,"['return', 'plans', ';']",0
DotPOPrinter.java,"['protected', 'Collection', '<', 'PhysicalPlan', '>', 'getNestedPlans', '(', 'PhysicalOperator', 'op', ')', '{']",0
DotPOPrinter.java,"['Collection', '<', 'PhysicalPlan', '>', 'plans', '=', 'new', 'LinkedList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
DotPOPrinter.java,"['if', '(', 'op', 'instanceof', 'POFilter', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'add', '(', '(', '(', 'POFilter', ')', 'op', ')', '.', 'getPlan', '(', ')', ')', ';']",0
DotPOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'POForEach', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'POForEach', ')', 'op', ')', '.', 'getInputPlans', '(', ')', ')', ';']",0
DotPOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'POSort', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'POSort', ')', 'op', ')', '.', 'getSortPlans', '(', ')', ')', ';']",0
DotPOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'POLocalRearrange', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', '(', '(', 'POLocalRearrange', ')', 'op', ')', '.', 'getPlans', '(', ')', ')', ';']",0
DotPOPrinter.java,"['else', 'if', '(', 'op', 'instanceof', 'POFRJoin', ')', '{']",0
DotPOPrinter.java,"['POFRJoin', 'frj', '=', '(', 'POFRJoin', ')', 'op', ';']",0
DotPOPrinter.java,"['List', '<', 'List', '<', 'PhysicalPlan', '>', '>', 'joinPlans', '=', 'frj', '.', 'getJoinPlans', '(', ')', ';']",0
DotPOPrinter.java,"['if', '(', 'joinPlans', '!', '=', 'null', ')', '{']",0
DotPOPrinter.java,"['for', '(', 'List', '<', 'PhysicalPlan', '>', 'list', ':', 'joinPlans', ')', '{']",0
DotPOPrinter.java,"['plans', '.', 'addAll', '(', 'list', ')', ';']",0
DotPOPrinter.java,"['return', 'plans', ';']",0
Utf8StorageConverter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
Utf8StorageConverter.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigWarning', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PigLogger', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataBag', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'Tuple', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'ParseException', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'parser', '.', 'TextDataParser', ';']",0
Utf8StorageConverter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Utf8StorageConverter.java,"['/', '*', '*']",0
Utf8StorageConverter.java,"['abstract', 'public', 'class', 'Utf8StorageConverter', '{']",0
Utf8StorageConverter.java,"['protected', 'BagFactory', 'mBagFactory', '=', 'BagFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'TupleFactory', 'mTupleFactory', '=', 'TupleFactory', '.', 'getInstance', '(', ')', ';']",0
Utf8StorageConverter.java,"['protected', 'final', 'Log', 'mLog', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Integer', 'mMaxInt', '=', 'new', 'Integer', '(', 'Integer', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'Long', 'mMaxLong', '=', 'new', 'Long', '(', 'Long', '.', 'MAX_VALUE', ')', ';']",0
Utf8StorageConverter.java,"['private', 'TextDataParser', 'dataParser', '=', 'null', ';']",0
Utf8StorageConverter.java,"['private', 'PigLogger', 'pigLogger', '=', 'PhysicalOperator', '.', 'getPigLogger', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Utf8StorageConverter', '(', ')', '{']",0
Utf8StorageConverter.java,"['private', 'Object', 'parseFromBytes', '(', 'byte', '[', ']', 'b', ')', 'throws', 'ParseException', '{']",0
Utf8StorageConverter.java,"['ByteArrayInputStream', 'in', '=', 'new', 'ByteArrayInputStream', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['if', '(', 'dataParser', '=', '=', 'null', ')', '{']",0
Utf8StorageConverter.java,"['dataParser', '=', 'new', 'TextDataParser', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['}', 'else', '{']",0
Utf8StorageConverter.java,"['}', 'else', '{']",0
Utf8StorageConverter.java,"['dataParser', '.', 'ReInit', '(', 'in', ')', ';']",0
Utf8StorageConverter.java,"['return', 'dataParser', '.', 'Parse', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'DataBag', 'bytesToBag', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['DataBag', 'db', ';']",0
Utf8StorageConverter.java,"['db', '=', '(', 'DataBag', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'bag', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', '(', 'DataBag', ')', 'db', ';']",0
Utf8StorageConverter.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'String', 'bytesToCharArray', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'String', '(', 'b', ',', '""', 'UTF', '-', '8', '""', ')', ';']",0
Utf8StorageConverter.java,"['public', 'Double', 'bytesToDouble', '(', 'byte', '[', ']', 'b', ')', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'Double', '.', 'valueOf', '(', 'new', 'String', '(', 'b', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'double', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'Float', 'bytesToFloat', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'F', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'f', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Float', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'float', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'Integer', 'bytesToInteger', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Integer', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Integer', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'int', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxInt', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Integer', '(', 'd', '.', 'intValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'int', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'Long', 'bytesToLong', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['String', 's', ';']",0
Utf8StorageConverter.java,"['if', '(', 'b', '.', 'length', '>', '0', '&', '&']",0
Utf8StorageConverter.java,"['(', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'L', ""'"", '|', '|', 'b', '[', 'b', '.', 'length', '-', '1', ']', '=', '=', ""'"", 'l', ""'"", ')', ')', '{']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ',', '0', ',', 'b', '.', 'length', '-', '1', ')', ';']",0
Utf8StorageConverter.java,"['s', '=', 'new', 'String', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['return', 'Long', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'It', ""'"", 's', 'possible', 'that', 'this', 'field', 'can', 'be', 'interpreted', 'as', 'a', 'double', '.']",0
Utf8StorageConverter.java,"['/', '/', 'Unfortunately', 'Java', 'doesn', ""'"", 't', 'handle', 'this', 'in', 'Long', '.', 'valueOf', '.', 'So']",0
Utf8StorageConverter.java,"['/', '/', 'we', 'need', 'to', 'try', 'to', 'convert', 'it', 'to', 'a', 'double', 'and', 'if', 'that', 'works', 'then']",0
Utf8StorageConverter.java,"['/', '/', 'go', 'to', 'an', 'long', '.']",0
Utf8StorageConverter.java,"['Double', 'd', '=', 'Double', '.', 'valueOf', '(', 's', ')', ';']",0
Utf8StorageConverter.java,"['/', '/', 'Need', 'to', 'check', 'for', 'an', 'overflow', 'error']",0
Utf8StorageConverter.java,"['if', '(', 'd', '.', 'doubleValue', '(', ')', '>', 'mMaxLong', '.', 'doubleValue', '(', ')', '+', '1', '.', '0', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Value', '""', '+', 'd', '+', '""', 'too', 'large', 'for', 'integer', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'TOO_LARGE_FOR_INT', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'new', 'Long', '(', 'd', '.', 'longValue', '(', ')', ')', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'NumberFormatException', 'nfe2', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'long', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'long', ',', 'caught', 'NumberFormatException', '<', '""', '+']",0
Utf8StorageConverter.java,"['nfe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'Map', '<', 'Object', ',', 'Object', '>', 'bytesToMap', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Map', '<', 'Object', ',', 'Object', '>', 'map', ';']",0
Utf8StorageConverter.java,"['map', '=', '(', 'Map', '<', 'Object', ',', 'Object', '>', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'map', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 'map', ';']",0
Utf8StorageConverter.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['public', 'Tuple', 'bytesToTuple', '(', 'byte', '[', ']', 'b', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['if', '(', 'b', '=', '=', 'null', ')']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['Tuple', 't', ';']",0
Utf8StorageConverter.java,"['t', '=', '(', 'Tuple', ')', 'parseFromBytes', '(', 'b', ')', ';']",0
Utf8StorageConverter.java,"['catch', '(', 'ParseException', 'pe', ')', '{']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'ParseException', '<', '""', '+']",0
Utf8StorageConverter.java,"['pe', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Utf8StorageConverter.java,"['/', '/', 'can', 'happen', 'if', 'parseFromBytes', 'identifies', 'it', 'as', 'being', 'of', 'different', 'type']",0
Utf8StorageConverter.java,"['LogUtils', '.', 'warn', '(', 'this', ',', '""', 'Unable', 'to', 'interpret', 'value', '""', '+', 'b', '+', '""', 'in', 'field', 'being', '""', '+']",0
Utf8StorageConverter.java,"['""', 'converted', 'to', 'type', 'tuple', ',', 'caught', 'Exception', '<', '""', '+']",0
Utf8StorageConverter.java,"['e', '.', 'getMessage', '(', ')', '+', '""', '>', 'field', 'discarded', '""', ',']",0
Utf8StorageConverter.java,"['PigWarning', '.', 'FIELD_DISCARDED_TYPE_CONVERSION_FAILED', ',', 'mLog', ')', ';']",0
Utf8StorageConverter.java,"['return', 'null', ';']",0
Utf8StorageConverter.java,"['return', 't', ';']",0
Utf8StorageConverter.java,"['return', 't', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'DataBag', 'bag', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'bag', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'String', 's', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 's', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Double', 'd', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'd', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Float', 'f', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'f', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Integer', 'i', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'i', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Long', 'l', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'l', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Map', '<', 'Object', ',', 'Object', '>', 'm', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 'DataType', '.', 'mapToString', '(', 'm', ')', '.', 'getBytes', '(', ')', ';']",0
Utf8StorageConverter.java,"['public', 'byte', '[', ']', 'toBytes', '(', 'Tuple', 't', ')', 'throws', 'IOException', '{']",0
Utf8StorageConverter.java,"['return', 't', '.', 'toString', '(', ')', '.', 'getBytes', '(', ')', ';']",0
LOForEach.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'Map', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'HashMap', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
LOForEach.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'SchemaMergeException', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'optimizer', '.', 'SchemaRemover', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'ProjectionMap', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'RequiredFields', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOForEach.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOForEach.java,"['public', 'class', 'LOForEach', 'extends', 'LogicalOperator', '{']",0
LOForEach.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",1
LOForEach.java,"['private', 'ArrayList', '<', 'LogicalPlan', '>', 'mForEachPlans', ';']",0
LOForEach.java,"['private', 'ArrayList', '<', 'Boolean', '>', 'mFlatten', ';']",0
LOForEach.java,"['private', 'ArrayList', '<', 'Schema', '>', 'mUserDefinedSchema', '=', 'null', ';']",0
LOForEach.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOForEach', '.', 'class', ')', ';']",0
LOForEach.java,"['/', '*', '*']",0
LOForEach.java,"['/', '*', '*']",0
LOForEach.java,"['public', 'LOForEach', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',']",0
LOForEach.java,"['ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', ',', 'ArrayList', '<', 'Boolean', '>', 'flattenList', ')', '{']",0
LOForEach.java,"['mForEachPlans', '=', 'foreachPlans', ';']",0
LOForEach.java,"['mFlatten', '=', 'flattenList', ';']",0
LOForEach.java,"['public', 'LOForEach', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ',']",0
LOForEach.java,"['ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', ',', 'ArrayList', '<', 'Boolean', '>', 'flattenList', ',']",0
LOForEach.java,"['ArrayList', '<', 'Schema', '>', 'userDefinedSchemaList', ')', '{']",0
LOForEach.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOForEach.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOForEach.java,"['mForEachPlans', '=', 'foreachPlans', ';']",0
LOForEach.java,"['mFlatten', '=', 'flattenList', ';']",0
LOForEach.java,"['mUserDefinedSchema', '=', 'userDefinedSchemaList', ';']",0
LOForEach.java,"['public', 'ArrayList', '<', 'LogicalPlan', '>', 'getForEachPlans', '(', ')', '{']",0
LOForEach.java,"['return', 'mForEachPlans', ';']",0
LOForEach.java,"['public', 'void', 'setForEachPlans', '(', 'ArrayList', '<', 'LogicalPlan', '>', 'foreachPlans', ')', '{']",0
LOForEach.java,"['mForEachPlans', '=', 'foreachPlans', ';']",0
LOForEach.java,"['public', 'List', '<', 'Boolean', '>', 'getFlatten', '(', ')', '{']",0
LOForEach.java,"['return', 'mFlatten', ';']",0
LOForEach.java,"['public', 'void', 'setFlatten', '(', 'ArrayList', '<', 'Boolean', '>', 'flattenList', ')', '{']",0
LOForEach.java,"['mFlatten', '=', 'flattenList', ';']",0
LOForEach.java,"['public', 'List', '<', 'Schema', '>', 'getUserDefinedSchema', '(', ')', '{']",0
LOForEach.java,"['return', 'mUserDefinedSchema', ';']",0
LOForEach.java,"['public', 'void', 'setUserDefinedSchema', '(', 'ArrayList', '<', 'Schema', '>', 'userDefinedSchema', ')', '{']",0
LOForEach.java,"['mUserDefinedSchema', '=', 'userDefinedSchema', ';']",0
LOForEach.java,"['public', 'String', 'name', '(', ')', '{']",1
LOForEach.java,"['return', '""', 'ForEach', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOForEach.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",1
LOForEach.java,"['return', 'false', ';']",1
LOForEach.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",1
LOForEach.java,"['v', '.', 'visit', '(', 'this', ')', ';']",1
LOForEach.java,"['public', 'byte', 'getType', '(', ')', '{']",0
LOForEach.java,"['return', 'DataType', '.', 'BAG', ';']",0
LOForEach.java,"['private', 'void', 'updateAliasCount', '(', 'Map', '<', 'String', ',', 'Integer', '>', 'aliases', ',', 'String', 'alias', ')', '{']",0
LOForEach.java,"['if', '(', '(', 'null', '=', '=', 'aliases', ')', '|', '|', '(', 'null', '=', '=', 'alias', ')', ')', 'return', ';']",0
LOForEach.java,"['Integer', 'count', '=', 'aliases', '.', 'get', '(', 'alias', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '=', '=', 'count', ')', '{']",0
LOForEach.java,"['aliases', '.', 'put', '(', 'alias', ',', '1', ')', ';']",0
LOForEach.java,"['aliases', '.', 'put', '(', 'alias', ',', '+', '+', 'count', ')', ';']",0
LOForEach.java,"['public', 'Schema', 'getSchema', '(', ')', 'throws', 'FrontendException', '{']",1
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Entering', 'getSchema', '""', ')', ';']",0
LOForEach.java,"['if', '(', '!', 'mIsSchemaComputed', ')', '{']",0
LOForEach.java,"['List', '<', 'Schema', '.', 'FieldSchema', '>', 'fss', '=', 'new', 'ArrayList', '<', 'Schema', '.', 'FieldSchema', '>', '(']",0
LOForEach.java,"['mForEachPlans', '.', 'size', '(', ')', ')', ';']",0
LOForEach.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'mForEachPlans', ')', '{']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Number', 'of', 'leaves', 'in', '""', '+', 'plan', '+', '""', '=', '""', '+', 'plan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', ')', ';']",0
LOForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'plan', '.', 'getLeaves', '(', ')', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Leaf', '""', '+', 'i', '+', '""', '=', '""', '+', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', 'i', ')', ')', ';']",0
LOForEach.java,"['/', '/', 'LogicalOperator', 'op', '=', 'plan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
LOForEach.java,"['LogicalOperator', 'op', '=', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'op', ':', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'op', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Printed', 'the', 'leaves', 'of', 'the', 'generate', 'plans', '""', ')', ';']",0
LOForEach.java,"['Map', '<', 'Schema', '.', 'FieldSchema', ',', 'String', '>', 'flattenAlias', '=', 'new', 'HashMap', '<', 'Schema', '.', 'FieldSchema', ',', 'String', '>', '(', ')', ';']",0
LOForEach.java,"['Map', '<', 'String', ',', 'Boolean', '>', 'inverseFlattenAlias', '=', 'new', 'HashMap', '<', 'String', ',', 'Boolean', '>', '(', ')', ';']",0
LOForEach.java,"['Map', '<', 'String', ',', 'Integer', '>', 'aliases', '=', 'new', 'HashMap', '<', 'String', ',', 'Integer', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'int', 'planCtr', '=', '0', ';', 'planCtr', '<', 'mForEachPlans', '.', 'size', '(', ')', ';', '+', '+', 'planCtr', ')', '{']",0
LOForEach.java,"['LogicalPlan', 'plan', '=', 'mForEachPlans', '.', 'get', '(', 'planCtr', ')', ';']",0
LOForEach.java,"['LogicalOperator', 'op', '=', 'plan', '.', 'getLeaves', '(', ')', '.', 'get', '(', '0', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'op', ':', '""', '+', 'op', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', '+', '""', '""', '+', 'op', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Flatten', ':', '""', '+', 'mFlatten', '.', 'get', '(', 'planCtr', ')', ')', ';']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'planFs', ';']",0
LOForEach.java,"['if', '(', 'op', 'instanceof', 'LOProject', ')', '{']",0
LOForEach.java,"['/', '/', 'the', 'check', 'for', 'the', 'type', 'is', 'required', 'for', 'statements', 'like']",0
LOForEach.java,"['/', '/', 'foreach', 'cogroup', '{']",0
LOForEach.java,"['/', '/', 'a1', '=', 'order', 'a', 'by', '*', ';']",0
LOForEach.java,"['/', '/', 'generate', 'a1', ';']",0
LOForEach.java,"['/', '/', '}']",0
LOForEach.java,"['/', '/', 'In', 'the', 'above', 'script', ',', 'the', 'generate', 'a1', ',', 'will', 'translate', 'to']",0
LOForEach.java,"['/', '/', 'project', '(', 'a1', ')', '-', '>', 'project', '(', '*', ')', 'and', 'will', 'not', 'be', 'translated', 'to', 'a', 'sequence', 'of', 'projects']",0
LOForEach.java,"['/', '/', 'As', 'a', 'result', 'the', 'project', '(', '*', ')', 'will', 'remain', 'but', 'the', 'return', 'type', 'is', 'a', 'bag']",0
LOForEach.java,"['/', '/', 'project', '(', '*', ')', 'with', 'a', 'data', 'type', 'set', 'to', 'tuple', 'indicates', 'a', 'project', '(', '*', ')', 'from', 'an', 'input']",0
LOForEach.java,"['/', '/', 'that', 'has', 'no', 'schema']",0
LOForEach.java,"['if', '(', '(', '(', '(', 'LOProject', ')', 'op', ')', '.', 'isStar', '(', ')', ')', '&', '&', '(', '(', '(', 'LOProject', ')', 'op', ')', '.', 'getType', '(', ')', '=', '=', 'DataType', '.', 'TUPLE', ')', ')', '{']",0
LOForEach.java,"['planFs', '=', '(', '(', 'ExpressionOperator', ')', 'op', ')', '.', 'getFieldSchema', '(', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'planFs', ':', '""', '+', 'planFs', ')', ';']",0
LOForEach.java,"['Schema', 'userDefinedSchema', '=', 'null', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'mUserDefinedSchema', ')', '{']",0
LOForEach.java,"['userDefinedSchema', '=', 'mUserDefinedSchema', '.', 'get', '(', 'planCtr', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'planFs', ')', '{']",0
LOForEach.java,"['String', 'outerCanonicalAlias', '=', 'op', '.', 'getAlias', '(', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '=', '=', 'outerCanonicalAlias', ')', '{']",0
LOForEach.java,"['outerCanonicalAlias', '=', 'planFs', '.', 'alias', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Outer', 'canonical', 'alias', ':', '""', '+', 'outerCanonicalAlias', ')', ';']",0
LOForEach.java,"['if', '(', 'mFlatten', '.', 'get', '(', 'planCtr', ')', ')', '{']",0
LOForEach.java,"['/', '/', 'need', 'to', 'extract', 'the', 'children', 'and', 'create', 'the', 'aliases']",0
LOForEach.java,"['/', '/', 'assumption', 'here', 'is', 'that', 'flatten', 'is', 'only', 'for', 'one', 'column']",0
LOForEach.java,"['/', '/', 'i', '.', 'e', '.', ',', 'flatten', '(', 'A', ')', ',', 'flatten', '(', 'A', '.', 'x', ')', 'and', 'NOT']",0
LOForEach.java,"['/', '/', 'flatten', '(', 'B', '.', '(', 'x', ',', 'y', ',', 'z', ')', ')']",0
LOForEach.java,"['Schema', 's', '=', 'planFs', '.', 'schema', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 's', '&', '&', 's', '.', 'isTwoLevelAccessRequired', '(', ')', ')', '{']",0
LOForEach.java,"['/', '/', 'this', 'is', 'the', 'case', 'where', 'the', 'schema', 'is', 'that', 'of']",0
LOForEach.java,"['/', '/', 'a', 'bag', 'which', 'has', 'just', 'one', 'tuple', 'fieldschema', 'which']",0
LOForEach.java,"['/', '/', 'in', 'turn', 'has', 'a', 'list', 'of', 'fieldschemas', '.', 'The', 'schema']",0
LOForEach.java,"['/', '/', 'after', 'flattening', 'would', 'consist', 'of', 'the', 'fieldSchemas']",0
LOForEach.java,"['/', '/', 'present', 'in', 'the', 'tuple']",0
LOForEach.java,"['/', '/', 'check', 'that', 'indeed', 'we', 'only', 'have', 'one', 'field', 'schema']",0
LOForEach.java,"['/', '/', 'which', 'is', 'that', 'of', 'a', 'tuple']",0
LOForEach.java,"['if', '(', 's', '.', 'getFields', '(', ')', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1008', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Expected', 'a', 'bag', 'schema', 'with', 'a', 'single', '""', '+']",0
LOForEach.java,"['""', 'element', 'of', 'type', '""', '+', 'DataType', '.', 'findTypeName', '(', 'DataType', '.', 'TUPLE', ')', '+']",0
LOForEach.java,"['""', 'but', 'got', 'a', 'bag', 'schema', 'with', 'multiple', 'elements', '.', '""', ';']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'tupleFS', '=', 's', '.', 'getField', '(', '0', ')', ';']",0
LOForEach.java,"['if', '(', 'tupleFS', '.', 'type', '!', '=', 'DataType', '.', 'TUPLE', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1009', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Expected', 'a', 'bag', 'schema', 'with', 'a', 'single', '""', '+']",0
LOForEach.java,"['""', 'element', 'of', 'type', '""', '+', 'DataType', '.', 'findTypeName', '(', 'DataType', '.', 'TUPLE', ')', '+']",0
LOForEach.java,"['""', 'but', 'got', 'an', 'element', 'of', 'type', '""', '+']",0
LOForEach.java,"['DataType', '.', 'findTypeName', '(', 'tupleFS', '.', 'type', ')', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOForEach.java,"['s', '=', 'tupleFS', '.', 'schema', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 's', ')', '{']",1
LOForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'fs', ';']",0
LOForEach.java,"['fs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 's', '.', 'getField', '(', 'i', ')', ')', ';']",0
LOForEach.java,"['fs', '.', 'setParent', '(', 's', '.', 'getField', '(', 'i', ')', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'fs', ':', '""', '+', 'fs', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'userDefinedSchema', ')', '{']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'userDefinedFieldSchema', ';']",0
LOForEach.java,"['if', '(', 'i', '<', 'userDefinedSchema', '.', 'size', '(', ')', ')', '{']",0
LOForEach.java,"['userDefinedFieldSchema', '=', 'userDefinedSchema', '.', 'getField', '(', 'i', ')', ';']",0
LOForEach.java,"['fs', '=', 'fs', '.', 'mergePrefixFieldSchema', '(', 'userDefinedFieldSchema', ')', ';']",0
LOForEach.java,"['}', 'catch', '(', 'SchemaMergeException', 'sme', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1016', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Problems', 'in', 'merging', 'user', 'defined', 'schema', '""', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'sme', ')', ';']",0
LOForEach.java,"['outerCanonicalAlias', '=', 'null', ';']",0
LOForEach.java,"['String', 'innerCanonicalAlias', '=', 'fs', '.', 'alias', ';']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'newFs', ';']",0
LOForEach.java,"['if', '(', '(', 'null', '!', '=', 'outerCanonicalAlias', ')', '&', '&', '(', 'null', '!', '=', 'innerCanonicalAlias', ')', ')', '{']",0
LOForEach.java,"['String', 'disambiguatorAlias', '=', 'outerCanonicalAlias', '+', '""', ':', ':', '""', '+', 'innerCanonicalAlias', ';']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'disambiguatorAlias', ',', 'fs', '.', 'schema', ',', 'fs', '.', 'type', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 's', '.', 'getField', '(', 'i', ')', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'disambiguatorAlias', ')', ';']",0
LOForEach.java,"['/', '/', 'it', ""'"", 's', 'fine', 'if', 'there', 'are', 'duplicates']",0
LOForEach.java,"['/', '/', 'we', 'just', 'need', 'to', 'record', 'if', 'its', 'due', 'to']",0
LOForEach.java,"['/', '/', 'flattening']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'fs', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 's', '.', 'getField', '(', 'i', ')', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'innerCanonicalAlias', ')', ';']",0
LOForEach.java,"['flattenAlias', '.', 'put', '(', 'newFs', ',', 'innerCanonicalAlias', ')', ';']",0
LOForEach.java,"['inverseFlattenAlias', '.', 'put', '(', 'innerCanonicalAlias', ',', 'true', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'newFs', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'userDefinedSchema', ')', '{']",0
LOForEach.java,"['if', '(', '!', 'DataType', '.', 'isSchemaType', '(', 'planFs', '.', 'type', ')', ')', '{']",0
LOForEach.java,"['if', '(', 'userDefinedSchema', '.', 'size', '(', ')', '>', '1', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1017', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Schema', 'mismatch', '.', 'A', 'basic', 'type', 'on', 'flattening', 'cannot', 'have', 'more', 'than', 'one', 'column', '.', 'User', 'defined', 'schema', ':', '""', '+', 'userDefinedSchema', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'planFs', '.', 'type', ')', ';']",0
LOForEach.java,"['newFs', '=', 'newFs', '.', 'mergePrefixFieldSchema', '(', 'userDefinedSchema', '.', 'getField', '(', '0', ')', ')', ';']",0
LOForEach.java,"['}', 'catch', '(', 'SchemaMergeException', 'sme', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1016', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Problems', 'in', 'merging', 'user', 'defined', 'schema', '""', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'sme', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'newFs', '.', 'alias', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'ufs', ':', 'userDefinedSchema', '.', 'getFields', '(', ')', ')', '{']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', '.', 'setFieldSchemaDefaultType', '(', 'ufs', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'ufs', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'ufs', '.', 'alias', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['if', '(', '!', 'DataType', '.', 'isSchemaType', '(', 'planFs', '.', 'type', ')', ')', '{']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'planFs', '.', 'alias', ',', 'planFs', '.', 'type', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BYTEARRAY', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['/', '/', 'just', 'populate', 'the', 'schema', 'with', 'the', 'field', 'schema', 'of', 'the', 'expression', 'operator']",0
LOForEach.java,"['/', '/', 'check', 'if', 'the', 'user', 'has', 'defined', 'a', 'schema', 'for', 'the', 'operator', ';', 'compare', 'the', 'schema']",0
LOForEach.java,"['/', '/', 'with', 'that', 'of', 'the', 'expression', 'operator', 'field', 'schema', 'and', 'then', 'add', 'it', 'to', 'the', 'list']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'newFs', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'planFs', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'userDefinedSchema', ')', '{']",0
LOForEach.java,"['newFs', '=', 'newFs', '.', 'mergePrefixFieldSchema', '(', 'userDefinedSchema', '.', 'getField', '(', '0', ')', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'newFs', '.', 'alias', ')', ';']",0
LOForEach.java,"['}', 'catch', '(', 'SchemaMergeException', 'sme', ')', '{']",0
LOForEach.java,"['int', 'errCode', '=', '1016', ';']",0
LOForEach.java,"['String', 'msg', '=', '""', 'Problems', 'in', 'merging', 'user', 'defined', 'schema', '""', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ',', 'sme', ')', ';']",0
LOForEach.java,"['newFs', '.', 'setParent', '(', 'planFs', '.', 'canonicalName', ',', 'op', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'newFs', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['/', '/', 'did', 'not', 'get', 'a', 'valid', 'list', 'of', 'field', 'schemas']",0
LOForEach.java,"['String', 'outerCanonicalAlias', '=', 'null', ';']",0
LOForEach.java,"['if', '(', 'null', '!', '=', 'userDefinedSchema', ')', '{']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'userDefinedFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'userDefinedSchema', '.', 'getField', '(', '0', ')', ')', ';']",0
LOForEach.java,"['fss', '.', 'add', '(', 'userDefinedFieldSchema', ')', ';']",0
LOForEach.java,"['userDefinedFieldSchema', '.', 'setParent', '(', 'null', ',', 'op', ')', ';']",0
LOForEach.java,"['updateAliasCount', '(', 'aliases', ',', 'userDefinedFieldSchema', '.', 'alias', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['mSchema', '=', 'null', ';']",0
LOForEach.java,"['mSchema', '=', 'null', ';']",0
LOForEach.java,"['mIsSchemaComputed', '=', 'true', ';']",0
LOForEach.java,"['mIsSchemaComputed', '=', 'true', ';']",0
LOForEach.java,"['return', 'mSchema', ';']",0
LOForEach.java,"['return', 'mSchema', ';']",0
LOForEach.java,"['mSchema', '=', 'null', ';']",0
LOForEach.java,"['mIsSchemaComputed', '=', 'false', ';']",1
LOForEach.java,"['throw', 'fee', ';']",0
LOForEach.java,"['/', '/', 'check', 'for', 'duplicate', 'column', 'names', 'and', 'throw', 'an', 'error', 'if', 'there', 'are', 'duplicates']",0
LOForEach.java,"['/', '/', 'ensure', 'that', 'flatten', 'gets', 'rid', 'of', 'duplicate', 'column', 'names', 'when', 'the', 'checks', 'are']",0
LOForEach.java,"['/', '/', 'being', 'done']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'flattenAlias', ':', '""', '+', 'flattenAlias', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'inverseFlattenAlias', ':', '""', '+', 'inverseFlattenAlias', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'aliases', ':', '""', '+', 'aliases', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'fss', '.', 'size', ':', '""', '+', 'fss', '.', 'size', '(', ')', ')', ';']",0
LOForEach.java,"['boolean', 'duplicates', '=', 'false', ';']",0
LOForEach.java,"['Map', '<', 'String', ',', 'Integer', '>', 'duplicateAliases', '=', 'new', 'HashMap', '<', 'String', ',', 'Integer', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'String', 'alias', ':', 'aliases', '.', 'keySet', '(', ')', ')', '{']",0
LOForEach.java,"['Integer', 'count', '=', 'aliases', '.', 'get', '(', 'alias', ')', ';']",0
LOForEach.java,"['if', '(', 'count', '>', '1', ')', '{', '/', '/', 'not', 'checking', 'for', 'null', 'here', 'as', 'counts', 'are', 'intitalized', 'to', '1']",0
LOForEach.java,"['Boolean', 'inFlatten', '=', 'false', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'inFlatten', ':', '""', '+', 'inFlatten', '+', '""', 'inverseFlattenAlias', ':', '""', '+', 'inverseFlattenAlias', ')', ';']",0
LOForEach.java,"['inFlatten', '=', 'inverseFlattenAlias', '.', 'get', '(', 'alias', ')', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'inFlatten', ':', '""', '+', 'inFlatten', '+', '""', 'inverseFlattenAlias', ':', '""', '+', 'inverseFlattenAlias', ')', ';']",0
LOForEach.java,"['if', '(', '(', 'null', '=', '=', 'inFlatten', ')', '|', '|', '(', '!', 'inFlatten', ')', ')', '{']",0
LOForEach.java,"['duplicates', '=', 'true', ';']",0
LOForEach.java,"['duplicateAliases', '.', 'put', '(', 'alias', ',', 'count', ')', ';']",0
LOForEach.java,"['if', '(', 'duplicates', ')', '{']",0
LOForEach.java,"['String', 'errMessage', '=', '""', 'Found', 'duplicates', 'in', 'schema', '.', '""', ';']",0
LOForEach.java,"['if', '(', 'duplicateAliases', '.', 'size', '(', ')', '>', '0', ')', '{']",0
LOForEach.java,"['Set', '<', 'String', '>', 'duplicateCols', '=', 'duplicateAliases', '.', 'keySet', '(', ')', ';']",0
LOForEach.java,"['Iterator', '<', 'String', '>', 'iter', '=', 'duplicateCols', '.', 'iterator', '(', ')', ';']",0
LOForEach.java,"['String', 'col', '=', 'iter', '.', 'next', '(', ')', ';']",0
LOForEach.java,"['errMessage', '+', '=', 'col', '+', '""', ':', '""', '+', 'duplicateAliases', '.', 'get', '(', 'col', ')', '+', '""', 'columns', '""', ';']",0
LOForEach.java,"['while', '(', 'iter', '.', 'hasNext', '(', ')', ')', '{']",0
LOForEach.java,"['col', '=', 'iter', '.', 'next', '(', ')', ';']",0
LOForEach.java,"['errMessage', '+', '=', '""', ',', '""', '+', 'col', '+', '""', ':', '""', '+', 'duplicateAliases', '.', 'get', '(', 'col', ')', '+', '""', 'columns', '""', ';']",0
LOForEach.java,"['errMessage', '+', '=', '""', '.', 'Please', 'alias', 'the', 'columns', 'with', 'unique', 'names', '.', '""', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', 'errMessage', ')', ';']",0
LOForEach.java,"['int', 'errCode', '=', '1007', ';']",0
LOForEach.java,"['throw', 'new', 'FrontendException', '(', 'errMessage', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ',', 'false', ',', 'null', ')', ';']",0
LOForEach.java,"['mSchema', '=', 'new', 'Schema', '(', 'fss', ')', ';']",1
LOForEach.java,"['/', '/', 'add', 'the', 'aliases', 'that', 'are', 'unique', 'after', 'flattening']",0
LOForEach.java,"['for', '(', 'Schema', '.', 'FieldSchema', 'fs', ':', 'mSchema', '.', 'getFields', '(', ')', ')', '{']",0
LOForEach.java,"['String', 'alias', '=', 'flattenAlias', '.', 'get', '(', 'fs', ')', ';']",0
LOForEach.java,"['Integer', 'count', '=', 'aliases', '.', 'get', '(', 'alias', ')', ';']",0
LOForEach.java,"['if', '(', 'null', '=', '=', 'count', ')', 'count', '=', '1', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'alias', ':', '""', '+', 'alias', ')', ';']",0
LOForEach.java,"['if', '(', '(', 'null', '!', '=', 'alias', ')', '&', '&', '(', 'count', '=', '=', '1', ')', ')', '{']",0
LOForEach.java,"['mSchema', '.', 'addAlias', '(', 'alias', ',', 'fs', ')', ';']",0
LOForEach.java,"['mIsSchemaComputed', '=', 'true', ';']",0
LOForEach.java,"['log', '.', 'debug', '(', '""', 'Exiting', 'getSchema', '""', ')', ';']",0
LOForEach.java,"['return', 'mSchema', ';']",0
LOForEach.java,"['public', 'void', 'unsetSchema', '(', ')', 'throws', 'VisitorException', '{']",1
LOForEach.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'mForEachPlans', ')', '{']",0
LOForEach.java,"['SchemaRemover', 'sr', '=', 'new', 'SchemaRemover', '(', 'plan', ')', ';']",1
LOForEach.java,"['sr', '.', 'visit', '(', ')', ';']",1
LOForEach.java,"['super', '.', 'unsetSchema', '(', ')', ';']",1
LOForEach.java,"['/', '*', '*']",0
LOForEach.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOForEach.java,"['/', '/', 'Do', 'generic', 'LogicalOperator', 'cloning']",0
LOForEach.java,"['LOForEach', 'forEachClone', '=', '(', 'LOForEach', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOForEach.java,"['/', '/', 'create', 'deep', 'copies', 'of', 'attributes', 'specific', 'to', 'foreach']",0
LOForEach.java,"['if', '(', 'mFlatten', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['forEachClone', '.', 'mFlatten', '=', 'new', 'ArrayList', '<', 'Boolean', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'Iterator', '<', 'Boolean', '>', 'it', '=', 'mFlatten', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
LOForEach.java,"['forEachClone', '.', 'mFlatten', '.', 'add', '(', 'new', 'Boolean', '(', 'it', '.', 'next', '(', ')', ')', ')', ';']",0
LOForEach.java,"['if', '(', 'mForEachPlans', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['forEachClone', '.', 'mForEachPlans', '=', 'new', 'ArrayList', '<', 'LogicalPlan', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'Iterator', '<', 'LogicalPlan', '>', 'it', '=', 'mForEachPlans', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
LOForEach.java,"['LogicalPlanCloneHelper', 'lpCloneHelper', '=', 'new', 'LogicalPlanCloneHelper', '(', 'it', '.', 'next', '(', ')', ')', ';']",0
LOForEach.java,"['forEachClone', '.', 'mForEachPlans', '.', 'add', '(', 'lpCloneHelper', '.', 'getClonedPlan', '(', ')', ')', ';']",0
LOForEach.java,"['if', '(', 'mUserDefinedSchema', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['forEachClone', '.', 'mUserDefinedSchema', '=', 'new', 'ArrayList', '<', 'Schema', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'Iterator', '<', 'Schema', '>', 'it', '=', 'mUserDefinedSchema', '.', 'iterator', '(', ')', ';', 'it', '.', 'hasNext', '(', ')', ';', ')', '{']",0
LOForEach.java,"['Schema', 's', '=', 'it', '.', 'next', '(', ')', ';']",0
LOForEach.java,"['forEachClone', '.', 'mUserDefinedSchema', '.', 'add', '(', 's', '!', '=', 'null', '?', 's', '.', 'clone', '(', ')', ':', 'null', ')', ';']",0
LOForEach.java,"['return', 'forEachClone', ';']",0
LOForEach.java,"['public', 'ProjectionMap', 'getProjectionMap', '(', ')', '{']",1
LOForEach.java,"['Schema', 'outputSchema', ';']",1
LOForEach.java,"['outputSchema', '=', 'getSchema', '(', ')', ';']",1
LOForEach.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOForEach.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOForEach.java,"['if', '(', 'outputSchema', '=', '=', 'null', ')', '{']",1
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['List', '<', 'LogicalOperator', '>', 'predecessors', '=', '(', 'ArrayList', '<', 'LogicalOperator', '>', ')', 'mPlan', '.', 'getPredecessors', '(', 'this', ')', ';']",1
LOForEach.java,"['if', '(', 'predecessors', '=', '=', 'null', ')', '{']",1
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['LogicalOperator', 'predecessor', '=', 'predecessors', '.', 'get', '(', '0', ')', ';']",0
LOForEach.java,"['Schema', 'inputSchema', ';']",0
LOForEach.java,"['inputSchema', '=', 'predecessor', '.', 'getSchema', '(', ')', ';']",1
LOForEach.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['List', '<', 'LogicalPlan', '>', 'foreachPlans', '=', 'getForEachPlans', '(', ')', ';']",0
LOForEach.java,"['List', '<', 'Boolean', '>', 'flattenList', '=', 'getFlatten', '(', ')', ';']",0
LOForEach.java,"['MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'mapFields', '=', 'new', 'MultiMap', '<', 'Integer', ',', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOForEach.java,"['List', '<', 'Integer', '>', 'addedFields', '=', 'new', 'ArrayList', '<', 'Integer', '>', '(', ')', ';']",1
LOForEach.java,"['int', 'outputColumn', '=', '0', ';']",0
LOForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'foreachPlans', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOForEach.java,"['LogicalPlan', 'foreachPlan', '=', 'foreachPlans', '.', 'get', '(', 'i', ')', ';']",0
LOForEach.java,"['List', '<', 'LogicalOperator', '>', 'leaves', '=', 'foreachPlan', '.', 'getLeaves', '(', ')', ';']",0
LOForEach.java,"['if', '(', 'leaves', '=', '=', 'null', '|', '|', 'leaves', '.', 'size', '(', ')', '>', '1', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['int', 'inputColumn', '=', '-', '1', ';']",0
LOForEach.java,"['boolean', 'mapped', '=', 'false', ';']",0
LOForEach.java,"['if', '(', 'leaves', '.', 'get', '(', '0', ')', 'instanceof', 'LOProject', ')', '{']",1
LOForEach.java,"['/', '/', 'find', 'out', 'if', 'this', 'project', 'is', 'a', 'chain', 'of', 'projects']",0
LOForEach.java,"['if', '(', 'LogicalPlan', '.', 'chainOfProjects', '(', 'foreachPlan', ')', ')', '{']",1
LOForEach.java,"['LOProject', 'rootProject', '=', '(', 'LOProject', ')', 'foreachPlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",1
LOForEach.java,"['inputColumn', '=', 'rootProject', '.', 'getCol', '(', ')', ';']",1
LOForEach.java,"['if', '(', 'inputSchema', '!', '=', 'null', ')', '{']",1
LOForEach.java,"['mapped', '=', 'true', ';']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'leafFS', ';']",0
LOForEach.java,"['leafFS', '=', '(', '(', 'ExpressionOperator', ')', 'leaves', '.', 'get', '(', '0', ')', ')', '.', 'getFieldSchema', '(', ')', ';']",0
LOForEach.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['if', '(', 'leafFS', '=', '=', 'null', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['if', '(', 'flattenList', '.', 'get', '(', 'i', ')', ')', '{']",0
LOForEach.java,"['Schema', 'innerSchema', '=', 'leafFS', '.', 'schema', ';']",0
LOForEach.java,"['if', '(', 'innerSchema', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['if', '(', 'innerSchema', '.', 'isTwoLevelAccessRequired', '(', ')', ')', '{']",0
LOForEach.java,"['/', '/', 'this', 'is', 'the', 'case', 'where', 'the', 'schema', 'is', 'that', 'of']",0
LOForEach.java,"['/', '/', 'a', 'bag', 'which', 'has', 'just', 'one', 'tuple', 'fieldschema', 'which']",0
LOForEach.java,"['/', '/', 'in', 'turn', 'has', 'a', 'list', 'of', 'fieldschemas', '.', 'The', 'schema']",0
LOForEach.java,"['/', '/', 'after', 'flattening', 'would', 'consist', 'of', 'the', 'fieldSchemas']",0
LOForEach.java,"['/', '/', 'present', 'in', 'the', 'tuple']",0
LOForEach.java,"['/', '/', 'check', 'that', 'indeed', 'we', 'only', 'have', 'one', 'field', 'schema']",0
LOForEach.java,"['/', '/', 'which', 'is', 'that', 'of', 'a', 'tuple']",0
LOForEach.java,"['if', '(', 'innerSchema', '.', 'getFields', '(', ')', '.', 'size', '(', ')', '!', '=', '1', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['Schema', '.', 'FieldSchema', 'tupleFS', ';']",0
LOForEach.java,"['tupleFS', '=', 'innerSchema', '.', 'getField', '(', '0', ')', ';']",0
LOForEach.java,"['}', 'catch', '(', 'FrontendException', 'fee', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['if', '(', 'tupleFS', '.', 'type', '!', '=', 'DataType', '.', 'TUPLE', ')', '{']",0
LOForEach.java,"['return', 'null', ';']",0
LOForEach.java,"['innerSchema', '=', 'tupleFS', '.', 'schema', ';']",0
LOForEach.java,"['/', '/', 'innerSchema', 'could', 'be', 'modified', 'and', 'hence', 'the', 'second', 'check']",0
LOForEach.java,"['if', '(', 'innerSchema', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'innerSchema', '.', 'size', '(', ')', ';', '+', '+', 'j', ')', '{']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['if', '(', 'mapped', ')', '{']",0
LOForEach.java,"['if', '(', 'mapped', ')', '{']",0
LOForEach.java,"['/', '/', 'map', 'each', 'flattened', 'column', 'to', 'the', 'original', 'column']",0
LOForEach.java,"['/', '/', 'map', 'each', 'flattened', 'column', 'to', 'the', 'original', 'column']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['addedFields', '.', 'add', '(', 'outputColumn', '+', '+', ')', ';']",0
LOForEach.java,"['addedFields', '.', 'add', '(', 'outputColumn', '+', '+', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['/', '/', 'innerSchema', 'is', 'null', ';', 'check', 'for', 'schema', 'type']",0
LOForEach.java,"['/', '/', 'innerSchema', 'is', 'null', ';', 'check', 'for', 'schema', 'type']",0
LOForEach.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'leafFS', '.', 'type', ')', ')', '{']",0
LOForEach.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'leafFS', '.', 'type', ')', ')', '{']",0
LOForEach.java,"['/', '/', 'flattening', 'a', 'null', 'schema', 'results', 'in', 'a', 'bytearray']",0
LOForEach.java,"['/', '/', 'flattening', 'a', 'null', 'schema', 'results', 'in', 'a', 'bytearray']",0
LOForEach.java,"['if', '(', 'mapped', ')', '{']",0
LOForEach.java,"['/', '/', 'map', 'each', 'flattened', 'column', 'to', 'the', 'original', 'column']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['addedFields', '.', 'add', '(', 'outputColumn', '+', '+', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['/', '/', 'not', 'a', 'flattened', 'column']",0
LOForEach.java,"['if', '(', 'mapped', ')', '{']",0
LOForEach.java,"['mapFields', '.', 'put', '(', 'outputColumn', '+', '+', ',', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['addedFields', '.', 'add', '(', 'outputColumn', '+', '+', ')', ';']",0
LOForEach.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'removedFields', '=', 'new', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",0
LOForEach.java,"['if', '(', 'inputSchema', '=', '=', 'null', ')', '{']",1
LOForEach.java,"['/', '/', 'if', 'input', 'schema', 'is', 'null', 'then', 'there', 'are', 'no', 'mappedFields', 'and', 'removedFields']",1
LOForEach.java,"['removedFields', '=', 'null', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['/', '/', 'if', 'the', 'size', 'of', 'the', 'map', 'is', 'zero', 'then', 'set', 'it', 'to', 'null']",1
LOForEach.java,"['if', '(', 'mapFields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOForEach.java,"['mapFields', '=', 'null', ';']",0
LOForEach.java,"['mapFields', '=', 'null', ';']",0
LOForEach.java,"['if', '(', 'addedFields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOForEach.java,"['addedFields', '=', 'null', ';']",1
LOForEach.java,"['/', '/', 'input', 'schema', 'is', 'not', 'null', '.', 'Need', 'to', 'compute', 'the', 'removedFields']",0
LOForEach.java,"['/', '/', 'compute', 'the', 'set', 'difference', 'between', 'the', 'input', 'schema', 'and', 'mapped', 'fields']",0
LOForEach.java,"['Set', '<', 'Integer', '>', 'removedSet', '=', 'new', 'HashSet', '<', 'Integer', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'inputSchema', '.', 'size', '(', ')', ';', '+', '+', 'i', ')', '{']",0
LOForEach.java,"['removedSet', '.', 'add', '(', 'i', ')', ';']",0
LOForEach.java,"['if', '(', 'mapFields', '!', '=', 'null', ')', '{']",0
LOForEach.java,"['Set', '<', 'Integer', '>', 'mappedSet', '=', 'new', 'HashSet', '<', 'Integer', '>', '(', ')', ';']",0
LOForEach.java,"['for', '(', 'Integer', 'key', ':', 'mapFields', '.', 'keySet', '(', ')', ')', '{']",0
LOForEach.java,"['List', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'values', '=', '(', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', ')', 'mapFields', '.', 'get', '(', 'key', ')', ';']",1
LOForEach.java,"['for', '(', 'Pair', '<', 'Integer', ',', 'Integer', '>', 'value', ':', 'values', ')', '{']",1
LOForEach.java,"['mappedSet', '.', 'add', '(', 'value', '.', 'second', ')', ';']",1
LOForEach.java,"['removedSet', '.', 'removeAll', '(', 'mappedSet', ')', ';']",0
LOForEach.java,"['if', '(', 'removedSet', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
LOForEach.java,"['removedFields', '=', 'null', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['for', '(', 'Integer', 'i', ':', 'removedSet', ')', '{']",0
LOForEach.java,"['removedFields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'i', ')', ')', ';']",0
LOForEach.java,"['return', 'new', 'ProjectionMap', '(', 'mapFields', ',', 'removedFields', ',', 'addedFields', ')', ';']",1
LOForEach.java,"['public', 'List', '<', 'RequiredFields', '>', 'getRequiredFields', '(', ')', '{']",1
LOForEach.java,"['List', '<', 'RequiredFields', '>', 'requiredFields', '=', 'new', 'ArrayList', '<', 'RequiredFields', '>', '(', ')', ';']",1
LOForEach.java,"['Set', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', 'fields', '=', 'new', 'HashSet', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', ')', ';']",1
LOForEach.java,"['Set', '<', 'LOProject', '>', 'projectSet', '=', 'new', 'HashSet', '<', 'LOProject', '>', '(', ')', ';']",1
LOForEach.java,"['boolean', 'starRequired', '=', 'false', ';']",0
LOForEach.java,"['for', '(', 'LogicalPlan', 'plan', ':', 'getForEachPlans', '(', ')', ')', '{']",0
LOForEach.java,"['TopLevelProjectFinder', 'projectFinder', '=', 'new', 'TopLevelProjectFinder', '(']",0
LOForEach.java,"['plan', ')', ';']",0
LOForEach.java,"['projectFinder', '.', 'visit', '(', ')', ';']",1
LOForEach.java,"['}', 'catch', '(', 'VisitorException', 've', ')', '{']",1
LOForEach.java,"['requiredFields', '.', 'clear', '(', ')', ';']",1
LOForEach.java,"['requiredFields', '.', 'add', '(', 'null', ')', ';']",1
LOForEach.java,"['projectSet', '.', 'addAll', '(', 'projectFinder', '.', 'getProjectSet', '(', ')', ')', ';']",1
LOForEach.java,"['if', '(', 'projectFinder', '.', 'getProjectStarSet', '(', ')', '!', '=', 'null', ')', '{']",1
LOForEach.java,"['starRequired', '=', 'true', ';']",0
LOForEach.java,"['if', '(', 'starRequired', ')', '{']",0
LOForEach.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'true', ')', ')', ';']",1
LOForEach.java,"['return', 'requiredFields', ';']",0
LOForEach.java,"['return', 'requiredFields', ';']",0
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['for', '(', 'LOProject', 'project', ':', 'projectSet', ')', '{']",1
LOForEach.java,"['for', '(', 'int', 'inputColumn', ':', 'project', '.', 'getProjection', '(', ')', ')', '{']",1
LOForEach.java,"['fields', '.', 'add', '(', 'new', 'Pair', '<', 'Integer', ',', 'Integer', '>', '(', '0', ',', 'inputColumn', ')', ')', ';']",0
LOForEach.java,"['if', '(', 'fields', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",1
LOForEach.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'false', ',', 'true', ')', ')', ';']",1
LOForEach.java,"['}', 'else', '{']",0
LOForEach.java,"['requiredFields', '.', 'add', '(', 'new', 'RequiredFields', '(', 'new', 'ArrayList', '<', 'Pair', '<', 'Integer', ',', 'Integer', '>', '>', '(', 'fields', ')', ')', ')', ';']",1
LOForEach.java,"['return', '(', 'requiredFields', '.', 'size', '(', ')', '=', '=', '0', '?', 'null', ':', 'requiredFields', ')', ';']",1
PlanPrinter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'io', '.', 'ByteArrayOutputStream', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'io', '.', 'OutputStream', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'Collections', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
PlanPrinter.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', '*', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DepthFirstWalker', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
PlanPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
PlanPrinter.java,"['public', 'class', 'PlanPrinter', '<', 'O', 'extends', 'Operator', ',', 'P', 'extends', 'OperatorPlan', '<', 'O', '>', '>', 'extends']",0
PlanPrinter.java,"['PlanVisitor', '<', 'O', ',', 'P', '>', '{']",0
PlanPrinter.java,"['String', 'TAB1', '=', '""', '""', ';']",0
PlanPrinter.java,"['String', 'TABMore', '=', '""', '|', '""', ';']",0
PlanPrinter.java,"['String', 'LSep', '=', '""', '|', '\\', 'n', '|', '-', '-', '-', '""', ';']",0
PlanPrinter.java,"['String', 'USep', '=', '""', '|', '|', '\\', 'n', '|', '""', ';']",0
PlanPrinter.java,"['int', 'levelCntr', '=', '-', '1', ';']",0
PlanPrinter.java,"['OutputStream', 'printer', ';']",0
PlanPrinter.java,"['PrintStream', 'stream', '=', 'System', '.', 'out', ';']",0
PlanPrinter.java,"['boolean', 'isVerbose', '=', 'true', ';']",0
PlanPrinter.java,"['public', 'PlanPrinter', '(', 'P', 'plan', ')', '{']",0
PlanPrinter.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'O', ',', 'P', '>', '(', 'plan', ')', ')', ';']",0
PlanPrinter.java,"['public', 'PlanPrinter', '(', 'P', 'plan', ',', 'PrintStream', 'stream', ')', '{']",0
PlanPrinter.java,"['super', '(', 'plan', ',', 'new', 'DepthFirstWalker', '<', 'O', ',', 'P', '>', '(', 'plan', ')', ')', ';']",0
PlanPrinter.java,"['this', '.', 'stream', '=', 'stream', ';']",0
PlanPrinter.java,"['public', 'void', 'setVerbose', '(', 'boolean', 'verbose', ')', '{']",0
PlanPrinter.java,"['isVerbose', '=', 'verbose', ';']",0
PlanPrinter.java,"['public', 'void', 'visit', '(', ')', 'throws', 'VisitorException', '{']",0
PlanPrinter.java,"['stream', '.', 'write', '(', 'depthFirstPP', '(', ')', '.', 'getBytes', '(', ')', ')', ';']",0
PlanPrinter.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
PlanPrinter.java,"['int', 'errCode', '=', '2079', ';']",0
PlanPrinter.java,"['String', 'msg', '=', '""', 'Unexpected', 'error', 'while', 'printing', 'physical', 'plan', '.', '""', ';']",0
PlanPrinter.java,"['throw', 'new', 'VisitorException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'ioe', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'print', '(', 'OutputStream', 'printer', ')', 'throws', 'VisitorException', ',', 'IOException', '{']",0
PlanPrinter.java,"['this', '.', 'printer', '=', 'printer', ';']",0
PlanPrinter.java,"['printer', '.', 'write', '(', 'depthFirstPP', '(', ')', '.', 'getBytes', '(', ')', ')', ';']",0
PlanPrinter.java,"['protected', 'void', 'breadthFirst', '(', ')', 'throws', 'VisitorException', '{']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'leaves', '=', 'mPlan', '.', 'getLeaves', '(', ')', ';']",0
PlanPrinter.java,"['Set', '<', 'O', '>', 'seen', '=', 'new', 'HashSet', '<', 'O', '>', '(', ')', ';']",0
PlanPrinter.java,"['breadthFirst', '(', 'leaves', ',', 'seen', ')', ';']",0
PlanPrinter.java,"['private', 'void', 'breadthFirst', '(', 'Collection', '<', 'O', '>', 'predecessors', ',', 'Set', '<', 'O', '>', 'seen', ')']",0
PlanPrinter.java,"['throws', 'VisitorException', '{']",0
PlanPrinter.java,"['+', '+', 'levelCntr', ';']",0
PlanPrinter.java,"['dispTabs', '(', ')', ';']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'newPredecessors', '=', 'new', 'ArrayList', '<', 'O', '>', '(', ')', ';']",0
PlanPrinter.java,"['for', '(', 'O', 'pred', ':', 'predecessors', ')', '{']",0
PlanPrinter.java,"['if', '(', 'seen', '.', 'add', '(', 'pred', ')', ')', '{']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'predLst', '=', 'mPlan', '.', 'getPredecessors', '(', 'pred', ')', ';']",0
PlanPrinter.java,"['if', '(', 'predLst', '!', '=', 'null', ')']",0
PlanPrinter.java,"['newPredecessors', '.', 'addAll', '(', 'predLst', ')', ';']",0
PlanPrinter.java,"['pred', '.', 'visit', '(', 'this', ')', ';']",0
PlanPrinter.java,"['if', '(', 'newPredecessors', '.', 'size', '(', ')', '>', '0', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'println', '(', ')', ';']",0
PlanPrinter.java,"['breadthFirst', '(', 'newPredecessors', ',', 'seen', ')', ';']",0
PlanPrinter.java,"['protected', 'String', 'depthFirstPP', '(', ')', 'throws', 'VisitorException', '{']",0
PlanPrinter.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'leaves', '=', 'mPlan', '.', 'getLeaves', '(', ')', ';']",0
PlanPrinter.java,"['Collections', '.', 'sort', '(', 'leaves', ')', ';']",0
PlanPrinter.java,"['for', '(', 'O', 'leaf', ':', 'leaves', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'depthFirst', '(', 'leaf', ')', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'delete', '(', 'sb', '.', 'length', '(', ')', '-', '""', '\\', 'n', '""', '.', 'length', '(', ')', ',', 'sb', '.', 'length', '(', ')', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'delete', '(', 'sb', '.', 'length', '(', ')', '-', '""', '\\', 'n', '""', '.', 'length', '(', ')', ',', 'sb', '.', 'length', '(', ')', ')', ';']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['private', 'String', 'planString', '(', 'PhysicalPlan', 'pp', ')', '{']",0
PlanPrinter.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
PlanPrinter.java,"['ByteArrayOutputStream', 'baos', '=', 'new', 'ByteArrayOutputStream', '(', ')', ';']",0
PlanPrinter.java,"['if', '(', 'pp', '!', '=', 'null', ')']",0
PlanPrinter.java,"['pp', '.', 'explain', '(', 'baos', ',', 'isVerbose', ')', ';']",0
PlanPrinter.java,"['return', '""', '""', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'USep', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'shiftStringByTabs', '(', 'baos', '.', 'toString', '(', ')', ',', '2', ')', ')', ';']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['private', 'String', 'planString', '(', 'List', '<', 'PhysicalPlan', '>', 'lep', ')', '{']",0
PlanPrinter.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
PlanPrinter.java,"['if', '(', 'lep', '!', '=', 'null', ')']",0
PlanPrinter.java,"['for', '(', 'PhysicalPlan', 'ep', ':', 'lep', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', 'ep', ')', ')', ';']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['private', 'String', 'depthFirst', '(', 'O', 'node', ')', 'throws', 'VisitorException', '{']",0
PlanPrinter.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', 'node', '.', 'name', '(', ')', '+', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['if', '(', 'isVerbose', ')', '{']",0
PlanPrinter.java,"['if', '(', 'node', 'instanceof', 'POFilter', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', '(', '(', 'POFilter', ')', 'node', ')', '.', 'getPlan', '(', ')', ')', ')', ';']",0
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'POLocalRearrange', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', '(', '(', 'POLocalRearrange', ')', 'node', ')', '.', 'getPlans', '(', ')', ')', ')', ';']",0
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'POSort', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', '(', '(', 'POSort', ')', 'node', ')', '.', 'getSortPlans', '(', ')', ')', ')', ';']",0
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'POForEach', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', '(', '(', 'POForEach', ')', 'node', ')', '.', 'getInputPlans', '(', ')', ')', ')', ';']",0
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'POMultiQueryPackage', ')', '{']",0
PlanPrinter.java,"['List', '<', 'POPackage', '>', 'pkgs', '=', '(', '(', 'POMultiQueryPackage', ')', 'node', ')', '.', 'getPackages', '(', ')', ';']",0
PlanPrinter.java,"['for', '(', 'POPackage', 'pkg', ':', 'pkgs', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'LSep', '+', 'pkg', '.', 'name', '(', ')', '+', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'POFRJoin', ')', '{']",0
PlanPrinter.java,"['POFRJoin', 'frj', '=', '(', 'POFRJoin', ')', 'node', ';']",0
PlanPrinter.java,"['List', '<', 'List', '<', 'PhysicalPlan', '>', '>', 'joinPlans', '=', 'frj', '.', 'getJoinPlans', '(', ')', ';']",0
PlanPrinter.java,"['if', '(', 'joinPlans', '!', '=', 'null', ')']",0
PlanPrinter.java,"['for', '(', 'List', '<', 'PhysicalPlan', '>', 'list', ':', 'joinPlans', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', 'list', ')', ')', ';']",0
PlanPrinter.java,"['if', '(', 'node', 'instanceof', 'POSplit', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', '(', '(', 'POSplit', ')', 'node', ')', '.', 'getPlans', '(', ')', ')', ')', ';']",1
PlanPrinter.java,"['else', 'if', '(', 'node', 'instanceof', 'PODemux', ')', '{']",1
PlanPrinter.java,"['List', '<', 'PhysicalPlan', '>', 'plans', '=', 'new', 'ArrayList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
PlanPrinter.java,"['Set', '<', 'PhysicalPlan', '>', 'pl', '=', 'new', 'HashSet', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
PlanPrinter.java,"['pl', '.', 'addAll', '(', '(', '(', 'PODemux', ')', 'node', ')', '.', 'getPlans', '(', ')', ')', ';']",0
PlanPrinter.java,"['plans', '.', 'addAll', '(', 'pl', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'planString', '(', 'plans', ')', ')', ';']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'originalPredecessors', '=', 'mPlan', '.', 'getPredecessors', '(', 'node', ')', ';']",0
PlanPrinter.java,"['if', '(', 'originalPredecessors', '=', '=', 'null', ')']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['List', '<', 'O', '>', 'predecessors', '=', 'new', 'ArrayList', '<', 'O', '>', '(', 'originalPredecessors', ')', ';']",0
PlanPrinter.java,"['Collections', '.', 'sort', '(', 'predecessors', ')', ';']",0
PlanPrinter.java,"['int', 'i', '=', '0', ';']",0
PlanPrinter.java,"['for', '(', 'O', 'pred', ':', 'predecessors', ')', '{']",0
PlanPrinter.java,"['i', '+', '+', ';']",0
PlanPrinter.java,"['String', 'DFStr', '=', 'depthFirst', '(', 'pred', ')', ';']",0
PlanPrinter.java,"['if', '(', 'DFStr', '!', '=', 'null', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'LSep', ')', ';']",0
PlanPrinter.java,"['if', '(', 'i', '<', 'predecessors', '.', 'size', '(', ')', ')']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'shiftStringByTabs', '(', 'DFStr', ',', '2', ')', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'shiftStringByTabs', '(', 'DFStr', ',', '1', ')', ')', ';']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['private', 'String', 'shiftStringByTabs', '(', 'String', 'DFStr', ',', 'int', 'TabType', ')', '{']",0
PlanPrinter.java,"['StringBuilder', 'sb', '=', 'new', 'StringBuilder', '(', ')', ';']",0
PlanPrinter.java,"['String', '[', ']', 'spl', '=', 'DFStr', '.', 'split', '(', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['String', 'tab', '=', '(', 'TabType', '=', '=', '1', ')', '?', 'TAB1', ':', 'TABMore', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'spl', '[', '0', ']', '+', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'spl', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'tab', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', 'spl', '[', 'i', ']', ')', ';']",0
PlanPrinter.java,"['sb', '.', 'append', '(', '""', '\\', 'n', '""', ')', ';']",0
PlanPrinter.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
PlanPrinter.java,"['private', 'void', 'dispTabs', '(', ')', '{']",0
PlanPrinter.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'levelCntr', ';', 'i', '+', '+', ')']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'TAB1', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitLoad', '(', 'POLoad', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitStore', '(', 'POStore', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitFilter', '(', 'POFilter', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitLocalRearrange', '(', 'POLocalRearrange', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitGlobalRearrange', '(', 'POGlobalRearrange', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitPackage', '(', 'POPackage', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
PlanPrinter.java,"['public', 'void', 'visitStartMap', '(', 'POUnion', 'op', ')', '{']",0
PlanPrinter.java,"['stream', '.', 'print', '(', 'op', '.', 'name', '(', ')', '+', '""', '""', ')', ';']",0
NonSpillableDataBag.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'data', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'io', '.', 'DataInput', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'io', '.', 'DataOutput', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'util', '.', 'Iterator', ';']",0
NonSpillableDataBag.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
NonSpillableDataBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
NonSpillableDataBag.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'class', 'NonSpillableDataBag', 'implements', 'DataBag', '{']",0
NonSpillableDataBag.java,"['/', '/', 'the', 'reason', 'this', 'class', 'does', 'NOT', 'extend', 'DefaultAbstractBag']",0
NonSpillableDataBag.java,"['/', '/', 'is', 'that', 'we', 'don', ""'"", 't', 'want', 'to', 'bloat', 'this', 'class', 'with', 'members', 'it']",0
NonSpillableDataBag.java,"['/', '/', 'does', 'not', 'need', '(', 'DefaultAbstractBag', 'has', 'many', 'members', 'related']",0
NonSpillableDataBag.java,"['/', '/', 'to', 'spilling', 'which', 'are', 'not', 'needed', 'here', ')']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '1L', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['private', 'List', '<', 'Tuple', '>', 'mContents', ';']",0
NonSpillableDataBag.java,"['public', 'NonSpillableDataBag', '(', ')', '{']",0
NonSpillableDataBag.java,"['mContents', '=', 'new', 'ArrayList', '<', 'Tuple', '>', '(', ')', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'NonSpillableDataBag', '(', 'List', '<', 'Tuple', '>', 'listOfTuples', ')', '{']",0
NonSpillableDataBag.java,"['mContents', '=', 'listOfTuples', ';']",0
NonSpillableDataBag.java,"['public', 'boolean', 'isSorted', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', 'false', ';']",0
NonSpillableDataBag.java,"['public', 'boolean', 'isDistinct', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', 'false', ';']",0
NonSpillableDataBag.java,"['public', 'Iterator', '<', 'Tuple', '>', 'iterator', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', 'new', 'NonSpillableDataBagIterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['private', 'class', 'NonSpillableDataBagIterator', 'implements', 'Iterator', '<', 'Tuple', '>', '{']",0
NonSpillableDataBag.java,"['private', 'int', 'mCntr', '=', '0', ';']",0
NonSpillableDataBag.java,"['public', 'boolean', 'hasNext', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', '(', 'mCntr', '<', 'mContents', '.', 'size', '(', ')', ')', ';']",0
NonSpillableDataBag.java,"['public', 'Tuple', 'next', '(', ')', '{']",0
NonSpillableDataBag.java,"['/', '/', 'This', 'will', 'report', 'progress', 'every', '1024', 'times', 'through', 'next', '.']",0
NonSpillableDataBag.java,"['/', '/', 'This', 'should', 'be', 'much', 'faster', 'than', 'using', 'mod', '.']",0
NonSpillableDataBag.java,"['if', '(', '(', 'mCntr', '&', '0x3ff', ')', '=', '=', '0', ')', 'reportProgress', '(', ')', ';']",0
NonSpillableDataBag.java,"['return', 'mContents', '.', 'get', '(', 'mCntr', '+', '+', ')', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'void', 'remove', '(', ')', '{', 'throw', 'new', 'RuntimeException', '(', '""', 'Cannot', 'remove', '(', ')', 'from', 'NonSpillableDataBag', '.', 'iterator', '(', ')', '""', ')', ';', '}']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['protected', 'void', 'reportProgress', '(', ')', '{']",0
NonSpillableDataBag.java,"['if', '(', 'PhysicalOperator', '.', 'reporter', '!', '=', 'null', ')', '{']",0
NonSpillableDataBag.java,"['PhysicalOperator', '.', 'reporter', '.', 'progress', '(', ')', ';']",0
NonSpillableDataBag.java,"['public', 'void', 'add', '(', 'Tuple', 't', ')', '{']",0
NonSpillableDataBag.java,"['mContents', '.', 'add', '(', 't', ')', ';']",0
NonSpillableDataBag.java,"['public', 'void', 'addAll', '(', 'DataBag', 'b', ')', '{']",0
NonSpillableDataBag.java,"['for', '(', 'Tuple', 't', ':', 'b', ')', '{']",0
NonSpillableDataBag.java,"['mContents', '.', 'add', '(', 't', ')', ';']",0
NonSpillableDataBag.java,"['public', 'void', 'clear', '(', ')', '{']",0
NonSpillableDataBag.java,"['mContents', '.', 'clear', '(', ')', ';']",0
NonSpillableDataBag.java,"['public', 'void', 'markStale', '(', 'boolean', 'stale', ')', '{']",0
NonSpillableDataBag.java,"['throw', 'new', 'RuntimeException', '(', '""', 'NonSpillableDataBag', 'cannot', 'be', 'marked', 'stale', '""', ')', ';']",0
NonSpillableDataBag.java,"['public', 'long', 'size', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', 'mContents', '.', 'size', '(', ')', ';']",0
NonSpillableDataBag.java,"['public', 'long', 'getMemorySize', '(', ')', '{']",0
NonSpillableDataBag.java,"['return', '0', ';']",0
NonSpillableDataBag.java,"['public', 'long', 'spill', '(', ')', '{']",0
NonSpillableDataBag.java,"['/', '/', 'TODO', 'Auto', '-', 'generated', 'method', 'stub']",0
NonSpillableDataBag.java,"['return', '0', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'void', 'write', '(', 'DataOutput', 'out', ')', 'throws', 'IOException', '{']",0
NonSpillableDataBag.java,"['/', '/', 'We', 'don', ""'"", 't', 'care', 'whether', 'this', 'bag', 'was', 'sorted', 'or', 'distinct', 'because']",0
NonSpillableDataBag.java,"['/', '/', 'using', 'the', 'iterator', 'to', 'write', 'it', 'will', 'guarantee', 'those', 'things', 'come']",0
NonSpillableDataBag.java,"['/', '/', 'correctly', '.', 'And', 'on', 'the', 'other', 'end', 'there', ""'"", 'll', 'be', 'no', 'reason', 'to', 'waste']",0
NonSpillableDataBag.java,"['/', '/', 'time', 're', '-', 'sorting', 'or', 're', '-', 'applying', 'distinct', '.']",0
NonSpillableDataBag.java,"['out', '.', 'writeLong', '(', 'size', '(', ')', ')', ';']",0
NonSpillableDataBag.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
NonSpillableDataBag.java,"['Tuple', 'item', '=', 'it', '.', 'next', '(', ')', ';']",0
NonSpillableDataBag.java,"['item', '.', 'write', '(', 'out', ')', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'void', 'readFields', '(', 'DataInput', 'in', ')', 'throws', 'IOException', '{']",0
NonSpillableDataBag.java,"['long', 'size', '=', 'in', '.', 'readLong', '(', ')', ';']",0
NonSpillableDataBag.java,"['for', '(', 'long', 'i', '=', '0', ';', 'i', '<', 'size', ';', 'i', '+', '+', ')', '{']",0
NonSpillableDataBag.java,"['Object', 'o', '=', 'DataReaderWriter', '.', 'readDatum', '(', 'in', ')', ';']",0
NonSpillableDataBag.java,"['add', '(', '(', 'Tuple', ')', 'o', ')', ';']",0
NonSpillableDataBag.java,"['}', 'catch', '(', 'ExecException', 'ee', ')', '{']",0
NonSpillableDataBag.java,"['throw', 'ee', ';']",0
NonSpillableDataBag.java,"['/', '*', '(', 'non', '-', 'Javadoc', ')']",0
NonSpillableDataBag.java,"['public', 'boolean', 'equals', '(', 'Object', 'obj', ')', '{']",0
NonSpillableDataBag.java,"['return', 'compareTo', '(', 'obj', ')', '=', '=', '0', ';']",0
NonSpillableDataBag.java,"['public', 'int', 'compareTo', '(', 'Object', 'other', ')', '{']",0
NonSpillableDataBag.java,"['if', '(', 'this', '=', '=', 'other', ')']",0
NonSpillableDataBag.java,"['return', '0', ';']",0
NonSpillableDataBag.java,"['if', '(', 'other', 'instanceof', 'DataBag', ')', '{']",0
NonSpillableDataBag.java,"['DataBag', 'bOther', '=', '(', 'DataBag', ')', 'other', ';']",0
NonSpillableDataBag.java,"['if', '(', 'this', '.', 'size', '(', ')', '!', '=', 'bOther', '.', 'size', '(', ')', ')', '{']",0
NonSpillableDataBag.java,"['if', '(', 'this', '.', 'size', '(', ')', '>', 'bOther', '.', 'size', '(', ')', ')', 'return', '1', ';']",0
NonSpillableDataBag.java,"['else', 'return', '-', '1', ';']",0
NonSpillableDataBag.java,"['/', '/', 'Ugh', ',', 'this', 'is', 'bogus', '.', 'But', 'I', 'have', 'to', 'know', 'if', 'two', 'bags', 'have', 'the']",0
NonSpillableDataBag.java,"['/', '/', 'same', 'tuples', ',', 'regardless', 'of', 'order', '.', 'Hopefully', 'most', 'of', 'the']",0
NonSpillableDataBag.java,"['/', '/', 'time', 'the', 'size', 'check', 'above', 'will', 'prevent', 'this', '.']",0
NonSpillableDataBag.java,"['/', '/', 'If', 'either', 'bag', 'isn', ""'"", 't', 'already', 'sorted', ',', 'create', 'a', 'sorted', 'bag', 'out']",0
NonSpillableDataBag.java,"['/', '/', 'of', 'it', 'so', 'I', 'can', 'guarantee', 'order', '.']",0
NonSpillableDataBag.java,"['DataBag', 'thisClone', ';']",0
NonSpillableDataBag.java,"['DataBag', 'otherClone', ';']",0
NonSpillableDataBag.java,"['thisClone', '=', 'new', 'SortedDataBag', '(', 'null', ')', ';']",0
NonSpillableDataBag.java,"['Iterator', '<', 'Tuple', '>', 'i', '=', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'thisClone', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
NonSpillableDataBag.java,"['if', '(', 'other', 'instanceof', 'SortedDataBag', '|', '|']",0
NonSpillableDataBag.java,"['other', 'instanceof', 'DistinctDataBag', ')', '{']",0
NonSpillableDataBag.java,"['otherClone', '=', 'bOther', ';']",0
NonSpillableDataBag.java,"['}', 'else', '{']",0
NonSpillableDataBag.java,"['otherClone', '=', 'new', 'SortedDataBag', '(', 'null', ')', ';']",0
NonSpillableDataBag.java,"['i', '=', 'bOther', '.', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['while', '(', 'i', '.', 'hasNext', '(', ')', ')', 'otherClone', '.', 'add', '(', 'i', '.', 'next', '(', ')', ')', ';']",0
NonSpillableDataBag.java,"['Iterator', '<', 'Tuple', '>', 'thisIt', '=', 'thisClone', '.', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['Iterator', '<', 'Tuple', '>', 'otherIt', '=', 'otherClone', '.', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['while', '(', 'thisIt', '.', 'hasNext', '(', ')', '&', '&', 'otherIt', '.', 'hasNext', '(', ')', ')', '{']",0
NonSpillableDataBag.java,"['Tuple', 'thisT', '=', 'thisIt', '.', 'next', '(', ')', ';']",0
NonSpillableDataBag.java,"['Tuple', 'otherT', '=', 'otherIt', '.', 'next', '(', ')', ';']",0
NonSpillableDataBag.java,"['int', 'c', '=', 'thisT', '.', 'compareTo', '(', 'otherT', ')', ';']",0
NonSpillableDataBag.java,"['if', '(', 'c', '!', '=', '0', ')', 'return', 'c', ';']",0
NonSpillableDataBag.java,"['return', '0', ';', '/', '/', 'if', 'we', 'got', 'this', 'far', ',', 'they', 'must', 'be', 'equal']",0
NonSpillableDataBag.java,"['}', 'else', '{']",0
NonSpillableDataBag.java,"['return', 'DataType', '.', 'compare', '(', 'this', ',', 'other', ')', ';']",0
NonSpillableDataBag.java,"['/', '*', '*']",0
NonSpillableDataBag.java,"['public', 'String', 'toString', '(', ')', '{']",0
NonSpillableDataBag.java,"['StringBuffer', 'sb', '=', 'new', 'StringBuffer', '(', ')', ';']",0
NonSpillableDataBag.java,"['sb', '.', 'append', '(', ""'"", '{', ""'"", ')', ';']",0
NonSpillableDataBag.java,"['Iterator', '<', 'Tuple', '>', 'it', '=', 'iterator', '(', ')', ';']",0
NonSpillableDataBag.java,"['while', '(', 'it', '.', 'hasNext', '(', ')', ')', '{']",0
NonSpillableDataBag.java,"['Tuple', 't', '=', 'it', '.', 'next', '(', ')', ';']",0
NonSpillableDataBag.java,"['String', 's', '=', 't', '.', 'toString', '(', ')', ';']",0
NonSpillableDataBag.java,"['sb', '.', 'append', '(', 's', ')', ';']",0
NonSpillableDataBag.java,"['if', '(', 'it', '.', 'hasNext', '(', ')', ')', 'sb', '.', 'append', '(', '""', ',', '""', ')', ';']",0
NonSpillableDataBag.java,"['sb', '.', 'append', '(', ""'"", '}', ""'"", ')', ';']",0
NonSpillableDataBag.java,"['return', 'sb', '.', 'toString', '(', ')', ';']",0
TestTypeChecking.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestTypeChecking.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestTypeChecking.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', '*', ';']",0
TestTypeChecking.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'TypeCheckingTestUtil', ';']",0
TestTypeChecking.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'test', '.', 'utils', '.', 'LogicalPlanTester', ';']",0
TestTypeChecking.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestTypeChecking.java,"['import', 'org', '.', 'junit', '.', 'Before', ';']",0
TestTypeChecking.java,"['public', 'class', 'TestTypeChecking', 'extends', 'TestCase', '{']",0
TestTypeChecking.java,"['final', 'String', 'FILE_BASE_LOCATION', '=', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'DotFiles', '/', '""', ';']",0
TestTypeChecking.java,"['LogicalPlanTester', 'planTester', '=', 'new', 'LogicalPlanTester', '(', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'setUp', '(', ')', '{']",0
TestTypeChecking.java,"['planTester', '.', 'reset', '(', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testSimple1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'distinct', 'a', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckAgainstDotFile', '(', 'plan', ',', 'FILE_BASE_LOCATION', '+', '""', 'plan1', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testByScript1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript1', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testByScript2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript2', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['/', '/', 'Problem', 'with', '""', 'group', '""', 'keyword', 'in', 'QueryParser']",0
TestTypeChecking.java,"['public', 'void', 'testByScript4', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript4', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testByScript3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript3', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testByScript5', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript5', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testByScript6', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckUsingDotFile', '(', 'FILE_BASE_LOCATION', '+', '""', 'testScript6', '.', 'dot', '""', ')', ';']",0
TestTypeChecking.java,"['/', '/', 'TODO', ':', 'Convert', 'all', 'of', 'these', 'to', 'dot', 'files']",0
TestTypeChecking.java,"['public', 'void', 'testValidation1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', '""']",0
TestTypeChecking.java,"['+', '""', 'group', ':', 'tuple', '(', 'field1', ':', 'int', ',', 'field2', ':', 'double', ')', ',', '""']",0
TestTypeChecking.java,"['+', '""', 'a', ':', 'bag', '{', 'tuple1', ':', 'tuple', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', '}', ',', '""']",0
TestTypeChecking.java,"['+', '""', 'b', ':', 'bag', '{', 'tuple1', ':', 'tuple', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', '}', '""']",0
TestTypeChecking.java,"['+', '""', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckPlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'chararray', ',', 'field2', ':', 'tuple', '(', 'inner1', ':', 'bytearray', ',', 'inner2', ':', 'int', ')', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckPlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'long', ',', 'field2', ':', 'tuple', '(', 'inner1', ':', 'bytearray', ',', 'inner2', ':', 'float', ')', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field2', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation3', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'float', ',', 'field3', ':', 'chararray', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'order', 'a', 'by', '$', '0', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'c', '=', 'distinct', 'b', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation4', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'chararray', ',', 'field2', ':', 'int', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', '(', 'field1', ',', 'field2', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation5', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'int', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', '+', 'field2', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation6', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'int', ',', 'field3', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'b', '=', 'group', 'a', 'by', 'field1', '%', 'field2', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation7', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'tuple', '(', 'inner1', ':', 'bytearray', ',', 'inner2', ':', 'int', ')', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'long', ',', 'field2', ':', 'tuple', '(', 'inner1', ':', 'bytearray', ',', 'inner2', ':', 'int', ')', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation8', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', '(', 'field1', ',', 'field2', ')', ',', 'b', 'by', '(', 'field1', ',', 'field2', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation10', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'details', ':', 'tuple', '(', 'age', ',', 'gpa', ')', ',', 'mymap', ':', 'map', '[', ']', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'e', '=', 'foreach', 'a', 'generate', 'name', ',', 'details', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testValidation12', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'int', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'a', '.', '(', 'field1', ',', 'field2', ')', ',', 'b', '.', '(', 'field1', ',', 'field2', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['/', '/', 'I', 'suspect', 'there', 'is', 'something', 'wrong', 'in', 'Schema', '.', 'reconcile', '(', ')']",0
TestTypeChecking.java,"['public', 'void', 'testValidation13', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'integer', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'b', '.', 'field2', ',', 'flattten', '(', 'a', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['/', '/', 'The', 'parser', 'still', 'has', 'a', 'bug', 'dealing', 'with', 'this']",0
TestTypeChecking.java,"['public', 'void', 'testValidation13_2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'integer', ',', 'field2', ':', 'long', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'b', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'bytearray', ',', 'field2', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'c', '=', 'group', 'a', 'by', '(', 'field1', '+', 'field2', ')', '*', 'field1', ',', 'b', 'by', 'field1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan', '=', 'buildPlan', '(', '""', 'd', '=', 'foreach', 'c', 'generate', 'b', '.', 'field2', ',', 'flattten', '(', 'a', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'plan', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testQuery20', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'long', ',', 'field2', ':', 'long', ',', 'field3', ':', 'int', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['String', 'query', '=', '""', 'b', '=', 'foreach', 'a', 'generate', '(', '$', '1', '+', '$', '2', ')', ',', '(', '$', '1', '-', '$', '2', ')', ',', '(', '$', '1', '*', '$', '2', ')', ',', '(', '$', '1', '/', '$', '2', ')', ',', '(', '$', '1', '%', '$', '2', ')', ',', '-', '(', '$', '1', ')', ',', '(', '$', '2', '*', '$', '2', ')', ';', '""', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'buildPlan', '(', 'query', ')', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testQuery21', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['buildPlan', '(', '""', 'a', '=', 'load', ""'"", 'a', ""'"", 'as', '(', 'field1', ':', 'long', ',', 'field2', ':', 'long', ',', 'field3', ':', 'int', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['String', 'query', '=', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'field1', '+', 'field2', ')', '*', '(', 'field1', '-', 'field2', ')', ';', '""', ';']",0
TestTypeChecking.java,"['validatePlan', '(', 'buildPlan', '(', 'query', ')', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testSUM1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", '/', 'user', '/', 'pig', '/', 'tests', '/', 'data', '/', 'singlefile', '/', 'studenttab10k', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ',', 'gpa', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan1', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '(', 'long', ')', 'age', 'as', 'age', ':', 'long', ',', '(', 'int', ')', 'gpa', 'as', 'gpa', ':', 'int', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan2', '=', 'planTester', '.', 'buildPlan', '(', '""', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'age', ')', ',', 'SUM', '(', 'gpa', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckPlan', '(', 'plan2', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testSUM2', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'group', '(', 'load', ""'"", '\\', '""', '+', 'tmpFile', '+', '\\', '""', ""'"", ')', 'by', '(', '$', '0', ',', '$', '1', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan1', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', 'flatten', '(', 'group', ')', ',', 'SUM', '(', '$', '1', '.', '$', '2', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckPlan', '(', 'plan1', ')', ';']",0
TestTypeChecking.java,"['public', 'void', 'testGenerate1', '(', ')', 'throws', 'Throwable', '{']",0
TestTypeChecking.java,"['TypeCheckingTestUtil', '.', 'printCurrentMethodName', '(', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'buildPlan', '(', '""', 'a', '=', 'load', ""'"", '/', 'user', '/', 'pig', '/', 'tests', '/', 'data', '/', 'singlefile', '/', 'studenttab10k', ""'"", 'as', '(', 'name', ':', 'chararray', ',', 'age', ':', 'int', ',', 'gpa', ':', 'double', ')', ';', '""', ')', ';']",0
TestTypeChecking.java,"['LogicalPlan', 'plan1', '=', 'planTester', '.', 'buildPlan', '(', '""', 'b', '=', 'foreach', 'a', 'generate', '1', '+', '0', '.', '2f', '+', '253645L', ',', 'gpa', '+', '1', ';', '""', ')', ';']",0
TestTypeChecking.java,"['planTester', '.', 'typeCheckPlan', '(', 'plan1', ')', ';']",0
LOAdd.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOAdd.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOAdd.java,"['public', 'class', 'LOAdd', 'extends', 'BinaryExpressionOperator', '{']",0
LOAdd.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOAdd.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOAdd', '.', 'class', ')', ';']",0
LOAdd.java,"['/', '*', '*']",1
LOAdd.java,"['public', 'LOAdd', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOAdd.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOAdd.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOAdd.java,"['return', 'mSchema', ';']",0
LOAdd.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOAdd.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOAdd.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'mergeType', '(', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ',', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ')', ';']",0
LOAdd.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOAdd.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOAdd.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOAdd.java,"['return', 'mFieldSchema', ';']",0
LOAdd.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOAdd.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOAdd.java,"['public', 'String', 'name', '(', ')', '{']",0
LOAdd.java,"['return', '""', 'Add', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
Launcher.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
Launcher.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Matcher', ';']",0
Launcher.java,"['import', 'java', '.', 'util', '.', 'regex', '.', 'Pattern', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobClient', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobID', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'RunningJob', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskReport', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'datastorage', '.', 'HConfiguration', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'HExecutionEngine', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
Launcher.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigstats', '.', 'PigStats', ';']",0
Launcher.java,"['public', 'abstract', 'class', 'Launcher', '{']",0
Launcher.java,"['private', 'static', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'Launcher', '.', 'class', ')', ';']",0
Launcher.java,"['long', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['String', 'newLine', '=', '""', '\\', 'n', '""', ';']",0
Launcher.java,"['boolean', 'pigException', '=', 'false', ';']",0
Launcher.java,"['boolean', 'outOfMemory', '=', 'false', ';']",0
Launcher.java,"['final', 'String', 'OOM_ERR', '=', '""', 'OutOfMemoryError', '""', ';']",0
Launcher.java,"['protected', 'List', '<', 'FileSpec', '>', 'succeededStores', '=', 'null', ';']",0
Launcher.java,"['protected', 'List', '<', 'FileSpec', '>', 'failedStores', '=', 'null', ';']",0
Launcher.java,"['protected', 'Launcher', '(', ')', '{']",0
Launcher.java,"['totalHadoopTimeSpent', '=', '0', ';']",0
Launcher.java,"['/', '/', 'handle', 'the', 'windows', 'portion', 'of', '\\', 'r']",0
Launcher.java,"['if', '(', 'System', '.', 'getProperty', '(', '""', 'os', '.', 'name', '""', ')', '.', 'toUpperCase', '(', ')', '.', 'startsWith', '(', '""', 'WINDOWS', '""', ')', ')', '{']",0
Launcher.java,"['newLine', '=', '""', '\\', 'r', '\\', 'n', '""', ';']",0
Launcher.java,"['reset', '(', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'List', '<', 'FileSpec', '>', 'getSucceededFiles', '(', ')', '{']",0
Launcher.java,"['return', 'succeededStores', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'List', '<', 'FileSpec', '>', 'getFailedFiles', '(', ')', '{']",0
Launcher.java,"['return', 'failedStores', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'void', 'reset', '(', ')', '{']",0
Launcher.java,"['succeededStores', '=', 'new', 'LinkedList', '<', 'FileSpec', '>', '(', ')', ';']",0
Launcher.java,"['failedStores', '=', 'new', 'LinkedList', '<', 'FileSpec', '>', '(', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'PigStats', 'launchPig', '(', 'PhysicalPlan', 'php', ',', 'String', 'grpName', ',', 'PigContext', 'pc', ')']",0
Launcher.java,"['throws', 'PlanException', ',', 'VisitorException', ',', 'IOException', ',', 'ExecException', ',']",0
Launcher.java,"['JobCreationException', ',', 'Exception', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'abstract', 'void', 'explain', '(']",0
Launcher.java,"['PhysicalPlan', 'pp', ',']",0
Launcher.java,"['PigContext', 'pc', ',']",0
Launcher.java,"['PrintStream', 'ps', ',']",0
Launcher.java,"['String', 'format', ',']",0
Launcher.java,"['boolean', 'verbose', ')', 'throws', 'PlanException', ',']",0
Launcher.java,"['protected', 'boolean', 'isComplete', '(', 'double', 'prog', ')', '{']",0
Launcher.java,"['return', '(', 'int', ')', '(', 'Math', '.', 'ceil', '(', 'prog', ')', ')', '=', '=', '(', 'int', ')', '1', ';']",0
Launcher.java,"['protected', 'void', 'getStats', '(', 'Job', 'job', ',', 'JobClient', 'jobClient', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['JobID', 'MRJobID', '=', 'job', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['String', 'jobMessage', '=', 'job', '.', 'getMessage', '(', ')', ';']",0
Launcher.java,"['if', '(', 'MRJobID', '=', '=', 'null', ')', '{']",0
Launcher.java,"['throw', 'getExceptionFromString', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
Launcher.java,"['/', '/', 'just', 'get', 'the', 'first', 'line', 'in', 'the', 'message', 'and', 'log', 'the', 'rest']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'jobMessage', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'jobMessage', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backend', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'mapRep', '=', 'jobClient', '.', 'getMapTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'mapRep', ',', '""', 'map', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['TaskReport', '[', ']', 'redRep', '=', 'jobClient', '.', 'getReduceTaskReports', '(', 'MRJobID', ')', ';']",0
Launcher.java,"['getErrorMessages', '(', 'redRep', ',', '""', 'reduce', '""', ',', 'errNotDbg', ',', 'pigContext', ')', ';']",0
Launcher.java,"['totalHadoopTimeSpent', '+', '=', 'computeTimeSpent', '(', 'mapRep', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'IOException', 'e', ')', '{']",0
Launcher.java,"['if', '(', 'job', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'job', 'succeeded', ',', 'let', 'the', 'user', 'know', 'that']",0
Launcher.java,"['/', '/', 'we', 'were', 'unable', 'to', 'get', 'statistics']",0
Launcher.java,"['log', '.', 'warn', '(', '""', 'Unable', 'to', 'get', 'job', 'related', 'diagnostics', '""', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['throw', 'e', ';']",0
Launcher.java,"['throw', 'e', ';']",0
Launcher.java,"['protected', 'long', 'computeTimeSpent', '(', 'TaskReport', '[', ']', 'mapReports', ')', '{']",0
Launcher.java,"['long', 'timeSpent', '=', '0', ';']",0
Launcher.java,"['for', '(', 'TaskReport', 'r', ':', 'mapReports', ')', '{']",0
Launcher.java,"['timeSpent', '+', '=', '(', 'r', '.', 'getFinishTime', '(', ')', '-', 'r', '.', 'getStartTime', '(', ')', ')', ';']",0
Launcher.java,"['return', 'timeSpent', ';']",0
Launcher.java,"['protected', 'void', 'getErrorMessages', '(', 'TaskReport', 'reports', '[', ']', ',', 'String', 'type', ',', 'boolean', 'errNotDbg', ',', 'PigContext', 'pigContext', ')', 'throws', 'Exception']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'reports', '.', 'length', ';', 'i', '+', '+', ')', '{']",0
Launcher.java,"['String', 'msgs', '[', ']', '=', 'reports', '[', 'i', ']', '.', 'getDiagnostics', '(', ')', ';']",0
Launcher.java,"['ArrayList', '<', 'Exception', '>', 'exceptions', '=', 'new', 'ArrayList', '<', 'Exception', '>', '(', ')', ';']",0
Launcher.java,"['boolean', 'jobFailed', '=', 'false', ';']",0
Launcher.java,"['float', 'successfulProgress', '=', '1', '.', '0f', ';']",0
Launcher.java,"['if', '(', 'msgs', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['/', '/', 'if', 'the', 'progress', 'reported', 'is', 'not', '1', '.', '0f', 'then', 'the', 'map', 'or', 'reduce', 'job', 'failed']",0
Launcher.java,"['/', '/', 'this', 'comparison', 'is', 'in', 'place', 'till', 'Hadoop', '0', '.', '20', 'provides', 'methods', 'to', 'query']",0
Launcher.java,"['/', '/', 'job', 'status']",0
Launcher.java,"['if', '(', 'reports', '[', 'i', ']', '.', 'getProgress', '(', ')', '!', '=', 'successfulProgress', ')', '{']",0
Launcher.java,"['jobFailed', '=', 'true', ';']",0
Launcher.java,"['Set', '<', 'String', '>', 'errorMessageSet', '=', 'new', 'HashSet', '<', 'String', '>', '(', ')', ';']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'msgs', '.', 'length', ';', 'j', '+', '+', ')', '{']",0
Launcher.java,"['if', '(', '!', 'errorMessageSet', '.', 'contains', '(', 'msgs', '[', 'j', ']', ')', ')', '{']",0
Launcher.java,"['errorMessageSet', '.', 'add', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['if', '(', 'errNotDbg', ')', '{']",0
Launcher.java,"['/', '/', 'errNotDbg', 'is', 'used', 'only', 'for', 'failed', 'jobs']",0
Launcher.java,"['/', '/', 'keep', 'track', 'of', 'all', 'the', 'unique', 'exceptions']",0
Launcher.java,"['Exception', 'e', '=', 'getExceptionFromString', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['Exception', 'e', '=', 'getExceptionFromString', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['exceptions', '.', 'add', '(', 'e', ')', ';']",0
Launcher.java,"['exceptions', '.', 'add', '(', 'e', ')', ';']",0
Launcher.java,"['}', 'catch', '(', 'Exception', 'e1', ')', '{']",0
Launcher.java,"['String', 'firstLine', '=', 'getFirstLineFromMessage', '(', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'new', 'Exception', '(', 'msgs', '[', 'j', ']', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',']",0
Launcher.java,"['log', ',', 'false', ',', 'null', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['int', 'errCode', '=', '2997', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Unable', 'to', 'recreate', 'exception', 'from', 'backed', 'error', ':', '""', '+', 'firstLine', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['log', '.', 'debug', '(', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+']",0
Launcher.java,"['reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', '+', 'msgs', '[', 'j', ']', ')', ';']",0
Launcher.java,"['/', '/', 'if', 'its', 'a', 'failed', 'job', 'then', 'check', 'if', 'there', 'is', 'more', 'than', 'one', 'exception']",0
Launcher.java,"['/', '/', 'more', 'than', 'one', 'exception', 'implies', 'possibly', 'different', 'kinds', 'of', 'failures']",0
Launcher.java,"['/', '/', 'log', 'all', 'the', 'different', 'failures', 'and', 'throw', 'the', 'exception', 'corresponding']",0
Launcher.java,"['/', '/', 'to', 'the', 'first', 'failure']",0
Launcher.java,"['if', '(', 'jobFailed', ')', '{']",0
Launcher.java,"['if', '(', 'exceptions', '.', 'size', '(', ')', '>', '1', ')', '{']",0
Launcher.java,"['for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'exceptions', '.', 'size', '(', ')', ';', '+', '+', 'j', ')', '{']",0
Launcher.java,"['String', 'headerMessage', '=', '""', 'Error', 'message', 'from', 'task', '(', '""', '+', 'type', '+', '""', ')', '""', '+', 'reports', '[', 'i', ']', '.', 'getTaskID', '(', ')', ';']",0
Launcher.java,"['LogUtils', '.', 'writeLog', '(', 'exceptions', '.', 'get', '(', 'j', ')', ',', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', '""', 'pig', '.', 'logfile', '""', ')', ',', 'log', ',', 'false', ',', 'headerMessage', ',', 'false', ',', 'false', ')', ';']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', 'if', '(', 'exceptions', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
Launcher.java,"['throw', 'exceptions', '.', 'get', '(', '0', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2115', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Internal', 'error', '.', 'Expected', 'to', 'throw', 'exception', 'from', 'the', 'backend', '.', 'Did', 'not', 'find', 'any', 'exception', 'to', 'throw', '.', '""', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'calculateProgress', '(', 'JobControl', 'jc', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['double', 'prog', '=', '0', '.', '0', ';']",0
Launcher.java,"['prog', '+', '=', 'jc', '.', 'getSuccessfulJobs', '(', ')', '.', 'size', '(', ')', ';']",0
Launcher.java,"['List', 'runnJobs', '=', 'jc', '.', 'getRunningJobs', '(', ')', ';']",0
Launcher.java,"['for', '(', 'Object', 'object', ':', 'runnJobs', ')', '{']",0
Launcher.java,"['Job', 'j', '=', '(', 'Job', ')', 'object', ';']",0
Launcher.java,"['prog', '+', '=', 'progressOfRunningJob', '(', 'j', ',', 'jobClient', ')', ';']",0
Launcher.java,"['return', 'prog', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['protected', 'double', 'progressOfRunningJob', '(', 'Job', 'j', ',', 'JobClient', 'jobClient', ')', 'throws', 'IOException', '{']",0
Launcher.java,"['JobID', 'mrJobID', '=', 'j', '.', 'getAssignedJobID', '(', ')', ';']",0
Launcher.java,"['RunningJob', 'rj', '=', 'jobClient', '.', 'getJob', '(', 'mrJobID', ')', ';']",0
Launcher.java,"['if', '(', 'rj', '=', '=', 'null', '&', '&', 'j', '.', 'getState', '(', ')', '=', '=', 'Job', '.', 'SUCCESS', ')']",0
Launcher.java,"['return', '1', ';']",0
Launcher.java,"['else', 'if', '(', 'rj', '=', '=', 'null', ')']",0
Launcher.java,"['return', '0', ';']",0
Launcher.java,"['double', 'mapProg', '=', 'rj', '.', 'mapProgress', '(', ')', ';']",0
Launcher.java,"['double', 'redProg', '=', 'rj', '.', 'reduceProgress', '(', ')', ';']",0
Launcher.java,"['return', '(', 'mapProg', '+', 'redProg', ')', '/', '2', ';']",0
Launcher.java,"['public', 'long', 'getTotalHadoopTimeSpent', '(', ')', '{']",0
Launcher.java,"['return', 'totalHadoopTimeSpent', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['Exception', 'getExceptionFromString', '(', 'String', 'stackTrace', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'lines', '=', 'stackTrace', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['Throwable', 't', '=', 'getExceptionFromStrings', '(', 'lines', ',', '0', ')', ';']",0
Launcher.java,"['if', '(', '!', 'pigException', ')', '{']",0
Launcher.java,"['int', 'errCode', '=', '6015', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'During', 'execution', ',', 'encountered', 'a', 'Hadoop', 'error', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['pigException', '=', 'false', ';']",0
Launcher.java,"['if', '(', 'outOfMemory', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'false', ';']",0
Launcher.java,"['int', 'errCode', '=', '6016', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Out', 'of', 'memory', '.', '""', ';']",0
Launcher.java,"['ExecException', 'ee', '=', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'REMOTE_ENVIRONMENT', ',', 't', ')', ';']",0
Launcher.java,"['ee', '.', 'setStackTrace', '(', 't', '.', 'getStackTrace', '(', ')', ')', ';']",0
Launcher.java,"['return', 'ee', ';']",0
Launcher.java,"['return', '(', 'Exception', ')', 't', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['private', 'Throwable', 'getExceptionFromStrings', '(', 'String', '[', ']', 'stackTraceLines', ',', 'int', 'startingLineNum', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ':', 'ERROR', '1075', ':', 'Received', 'a', 'bytearray', 'from', 'the', 'UDF', '.', 'Cannot', 'determine', 'how', 'to', 'convert', 'the', 'bytearray', 'to', 'int', '.']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'POCast', '.', 'getNext', '(', 'POCast', '.', 'java', ':', '152', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'expressionOperators', '.', 'LessThanExpr', '.', 'getNext', '(', 'LessThanExpr', '.', 'java', ':', '85', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POFilter', '.', 'getNext', '(', 'POFilter', '.', 'java', ':', '148', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'runPipeline', '(', 'PigMapBase', '.', 'java', ':', '184', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapBase', '.', 'map', '(', 'PigMapBase', '.', 'java', ':', '174', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapRunner', '.', 'run', '(', 'MapRunner', '.', 'java', ':', '47', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'MapTask', '.', 'run', '(', 'MapTask', '.', 'java', ':', '227', ')']",0
Launcher.java,"['at', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'TaskTracker', '$', 'Child', '.', 'main', '(', 'TaskTracker', '.', 'java', ':', '2207', ')']",0
Launcher.java,"['int', 'prevStartingLineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '.', 'length', '>', '0', '&', '&', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['/', '/', 'the', 'regex', 'for', 'matching', 'the', 'exception', 'class', 'name', ';', 'note', 'the', 'use', 'of', 'the', '$', 'for', 'matching', 'nested', 'classes']",0
Launcher.java,"['String', 'exceptionNameDelimiter', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '\\', '\\', 'w', '+', '""', ';']",0
Launcher.java,"['Pattern', 'exceptionNamePattern', '=', 'Pattern', '.', 'compile', '(', 'exceptionNameDelimiter', ')', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'first', 'line', 'extract', 'the', 'exception', 'name', 'and', 'the', 'exception', 'message']",0
Launcher.java,"['Matcher', 'exceptionNameMatcher', '=', 'exceptionNamePattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'startingLineNum', ']', ')', ';']",0
Launcher.java,"['String', 'exceptionName', '=', 'null', ';']",0
Launcher.java,"['String', 'exceptionMessage', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'exceptionNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['exceptionName', '=', 'exceptionNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['if', '(', 'exceptionName', '.', 'contains', '(', 'OOM_ERR', ')', ')', '{']",0
Launcher.java,"['outOfMemory', '=', 'true', ';']",0
Launcher.java,"['if', '(', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'length', '(', ')', '>', 'exceptionNameMatcher', '.', 'end', '(', ')', ')', '{']",0
Launcher.java,"['exceptionMessage', '=', 'stackTraceLines', '[', 'startingLineNum', ']', '.', 'substring', '(', 'exceptionNameMatcher', '.', 'end', '(', ')', '+', '2', ')', ';']",0
Launcher.java,"['+', '+', 'startingLineNum', ';']",0
Launcher.java,"['/', '/', 'the', 'exceptionName', 'should', 'not', 'be', 'null']",0
Launcher.java,"['if', '(', 'exceptionName', '!', '=', 'null', ')', '{']",0
Launcher.java,"['ArrayList', '<', 'StackTraceElement', '>', 'stackTraceElements', '=', 'new', 'ArrayList', '<', 'StackTraceElement', '>', '(', ')', ';']",0
Launcher.java,"['/', '/', 'Create', 'stack', 'trace', 'elements', 'for', 'the', 'remaining', 'lines']",0
Launcher.java,"['String', 'stackElementRegex', '=', '""', '\\', '\\', 's', '+', 'at', '\\', '\\', 's', '+', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '\\', '\\', '<', ')', '?', '\\', '\\', 'w', '+', '(', '\\', '\\', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'stackElementPattern', '=', 'Pattern', '.', 'compile', '(', 'stackElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigExceptionRegex', '=', '""', 'org', '\\', '\\', '.', 'apache', '\\', '\\', '.', 'pig', '\\', '\\', '.', '""', ';']",0
Launcher.java,"['Pattern', 'pigExceptionPattern', '=', 'Pattern', '.', 'compile', '(', 'pigExceptionRegex', ')', ';']",0
Launcher.java,"['String', 'moreElementRegex', '=', '""', '\\', '\\', 's', '+', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', '.', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', '\\', '\\', 's', '+', 'more', '""', ';']",0
Launcher.java,"['Pattern', 'moreElementPattern', '=', 'Pattern', '.', 'compile', '(', 'moreElementRegex', ')', ';']",0
Launcher.java,"['String', 'pigPackageRegex', '=', '""', 'org', '.', 'apache', '.', 'pig', '""', ';']",0
Launcher.java,"['int', 'lineNum', '=', 'startingLineNum', ';']",0
Launcher.java,"['for', '(', ';', 'lineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ';', '+', '+', 'lineNum', ')', '{']",0
Launcher.java,"['Matcher', 'stackElementMatcher', '=', 'stackElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'stackElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['StackTraceElement', 'ste', '=', 'getStackTraceElement', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['stackTraceElements', '.', 'add', '(', 'ste', ')', ';']",0
Launcher.java,"['String', 'className', '=', 'ste', '.', 'getClassName', '(', ')', ';']",0
Launcher.java,"['Matcher', 'pigExceptionMatcher', '=', 'pigExceptionPattern', '.', 'matcher', '(', 'className', ')', ';']",0
Launcher.java,"['if', '(', 'pigExceptionMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['pigException', '=', 'true', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['Matcher', 'moreElementMatcher', '=', 'moreElementPattern', '.', 'matcher', '(', 'stackTraceLines', '[', 'lineNum', ']', ')', ';']",0
Launcher.java,"['if', '(', 'moreElementMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['+', '+', 'lineNum', ';']",0
Launcher.java,"['startingLineNum', '=', 'lineNum', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'appropriate', 'exception', ';', 'setup', 'the', 'stack', 'trace', 'and', 'message']",0
Launcher.java,"['Object', 'object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', ')', ';']",0
Launcher.java,"['if', '(', 'object', 'instanceof', 'PigException', ')', '{']",0
Launcher.java,"['/', '/', 'extract', 'the', 'error', 'code', 'and', 'message', 'the', 'regex', 'for', 'matching', 'the', 'custom', 'format', 'of', 'ERROR', '<', 'ERROR', 'CODE', '>', ':']",0
Launcher.java,"['String', 'errMessageRegex', '=', '""', 'ERROR', '\\', '\\', 's', '+', '\\', '\\', 'd', '+', ':', '""', ';']",0
Launcher.java,"['Pattern', 'errMessagePattern', '=', 'Pattern', '.', 'compile', '(', 'errMessageRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errMessageMatcher', '=', 'errMessagePattern', '.', 'matcher', '(', 'exceptionMessage', ')', ';']",0
Launcher.java,"['if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['String', 'errMessageStub', '=', 'errMessageMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['exceptionMessage', '=', 'exceptionMessage', '.', 'substring', '(', 'errMessageMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['/', '/', 'the', 'regex', 'to', 'match', 'the', 'error', 'code', 'wich', 'is', 'a', 'string', 'of', 'numerals']",0
Launcher.java,"['String', 'errCodeRegex', '=', '""', '\\', '\\', 'd', '+', '""', ';']",0
Launcher.java,"['Pattern', 'errCodePattern', '=', 'Pattern', '.', 'compile', '(', 'errCodeRegex', ')', ';']",0
Launcher.java,"['Matcher', 'errCodeMatcher', '=', 'errCodePattern', '.', 'matcher', '(', 'errMessageStub', ')', ';']",0
Launcher.java,"['String', 'code', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'errCodeMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['code', '=', 'errCodeMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['/', '/', 'could', 'receive', 'a', 'number', 'format', 'exception', 'here', 'but', 'it', 'will', 'be', 'propagated', 'up', 'the', 'stack']",0
Launcher.java,"['int', 'errCode', '=', 'Integer', '.', 'parseInt', '(', 'code', ')', ';']",0
Launcher.java,"['/', '/', 'create', 'the', 'exception', 'with', 'the', 'message', 'and', 'then', 'set', 'the', 'error', 'code', 'and', 'error', 'source']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', 'errCode', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'determineErrorSource', '(', 'errCode', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'errMessageMatcher', '.', 'find', '(', ')', ')']",0
Launcher.java,"['FuncSpec', 'funcSpec', '=', 'new', 'FuncSpec', '(', 'exceptionName', ',', 'exceptionMessage', ')', ';']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'funcSpec', ')', ';']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorCode', '(', '2997', ')', ';', '/', '/', 'generic', 'error', 'code']",0
Launcher.java,"['(', '(', 'PigException', ')', 'object', ')', '.', 'setErrorSource', '(', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'object', 'instanceof', 'PigException', ')']",0
Launcher.java,"['/', '/', 'its', 'not', 'PigException', ';', 'create', 'the', 'exception', 'with', 'the', 'message']",0
Launcher.java,"['object', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'exceptionName', '+', '""', '(', '""', '+', 'exceptionMessage', '+', '""', ')', '""', ')', ';']",0
Launcher.java,"['StackTraceElement', '[', ']', 'steArr', '=', 'new', 'StackTraceElement', '[', 'stackTraceElements', '.', 'size', '(', ')', ']', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'setStackTrace', '(', '(', 'StackTraceElement', '[', ']', ')', '(', 'stackTraceElements', '.', 'toArray', '(', 'steArr', ')', ')', ')', ';']",0
Launcher.java,"['if', '(', 'startingLineNum', '<', '(', 'stackTraceLines', '.', 'length', '-', '1', ')', ')', '{']",0
Launcher.java,"['Throwable', 'e', '=', 'getExceptionFromStrings', '(', 'stackTraceLines', ',', 'startingLineNum', ')', ';']",0
Launcher.java,"['(', '(', 'Throwable', ')', 'object', ')', '.', 'initCause', '(', 'e', ')', ';']",0
Launcher.java,"['return', '(', 'Throwable', ')', 'object', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'exceptionName', '!', '=', 'null', ')']",0
Launcher.java,"['int', 'errCode', '=', '2055', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'exception', 'name', 'to', 'create', 'exception', 'from', 'string', ':', '""', '+', 'stackTraceLines', '.', 'toString', '(', ')', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['}', 'else', '{', '/', '/', 'else', 'for', 'if', '(', 'lines', '.', 'length', '>', '0', ')']",0
Launcher.java,"['int', 'errCode', '=', '2056', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Cannot', 'create', 'exception', 'from', 'empty', 'string', '.', '""', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '*', '*']",0
Launcher.java,"['public', 'StackTraceElement', 'getStackTraceElement', '(', 'String', 'line', ')', 'throws', 'Exception', '{']",0
Launcher.java,"['String', '[', ']', 'items', ';']",0
Launcher.java,"['String', 'qualifiedMethodNameRegex', '=', '""', '(', '\\', '\\', 'w', '+', '(', '\\', '\\', '$', '\\', '\\', 'w', '+', ')', '?', '\\', '\\', '.', ')', '+', '(', '<', ')', '?', '\\', '\\', 'w', '+', '(', '>', ')', '?', '""', ';']",0
Launcher.java,"['Pattern', 'qualifiedMethodNamePattern', '=', 'Pattern', '.', 'compile', '(', 'qualifiedMethodNameRegex', ')', ';']",0
Launcher.java,"['Matcher', 'contentMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'line', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'content', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'contentMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['content', '=', 'line', '.', 'substring', '(', 'contentMatcher', '.', 'start', '(', ')', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['Matcher', 'qualifiedMethodNameMatcher', '=', 'qualifiedMethodNamePattern', '.', 'matcher', '(', 'content', ')', ';']",0
Launcher.java,"['/', '/', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'PigMapOnly', '$', 'Map', '.', 'map']",0
Launcher.java,"['String', 'qualifiedMethodName', '=', 'null', ';']",0
Launcher.java,"['/', '/', '(', 'PigMapOnly', '.', 'java', ':', '65', ')']",0
Launcher.java,"['String', 'fileDetails', '=', 'null', ';']",0
Launcher.java,"['if', '(', 'qualifiedMethodNameMatcher', '.', 'find', '(', ')', ')', '{']",0
Launcher.java,"['qualifiedMethodName', '=', 'qualifiedMethodNameMatcher', '.', 'group', '(', ')', ';']",0
Launcher.java,"['fileDetails', '=', 'content', '.', 'substring', '(', 'qualifiedMethodNameMatcher', '.', 'end', '(', ')', '+', '1', ')', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['int', 'errCode', '=', '2057', ';']",0
Launcher.java,"['String', 'msg', '=', '""', 'Did', 'not', 'find', 'fully', 'qualified', 'method', 'name', 'to', 'reconstruct', 'stack', 'trace', ':', '""', '+', 'line', ';']",0
Launcher.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
Launcher.java,"['/', '/', 'From', 'the', 'fully', 'qualified', 'method', 'name', ',', 'extract', 'the', 'declaring', 'class', 'and', 'method', 'name']",0
Launcher.java,"['items', '=', 'qualifiedMethodName', '.', 'split', '(', '""', '\\', '\\', '.', '""', ')', ';']",0
Launcher.java,"['/', '/', 'initialize', 'the', 'declaringClass', '(', 'to', 'org', 'in', 'most', 'cases', ')']",0
Launcher.java,"['String', 'declaringClass', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['/', '/', 'the', 'last', 'member', 'is', 'always', 'the', 'method', 'name']",0
Launcher.java,"['String', 'methodName', '=', 'items', '[', 'items', '.', 'length', '-', '1', ']', ';']",0
Launcher.java,"['/', '/', 'concatenate', 'the', 'names', 'by', 'adding', 'the', 'dot', '(', '.', ')', 'between', 'the', 'members', 'till', 'the', 'penultimate', 'member']",0
Launcher.java,"['for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'items', '.', 'length', '-', '1', ';', '+', '+', 'i', ')', '{']",0
Launcher.java,"['declaringClass', '+', '=', '""', '.', '""', ';']",0
Launcher.java,"['declaringClass', '+', '=', 'items', '[', 'i', ']', ';']",0
Launcher.java,"['/', '/', 'from', 'the', 'file', 'details', 'extract', 'the', 'file', 'name', 'and', 'the', 'line', 'number']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java', ':', '65']",0
Launcher.java,"['fileDetails', '=', 'fileDetails', '.', 'substring', '(', '0', ',', 'fileDetails', '.', 'length', '(', ')', '-', '1', ')', ';']",0
Launcher.java,"['items', '=', 'fileDetails', '.', 'split', '(', '""', ':', '""', ')', ';']",0
Launcher.java,"['/', '/', 'PigMapOnly', '.', 'java']",0
Launcher.java,"['String', 'fileName', '=', 'null', ';']",0
Launcher.java,"['int', 'lineNumber', '=', '0', ';']",0
Launcher.java,"['if', '(', 'items', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['fileName', '=', 'items', '[', '0', ']', ';']",0
Launcher.java,"['lineNumber', '=', 'Integer', '.', 'parseInt', '(', 'items', '[', '1', ']', ')', ';']",0
Launcher.java,"['return', 'new', 'StackTraceElement', '(', 'declaringClass', ',', 'methodName', ',', 'fileName', ',', 'lineNumber', ')', ';']",0
Launcher.java,"['private', 'String', 'getFirstLineFromMessage', '(', 'String', 'message', ')', '{']",0
Launcher.java,"['String', '[', ']', 'messages', '=', 'message', '.', 'split', '(', 'newLine', ')', ';']",0
Launcher.java,"['if', '(', 'messages', '.', 'length', '>', '0', ')', '{']",0
Launcher.java,"['return', 'messages', '[', '0', ']', ';']",0
Launcher.java,"['}', 'else', '{']",0
Launcher.java,"['return', 'new', 'String', '(', 'message', ')', ';']",0
JobControlCompiler.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'io', '.', 'File', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'io', '.', 'FileOutputStream', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'net', '.', 'URI', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'net', '.', 'URISyntaxException', ';']",0
JobControlCompiler.java,"['import', 'java', '.', 'util', '.', '*', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'conf', '.', 'Configuration', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'filecache', '.', 'DistributedCache', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileSystem', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'FileStatus', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'fs', '.', 'Path', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'WritableComparable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'io', '.', 'WritableComparator', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'FileOutputFormat', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'JobConf', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'OutputFormat', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'Job', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'hadoop', '.', 'mapred', '.', 'jobcontrol', '.', 'JobControl', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ComparisonFunc', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'FuncSpec', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreConfig', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'StoreFunc', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'executionengine', '.', 'ExecException', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'HDataType', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'partitioners', '.', 'WeightedRangePartitioner', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', '.', 'MROperPlan', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POLoad', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POPackage', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'relationalOperators', '.', 'POStore', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'util', '.', 'PlanHelper', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'BagFactory', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'TupleFactory', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileLocalizer', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'FileSpec', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableBytesWritable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableDoubleWritable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableFloatWritable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableIntWritable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableLongWritable', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableText', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'io', '.', 'NullableTuple', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'JarManager', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'ObjectSerializer', ';']",0
JobControlCompiler.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'Pair', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['public', 'class', 'JobControlCompiler', '{']",0
JobControlCompiler.java,"['MROperPlan', 'plan', ';']",0
JobControlCompiler.java,"['Configuration', 'conf', ';']",0
JobControlCompiler.java,"['PigContext', 'pigContext', ';']",0
JobControlCompiler.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'final', 'String', 'PIG_STORE_CONFIG', '=', '""', 'pig', '.', 'store', '.', 'config', '""', ';']",0
JobControlCompiler.java,"['public', 'static', 'final', 'String', 'LOG_DIR', '=', '""', '_logs', '""', ';']",0
JobControlCompiler.java,"['/', '/', 'A', 'mapping', 'of', 'job', 'to', 'pair', 'of', 'store', 'locations', 'and', 'tmp', 'locations', 'for', 'that', 'job']",0
JobControlCompiler.java,"['private', 'Map', '<', 'Job', ',', 'Pair', '<', 'List', '<', 'POStore', '>', ',', 'Path', '>', '>', 'jobStoreMap', ';']",0
JobControlCompiler.java,"['public', 'JobControlCompiler', '(', 'PigContext', 'pigContext', ',', 'Configuration', 'conf', ')', 'throws', 'IOException', '{']",0
JobControlCompiler.java,"['this', '.', 'pigContext', '=', 'pigContext', ';']",0
JobControlCompiler.java,"['this', '.', 'conf', '=', 'conf', ';']",0
JobControlCompiler.java,"['jobStoreMap', '=', 'new', 'HashMap', '<', 'Job', ',', 'Pair', '<', 'List', '<', 'POStore', '>', ',', 'Path', '>', '>', '(', ')', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['public', 'List', '<', 'POStore', '>', 'getStores', '(', 'Job', 'job', ')', '{']",0
JobControlCompiler.java,"['Pair', '<', 'List', '<', 'POStore', '>', ',', 'Path', '>', 'pair', '=', 'jobStoreMap', '.', 'get', '(', 'job', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'pair', '!', '=', 'null', '&', '&', 'pair', '.', 'first', '!', '=', 'null', ')', '{']",0
JobControlCompiler.java,"['return', 'pair', '.', 'first', ';']",0
JobControlCompiler.java,"['return', 'new', 'ArrayList', '<', 'POStore', '>', '(', ')', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['public', 'void', 'reset', '(', ')', '{']",0
JobControlCompiler.java,"['jobStoreMap', '=', 'new', 'HashMap', '<', 'Job', ',', 'Pair', '<', 'List', '<', 'POStore', '>', ',', 'Path', '>', '>', '(', ')', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['public', 'void', 'moveResults', '(', 'List', '<', 'Job', '>', 'completedJobs', ')', 'throws', 'IOException', '{']",0
JobControlCompiler.java,"['for', '(', 'Job', 'job', ':', 'completedJobs', ')', '{']",0
JobControlCompiler.java,"['Pair', '<', 'List', '<', 'POStore', '>', ',', 'Path', '>', 'pair', '=', 'jobStoreMap', '.', 'get', '(', 'job', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'pair', '!', '=', 'null', '&', '&', 'pair', '.', 'second', '!', '=', 'null', ')', '{']",0
JobControlCompiler.java,"['Path', 'tmp', '=', 'pair', '.', 'second', ';']",0
JobControlCompiler.java,"['Path', 'abs', '=', 'new', 'Path', '(', 'tmp', ',', '""', 'abs', '""', ')', ';']",0
JobControlCompiler.java,"['Path', 'rel', '=', 'new', 'Path', '(', 'tmp', ',', '""', 'rel', '""', ')', ';']",0
JobControlCompiler.java,"['FileSystem', 'fs', '=', 'tmp', '.', 'getFileSystem', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'fs', '.', 'exists', '(', 'abs', ')', ')', '{']",0
JobControlCompiler.java,"['moveResults', '(', 'abs', ',', 'abs', '.', 'toUri', '(', ')', '.', 'getPath', '(', ')', ',', 'fs', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'fs', '.', 'exists', '(', 'rel', ')', ')', '{']",0
JobControlCompiler.java,"['moveResults', '(', 'rel', ',', 'rel', '.', 'toUri', '(', ')', '.', 'getPath', '(', ')', '+', '""', '/', '""', ',', 'fs', ')', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['private', 'void', 'moveResults', '(', 'Path', 'p', ',', 'String', 'rem', ',', 'FileSystem', 'fs', ')', 'throws', 'IOException', '{']",0
JobControlCompiler.java,"['for', '(', 'FileStatus', 'fstat', ':', 'fs', '.', 'listStatus', '(', 'p', ')', ')', '{']",0
JobControlCompiler.java,"['Path', 'src', '=', 'fstat', '.', 'getPath', '(', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'fstat', '.', 'isDir', '(', ')', ')', '{']",0
JobControlCompiler.java,"['fs', '.', 'mkdirs', '(', 'removePart', '(', 'src', ',', 'rem', ')', ')', ';']",0
JobControlCompiler.java,"['moveResults', '(', 'fstat', '.', 'getPath', '(', ')', ',', 'rem', ',', 'fs', ')', ';']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['Path', 'dst', '=', 'removePart', '(', 'src', ',', 'rem', ')', ';']",0
JobControlCompiler.java,"['fs', '.', 'rename', '(', 'src', ',', 'dst', ')', ';']",0
JobControlCompiler.java,"['private', 'Path', 'removePart', '(', 'Path', 'src', ',', 'String', 'part', ')', '{']",0
JobControlCompiler.java,"['URI', 'uri', '=', 'src', '.', 'toUri', '(', ')', ';']",0
JobControlCompiler.java,"['String', 'pathStr', '=', 'uri', '.', 'getPath', '(', ')', '.', 'replace', '(', 'part', ',', '""', '""', ')', ';']",0
JobControlCompiler.java,"['return', 'new', 'Path', '(', 'pathStr', ')', ';']",0
JobControlCompiler.java,"['private', 'Path', 'makeTmpPath', '(', ')', 'throws', 'IOException', '{']",0
JobControlCompiler.java,"['Path', 'tmpPath', '=', 'null', ';']",0
JobControlCompiler.java,"['for', '(', 'int', 'tries', '=', '0', ';', ';', ')', '{']",0
JobControlCompiler.java,"['new', 'Path', '(', 'FileLocalizer']",0
JobControlCompiler.java,"['.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['FileSystem', 'fs', '=', 'tmpPath', '.', 'getFileSystem', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['tmpPath', '=', 'tmpPath', '.', 'makeQualified', '(', 'fs', ')', ';']",0
JobControlCompiler.java,"['fs', '.', 'mkdirs', '(', 'tmpPath', ')', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'IOException', 'ioe', ')', '{']",0
JobControlCompiler.java,"['if', '(', '+', '+', 'tries', '=', '=', '100', ')', '{']",0
JobControlCompiler.java,"['throw', 'ioe', ';']",0
JobControlCompiler.java,"['return', 'tmpPath', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['Map', '<', 'OperatorKey', ',', 'Job', '>', 'seen', '=', 'new', 'Hashtable', '<', 'OperatorKey', ',', 'Job', '>', '(', ')', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['public', 'JobControl', 'compile', '(', 'MROperPlan', 'plan', ',', 'String', 'grpName', ')', 'throws', 'JobCreationException', '{']",0
JobControlCompiler.java,"['this', '.', 'plan', '=', 'plan', ';']",0
JobControlCompiler.java,"['if', '(', 'plan', '.', 'size', '(', ')', '=', '=', '0', ')', '{']",0
JobControlCompiler.java,"['return', 'null', ';']",0
JobControlCompiler.java,"['JobControl', 'jobCtrl', '=', 'new', 'JobControl', '(', 'grpName', ')', ';']",0
JobControlCompiler.java,"['List', '<', 'MapReduceOper', '>', 'roots', '=', 'new', 'LinkedList', '<', 'MapReduceOper', '>', '(', ')', ';']",0
JobControlCompiler.java,"['roots', '.', 'addAll', '(', 'plan', '.', 'getRoots', '(', ')', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'MapReduceOper', 'mro', ':', 'roots', ')', '{']",0
JobControlCompiler.java,"['jobCtrl', '.', 'addJob', '(', 'getJob', '(', 'mro', ',', 'conf', ',', 'pigContext', ')', ')', ';']",0
JobControlCompiler.java,"['plan', '.', 'remove', '(', 'mro', ')', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'JobCreationException', 'jce', ')', '{']",0
JobControlCompiler.java,"['throw', 'jce', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
JobControlCompiler.java,"['int', 'errCode', '=', '2017', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Internal', 'error', 'creating', 'job', 'configuration', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
JobControlCompiler.java,"['return', 'jobCtrl', ';']",0
JobControlCompiler.java,"['/', '*', '*']",0
JobControlCompiler.java,"['private', 'Job', 'getJob', '(', 'MapReduceOper', 'mro', ',', 'Configuration', 'conf', ',', 'PigContext', 'pigContext', ')', 'throws', 'JobCreationException', '{']",0
JobControlCompiler.java,"['JobConf', 'jobConf', '=', 'new', 'JobConf', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['ArrayList', '<', 'Pair', '<', 'FileSpec', ',', 'Boolean', '>', '>', 'inp', '=', 'new', 'ArrayList', '<', 'Pair', '<', 'FileSpec', ',', 'Boolean', '>', '>', '(', ')', ';']",0
JobControlCompiler.java,"['ArrayList', '<', 'List', '<', 'OperatorKey', '>', '>', 'inpTargets', '=', 'new', 'ArrayList', '<', 'List', '<', 'OperatorKey', '>', '>', '(', ')', ';']",0
JobControlCompiler.java,"['ArrayList', '<', 'POStore', '>', 'storeLocations', '=', 'new', 'ArrayList', '<', 'POStore', '>', '(', ')', ';']",0
JobControlCompiler.java,"['Path', 'tmpLocation', '=', 'null', ';']",0
JobControlCompiler.java,"['/', '/', 'Set', 'the', 'User', 'Name', 'for', 'this', 'job', '.', 'This', 'will', 'be']",0
JobControlCompiler.java,"['/', '/', 'used', 'as', 'the', 'working', 'directory']",0
JobControlCompiler.java,"['String', 'user', '=', 'System', '.', 'getProperty', '(', '""', 'user', '.', 'name', '""', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setUser', '(', 'user', '!', '=', 'null', '?', 'user', ':', '""', 'Pigster', '""', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Process', 'the', 'POLoads']",0
JobControlCompiler.java,"['List', '<', 'POLoad', '>', 'lds', '=', 'PlanHelper', '.', 'getLoads', '(', 'mro', '.', 'mapPlan', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'lds', '!', '=', 'null', '&', '&', 'lds', '.', 'size', '(', ')', '>', '0', ')', '{']",0
JobControlCompiler.java,"['for', '(', 'POLoad', 'ld', ':', 'lds', ')', '{']",0
JobControlCompiler.java,"['Pair', '<', 'FileSpec', ',', 'Boolean', '>', 'p', '=', 'new', 'Pair', '<', 'FileSpec', ',', 'Boolean', '>', '(', 'ld', '.', 'getLFile', '(', ')', ',', 'ld', '.', 'isSplittable', '(', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Store', 'the', 'inp', 'filespecs']",0
JobControlCompiler.java,"['inp', '.', 'add', '(', 'p', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Store', 'the', 'target', 'operators', 'for', 'tuples', 'read']",0
JobControlCompiler.java,"['/', '/', 'from', 'this', 'input']",0
JobControlCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'ldSucs', '=', 'mro', '.', 'mapPlan', '.', 'getSuccessors', '(', 'ld', ')', ';']",0
JobControlCompiler.java,"['List', '<', 'OperatorKey', '>', 'ldSucKeys', '=', 'new', 'ArrayList', '<', 'OperatorKey', '>', '(', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'ldSucs', '!', '=', 'null', ')', '{']",0
JobControlCompiler.java,"['for', '(', 'PhysicalOperator', 'operator2', ':', 'ldSucs', ')', '{']",0
JobControlCompiler.java,"['ldSucKeys', '.', 'add', '(', 'operator2', '.', 'getOperatorKey', '(', ')', ')', ';']",0
JobControlCompiler.java,"['inpTargets', '.', 'add', '(', 'ldSucKeys', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Remove', 'the', 'POLoad', 'from', 'the', 'plan']",0
JobControlCompiler.java,"['mro', '.', 'mapPlan', '.', 'remove', '(', 'ld', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Create', 'the', 'jar', 'of', 'all', 'functions', 'reuired']",0
JobControlCompiler.java,"['File', 'submitJarFile', '=', 'File', '.', 'createTempFile', '(', '""', 'Job', '""', ',', '""', '.', 'jar', '""', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'ensure', 'the', 'job', 'jar', 'is', 'deleted', 'on', 'exit']",0
JobControlCompiler.java,"['submitJarFile', '.', 'deleteOnExit', '(', ')', ';']",0
JobControlCompiler.java,"['FileOutputStream', 'fos', '=', 'new', 'FileOutputStream', '(', 'submitJarFile', ')', ';']",0
JobControlCompiler.java,"['JarManager', '.', 'createJar', '(', 'fos', ',', 'mro', '.', 'UDFs', ',', 'pigContext', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Start', 'setting', 'the', 'JobConf', 'properties']",0
JobControlCompiler.java,"['jobConf', '.', 'setJar', '(', 'submitJarFile', '.', 'getPath', '(', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'inputs', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'inp', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'inpTargets', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'inpTargets', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'pigContext', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'pigContext', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'for', 'unit', 'tests', 'since', 'some', 'don', ""'"", 't', 'create', 'PigServer']",0
JobControlCompiler.java,"['if', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', 'PigContext', '.', 'JOB_NAME', ')', '!', '=', 'null', ')']",0
JobControlCompiler.java,"['jobConf', '.', 'setJobName', '(', 'pigContext', '.', 'getProperties', '(', ')', '.', 'getProperty', '(', 'PigContext', '.', 'JOB_NAME', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Setup', 'the', 'DistributedCache', 'for', 'this', 'job']",0
JobControlCompiler.java,"['setupDistributedCache', '(', 'pigContext', ',', 'jobConf', ',', 'pigContext', '.', 'getProperties', '(', ')', ',']",0
JobControlCompiler.java,"['""', 'pig', '.', 'streaming', '.', 'ship', '.', 'files', '""', ',', 'true', ')', ';']",0
JobControlCompiler.java,"['setupDistributedCache', '(', 'pigContext', ',', 'jobConf', ',', 'pigContext', '.', 'getProperties', '(', ')', ',']",0
JobControlCompiler.java,"['""', 'pig', '.', 'streaming', '.', 'cache', '.', 'files', '""', ',', 'false', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setInputFormat', '(', 'PigInputFormat', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Process', 'POStore', 'and', 'remove', 'it', 'from', 'the', 'plan']",0
JobControlCompiler.java,"['List', '<', 'POStore', '>', 'mapStores', '=', 'PlanHelper', '.', 'getStores', '(', 'mro', '.', 'mapPlan', ')', ';']",0
JobControlCompiler.java,"['List', '<', 'POStore', '>', 'reduceStores', '=', 'PlanHelper', '.', 'getStores', '(', 'mro', '.', 'reducePlan', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'POStore', 'st', ':', 'mapStores', ')', '{']",0
JobControlCompiler.java,"['storeLocations', '.', 'add', '(', 'st', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'POStore', 'st', ':', 'reduceStores', ')', '{']",0
JobControlCompiler.java,"['storeLocations', '.', 'add', '(', 'st', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mapStores', '.', 'size', '(', ')', '+', 'reduceStores', '.', 'size', '(', ')', '=', '=', '1', ')', '{', '/', '/', 'single', 'store', 'case']",0
JobControlCompiler.java,"['log', '.', 'info', '(', '""', 'Setting', 'up', 'single', 'store', 'job', '""', ')', ';']",0
JobControlCompiler.java,"['POStore', 'st', ';']",0
JobControlCompiler.java,"['if', '(', 'reduceStores', '.', 'isEmpty', '(', ')', ')', '{']",0
JobControlCompiler.java,"['st', '=', 'mapStores', '.', 'remove', '(', '0', ')', ';']",0
JobControlCompiler.java,"['mro', '.', 'mapPlan', '.', 'remove', '(', 'st', ')', ';']",0
JobControlCompiler.java,"['st', '=', 'reduceStores', '.', 'remove', '(', '0', ')', ';']",0
JobControlCompiler.java,"['mro', '.', 'reducePlan', '.', 'remove', '(', 'st', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'If', 'the', 'StoreFunc', 'associate', 'with', 'the', 'POStore', 'is', 'implements']",0
JobControlCompiler.java,"['/', '/', 'getStorePreparationClass', '(', ')', 'and', 'returns', 'a', 'non', 'null', 'value', ',']",0
JobControlCompiler.java,"['/', '/', 'then', 'it', 'could', 'be', 'wanting', 'to', 'implement', 'OutputFormat', 'for', 'writing', 'out', 'to', 'hadoop']",0
JobControlCompiler.java,"['/', '/', 'Check', 'if', 'this', 'is', 'the', 'case', ',', 'if', 'so', ',', 'use', 'the', 'OutputFormat', 'class', 'the']",0
JobControlCompiler.java,"['/', '/', 'StoreFunc', 'gives', 'us', 'else', 'use', 'our', 'default', 'PigOutputFormat']",0
JobControlCompiler.java,"['Object', 'storeFunc', '=', 'PigContext', '.', 'instantiateFuncFromSpec', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFuncSpec', '(', ')', ')', ';']",0
JobControlCompiler.java,"['Class', 'sPrepClass', '=', 'null', ';']",0
JobControlCompiler.java,"['sPrepClass', '=', '(', '(', 'StoreFunc', ')', 'storeFunc', ')', '.', 'getStorePreparationClass', '(', ')', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'AbstractMethodError', 'e', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'for', 'backward', 'compatibility', 'wherein', 'some', 'old', 'StoreFunc']",0
JobControlCompiler.java,"['/', '/', 'which', 'does', 'not', 'implement', 'getStorePreparationClass', '(', ')', 'is', 'being']",0
JobControlCompiler.java,"['/', '/', 'used', '.', 'In', 'this', 'case', ',', 'we', 'want', 'to', 'just', 'use', 'PigOutputFormat']",0
JobControlCompiler.java,"['sPrepClass', '=', 'null', ';']",0
JobControlCompiler.java,"['if', '(', 'sPrepClass', '!', '=', 'null', '&', '&', 'OutputFormat', '.', 'class', '.', 'isAssignableFrom', '(', 'sPrepClass', ')', ')', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputFormat', '(', 'sPrepClass', ')', ';']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputFormat', '(', 'PigOutputFormat', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'set', 'out', 'filespecs']",0
JobControlCompiler.java,"['String', 'outputPath', '=', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ';']",0
JobControlCompiler.java,"['FuncSpec', 'outputFuncSpec', '=', 'st', '.', 'getSFile', '(', ')', '.', 'getFuncSpec', '(', ')', ';']",0
JobControlCompiler.java,"['FileOutputFormat', '.', 'setOutputPath', '(', 'jobConf', ',', 'new', 'Path', '(', 'outputPath', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'serialize', 'the', 'store', 'func', 'spec', 'using', 'ObjectSerializer']",0
JobControlCompiler.java,"['/', '/', 'ObjectSerializer', '.', 'serialize', '(', ')', 'uses', 'default', 'java', 'serialization']",0
JobControlCompiler.java,"['/', '/', 'and', 'then', 'further', 'encodes', 'the', 'output', 'so', 'that', 'control', 'characters']",0
JobControlCompiler.java,"['/', '/', 'get', 'encoded', 'as', 'regular', 'characters', '.', 'Otherwise', 'any', 'control', 'characters']",0
JobControlCompiler.java,"['/', '/', 'in', 'the', 'store', 'funcspec', 'would', 'break', 'the', 'job', '.', 'xml', 'which', 'is', 'created', 'by']",0
JobControlCompiler.java,"['/', '/', 'hadoop', 'from', 'the', 'jobconf', '.']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'storeFunc', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'outputFuncSpec', '.', 'toString', '(', ')', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', 'PIG_STORE_CONFIG', ',']",0
JobControlCompiler.java,"['ObjectSerializer', '.', 'serialize', '(', 'new', 'StoreConfig', '(', 'outputPath', ',', 'st', '.', 'getSchema', '(', ')', ')', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'streaming', '.', 'log', '.', 'dir', '""', ',']",0
JobControlCompiler.java,"['new', 'Path', '(', 'outputPath', ',', 'LOG_DIR', ')', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'streaming', '.', 'task', '.', 'output', '.', 'dir', '""', ',', 'outputPath', ')', ';']",0
JobControlCompiler.java,"['else', '{', '/', '/', 'multi', 'store', 'case']",0
JobControlCompiler.java,"['log', '.', 'info', '(', '""', 'Setting', 'up', 'multi', 'store', 'job', '""', ')', ';']",0
JobControlCompiler.java,"['tmpLocation', '=', 'makeTmpPath', '(', ')', ';']",0
JobControlCompiler.java,"['FileSystem', 'fs', '=', 'tmpLocation', '.', 'getFileSystem', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'POStore', 'st', ':', 'mapStores', ')', '{']",0
JobControlCompiler.java,"['Path', 'tmpOut', '=', 'new', 'Path', '(']",0
JobControlCompiler.java,"['PlanHelper', '.', 'makeStoreTmpPath', '(', 'st', '.', 'getSFile', '(', ')', '.', 'getFileName', '(', ')', ')', ')', ';']",0
JobControlCompiler.java,"['fs', '.', 'mkdirs', '(', 'tmpOut', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputFormat', '(', 'PigOutputFormat', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['FileOutputFormat', '.', 'setOutputPath', '(', 'jobConf', ',', 'tmpLocation', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'streaming', '.', 'log', '.', 'dir', '""', ',']",0
JobControlCompiler.java,"['new', 'Path', '(', 'tmpLocation', ',', 'LOG_DIR', ')', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'streaming', '.', 'task', '.', 'output', '.', 'dir', '""', ',', 'tmpLocation', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'store', 'map', 'key', 'type']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'needed', 'when', 'the', 'key', 'is', 'null', 'to', 'create']",0
JobControlCompiler.java,"['/', '/', 'an', 'appropriate', 'NullableXXXWritable', 'object']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'map', '.', 'keytype', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'new', 'byte', '[', ']', '{', 'mro', '.', 'mapKeyType', '}', ')', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'set', 'parent', 'plan', 'in', 'all', 'operators', 'in', 'map', 'and', 'reduce', 'plans']",0
JobControlCompiler.java,"['/', '/', 'currently', 'the', 'parent', 'plan', 'is', 'really', 'used', 'only', 'when', 'POStream', 'is', 'present', 'in', 'the', 'plan']",0
JobControlCompiler.java,"['new', 'PhyPlanSetter', '(', 'mro', '.', 'mapPlan', ')', '.', 'visit', '(', ')', ';']",0
JobControlCompiler.java,"['new', 'PhyPlanSetter', '(', 'mro', '.', 'reducePlan', ')', '.', 'visit', '(', ')', ';']",0
JobControlCompiler.java,"['POPackage', 'pack', '=', 'null', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'MapOnly', 'Job']",0
JobControlCompiler.java,"['jobConf', '.', 'setMapperClass', '(', 'PigMapOnly', '.', 'Map', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setNumReduceTasks', '(', '0', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'mapPlan', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'mro', '.', 'mapPlan', ')', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isStreamInMap', '(', ')', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'used', 'in', 'Map', '.', 'close', '(', ')', 'to', 'decide', 'whether', 'the']",0
JobControlCompiler.java,"['/', '/', 'pipeline', 'needs', 'to', 'be', 'rerun', 'one', 'more', 'time', 'in', 'the', 'close', '(', ')']",0
JobControlCompiler.java,"['/', '/', 'The', 'pipeline', 'is', 'rerun', 'only', 'if', 'there', 'was', 'a', 'stream']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'stream', '.', 'in', '.', 'map', '""', ',', '""', 'true', '""', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Map', 'Reduce', 'Job']",0
JobControlCompiler.java,"['/', '/', 'Process', 'the', 'POPackage', 'operator', 'and', 'remove', 'it', 'from', 'the', 'reduce', 'plan']",0
JobControlCompiler.java,"['if', '(', '!', 'mro', '.', 'combinePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
JobControlCompiler.java,"['POPackage', 'combPack', '=', '(', 'POPackage', ')', 'mro', '.', 'combinePlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
JobControlCompiler.java,"['mro', '.', 'combinePlan', '.', 'remove', '(', 'combPack', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setCombinerClass', '(', 'PigCombiner', '.', 'Combine', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'combinePlan', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'mro', '.', 'combinePlan', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'combine', '.', 'package', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'combPack', ')', ')', ';']",0
JobControlCompiler.java,"['}', 'else', 'if', '(', 'mro', '.', 'needsDistinctCombiner', '(', ')', ')', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'setCombinerClass', '(', 'DistinctCombiner', '.', 'Combine', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['log', '.', 'info', '(', '""', 'Setting', 'identity', 'combiner', 'class', '.', '""', ')', ';']",0
JobControlCompiler.java,"['pack', '=', '(', 'POPackage', ')', 'mro', '.', 'reducePlan', '.', 'getRoots', '(', ')', '.', 'get', '(', '0', ')', ';']",0
JobControlCompiler.java,"['mro', '.', 'reducePlan', '.', 'remove', '(', 'pack', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setMapperClass', '(', 'PigMapReduce', '.', 'Map', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setReducerClass', '(', 'PigMapReduce', '.', 'Reduce', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'requestedParallelism', '>', '0', ')']",0
JobControlCompiler.java,"['jobConf', '.', 'setNumReduceTasks', '(', 'mro', '.', 'requestedParallelism', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'mapPlan', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'mro', '.', 'mapPlan', ')', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isStreamInMap', '(', ')', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'used', 'in', 'Map', '.', 'close', '(', ')', 'to', 'decide', 'whether', 'the']",0
JobControlCompiler.java,"['/', '/', 'pipeline', 'needs', 'to', 'be', 'rerun', 'one', 'more', 'time', 'in', 'the', 'close', '(', ')']",0
JobControlCompiler.java,"['/', '/', 'The', 'pipeline', 'is', 'rerun', 'only', 'if', 'there', 'was', 'a', 'stream']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'stream', '.', 'in', '.', 'map', '""', ',', '""', 'true', '""', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'reducePlan', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'mro', '.', 'reducePlan', ')', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isStreamInReduce', '(', ')', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'this', 'is', 'used', 'in', 'Map', '.', 'close', '(', ')', 'to', 'decide', 'whether', 'the']",0
JobControlCompiler.java,"['/', '/', 'pipeline', 'needs', 'to', 'be', 'rerun', 'one', 'more', 'time', 'in', 'the', 'close', '(', ')']",0
JobControlCompiler.java,"['/', '/', 'The', 'pipeline', 'is', 'rerun', 'only', 'if', 'there', 'was', 'a', 'stream']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'stream', '.', 'in', '.', 'reduce', '""', ',', '""', 'true', '""', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'reduce', '.', 'package', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'pack', ')', ')', ';']",0
JobControlCompiler.java,"['Class', '<', '?', 'extends', 'WritableComparable', '>', 'keyClass', '=', 'HDataType', '.', 'getWritableComparableTypes', '(', 'pack', '.', 'getKeyType', '(', ')', ')', '.', 'getClass', '(', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyClass', '(', 'keyClass', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'reduce', '.', 'key', '.', 'type', '""', ',', 'Byte', '.', 'toString', '(', 'pack', '.', 'getKeyType', '(', ')', ')', ')', ';']",0
JobControlCompiler.java,"['selectComparator', '(', 'mro', ',', 'pack', '.', 'getKeyType', '(', ')', ',', 'jobConf', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputValueClass', '(', 'NullableTuple', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isGlobalSort', '(', ')', '|', '|', 'mro', '.', 'isLimitAfterSort', '(', ')', ')', '{']",0
JobControlCompiler.java,"['/', '/', 'Only', 'set', 'the', 'quantiles', 'file', 'and', 'sort', 'partitioner', 'if', 'we', ""'"", 're', 'a']",0
JobControlCompiler.java,"['/', '/', 'global', 'sort', ',', 'not', 'for', 'limit', 'after', 'sort', '.']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isGlobalSort', '(', ')', ')', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'quantilesFile', '""', ',', 'mro', '.', 'getQuantFile', '(', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setPartitionerClass', '(', 'WeightedRangePartitioner', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'UDFs', '.', 'size', '(', ')', '=', '=', '1', ')', '{']",0
JobControlCompiler.java,"['String', 'compFuncSpec', '=', 'mro', '.', 'UDFs', '.', 'get', '(', '0', ')', ';']",0
JobControlCompiler.java,"['Class', 'comparator', '=', 'PigContext', '.', 'resolveClassName', '(', 'compFuncSpec', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'ComparisonFunc', '.', 'class', '.', 'isAssignableFrom', '(', 'comparator', ')', ')', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'setMapperClass', '(', 'PigMapReduce', '.', 'MapWithComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setReducerClass', '(', 'PigMapReduce', '.', 'ReduceWithComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'reduce', '.', 'package', '""', ',', 'ObjectSerializer', '.', 'serialize', '(', 'pack', ')', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'usercomparator', '""', ',', '""', 'true', '""', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyClass', '(', 'NullableTuple', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'comparator', ')', ';']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['jobConf', '.', 'set', '(', '""', 'pig', '.', 'sortOrder', '""', ',']",0
JobControlCompiler.java,"['ObjectSerializer', '.', 'serialize', '(', 'mro', '.', 'getSortOrder', '(', ')', ')', ')', ';']",0
JobControlCompiler.java,"['Job', 'job', '=', 'new', 'Job', '(', 'jobConf', ')', ';']",0
JobControlCompiler.java,"['jobStoreMap', '.', 'put', '(', 'job', ',', 'new', 'Pair', '(', 'storeLocations', ',', 'tmpLocation', ')', ')', ';']",0
JobControlCompiler.java,"['return', 'job', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'JobCreationException', 'jce', ')', '{']",0
JobControlCompiler.java,"['throw', 'jce', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
JobControlCompiler.java,"['int', 'errCode', '=', '2017', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Internal', 'error', 'creating', 'job', 'configuration', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ',', 'e', ')', ';']",0
JobControlCompiler.java,"['private', 'List', '<', 'PhysicalOperator', '>', 'getRoots', '(', 'PhysicalPlan', 'php', ')', '{']",0
JobControlCompiler.java,"['List', '<', 'PhysicalOperator', '>', 'ret', '=', 'new', 'ArrayList', '<', 'PhysicalOperator', '>', '(', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'PhysicalOperator', 'operator', ':', 'php', '.', 'getRoots', '(', ')', ')', '{']",0
JobControlCompiler.java,"['ret', '.', 'add', '(', 'operator', ')', ';']",0
JobControlCompiler.java,"['return', 'ret', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigWritableComparator', 'extends', 'WritableComparator', '{']",0
JobControlCompiler.java,"['protected', 'PigWritableComparator', '(', 'Class', 'c', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'c', ')', ';']",0
JobControlCompiler.java,"['public', 'int', 'compare', '(', 'byte', '[', ']', 'b1', ',', 'int', 's1', ',', 'int', 'l1', ',', 'byte', '[', ']', 'b2', ',', 'int', 's2', ',', 'int', 'l2', ')', '{']",0
JobControlCompiler.java,"['return', 'WritableComparator', '.', 'compareBytes', '(', 'b1', ',', 's1', ',', 'l1', ',', 'b2', ',', 's2', ',', 'l2', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigIntWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigIntWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableIntWritable', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigLongWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigLongWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableLongWritable', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigFloatWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigFloatWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableFloatWritable', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigDoubleWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigDoubleWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableDoubleWritable', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigCharArrayWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigCharArrayWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableText', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigDBAWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigDBAWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'NullableBytesWritable', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigTupleWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigTupleWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'TupleFactory', '.', 'getInstance', '(', ')', '.', 'tupleClass', '(', ')', ')', ';']",0
JobControlCompiler.java,"['public', 'static', 'class', 'PigBagWritableComparator', 'extends', 'PigWritableComparator', '{']",0
JobControlCompiler.java,"['public', 'PigBagWritableComparator', '(', ')', '{']",0
JobControlCompiler.java,"['super', '(', 'BagFactory', '.', 'getInstance', '(', ')', '.', 'newDefaultBag', '(', ')', '.', 'getClass', '(', ')', ')', ';']",0
JobControlCompiler.java,"['private', 'void', 'selectComparator', '(']",0
JobControlCompiler.java,"['MapReduceOper', 'mro', ',']",0
JobControlCompiler.java,"['byte', 'keyType', ',']",0
JobControlCompiler.java,"['JobConf', 'jobConf', ')', 'throws', 'JobCreationException', '{']",0
JobControlCompiler.java,"['/', '/', 'If', 'this', 'operator', 'is', 'involved', 'in', 'an', 'order', 'by', ',', 'use', 'the', 'pig', 'specific', 'raw']",0
JobControlCompiler.java,"['/', '/', 'comparators', '.', 'If', 'it', 'has', 'a', 'cogroup', ',', 'we', 'need', 'to', 'set', 'the', 'comparator', 'class']",0
JobControlCompiler.java,"['/', '/', 'to', 'the', 'raw', 'comparator', 'and', 'the', 'grouping', 'comparator', 'class', 'to', 'pig', 'specific']",0
JobControlCompiler.java,"['/', '/', 'raw', 'comparators', '(', 'which', 'skip', 'the', 'index', ')', '.', 'Otherwise', 'use', 'the', 'hadoop', 'provided']",0
JobControlCompiler.java,"['/', '/', 'raw', 'comparator', '.']",0
JobControlCompiler.java,"['/', '/', 'An', 'operator', 'has', 'an', 'order', 'by', 'if', 'global', 'sort', 'is', 'set', 'or', 'if', 'it', ""'"", 's', 'successor', 'has']",0
JobControlCompiler.java,"['/', '/', 'global', 'sort', 'set', '(', 'because', 'in', 'that', 'case', 'it', ""'"", 's', 'the', 'sampling', 'job', ')', 'or', 'if']",0
JobControlCompiler.java,"['/', '/', 'it', ""'"", 's', 'a', 'limit', 'after', 'a', 'sort', '.']",0
JobControlCompiler.java,"['boolean', 'hasOrderBy', '=', 'false', ';']",0
JobControlCompiler.java,"['if', '(', 'mro', '.', 'isGlobalSort', '(', ')', '|', '|', 'mro', '.', 'isLimitAfterSort', '(', ')', ')', '{']",0
JobControlCompiler.java,"['hasOrderBy', '=', 'true', ';']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['List', '<', 'MapReduceOper', '>', 'succs', '=', 'plan', '.', 'getSuccessors', '(', 'mro', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'succs', '!', '=', 'null', ')', '{']",0
JobControlCompiler.java,"['MapReduceOper', 'succ', '=', 'succs', '.', 'get', '(', '0', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'succ', '.', 'isGlobalSort', '(', ')', ')', 'hasOrderBy', '=', 'true', ';']",0
JobControlCompiler.java,"['if', '(', 'hasOrderBy', ')', '{']",0
JobControlCompiler.java,"['switch', '(', 'keyType', ')', '{']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigIntRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'LONG', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigLongRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigFloatRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigDoubleRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigTextRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'BYTEARRAY', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigBytesRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'MAP', ':']",0
JobControlCompiler.java,"['int', 'errCode', '=', '1068', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Using', 'Map', 'as', 'key', 'not', 'supported', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigTupleRawComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'BAG', ':']",0
JobControlCompiler.java,"['errCode', '=', '1068', ';']",0
JobControlCompiler.java,"['msg', '=', '""', 'Using', 'Bag', 'as', 'key', 'not', 'supported', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
JobControlCompiler.java,"['switch', '(', 'keyType', ')', '{']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'INTEGER', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigIntWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'LONG', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigLongWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'FLOAT', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigFloatWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'DOUBLE', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigDoubleWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'CHARARRAY', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigCharArrayWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'BYTEARRAY', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigDBAWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'MAP', ':']",0
JobControlCompiler.java,"['int', 'errCode', '=', '1068', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Using', 'Map', 'as', 'key', 'not', 'supported', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'TUPLE', ':']",0
JobControlCompiler.java,"['jobConf', '.', 'setOutputKeyComparatorClass', '(', 'PigTupleWritableComparator', '.', 'class', ')', ';']",0
JobControlCompiler.java,"['case', 'DataType', '.', 'BAG', ':']",0
JobControlCompiler.java,"['errCode', '=', '1068', ';']",0
JobControlCompiler.java,"['msg', '=', '""', 'Using', 'Bag', 'as', 'key', 'not', 'supported', '.', '""', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'INPUT', ')', ';']",0
JobControlCompiler.java,"['errCode', '=', '2036', ';']",0
JobControlCompiler.java,"['msg', '=', '""', 'Unhandled', 'key', 'type', '""', '+', 'DataType', '.', 'findTypeName', '(', 'keyType', ')', ';']",0
JobControlCompiler.java,"['throw', 'new', 'JobCreationException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'BUG', ')', ';']",0
JobControlCompiler.java,"['private', 'static', 'void', 'setupDistributedCache', '(', 'PigContext', 'pigContext', ',']",0
JobControlCompiler.java,"['Configuration', 'conf', ',']",0
JobControlCompiler.java,"['Properties', 'properties', ',', 'String', 'key', ',']",0
JobControlCompiler.java,"['boolean', 'shipToCluster', ')']",0
JobControlCompiler.java,"['throws', 'IOException', '{']",0
JobControlCompiler.java,"['/', '/', 'Turn', 'on', 'the', 'symlink', 'feature']",0
JobControlCompiler.java,"['DistributedCache', '.', 'createSymlink', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Set', 'up', 'the', 'DistributedCache', 'for', 'this', 'job']",0
JobControlCompiler.java,"['String', 'fileNames', '=', 'properties', '.', 'getProperty', '(', 'key', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'fileNames', '!', '=', 'null', ')', '{']",0
JobControlCompiler.java,"['String', '[', ']', 'paths', '=', 'fileNames', '.', 'split', '(', '""', ',', '""', ')', ';']",0
JobControlCompiler.java,"['for', '(', 'String', 'path', ':', 'paths', ')', '{']",0
JobControlCompiler.java,"['path', '=', 'path', '.', 'trim', '(', ')', ';']",0
JobControlCompiler.java,"['if', '(', 'path', '.', 'length', '(', ')', '!', '=', '0', ')', '{']",0
JobControlCompiler.java,"['Path', 'src', '=', 'new', 'Path', '(', 'path', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Ensure', 'that', ""'"", 'src', ""'"", 'is', 'a', 'valid', 'URI']",0
JobControlCompiler.java,"['URI', 'srcURI', '=', 'null', ';']",0
JobControlCompiler.java,"['srcURI', '=', 'new', 'URI', '(', 'src', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'URISyntaxException', 'ue', ')', '{']",0
JobControlCompiler.java,"['int', 'errCode', '=', '6003', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Invalid', 'cache', 'specification', '.', '""', '+']",0
JobControlCompiler.java,"['""', 'File', 'doesn', ""'"", 't', 'exist', ':', '""', '+', 'src', ';']",0
JobControlCompiler.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'PigException', '.', 'USER_ENVIRONMENT', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Ship', 'it', 'to', 'the', 'cluster', 'if', 'necessary', 'and', 'add', 'to', 'the']",0
JobControlCompiler.java,"['/', '/', 'DistributedCache']",0
JobControlCompiler.java,"['if', '(', 'shipToCluster', ')', '{']",0
JobControlCompiler.java,"['Path', 'dst', '=']",0
JobControlCompiler.java,"['new', 'Path', '(', 'FileLocalizer', '.', 'getTemporaryPath', '(', 'null', ',', 'pigContext', ')', '.', 'toString', '(', ')', ')', ';']",0
JobControlCompiler.java,"['FileSystem', 'fs', '=', 'dst', '.', 'getFileSystem', '(', 'conf', ')', ';']",0
JobControlCompiler.java,"['fs', '.', 'copyFromLocalFile', '(', 'src', ',', 'dst', ')', ';']",0
JobControlCompiler.java,"['/', '/', 'Construct', 'the', 'dst', '#', 'srcName', 'uri', 'for', 'DistributedCache']",0
JobControlCompiler.java,"['URI', 'dstURI', '=', 'null', ';']",0
JobControlCompiler.java,"['dstURI', '=', 'new', 'URI', '(', 'dst', '.', 'toString', '(', ')', '+', '""', '#', '""', '+', 'src', '.', 'getName', '(', ')', ')', ';']",0
JobControlCompiler.java,"['}', 'catch', '(', 'URISyntaxException', 'ue', ')', '{']",0
JobControlCompiler.java,"['byte', 'errSrc', '=', 'pigContext', '.', 'getErrorSource', '(', ')', ';']",0
JobControlCompiler.java,"['int', 'errCode', '=', '0', ';']",0
JobControlCompiler.java,"['switch', '(', 'errSrc', ')', '{']",0
JobControlCompiler.java,"['case', 'PigException', '.', 'REMOTE_ENVIRONMENT', ':']",0
JobControlCompiler.java,"['errCode', '=', '6004', ';']",0
JobControlCompiler.java,"['case', 'PigException', '.', 'USER_ENVIRONMENT', ':']",0
JobControlCompiler.java,"['errCode', '=', '4004', ';']",0
JobControlCompiler.java,"['errCode', '=', '2037', ';']",0
JobControlCompiler.java,"['String', 'msg', '=', '""', 'Invalid', 'ship', 'specification', '.', '""', '+']",0
JobControlCompiler.java,"['""', 'File', 'doesn', ""'"", 't', 'exist', ':', '""', '+', 'dst', ';']",0
JobControlCompiler.java,"['throw', 'new', 'ExecException', '(', 'msg', ',', 'errCode', ',', 'errSrc', ')', ';']",0
JobControlCompiler.java,"['DistributedCache', '.', 'addCacheFile', '(', 'dstURI', ',', 'conf', ')', ';']",0
JobControlCompiler.java,"['}', 'else', '{']",0
JobControlCompiler.java,"['DistributedCache', '.', 'addCacheFile', '(', 'srcURI', ',', 'conf', ')', ';']",0
LORegexp.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LORegexp.java,"['import', 'java', '.', 'io', '.', 'IOException', ';']",0
LORegexp.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LORegexp.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LORegexp.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LORegexp.java,"['public', 'class', 'LORegexp', 'extends', 'BinaryExpressionOperator', '{']",0
LORegexp.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LORegexp.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LORegexp', '.', 'class', ')', ';']",0
LORegexp.java,"['/', '*', '*']",0
LORegexp.java,"['/', '*', '*']",0
LORegexp.java,"['public', 'LORegexp', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'key', ')', '{']",0
LORegexp.java,"['super', '(', 'plan', ',', 'key', ')', ';']",0
LORegexp.java,"['public', 'ExpressionOperator', 'getOperand', '(', ')', '{']",0
LORegexp.java,"['return', 'getLhsOperand', '(', ')', ';']",0
LORegexp.java,"['public', 'String', 'getRegexp', '(', ')', '{']",0
LORegexp.java,"['ExpressionOperator', 'op', '=', 'getRhsOperand', '(', ')', ';']",0
LORegexp.java,"['if', '(', '!', '(', 'op', 'instanceof', 'LOConst', ')', ')', '{']",0
LORegexp.java,"['throw', 'new', 'RuntimeException', '(']",0
LORegexp.java,"['""', 'Regular', 'expression', 'patterns', 'must', 'be', 'a', 'constant', '.', '""', ')', ';']",0
LORegexp.java,"['Object', 'o', '=', '(', '(', 'LOConst', ')', 'op', ')', '.', 'getValue', '(', ')', ';']",0
LORegexp.java,"['/', '/', 'better', 'be', 'a', 'string']",0
LORegexp.java,"['if', '(', '!', '(', 'o', 'instanceof', 'String', ')', ')', '{']",0
LORegexp.java,"['throw', 'new', 'RuntimeException', '(']",0
LORegexp.java,"['""', 'Regular', 'expression', 'patterns', 'must', 'be', 'a', 'string', '.', '""', ')', ';']",0
LORegexp.java,"['return', '(', 'String', ')', 'o', ';']",0
LORegexp.java,"['public', 'String', 'name', '(', ')', '{']",0
LORegexp.java,"['return', '""', 'Regexp', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LORegexp.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
LORegexp.java,"['return', 'true', ';']",1
LORegexp.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LORegexp.java,"['return', 'mSchema', ';']",0
LORegexp.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LORegexp.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LORegexp.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LORegexp.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LORegexp.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LORegexp.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LORegexp.java,"['return', 'mFieldSchema', ';']",0
LORegexp.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LORegexp.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LODivide.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LODivide.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LODivide.java,"['public', 'class', 'LODivide', 'extends', 'BinaryExpressionOperator', '{']",0
LODivide.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LODivide.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LODivide', '.', 'class', ')', ';']",0
LODivide.java,"['/', '*', '*']",1
LODivide.java,"['public', 'LODivide', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LODivide.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LODivide.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LODivide.java,"['return', 'mSchema', ';']",0
LODivide.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LODivide.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LODivide.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'mergeType', '(', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ',', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ')', ';']",0
LODivide.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LODivide.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LODivide.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LODivide.java,"['return', 'mFieldSchema', ';']",0
LODivide.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LODivide.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LODivide.java,"['public', 'String', 'name', '(', ')', '{']",0
LODivide.java,"['return', '""', 'Divide', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
TestGrunt.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'test', ';']",0
TestGrunt.java,"['import', 'org', '.', 'junit', '.', 'Test', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'TestCase', ';']",0
TestGrunt.java,"['import', 'junit', '.', 'framework', '.', 'AssertionFailedError', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'ExecType', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigException', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'PigServer', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'PigContext', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'grunt', '.', 'Grunt', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'tools', '.', 'pigscript', '.', 'parser', '.', 'ParseException', ';']",0
TestGrunt.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'LogUtils', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'ByteArrayInputStream', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'InputStreamReader', ';']",0
TestGrunt.java,"['import', 'java', '.', 'io', '.', 'BufferedReader', ';']",0
TestGrunt.java,"['public', 'class', 'TestGrunt', 'extends', 'TestCase', '{']",0
TestGrunt.java,"['MiniCluster', 'cluster', '=', 'MiniCluster', '.', 'buildCluster', '(', ')', ';']",0
TestGrunt.java,"['private', 'String', 'basedir', ';']",0
TestGrunt.java,"['private', 'final', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'getClass', '(', ')', ')', ';']",0
TestGrunt.java,"['public', 'TestGrunt', '(', 'String', 'name', ')', '{']",0
TestGrunt.java,"['super', '(', 'name', ')', ';']",0
TestGrunt.java,"['cluster', '.', 'setProperty', '(', '""', 'opt', '.', 'multiquery', '""', ',', '""', 'true', '""', ')', ';']",0
TestGrunt.java,"['basedir', '=', '""', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '""', ';']",0
TestGrunt.java,"['/', '*', '@', 'Test']",0
TestGrunt.java,"['public', 'void', 'testCopyFromLocal', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'copyFromLocal', '/', 'bin', '/', 'sh', '.', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', '*', '/']",0
TestGrunt.java,"['public', 'void', 'testDefine', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'define', 'myudf', 'org', '.', 'apache', '.', 'pig', '.', 'builtin', '.', 'AVG', '(', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Encountered', '\\', '""', 'define', '\\', '""', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'null', '!', '=', 'context', '.', 'getFuncSpecFromAlias', '(', '""', 'myudf', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagSchemaFail', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", 'as', '(', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'f', ':', 'float', ')', '}', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['PigException', 'pe', '=', 'LogUtils', '.', 'getPigException', '(', 'e', ')', ';']",0
TestGrunt.java,"['String', 'msg', '=', '(', 'pe', '=', '=', 'null', '?', 'e', '.', 'getMessage', '(', ')', ':', 'pe', '.', 'getMessage', '(', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'msg', '.', 'contains', '(', '""', 'Encountered', '\\', '""', '\\', '""', ';', '""', ')', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstant', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchema', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testBagConstantWithSchemaInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'input1', ""'"", ';', 'b', '=', 'foreach', 'a', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'c', ':', 'chararray', ',', 'd', ':', 'double', ')', '}', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'SUM', '(', 'a', '.', 'fast', ')', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingWordWithAsInForeachWithOutBlock2', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'cash', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ')', ';', 'b', '=', 'foreach', 'cash', 'generate', 'fast', '*', '2', '.', '0', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', 'a', '.', 'regenerate', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', 'a', '.', 'regenerate', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', '{', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '}', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testParsingAsGenerateInForeachWithOutBlock', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'b', '=', 'group', 'a', 'by', 'foo', ';', 'c', '=', 'foreach', 'b', 'generate', '{', '(', '1', ',', ""'"", '1', ""'"", ',', '0', '.', '4f', ')', ',', '(', '2', ',', ""'"", '2', ""'"", ',', '0', '.', '45', ')', '}', 'as', 'b', ':', 'bag', '{', 't', '(', 'i', ':', 'int', ',', 'cease', ':', 'chararray', ',', 'degenerate', ':', 'double', ')', '}', ',', 'SUM', '(', 'a', '.', 'fast', ')', 'as', 'fast', ',', 'a', '.', 'regenerate', 'as', 'degenerated', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'run', '-', 'param', 'LIMIT', '=', '5', '-', 'param_file', '""', '+', 'basedir', '+']",0
TestGrunt.java,"['""', '/', 'test_broken', '.', 'ppf', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatment', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', '""', '+']",0
TestGrunt.java,"['""', 'exec', '-', 'param', 'LIMIT', '=', '5', '-', 'param', 'FUNCTION', '=', 'COUNT', '""', '+']",0
TestGrunt.java,"['""', '-', 'param', 'FILE', '=', 'foo', '""', '+', 'basedir', '+', '""', '/', 'testsub', '.', 'pig', ';', 'explain', 'bar', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testRunStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'run', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExecStatmentNested', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'exec', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_exec', '.', 'pig', ';', 'explain', 'bar', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'alias', 'bar', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainEmpty', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'run', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', 'explain', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainScript', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainBrief', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'brief', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainDot', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'dot', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testExplainOut', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'a', '=', 'load', ""'"", 'foo', ""'"", 'as', '(', 'foo', ',', 'fast', ',', 'regenerate', ')', ';', 'explain', '-', 'out', '/', 'tmp', '-', 'script', '""']",0
TestGrunt.java,"['+', 'basedir', '+', '""', '/', 'testsubnested_run', '.', 'pig', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testPartialExecution', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=', '""', 'rmf', 'bar', ';', 'rmf', 'baz', ';', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', 'exec', ';', 'a', '=', 'load', ""'"", 'bar', ""'"", ';', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testFileCmds', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cp', 'bar', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'bar', ';', 'rm', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'baz', ';', 'rm', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'mv', 'baz', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'b', '=', 'load', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'b', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', 'bar', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testCD', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'mkdir', '/', 'tmp', ';', '""']",0
TestGrunt.java,"['+', '""', 'mkdir', '/', 'tmp', '/', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', '/', 'tmp', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'bar', ';', 'rmf', 'foo', '/', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'copyFromLocal', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'a', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cd', '/', ';', '""']",0
TestGrunt.java,"['+', '""', 'rm', '/', 'tmp', '/', 'bar', ';', 'rm', '/', 'tmp', '/', 'foo', '/', 'baz', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testDump', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bla', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'e', '=', 'group', 'a', 'by', '$', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'COUNT', '(', '$', '1', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'f', 'into', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'f1', '=', 'load', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'g', '=', 'order', 'f1', 'by', '$', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'dump', 'g', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testIllustrate', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bla', ';', '""']",0
TestGrunt.java,"['+', '""', 'a', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'e', '=', 'group', 'a', 'by', '$', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'f', '=', 'foreach', 'e', 'generate', 'group', ',', 'COUNT', '(', '$', '1', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'f', 'into', ""'"", 'bla', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'f1', '=', 'load', ""'"", 'bla', ""'"", 'as', '(', 'f', ':', 'chararray', ')', ';', '""']",0
TestGrunt.java,"['+', '""', 'g', '=', 'order', 'f1', 'by', '$', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'illustrate', 'g', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testKeepGoing', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'foreach', 'A', 'generate', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'C', '=', 'foreach', 'A', 'generate', '0', '/', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'foo', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'C', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'bar', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testKeepGoigFailed', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'foreach', 'A', 'generate', '1', ';', '""']",0
TestGrunt.java,"['+', '""', 'C', '=', 'foreach', 'A', 'generate', '0', '/', '0', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'foo', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'C', 'into', ""'"", 'bar', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'baz', ""'"", ';', '""']",0
TestGrunt.java,"['+', '""', 'cat', 'baz', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'Exception', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'baz', 'does', 'not', 'exist', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testInvalidParam', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'LOCAL', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'run', '-', 'param', '-', 'param', ';', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'ParseException', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getMessage', '(', ')', '.', 'contains', '(', '""', 'Encountered', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
TestGrunt.java,"['public', 'void', 'testStopOnFailure', '(', ')', 'throws', 'Throwable', '{']",0
TestGrunt.java,"['PigServer', 'server', '=', 'new', 'PigServer', '(', 'ExecType', '.', 'MAPREDUCE', ',', 'cluster', '.', 'getProperties', '(', ')', ')', ';']",0
TestGrunt.java,"['PigContext', 'context', '=', 'server', '.', 'getPigContext', '(', ')', ';']",0
TestGrunt.java,"['context', '.', 'getProperties', '(', ')', '.', 'setProperty', '(', '""', 'stop', '.', 'on', '.', 'failure', '""', ',', '""', '""', '+', 'true', ')', ';']",0
TestGrunt.java,"['String', 'strCmd', '=']",0
TestGrunt.java,"['""', 'rmf', 'bar', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'foo', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'rmf', 'baz', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'copyFromLocal', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', 'pre', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'file', ':', 'test', '/', 'org', '/', 'apache', '/', 'pig', '/', 'test', '/', 'data', '/', 'passwd', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'B', '=', 'stream', 'A', 'through', '`', 'false', '`', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'store', 'B', 'into', ""'"", 'bar', ""'"", 'using', 'BinStorage', '(', ')', ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'A', '=', 'load', ""'"", 'bar', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'store', 'A', 'into', ""'"", 'foo', ""'"", ';', '\\', 'n', '""']",0
TestGrunt.java,"['+', '""', 'cp', 'pre', 'done', ';', '\\', 'n', '""', ';']",0
TestGrunt.java,"['ByteArrayInputStream', 'cmd', '=', 'new', 'ByteArrayInputStream', '(', 'strCmd', '.', 'getBytes', '(', ')', ')', ';']",0
TestGrunt.java,"['InputStreamReader', 'reader', '=', 'new', 'InputStreamReader', '(', 'cmd', ')', ';']",0
TestGrunt.java,"['Grunt', 'grunt', '=', 'new', 'Grunt', '(', 'new', 'BufferedReader', '(', 'reader', ')', ',', 'context', ')', ';']",0
TestGrunt.java,"['boolean', 'caught', '=', 'false', ';']",0
TestGrunt.java,"['grunt', '.', 'exec', '(', ')', ';']",0
TestGrunt.java,"['}', 'catch', '(', 'PigException', 'e', ')', '{']",0
TestGrunt.java,"['caught', '=', 'true', ';']",0
TestGrunt.java,"['assertTrue', '(', 'e', '.', 'getErrorCode', '(', ')', '=', '=', '6017', ')', ';']",0
TestGrunt.java,"['assertFalse', '(', 'server', '.', 'existsFile', '(', '""', 'done', '""', ')', ')', ';']",0
TestGrunt.java,"['assertTrue', '(', 'caught', ')', ';']",0
DotMRPrinter.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'plans', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'io', '.', 'PrintStream', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'util', '.', 'LinkedList', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'util', '.', 'Collection', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'util', '.', 'MultiMap', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'util', '.', 'HashSet', ';']",0
DotMRPrinter.java,"['import', 'java', '.', 'util', '.', 'Set', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'DotPlanDumper', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'mapReduceLayer', '.', 'MapReduceOper', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'PhysicalPlan', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'PhysicalOperator', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'backend', '.', 'hadoop', '.', 'executionengine', '.', 'physicalLayer', '.', 'plans', '.', 'DotPOPrinter', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
DotMRPrinter.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanException', ';']",0
DotMRPrinter.java,"['/', '*', '*']",0
DotMRPrinter.java,"['public', 'class', 'DotMRPrinter', 'extends', 'DotPlanDumper', '<', 'MapReduceOper', ',', 'MROperPlan', ',']",0
DotMRPrinter.java,"['DotMRPrinter', '.', 'InnerOperator', ',']",0
DotMRPrinter.java,"['DotMRPrinter', '.', 'InnerPlan', '>', '{']",0
DotMRPrinter.java,"['static', 'int', 'counter', '=', '0', ';']",0
DotMRPrinter.java,"['boolean', 'isVerboseNesting', '=', 'true', ';']",0
DotMRPrinter.java,"['public', 'DotMRPrinter', '(', 'MROperPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotMRPrinter.java,"['this', '(', 'plan', ',', 'ps', ',', 'false', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',', 'new', 'HashSet', '<', 'Operator', '>', '(', ')', ',']",0
DotMRPrinter.java,"['new', 'HashSet', '<', 'Operator', '>', '(', ')', ')', ';']",0
DotMRPrinter.java,"['private', 'DotMRPrinter', '(', 'MROperPlan', 'plan', ',', 'PrintStream', 'ps', ',', 'boolean', 'isSubGraph', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'subgraphs', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'multiInputSubgraphs', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'multiOutputSubgraphs', ')', '{']",0
DotMRPrinter.java,"['super', '(', 'plan', ',', 'ps', ',', 'isSubGraph', ',', 'subgraphs', ',']",0
DotMRPrinter.java,"['multiInputSubgraphs', ',', 'multiOutputSubgraphs', ')', ';']",0
DotMRPrinter.java,"['public', 'void', 'setVerbose', '(', 'boolean', 'verbose', ')', '{']",0
DotMRPrinter.java,"['/', '/', 'leave', 'the', 'parents', 'verbose', 'set', 'to', 'true']",0
DotMRPrinter.java,"['isVerboseNesting', '=', 'verbose', ';']",0
DotMRPrinter.java,"['protected', 'DotPlanDumper', 'makeDumper', '(', 'InnerPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotMRPrinter.java,"['return', 'new', 'InnerPrinter', '(', 'plan', ',', 'ps', ',', 'mSubgraphs', ',', 'mMultiInputSubgraphs', ',']",0
DotMRPrinter.java,"['mMultiOutputSubgraphs', ')', ';']",0
DotMRPrinter.java,"['protected', 'String', 'getName', '(', 'MapReduceOper', 'op', ')', '{']",0
DotMRPrinter.java,"['String', 'name', '=', '""', 'Map', '""', ';']",0
DotMRPrinter.java,"['if', '(', '!', 'op', '.', 'combinePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
DotMRPrinter.java,"['name', '+', '=', '""', '-', 'Combine', '""', ';']",0
DotMRPrinter.java,"['if', '(', '!', 'op', '.', 'reducePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
DotMRPrinter.java,"['name', '+', '=', '""', '-', 'Reduce', '""', ';']",0
DotMRPrinter.java,"['if', '(', 'op', '.', 'getRequestedParallelism', '(', ')', '!', '=', '-', '1', ')', '{']",0
DotMRPrinter.java,"['name', '+', '=', '""', 'Parallelism', ':', '""', '+', 'op', '.', 'getRequestedParallelism', '(', ')', ';']",0
DotMRPrinter.java,"['name', '+', '=', '""', ',', 'Global', 'Sort', ':', '""', '+', 'op', '.', 'isGlobalSort', '(', ')', ';']",0
DotMRPrinter.java,"['return', 'name', ';']",0
DotMRPrinter.java,"['protected', 'Collection', '<', 'InnerPlan', '>', 'getNestedPlans', '(', 'MapReduceOper', 'op', ')', '{']",0
DotMRPrinter.java,"['Collection', '<', 'InnerPlan', '>', 'plans', '=', 'new', 'LinkedList', '<', 'InnerPlan', '>', '(', ')', ';']",0
DotMRPrinter.java,"['plans', '.', 'add', '(', 'new', 'InnerPlan', '(', 'op', '.', 'mapPlan', ',', 'op', '.', 'combinePlan', ',', 'op', '.', 'reducePlan', ')', ')', ';']",0
DotMRPrinter.java,"['return', 'plans', ';']",0
DotMRPrinter.java,"['protected', 'String', '[', ']', 'getAttributes', '(', 'MapReduceOper', 'op', ')', '{']",0
DotMRPrinter.java,"['String', '[', ']', 'attributes', '=', 'new', 'String', '[', '3', ']', ';']",0
DotMRPrinter.java,"['attributes', '[', '0', ']', '=', '""', 'label', '=', '\\', '""', '""', '+', 'getName', '(', 'op', ')', '+', '""', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['attributes', '[', '1', ']', '=', '""', 'style', '=', '\\', '""', 'filled', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['attributes', '[', '2', ']', '=', '""', 'fillcolor', '=', '\\', '""', '#', 'EEEEEE', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['return', 'attributes', ';']",0
DotMRPrinter.java,"['/', '*', '*']",0
DotMRPrinter.java,"['public', 'class', 'InnerOperator', 'extends', 'Operator', '<', 'PlanVisitor', '>', '{']",0
DotMRPrinter.java,"['String', 'name', ';']",0
DotMRPrinter.java,"['PhysicalPlan', 'plan', ';']",0
DotMRPrinter.java,"['int', 'code', ';']",0
DotMRPrinter.java,"['public', 'InnerOperator', '(', 'PhysicalPlan', 'plan', ',', 'String', 'name', ')', '{']",0
DotMRPrinter.java,"['super', '(', 'new', 'OperatorKey', '(', ')', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'name', '=', 'name', ';']",0
DotMRPrinter.java,"['this', '.', 'plan', '=', 'plan', ';']",0
DotMRPrinter.java,"['this', '.', 'code', '=', 'counter', '+', '+', ';']",0
DotMRPrinter.java,"['@', 'Override', 'public', 'void', 'visit', '(', 'PlanVisitor', 'v', ')', '{', '}']",0
DotMRPrinter.java,"['@', 'Override', 'public', 'boolean', 'supportsMultipleInputs', '(', ')', '{', 'return', 'false', ';', '}']",0
DotMRPrinter.java,"['@', 'Override', 'public', 'boolean', 'supportsMultipleOutputs', '(', ')', '{', 'return', 'false', ';', '}']",0
DotMRPrinter.java,"['@', 'Override', 'public', 'String', 'name', '(', ')', '{', 'return', 'name', ';', '}']",0
DotMRPrinter.java,"['public', 'PhysicalPlan', 'getPlan', '(', ')', '{', 'return', 'plan', ';', '}']",0
DotMRPrinter.java,"['@', 'Override', 'public', 'int', 'hashCode', '(', ')', '{', 'return', 'code', ';', '}']",0
DotMRPrinter.java,"['/', '*', '*']",0
DotMRPrinter.java,"['public', 'class', 'InnerPlan', 'extends', 'OperatorPlan', '<', 'InnerOperator', '>', '{']",0
DotMRPrinter.java,"['public', 'InnerPlan', '(', 'PhysicalPlan', 'mapPlan', ',', 'PhysicalPlan', 'combinePlan', ',']",0
DotMRPrinter.java,"['PhysicalPlan', 'reducePlan', ')', '{']",0
DotMRPrinter.java,"['InnerOperator', 'map', '=', 'new', 'InnerOperator', '(', 'mapPlan', ',', '""', 'Map', '""', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'add', '(', 'map', ')', ';']",0
DotMRPrinter.java,"['if', '(', '!', 'combinePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
DotMRPrinter.java,"['InnerOperator', 'combine', '=']",0
DotMRPrinter.java,"['new', 'InnerOperator', '(', 'combinePlan', ',', '""', 'Combine', '""', ')', ';']",0
DotMRPrinter.java,"['InnerOperator', 'reduce', '=']",0
DotMRPrinter.java,"['new', 'InnerOperator', '(', 'reducePlan', ',', '""', 'Reduce', '""', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'add', '(', 'combine', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'connect', '(', 'map', ',', 'combine', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'add', '(', 'reduce', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'connect', '(', 'combine', ',', 'reduce', ')', ';']",0
DotMRPrinter.java,"['else', 'if', '(', '!', 'reducePlan', '.', 'isEmpty', '(', ')', ')', '{']",0
DotMRPrinter.java,"['InnerOperator', 'reduce', '=']",0
DotMRPrinter.java,"['new', 'InnerOperator', '(', 'reducePlan', ',', '""', 'Reduce', '""', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'add', '(', 'reduce', ')', ';']",0
DotMRPrinter.java,"['this', '.', 'connect', '(', 'map', ',', 'reduce', ')', ';']",0
DotMRPrinter.java,"['}', 'catch', '(', 'PlanException', 'e', ')', '{', '}']",0
DotMRPrinter.java,"['/', '*', '*']",0
DotMRPrinter.java,"['private', 'class', 'InnerPrinter', 'extends', 'DotPlanDumper', '<', 'InnerOperator', ',', 'InnerPlan', ',']",0
DotMRPrinter.java,"['PhysicalOperator', ',', 'PhysicalPlan', '>', '{']",0
DotMRPrinter.java,"['public', 'InnerPrinter', '(', 'InnerPlan', 'plan', ',', 'PrintStream', 'ps', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'subgraphs', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'multiInputSubgraphs', ',']",0
DotMRPrinter.java,"['Set', '<', 'Operator', '>', 'multiOutputSubgraphs', ')', '{']",0
DotMRPrinter.java,"['super', '(', 'plan', ',', 'ps', ',', 'true', ',', 'subgraphs', ',', 'multiInputSubgraphs', ',']",0
DotMRPrinter.java,"['multiOutputSubgraphs', ')', ';']",0
DotMRPrinter.java,"['protected', 'String', '[', ']', 'getAttributes', '(', 'InnerOperator', 'op', ')', '{']",0
DotMRPrinter.java,"['String', '[', ']', 'attributes', '=', 'new', 'String', '[', '3', ']', ';']",0
DotMRPrinter.java,"['attributes', '[', '0', ']', '=', '""', 'label', '=', '\\', '""', '""', '+', 'getName', '(', 'op', ')', '+', '""', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['attributes', '[', '1', ']', '=', '""', 'style', '=', '\\', '""', 'filled', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['attributes', '[', '2', ']', '=', '""', 'fillcolor', '=', '\\', '""', 'white', '\\', '""', '""', ';']",0
DotMRPrinter.java,"['return', 'attributes', ';']",0
DotMRPrinter.java,"['protected', 'Collection', '<', 'PhysicalPlan', '>', 'getNestedPlans', '(', 'InnerOperator', 'op', ')', '{']",0
DotMRPrinter.java,"['Collection', '<', 'PhysicalPlan', '>', 'l', '=', 'new', 'LinkedList', '<', 'PhysicalPlan', '>', '(', ')', ';']",0
DotMRPrinter.java,"['l', '.', 'add', '(', 'op', '.', 'getPlan', '(', ')', ')', ';']",0
DotMRPrinter.java,"['return', 'l', ';']",0
DotMRPrinter.java,"['protected', 'DotPOPrinter', 'makeDumper', '(', 'PhysicalPlan', 'plan', ',', 'PrintStream', 'ps', ')', '{']",0
DotMRPrinter.java,"['DotPOPrinter', 'printer', '=', 'new', 'DotPOPrinter', '(', 'plan', ',', 'ps', ',', 'true', ',']",0
DotMRPrinter.java,"['mMultiOutputSubgraphs', ')', ';']",0
DotMRPrinter.java,"['printer', '.', 'setVerbose', '(', 'isVerboseNesting', ')', ';']",0
DotMRPrinter.java,"['return', 'printer', ';']",0
Rule.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'optimizer', ';']",0
Rule.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'Operator', ';']",0
Rule.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorPlan', ';']",0
Rule.java,"['public', 'class', 'Rule', '<', 'O', 'extends', 'Operator', ',', 'P', 'extends', 'OperatorPlan', '<', 'O', '>', '>', '{']",0
Rule.java,"['public', 'enum', 'WalkerAlgo', '{']",0
Rule.java,"['DepthFirstWalker', ',', 'DependencyOrderWalker']",0
Rule.java,"['private', 'RulePlan', 'mRulePlan', ';']",0
Rule.java,"['private', 'Transformer', '<', 'O', ',', 'P', '>', 'mTransformer', ';']",0
Rule.java,"['private', 'WalkerAlgo', 'mWalkerAlgo', ';']",0
Rule.java,"['private', 'String', 'mRuleName', '=', 'null', ';']",0
Rule.java,"['/', '*', '*']",0
Rule.java,"['/', '*', '*']",0
Rule.java,"['public', 'Rule', '(', 'RulePlan', 'plan', ',', 'Transformer', '<', 'O', ',', 'P', '>', 't', ',', 'String', 'ruleName', ')', '{']",0
Rule.java,"['this', '(', 'plan', ',', 't', ',', 'ruleName', ',', 'WalkerAlgo', '.', 'DependencyOrderWalker', ')', ';']",0
Rule.java,"['/', '*', '*']",0
Rule.java,"['public', 'Rule', '(', 'RulePlan', 'plan', ',', 'Transformer', '<', 'O', ',', 'P', '>', 't', ',', 'String', 'ruleName', ',']",0
Rule.java,"['WalkerAlgo', 'al', ')', '{']",0
Rule.java,"['mRulePlan', '=', 'plan', ';']",0
Rule.java,"['mTransformer', '=', 't', ';']",0
Rule.java,"['mRuleName', '=', 'ruleName', ';']",0
Rule.java,"['mWalkerAlgo', '=', 'al', ';']",0
Rule.java,"['public', 'RulePlan', 'getPlan', '(', ')', '{']",0
Rule.java,"['return', 'mRulePlan', ';']",0
Rule.java,"['public', 'Transformer', '<', 'O', ',', 'P', '>', 'getTransformer', '(', ')', '{']",0
Rule.java,"['return', 'mTransformer', ';']",0
Rule.java,"['public', 'String', 'getRuleName', '(', ')', '{']",0
Rule.java,"['return', 'mRuleName', ';']",0
Rule.java,"['public', 'WalkerAlgo', 'getWalkerAlgo', '(', ')', '{']",0
Rule.java,"['return', 'mWalkerAlgo', ';']",0
LONotEqual.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LONotEqual.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LONotEqual.java,"['public', 'class', 'LONotEqual', 'extends', 'BinaryExpressionOperator', '{']",0
LONotEqual.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LONotEqual.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LONotEqual', '.', 'class', ')', ';']",0
LONotEqual.java,"['/', '*', '*']",1
LONotEqual.java,"['public', 'LONotEqual', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LONotEqual.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LONotEqual.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LONotEqual.java,"['return', 'mSchema', ';']",0
LONotEqual.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LONotEqual.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LONotEqual.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'BOOLEAN', ')', ';']",0
LONotEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LONotEqual.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LONotEqual.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LONotEqual.java,"['return', 'mFieldSchema', ';']",0
LONotEqual.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LONotEqual.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LONotEqual.java,"['public', 'String', 'name', '(', ')', '{']",0
LONotEqual.java,"['return', '""', 'NotEqual', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOMapLookup.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOMapLookup.java,"['import', 'java', '.', 'util', '.', 'ArrayList', ';']",0
LOMapLookup.java,"['import', 'java', '.', 'util', '.', 'List', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'parser', '.', 'ParseException', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOMapLookup.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOMapLookup.java,"['public', 'class', 'LOMapLookup', 'extends', 'ExpressionOperator', '{']",0
LOMapLookup.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOMapLookup.java,"['private', 'Object', 'mMapKey', ';']",0
LOMapLookup.java,"['private', 'byte', 'mValueType', ';']",0
LOMapLookup.java,"['private', 'Schema', 'mValueSchema', ';']",0
LOMapLookup.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOMapLookup', '.', 'class', ')', ';']",0
LOMapLookup.java,"['/', '*', '*']",0
LOMapLookup.java,"['/', '*', '*']",0
LOMapLookup.java,"['public', 'LOMapLookup', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'key', ',']",0
LOMapLookup.java,"['Object', 'mapKey', ',', 'byte', 'valueType', ',', 'Schema', 'valueSchema', ')']",0
LOMapLookup.java,"['throws', 'ParseException', '{']",0
LOMapLookup.java,"['super', '(', 'plan', ',', 'key', ')', ';']",0
LOMapLookup.java,"['if', '(', '!', 'DataType', '.', 'isAtomic', '(', 'DataType', '.', 'findType', '(', 'mapKey', ')', ')', ')', '{']",0
LOMapLookup.java,"['throw', 'new', 'ParseException', '(', '""', 'Map', 'key', '""', '+', 'mapKey', '.', 'toString', '(', ')']",0
LOMapLookup.java,"['+', '""', 'is', 'not', 'atomic', '""', ')', ';']",0
LOMapLookup.java,"['mMapKey', '=', 'mapKey', ';']",0
LOMapLookup.java,"['mValueType', '=', 'valueType', ';']",0
LOMapLookup.java,"['mValueSchema', '=', 'valueSchema', ';']",0
LOMapLookup.java,"['mType', '=', 'mValueType', ';']",0
LOMapLookup.java,"['public', 'ExpressionOperator', 'getMap', '(', ')', '{']",0
LOMapLookup.java,"['List', '<', 'LogicalOperator', '>', 'preds', '=', 'getPlan', '(', ')', '.', 'getPredecessors', '(', 'this', ')', ';']",0
LOMapLookup.java,"['if', '(', 'preds', '=', '=', 'null', ')']",0
LOMapLookup.java,"['return', 'null', ';']",0
LOMapLookup.java,"['return', '(', 'ExpressionOperator', ')', 'preds', '.', 'get', '(', '0', ')', ';']",0
LOMapLookup.java,"['public', 'Object', 'getLookUpKey', '(', ')', '{']",0
LOMapLookup.java,"['return', 'mMapKey', ';']",0
LOMapLookup.java,"['public', 'byte', 'getValueType', '(', ')', '{']",0
LOMapLookup.java,"['return', 'mValueType', ';']",0
LOMapLookup.java,"['public', 'String', 'name', '(', ')', '{']",0
LOMapLookup.java,"['return', '""', 'MapLookup', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
LOMapLookup.java,"['public', 'boolean', 'supportsMultipleInputs', '(', ')', '{']",0
LOMapLookup.java,"['return', 'false', ';']",1
LOMapLookup.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOMapLookup.java,"['return', 'mSchema', ';']",0
LOMapLookup.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOMapLookup.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOMapLookup.java,"['if', '(', 'DataType', '.', 'isSchemaType', '(', 'mValueType', ')', ')', '{']",0
LOMapLookup.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'mValueSchema', ',', 'mValueType', ')', ';']",0
LOMapLookup.java,"['}', 'else', '{']",1
LOMapLookup.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'mValueType', ')', ';']",0
LOMapLookup.java,"['ExpressionOperator', 'map', '=', 'getMap', '(', ')', ';']",0
LOMapLookup.java,"['mFieldSchema', '.', 'setParent', '(', 'map', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'map', ')', ';']",0
LOMapLookup.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOMapLookup.java,"['return', 'mFieldSchema', ';']",0
LOMapLookup.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOMapLookup.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOMapLookup.java,"['/', '*', '*']",0
LOMapLookup.java,"['protected', 'Object', 'clone', '(', ')', 'throws', 'CloneNotSupportedException', '{']",0
LOMapLookup.java,"['LOMapLookup', 'clone', '=', '(', 'LOMapLookup', ')', 'super', '.', 'clone', '(', ')', ';']",0
LOMapLookup.java,"['/', '/', 'deep', 'copy', 'project', 'specific', 'attributes']",0
LOMapLookup.java,"['if', '(', 'mValueSchema', '!', '=', 'null', ')', '{']",0
LOMapLookup.java,"['clone', '.', 'mValueSchema', '=', 'mValueSchema', '.', 'clone', '(', ')', ';']",0
LOMapLookup.java,"['return', 'clone', ';']",0
LOSubtract.java,"['package', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'OperatorKey', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'PlanVisitor', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'plan', '.', 'VisitorException', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'impl', '.', 'logicalLayer', '.', 'schema', '.', 'Schema', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'pig', '.', 'data', '.', 'DataType', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'Log', ';']",0
LOSubtract.java,"['import', 'org', '.', 'apache', '.', 'commons', '.', 'logging', '.', 'LogFactory', ';']",0
LOSubtract.java,"['public', 'class', 'LOSubtract', 'extends', 'BinaryExpressionOperator', '{']",0
LOSubtract.java,"['private', 'static', 'final', 'long', 'serialVersionUID', '=', '2L', ';']",0
LOSubtract.java,"['private', 'static', 'Log', 'log', '=', 'LogFactory', '.', 'getLog', '(', 'LOSubtract', '.', 'class', ')', ';']",0
LOSubtract.java,"['/', '*', '*']",1
LOSubtract.java,"['public', 'LOSubtract', '(', 'LogicalPlan', 'plan', ',', 'OperatorKey', 'k', ')', '{']",0
LOSubtract.java,"['super', '(', 'plan', ',', 'k', ')', ';']",0
LOSubtract.java,"['public', 'Schema', 'getSchema', '(', ')', '{']",0
LOSubtract.java,"['return', 'mSchema', ';']",0
LOSubtract.java,"['public', 'Schema', '.', 'FieldSchema', 'getFieldSchema', '(', ')', 'throws', 'FrontendException', '{']",0
LOSubtract.java,"['if', '(', '!', 'mIsFieldSchemaComputed', ')', '{']",0
LOSubtract.java,"['mFieldSchema', '=', 'new', 'Schema', '.', 'FieldSchema', '(', 'null', ',', 'DataType', '.', 'mergeType', '(', 'getLhsOperand', '(', ')', '.', 'getType', '(', ')', ',', 'getRhsOperand', '(', ')', '.', 'getType', '(', ')', ')', ')', ';']",0
LOSubtract.java,"['mFieldSchema', '.', 'setParent', '(', 'getLhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getLhsOperand', '(', ')', ')', ';']",0
LOSubtract.java,"['mFieldSchema', '.', 'setParent', '(', 'getRhsOperand', '(', ')', '.', 'getFieldSchema', '(', ')', '.', 'canonicalName', ',', 'getRhsOperand', '(', ')', ')', ';']",0
LOSubtract.java,"['mIsFieldSchemaComputed', '=', 'true', ';']",0
LOSubtract.java,"['return', 'mFieldSchema', ';']",0
LOSubtract.java,"['public', 'void', 'visit', '(', 'LOVisitor', 'v', ')', 'throws', 'VisitorException', '{']",0
LOSubtract.java,"['v', '.', 'visit', '(', 'this', ')', ';']",0
LOSubtract.java,"['public', 'String', 'name', '(', ')', '{']",0
LOSubtract.java,"['return', '""', 'Subtract', '""', '+', 'mKey', '.', 'scope', '+', '""', '-', '""', '+', 'mKey', '.', 'id', ';']",0
